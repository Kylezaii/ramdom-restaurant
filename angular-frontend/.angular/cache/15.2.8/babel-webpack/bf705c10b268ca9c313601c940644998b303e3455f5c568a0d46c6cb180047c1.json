{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MetricsService = void 0;\nconst tslib_1 = require(\"tslib\");\nconst i0 = tslib_1.__importStar(require(\"@angular/core\"));\nconst i1 = tslib_1.__importStar(require(\"@angular/common/http\"));\nconst i2 = tslib_1.__importStar(require(\"app/core/config/application-config.service\"));\nclass MetricsService {\n  constructor(http, applicationConfigService) {\n    this.http = http;\n    this.applicationConfigService = applicationConfigService;\n  }\n  getJvmMemoryCommitted() {\n    // \"jvm.memory.committed\"\n    return this.http.get(this.applicationConfigService.getEndpointFor('management/metrics/jvm.memory.committed'));\n  }\n  getJvmMemoryMax() {\n    // \"jvm.memory.max\"\n    return this.http.get(this.applicationConfigService.getEndpointFor('management/metrics/jvm.memory.max'));\n  }\n  getJvmMemoryUsed() {\n    // \"jvm.memory.used\"\n    return this.http.get(this.applicationConfigService.getEndpointFor('management/metrics/jvm.memory.used'));\n  }\n  // processMetrics\n  getSystemCpuUsage() {\n    // \"system.cpu.usage\"\n    return this.http.get(this.applicationConfigService.getEndpointFor('management/metrics/system.cpu.usage'));\n  }\n  getProcessCpuUsage() {\n    // \"process.cpu.usage\"\n    return this.http.get(this.applicationConfigService.getEndpointFor('management/metrics/process.cpu.usage'));\n  }\n  getProcessUpTime() {\n    // \"process.uptime\"\n    return this.http.get(this.applicationConfigService.getEndpointFor('management/metrics/process.uptime'));\n  }\n  getProcessStartTime() {\n    // \"process.start.time\"\n    return this.http.get(this.applicationConfigService.getEndpointFor('management/metrics/process.start.time'));\n  }\n  getSystemCpuCount() {\n    // \"system.cpu.count\"\n    return this.http.get(this.applicationConfigService.getEndpointFor('management/metrics/system.cpu.count'));\n  }\n  threadDump() {\n    return this.http.get(this.applicationConfigService.getEndpointFor('management/threaddump'));\n  }\n  getMetrics() {\n    return this.http.get(this.applicationConfigService.getEndpointFor('management/metrics'));\n  }\n}\nexports.MetricsService = MetricsService;\nMetricsService.ɵfac = function MetricsService_Factory(t) {\n  return new (t || MetricsService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.ApplicationConfigService));\n};\nMetricsService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: MetricsService,\n  factory: MetricsService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";;;;;;;;;;AAOA,MACaA,cAAc;EACzBC,YAAoBC,IAAgB,EAAUC,wBAAkD;IAA5E,SAAI,GAAJD,IAAI;IAAsB,6BAAwB,GAAxBC,wBAAwB;EAA6B;EAEnGC,qBAAqB;IACrB;IACA,OAAO,IAAI,CAACF,IAAI,CAACG,GAAG,CAAkB,IAAI,CAACF,wBAAwB,CAACG,cAAc,CAAC,yCAAyC,CAAC,CAAC;EAC9H;EAEAC,eAAe;IACd;IACD,OAAO,IAAI,CAACL,IAAI,CAACG,GAAG,CAAkB,IAAI,CAACF,wBAAwB,CAACG,cAAc,CAAC,mCAAmC,CAAC,CAAC;EACvH;EAEAE,gBAAgB;IAChB;IACA,OAAO,IAAI,CAACN,IAAI,CAACG,GAAG,CAAkB,IAAI,CAACF,wBAAwB,CAACG,cAAc,CAAC,oCAAoC,CAAC,CAAC;EACzH;EAEA;EACAG,iBAAiB;IACjB;IACA,OAAO,IAAI,CAACP,IAAI,CAACG,GAAG,CAAkB,IAAI,CAACF,wBAAwB,CAACG,cAAc,CAAC,qCAAqC,CAAC,CAAC;EAC1H;EAEAI,kBAAkB;IAClB;IACA,OAAO,IAAI,CAACR,IAAI,CAACG,GAAG,CAAkB,IAAI,CAACF,wBAAwB,CAACG,cAAc,CAAC,sCAAsC,CAAC,CAAC;EAC3H;EAEAK,gBAAgB;IAChB;IACA,OAAO,IAAI,CAACT,IAAI,CAACG,GAAG,CAAkB,IAAI,CAACF,wBAAwB,CAACG,cAAc,CAAC,mCAAmC,CAAC,CAAC;EACxH;EAEAM,mBAAmB;IACnB;IACA,OAAO,IAAI,CAACV,IAAI,CAACG,GAAG,CAAkB,IAAI,CAACF,wBAAwB,CAACG,cAAc,CAAC,uCAAuC,CAAC,CAAC;EAC5H;EACAO,iBAAiB;IACjB;IACA,OAAO,IAAI,CAACX,IAAI,CAACG,GAAG,CAAkB,IAAI,CAACF,wBAAwB,CAACG,cAAc,CAAC,qCAAqC,CAAC,CAAC;EAC1H;EAEAQ,UAAU;IACV,OAAO,IAAI,CAACZ,IAAI,CAACG,GAAG,CAAa,IAAI,CAACF,wBAAwB,CAACG,cAAc,CAAC,uBAAuB,CAAC,CAAC;EACvG;EAEAS,UAAU;IACV,OAAO,IAAI,CAACb,IAAI,CAACG,GAAG,CAAa,IAAI,CAACF,wBAAwB,CAACG,cAAc,CAAC,oBAAoB,CAAC,CAAC;EACpG;;AAlDHU;;mBACahB,cAAc;AAAA;;SAAdA,cAAc;EAAAiB,SAAdjB,cAAc;EAAAkB,YADH;AAAM","names":["MetricsService","constructor","http","applicationConfigService","getJvmMemoryCommitted","get","getEndpointFor","getJvmMemoryMax","getJvmMemoryUsed","getSystemCpuUsage","getProcessCpuUsage","getProcessUpTime","getProcessStartTime","getSystemCpuCount","threadDump","getMetrics","exports","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\D1347074\\Desktop\\projects 2\\nspayiiapp\\src\\main\\webapp\\app\\admin\\metrics\\metrics.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\n\r\nimport { ApplicationConfigService } from 'app/core/config/application-config.service';\r\nimport {EnvironmentInfo, ThreadDump} from './metrics.model';\r\n\r\n@Injectable({providedIn:'root'})\r\nexport class MetricsService {\r\n  constructor(private http: HttpClient, private applicationConfigService: ApplicationConfigService) {}\r\n\r\n  getJvmMemoryCommitted(): Observable<EnvironmentInfo> {\r\n  // \"jvm.memory.committed\"\r\n  return this.http.get<EnvironmentInfo>(this.applicationConfigService.getEndpointFor('management/metrics/jvm.memory.committed'));\r\n  }\r\n\r\n  getJvmMemoryMax(): Observable<EnvironmentInfo> {\r\n   // \"jvm.memory.max\"\r\n  return this.http.get<EnvironmentInfo>(this.applicationConfigService.getEndpointFor('management/metrics/jvm.memory.max'));\r\n   }\r\n\r\n   getJvmMemoryUsed(): Observable<EnvironmentInfo> {\r\n   // \"jvm.memory.used\"\r\n   return this.http.get<EnvironmentInfo>(this.applicationConfigService.getEndpointFor('management/metrics/jvm.memory.used'));\r\n   }\r\n\r\n   // processMetrics\r\n   getSystemCpuUsage(): Observable<EnvironmentInfo> {\r\n   // \"system.cpu.usage\"\r\n   return this.http.get<EnvironmentInfo>(this.applicationConfigService.getEndpointFor('management/metrics/system.cpu.usage'));\r\n   }\r\n\r\n   getProcessCpuUsage(): Observable<EnvironmentInfo> {\r\n   // \"process.cpu.usage\"\r\n   return this.http.get<EnvironmentInfo>(this.applicationConfigService.getEndpointFor('management/metrics/process.cpu.usage'));\r\n   }\r\n\r\n   getProcessUpTime(): Observable<EnvironmentInfo> {\r\n   // \"process.uptime\"\r\n   return this.http.get<EnvironmentInfo>(this.applicationConfigService.getEndpointFor('management/metrics/process.uptime'));\r\n   }\r\n\r\n   getProcessStartTime(): Observable<EnvironmentInfo> {\r\n   // \"process.start.time\"\r\n   return this.http.get<EnvironmentInfo>(this.applicationConfigService.getEndpointFor('management/metrics/process.start.time'));\r\n   }\r\n   getSystemCpuCount(): Observable<EnvironmentInfo> {\r\n   // \"system.cpu.count\"\r\n   return this.http.get<EnvironmentInfo>(this.applicationConfigService.getEndpointFor('management/metrics/system.cpu.count'));\r\n   }\r\n\r\n   threadDump(): Observable<ThreadDump> {\r\n   return this.http.get<ThreadDump>(this.applicationConfigService.getEndpointFor('management/threaddump'));\r\n   }\r\n\r\n   getMetrics(): Observable<any> {\r\n   return this.http.get<ThreadDump>(this.applicationConfigService.getEndpointFor('management/metrics'));\r\n   }\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}