{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.FileUploadService = void 0;\nconst tslib_1 = require(\"tslib\");\nconst core_1 = require(\"@angular/core\");\nconst rxjs_1 = require(\"rxjs\");\nconst i0 = tslib_1.__importStar(require(\"@angular/core\"));\nconst i1 = tslib_1.__importStar(require(\"app/shared/service/ns2-http.service\"));\nconst i2 = tslib_1.__importStar(require(\"app/core/config/application-config.service\"));\nclass FileUploadService {\n  constructor(ns2Http, applicationConfigService) {\n    this.ns2Http = ns2Http;\n    this.applicationConfigService = applicationConfigService;\n    this.resourceUrl = this.applicationConfigService.getEndpointFor('api/fileupload');\n    this.onDestroyEvent = new core_1.EventEmitter();\n    this.subscription = new rxjs_1.Subscription();\n  }\n  ngOnDestroy() {\n    this.subscription.unsubscribe();\n  }\n  uploadSingle(file, procInstId, module, useCase) {\n    const path = this.resourceUrl + '/upload_single';\n    const formData = new FormData();\n    formData.append('file', file, file.name);\n    formData.append('procInstId', procInstId);\n    formData.append('module', module);\n    formData.append('useCase', useCase);\n    return this.ns2Http.fileUpload(path, formData);\n  }\n  uploadMultiple(files, procInstId, module, useCase) {\n    const path = this.resourceUrl + '/upload_multiple';\n    const formData = new FormData();\n    files.forEach(file => {\n      formData.append('files', file);\n    });\n    formData.append('procInstId', procInstId);\n    formData.append('module', module);\n    formData.append('useCase', useCase);\n    return this.ns2Http.fileUpload(path, formData);\n  }\n  uploadMultiple2(fileMap, procInstId, module, useCase) {\n    const path = this.resourceUrl + '/upload_multiple';\n    const formData = new FormData();\n    fileMap.forEach(x => {\n      formData.append(x.uuid, x.selectedFile);\n    });\n    formData.append('procInstId', procInstId);\n    formData.append('module', module);\n    formData.append('useCase', useCase);\n    return this.ns2Http.fileUpload(path, formData);\n  }\n  saveFileToFileServer(request) {\n    const path = this.resourceUrl + '/save_file';\n    return this.ns2Http.post(path, JSON.stringify(request));\n  }\n  generateProcInst(request) {\n    const path = this.resourceUrl + '/generate_process_inst';\n    return this.ns2Http.post(path, JSON.stringify(request));\n  }\n  uploadTest(request) {\n    const path = this.resourceUrl + '/generate_process_inst';\n    return this.ns2Http.post(path, JSON.stringify(request));\n  }\n  preloadDMSParam(options) {\n    const path = this.resourceUrl + '/preload_dms_param';\n    return this.ns2Http.get(path, options);\n  }\n  cancelUpload(request, options) {\n    const path = this.resourceUrl + '/cancel_upload';\n    return this.ns2Http.post(path, null, options);\n  }\n  downloadTxnId(txnId) {\n    const path = this.resourceUrl + '/retrieve_resource/' + txnId;\n    return this.ns2Http.get(path, {\n      responseType: 'blob'\n    });\n  }\n  downloadZip(txnIds) {\n    const path = this.resourceUrl + '/retrieve_resource_zip';\n    return this.ns2Http.post(path, txnIds, {\n      responseType: 'blob'\n    });\n  }\n  preload(txnIds) {\n    const path = this.resourceUrl + '/preload';\n    return this.ns2Http.post(path, txnIds);\n  }\n}\nexports.FileUploadService = FileUploadService;\nFileUploadService.ɵfac = function FileUploadService_Factory(t) {\n  return new (t || FileUploadService)(i0.ɵɵinject(i1.Ns2HttpService), i0.ɵɵinject(i2.ApplicationConfigService));\n};\nFileUploadService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: FileUploadService,\n  factory: FileUploadService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["FileUploadService","constructor","ns2Http","applicationConfigService","getEndpointFor","core_1","subscription","rxjs_1","ngOnDestroy","unsubscribe","uploadSingle","file","procInstId","module","useCase","path","resourceUrl","formData","FormData","append","name","fileUpload","uploadMultiple","files","forEach","uploadMultiple2","fileMap","x","uuid","selectedFile","saveFileToFileServer","request","post","JSON","stringify","generateProcInst","uploadTest","preloadDMSParam","options","get","cancelUpload","downloadTxnId","txnId","responseType","downloadZip","txnIds","preload","exports","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\D1347074\\Desktop\\projects 2\\nspayiiapp\\src\\main\\webapp\\app\\shared\\service\\file-upload.service.ts"],"sourcesContent":["import {EventEmitter, Injectable, OnDestroy} from '@angular/core';\r\nimport {Observable, Subscription} from 'rxjs';\r\nimport {Ns2HttpService} from 'app/shared/service/ns2-http.service';\r\nimport {ApplicationConfigService} from 'app/core/config/application-config.service';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class FileUploadService implements OnDestroy{\r\n   \r\n    public resourceUrl = this.applicationConfigService.getEndpointFor('api/fileupload');\r\n\r\n    public onDestroyEvent: EventEmitter<any> = new EventEmitter();\r\n\r\n    private subscription: Subscription;\r\n\r\n    constructor(\r\n        private ns2Http: Ns2HttpService,\r\n        private applicationConfigService: ApplicationConfigService,\r\n        ){\r\n       this.subscription = new Subscription();\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this.subscription.unsubscribe();\r\n    }\r\n\r\n    public uploadSingle(file: File, procInstId: string, module: string, useCase: string): Observable<any>{\r\n        const path = this.resourceUrl + '/upload_single';\r\n        const formData = new FormData();\r\n        formData.append('file', file, file.name);\r\n        formData.append('procInstId', procInstId);\r\n        formData.append('module', module);\r\n        formData.append('useCase', useCase);\r\n\r\n        return this.ns2Http.fileUpload(path, formData);\r\n    }\r\n\r\n    uploadMultiple(files: File[], procInstId: string, module: string, useCase: string): Observable<any>{\r\n        const path = this.resourceUrl + '/upload_multiple';\r\n        const formData = new FormData();\r\n        files.forEach((file: File)=>{\r\n            formData.append('files', file);\r\n        })\r\n        formData.append('procInstId', procInstId);\r\n        formData.append('module', module);\r\n        formData.append('useCase', useCase);\r\n\r\n\r\n        return this.ns2Http.fileUpload(path, formData);\r\n    }\r\n\r\n    uploadMultiple2(fileMap: {uuid:string, selectedFile: File}[], procInstId: string, module: string, useCase: string): Observable<any>{\r\n        const path = this.resourceUrl + '/upload_multiple';\r\n        const formData = new FormData();\r\n        fileMap.forEach((x:any) => {\r\n            formData.append(x.uuid, x.selectedFile);\r\n        });\r\n        formData.append('procInstId', procInstId);\r\n        formData.append('module', module);\r\n        formData.append('useCase', useCase);\r\n\r\n\r\n        return this.ns2Http.fileUpload(path, formData);\r\n    }\r\n\r\n    saveFileToFileServer(request: any): Observable<any>{\r\n        const path = this.resourceUrl + '/save_file';\r\n        return this.ns2Http.post(path, JSON.stringify(request));\r\n    }\r\n\r\n    generateProcInst(request: any): Observable<any>{\r\n        const path = this.resourceUrl + '/generate_process_inst';\r\n        return this.ns2Http.post(path, JSON.stringify(request));\r\n    }\r\n\r\n    public uploadTest(request: any): Observable<any>{\r\n        const path = this.resourceUrl + '/generate_process_inst';\r\n        return this.ns2Http.post(path, JSON.stringify(request));\r\n    }\r\n\r\n    public preloadDMSParam(options: any): Observable<any>{\r\n        const path = this.resourceUrl + '/preload_dms_param';\r\n        return this.ns2Http.get(path, options);\r\n    }\r\n\r\n    cancelUpload(request: any, options: any): Observable<any>{\r\n        const path = this.resourceUrl + '/cancel_upload';\r\n        return this.ns2Http.post(path, null, options);\r\n    }\r\n    \r\n    public downloadTxnId(txnId: string): Observable<any>{\r\n        const path = this.resourceUrl + '/retrieve_resource/' + txnId;\r\n        return this.ns2Http.get(path , { responseType: 'blob'});\r\n    }\r\n\r\n    public downloadZip(txnIds: string[]): Observable<any>{\r\n        const path = this.resourceUrl + '/retrieve_resource_zip';\r\n        return this.ns2Http.post(path, txnIds, { responseType: 'blob'});\r\n    }\r\n    \r\n    public preload(txnIds: string[]): Observable<any>{\r\n        const path = this.resourceUrl + '/preload';\r\n        return this.ns2Http.post(path, txnIds);\r\n    }\r\n}"]},"metadata":{},"sourceType":"script","externalDependencies":[]}