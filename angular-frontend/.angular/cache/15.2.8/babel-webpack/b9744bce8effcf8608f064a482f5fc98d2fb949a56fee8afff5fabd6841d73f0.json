{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MetricsSystemComponent = void 0;\nconst tslib_1 = require(\"tslib\");\nconst i0 = tslib_1.__importStar(require(\"@angular/core\"));\nconst i1 = tslib_1.__importStar(require(\"@angular/common\"));\nconst i2 = tslib_1.__importStar(require(\"primeng/progressbar\"));\nfunction MetricsSystemComponent_ng_container_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtext(1, \"\\n   \");\n    i0.ɵɵelementStart(2, \"div\", 1);\n    i0.ɵɵtext(3, \"\\n   \");\n    i0.ɵɵelementStart(4, \"div\", 2);\n    i0.ɵɵtext(5, \"Uptime\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(6, \"\\n   \");\n    i0.ɵɵelementStart(7, \"div\", 3);\n    i0.ɵɵtext(8);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(9, \"\\n   \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(10, \"\\n\\n   \");\n    i0.ɵɵelementStart(11, \"div\", 1);\n    i0.ɵɵtext(12, \"\\n   \");\n    i0.ɵɵelementStart(13, \"div\", 2);\n    i0.ɵɵtext(14, \"Start time\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(15, \"\\n   \");\n    i0.ɵɵelementStart(16, \"div\", 3);\n    i0.ɵɵtext(17);\n    i0.ɵɵpipe(18, \"date\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(19, \"\\n   \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(20, \"\\n\\n   \");\n    i0.ɵɵelementStart(21, \"div\", 1);\n    i0.ɵɵtext(22, \"\\n   \");\n    i0.ɵɵelementStart(23, \"div\", 4);\n    i0.ɵɵtext(24, \"Process CPU usage\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(25, \"\\n   \");\n    i0.ɵɵelementStart(26, \"div\", 5);\n    i0.ɵɵtext(27);\n    i0.ɵɵpipe(28, \"number\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(29, \"\\n   \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(30, \"\\n\\n   \");\n    i0.ɵɵelementStart(31, \"p-progressBar\", 6);\n    i0.ɵɵpipe(32, \"number\");\n    i0.ɵɵtext(33, \"\\n   \");\n    i0.ɵɵelementStart(34, \"span\");\n    i0.ɵɵtext(35);\n    i0.ɵɵpipe(36, \"number\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(37, \"\\n   \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(38, \"\\n\\n  \");\n    i0.ɵɵelementStart(39, \"div\", 1);\n    i0.ɵɵtext(40, \"\\n   \");\n    i0.ɵɵelementStart(41, \"div\", 4);\n    i0.ɵɵtext(42, \"System CPU usage\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(43, \"\\n  \");\n    i0.ɵɵelementStart(44, \"div\", 5);\n    i0.ɵɵtext(45);\n    i0.ɵɵpipe(46, \"number\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(47, \"\\n  \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(48, \"\\n\\n   \");\n    i0.ɵɵelementStart(49, \"p-progressBar\", 6);\n    i0.ɵɵpipe(50, \"number\");\n    i0.ɵɵtext(51, \"\\n  \");\n    i0.ɵɵelementStart(52, \"span\");\n    i0.ɵɵtext(53);\n    i0.ɵɵpipe(54, \"number\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(55, \"\\n  \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(56, \"\\n\\n  \");\n    i0.ɵɵelementStart(57, \"div\", 1);\n    i0.ɵɵtext(58, \"\\n   \");\n    i0.ɵɵelementStart(59, \"div\", 4);\n    i0.ɵɵtext(60, \"System CPU count\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(61, \"\\n   \");\n    i0.ɵɵelementStart(62, \"div\", 5);\n    i0.ɵɵtext(63);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(64, \"\\n   \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(65, \"\\n\\n\\n\");\n    i0.ɵɵtext(66, \"\\n\");\n    i0.ɵɵtext(67, \"\\n\");\n    i0.ɵɵtext(68, \"\\n\");\n    i0.ɵɵtext(69, \"\\n\\n\");\n    i0.ɵɵtext(70, \"\\n\");\n    i0.ɵɵtext(71, \"\\n\");\n    i0.ɵɵtext(72, \"\\n\");\n    i0.ɵɵtext(73, \"\\n\\n\");\n    i0.ɵɵtext(74, \"\\n\");\n    i0.ɵɵtext(75, \"\\n\");\n    i0.ɵɵtext(76, \"\\n\");\n    i0.ɵɵtext(77, \"\\n\");\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(8);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r0.convertSecondsToDuration(ctx_r0.processUpTime.measurements[0].value), \"\");\n    i0.ɵɵadvance(9);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind2(18, 9, ctx_r0.convertSecondsToCurrentDate(ctx_r0.processStartTime.measurements[0].value), \"medium\"));\n    i0.ɵɵadvance(10);\n    i0.ɵɵtextInterpolate1(\"\", i0.ɵɵpipeBind2(28, 12, 100 * ctx_r0.processCpuUsage.measurements[0].value, \"1.0-2\"), \" %\");\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"value\", i0.ɵɵpipeBind2(32, 15, 100 * ctx_r0.processCpuUsage.measurements[0].value, \"1.0-2\"));\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate1(\"\", i0.ɵɵpipeBind2(36, 18, 100 * ctx_r0.processCpuUsage.measurements[0].value, \"1.0-2\"), \" %\");\n    i0.ɵɵadvance(10);\n    i0.ɵɵtextInterpolate1(\"\", i0.ɵɵpipeBind2(46, 21, 100 * ctx_r0.systemCpuUsage.measurements[0].value, \"1.0-2\"), \" %\");\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"value\", i0.ɵɵpipeBind2(50, 24, 100 * ctx_r0.systemCpuUsage.measurements[0].value, \"1.0-2\"));\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate1(\"\", i0.ɵɵpipeBind2(54, 27, 100 * ctx_r0.systemCpuUsage.measurements[0].value, \"1.0-2\"), \" %\");\n    i0.ɵɵadvance(10);\n    i0.ɵɵtextInterpolate(ctx_r0.systemCpuCount.measurements[0].value);\n  }\n}\nclass MetricsSystemComponent {\n  convertSecondsToDuration(sec) {\n    const times = {\n      year: 31557600,\n      month: 2629746,\n      day: 86400,\n      hour: 3600,\n      minute: 60\n    };\n    let timeString = '';\n    for (const [key, value] of Object.entries(times)) {\n      if (Math.floor(sec / value) > 0) {\n        let plural = '';\n        if (Math.floor(sec / value) > 1) {\n          plural = 's';\n        }\n        timeString += Math.floor(sec / value).toString() + ' ' + key.toString() + plural + ' ';\n        sec = sec - value * Math.floor(sec / value);\n      }\n    }\n    return timeString;\n  }\n  convertSecondsToCurrentDate(sec) {\n    // create Date object for current location\n    return new Date(sec * 1000);\n  }\n}\nexports.MetricsSystemComponent = MetricsSystemComponent;\nMetricsSystemComponent.ɵfac = function MetricsSystemComponent_Factory(t) {\n  return new (t || MetricsSystemComponent)();\n};\nMetricsSystemComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: MetricsSystemComponent,\n  selectors: [[\"ic-metrics-system\"]],\n  inputs: {\n    systemCpuUsage: \"systemCpuUsage\",\n    systemCpuCount: \"systemCpuCount\",\n    processCpuUsage: \"processCpuUsage\",\n    processUpTime: \"processUpTime\",\n    processStartTime: \"processStartTime\",\n    updating: \"updating\"\n  },\n  decls: 5,\n  vars: 1,\n  consts: [[4, \"ngIf\"], [1, \"row\"], [1, \"col-md-4\"], [1, \"col-md-8\", \"text-right\"], [1, \"col-md-9\"], [1, \"col-md-3\", \"text-right\"], [3, \"value\"]],\n  template: function MetricsSystemComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"h4\");\n      i0.ɵɵtext(1, \"System\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(2, \"\\n\\n\");\n      i0.ɵɵtemplate(3, MetricsSystemComponent_ng_container_3_Template, 78, 30, \"ng-container\", 0);\n      i0.ɵɵtext(4, \"\\n\");\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"ngIf\", !ctx.updating && ctx.systemCpuCount && ctx.systemCpuUsage && ctx.processCpuUsage && ctx.processStartTime && ctx.processUpTime);\n    }\n  },\n  dependencies: [i1.NgIf, i2.ProgressBar, i1.DecimalPipe, i1.DatePipe],\n  encapsulation: 2,\n  changeDetection: 0\n});","map":{"version":3,"mappings":"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","names":["i0","MetricsSystemComponent","convertSecondsToDuration","sec","times","year","month","day","hour","minute","timeString","key","value","Object","entries","Math","floor","plural","toString","convertSecondsToCurrentDate","Date","exports","selectors","inputs","systemCpuUsage","systemCpuCount","processCpuUsage","processUpTime","processStartTime","updating","decls","vars","consts","template"],"sourceRoot":"","sources":["C:\\Users\\D1347074\\Desktop\\projects 2\\nspayiiapp\\src\\main\\webapp\\app\\admin\\metrics\\blocks\\metrics-system\\metrics-system.component.html","C:\\Users\\D1347074\\Desktop\\projects 2\\nspayiiapp\\src\\main\\webapp\\app\\admin\\metrics\\blocks\\metrics-system\\metrics-system.component.ts"],"sourcesContent":["<h4>System</h4>\r\n\r\n<ng-container *ngIf=\"!updating && systemCpuCount && systemCpuUsage && processCpuUsage && processStartTime && processUpTime\">\r\n   <div class=\"row\">\r\n   <div class=\"col-md-4\">Uptime</div>\r\n   <div class=\"col-md-8 text-right\"> {{ convertSecondsToDuration(processUpTime.measurements[0].value) }}</div>\r\n   </div>\r\n\r\n   <div class=\"row\">\r\n   <div class=\"col-md-4\">Start time</div>\r\n   <div class=\"col-md-8 text-right\">{{ convertSecondsToCurrentDate(processStartTime.measurements[0].value ) | date:'medium' }}</div>\r\n   </div>\r\n\r\n   <div class=\"row\">\r\n   <div class=\"col-md-9\">Process CPU usage</div>\r\n   <div class=\"col-md-3 text-right\">{{ 100 * processCpuUsage.measurements[0].value | number: '1.0-2' }} %</div>\r\n   </div>\r\n\r\n   <p-progressBar [value]=\"100 * processCpuUsage.measurements[0].value | number: '1.0-2'\">\r\n   <span>{{ 100 * processCpuUsage.measurements[0].value | number: '1.0-2' }} %</span>\r\n   </p-progressBar>\r\n\r\n  <div class=\"row\">\r\n   <div class=\"col-md-9\">System CPU usage</div>\r\n  <div class=\"col-md-3 text-right\">{{ 100 * systemCpuUsage.measurements[0].value | number: '1.0-2' }} %</div>\r\n  </div>\r\n\r\n   <p-progressBar [value]=\"100 * systemCpuUsage.measurements[0].value | number: '1.0-2'\">\r\n  <span>{{ 100 * systemCpuUsage.measurements[0].value | number: '1.0-2' }} %</span>\r\n  </p-progressBar>\r\n\r\n  <div class=\"row\">\r\n   <div class=\"col-md-9\">System CPU count</div>\r\n   <div class=\"col-md-3 text-right\">{{ systemCpuCount.measurements[0].value }}</div>\r\n   </div>\r\n\r\n\r\n<!--  <div class=\"row\">-->\r\n<!--    <div class=\"col-md-9\">System 1m Load average</div>-->\r\n<!--    <div class=\"col-md-3 text-right\">{{ systemMetrics['system.load.average.1m'] | number: '1.0-2' }}</div>-->\r\n<!--  </div>-->\r\n\r\n<!--  <div class=\"row\">-->\r\n<!--    <div class=\"col-md-9\">Process files max</div>-->\r\n<!--    <div class=\"col-md-3 text-right\">{{ systemMetrics['process.files.max'] | number: '1.0-0' }}</div>-->\r\n<!--  </div>-->\r\n\r\n<!--  <div class=\"row\">-->\r\n<!--    <div class=\"col-md-9\">Process files open</div>-->\r\n<!--    <div class=\"col-md-3 text-right\">{{ systemMetrics['process.files.open'] | number: '1.0-0' }}</div>-->\r\n<!--  </div>-->\r\n</ng-container>\r\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\r\n\r\nimport {EnvironmentInfo} from 'app/admin/metrics/metrics.model';\r\n\r\n@Component({\r\n  selector: 'ic-metrics-system',\r\n  templateUrl: './metrics-system.component.html',\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class MetricsSystemComponent {\r\n   /**\r\n   *  object containing thread related metrics\r\n   * */\r\n @Input() systemCpuUsage?: EnvironmentInfo;\r\n\r\n @Input() systemCpuCount?: EnvironmentInfo;\r\n\r\n @Input() processCpuUsage?: EnvironmentInfo;\r\n\r\n @Input() processUpTime?: EnvironmentInfo;\r\n\r\n @Input() processStartTime?: EnvironmentInfo;\r\n\r\n\r\n  /**\r\n   * boolean field saying if the metrics are in the process of being updated\r\n   */\r\n  @Input() updating?: boolean;\r\n\r\n  convertSecondsToDuration(sec: number): string {\r\n    const times = {\r\n      year: 31557600,\r\n      month: 2629746,\r\n      day: 86400,\r\n      hour: 3600,\r\n      minute: 60,\r\n    };\r\n    let timeString = '';\r\n    for (const [key, value] of Object.entries(times)) {\r\n      if (Math.floor(sec / value) > 0) {\r\n        let plural = '';\r\n        if (Math.floor(sec / value) > 1) {\r\n          plural = 's';\r\n        }\r\n        timeString += Math.floor(sec / value).toString() + ' ' + key.toString() + plural + ' ';\r\n        sec = sec - value * Math.floor(sec / value);\r\n      }\r\n    }\r\n    return timeString;\r\n  }\r\n  convertSecondsToCurrentDate(sec: number): Date {\r\n  // create Date object for current location\r\n    return new Date(sec * 1000);\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}