{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.IcSidebarComponent = exports.layoutSizes = void 0;\nconst tslib_1 = require(\"tslib\");\nconst jquery_1 = tslib_1.__importDefault(require(\"jquery\"));\nconst i0 = tslib_1.__importStar(require(\"@angular/core\"));\nconst i1 = tslib_1.__importStar(require(\"./global.state\"));\nconst i2 = tslib_1.__importStar(require(\"@angular/common\"));\nconst i3 = tslib_1.__importStar(require(\"./menu/menu.component\"));\nconst _c0 = function (a0) {\n  return {\n    \"showLeftBar\": a0\n  };\n};\nexports.layoutSizes = {\n  resWidthCollapseSidebar: 1200,\n  resWidthHideSidebar: 500\n};\nclass IcSidebarComponent {\n  constructor(_elementRef, _state) {\n    this._elementRef = _elementRef;\n    this._state = _state;\n    this.isMenuCollapsed = false;\n    this.isMenuShouldCollapsed = false;\n    this.showLeftBar = false;\n    this._state.subscribe('menu.isCollapsed', isCollapsed => {\n      this.isMenuCollapsed = isCollapsed;\n    });\n  }\n  ngOnInit() {\n    if (this._shouldMenuCollapse()) {\n      this.menuCollapse();\n    }\n  }\n  ngAfterViewInit() {\n    setTimeout(() => this.updateSidebarHeight());\n  }\n  set showMenu(isShowMenu) {\n    this.showLeftBar = isShowMenu;\n  }\n  onWindowResize() {\n    const isMenuShouldCollapsed = this._shouldMenuCollapse();\n    if (this.isMenuShouldCollapsed !== isMenuShouldCollapsed) {\n      this.menuCollapseStateChange(isMenuShouldCollapsed);\n    }\n    this.isMenuShouldCollapsed = isMenuShouldCollapsed;\n    this.updateSidebarHeight();\n  }\n  menuExpand() {\n    this.menuCollapseStateChange(false);\n  }\n  menuCollapse() {\n    this.menuCollapseStateChange(true);\n  }\n  menuCollapseStateChange(isCollapsed) {\n    this.isMenuCollapsed = isCollapsed;\n    this._state.notifyDataChanged('menu.isCollapsed', this.isMenuCollapsed);\n  }\n  updateSidebarHeight() {\n    // TODO: get rid of magic 84 constant\n    if (!this.menuHeight) {\n      this.menuHeight = (0, jquery_1.default)(window).height() - 84;\n    } else {\n      if (!this._elementRef.nativeElement.childNodes[0].clientHeight) {\n        this.menuHeight = (0, jquery_1.default)(window).height() - 84;\n      } else {\n        this.menuHeight = this._elementRef.nativeElement.childNodes[0].clientHeight - 84;\n      }\n    }\n  }\n  _shouldMenuCollapse() {\n    // return window.innerWidth <= layoutSizes.resWidthCollapseSidebar;\n    return true;\n  }\n}\nexports.IcSidebarComponent = IcSidebarComponent;\nIcSidebarComponent.ɵfac = function IcSidebarComponent_Factory(t) {\n  return new (t || IcSidebarComponent)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i1.GlobalState));\n};\nIcSidebarComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: IcSidebarComponent,\n  selectors: [[\"ic-sidebar\"]],\n  hostBindings: function IcSidebarComponent_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"resize\", function IcSidebarComponent_resize_HostBindingHandler() {\n        return ctx.onWindowResize();\n      }, false, i0.ɵɵresolveWindow);\n    }\n  },\n  inputs: {\n    showMenu: \"showMenu\"\n  },\n  decls: 5,\n  vars: 5,\n  consts: [[\"sidebarResize\", \"\", 1, \"al-sidebar\", 3, \"ngClass\"], [3, \"menuHeight\", \"sidebarCollapsed\", \"expandMenu\", \"mouseenter\", \"mouseleave\"]],\n  template: function IcSidebarComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"aside\", 0);\n      i0.ɵɵtext(1, \"\\n  \");\n      i0.ɵɵelementStart(2, \"ic-menu\", 1);\n      i0.ɵɵlistener(\"expandMenu\", function IcSidebarComponent_Template_ic_menu_expandMenu_2_listener() {\n        return ctx.menuExpand();\n      })(\"mouseenter\", function IcSidebarComponent_Template_ic_menu_mouseenter_2_listener() {\n        return ctx.menuExpand();\n      })(\"mouseleave\", function IcSidebarComponent_Template_ic_menu_mouseleave_2_listener() {\n        return ctx.menuCollapse();\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(3, \"\\n\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(4, \"\\n\");\n    }\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(3, _c0, !ctx.showLeftBar));\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"menuHeight\", ctx.menuHeight)(\"sidebarCollapsed\", ctx.isMenuCollapsed);\n    }\n  },\n  dependencies: [i2.NgClass, i3.IcMenuComponent],\n  styles: [\"[_nghost-%COMP%]     .al-sidebar {\\n  width: 250px;\\n  top: 62px;\\n  left: 0;\\n  z-index: 1030;\\n  display: block;\\n  min-height: 100%;\\n  background-color: #282828;\\n  height: 100%;\\n  position: fixed;\\n}\\n[_nghost-%COMP%]     .al-sidebar-list {\\n  margin: 0;\\n  overflow: hidden;\\n  padding: 8px 0 0 0;\\n  list-style: none;\\n}\\n[_nghost-%COMP%]     .al-sidebar-list ic-menu-item li ul ic-menu-item li ul {\\n  padding-left: 10px;\\n}\\n[_nghost-%COMP%]     .al-sidebar-sublist .subitem-submenu-list {\\n  padding-left: 15px;\\n}\\n[_nghost-%COMP%]     .subitem-submenu-link .fa {\\n  top: 7px;\\n}\\n[_nghost-%COMP%]     .al-sidebar-list-item {\\n  display: block;\\n  position: relative;\\n  float: none;\\n  padding: 0;\\n}\\n[_nghost-%COMP%]     .al-sidebar-list-item.selected:not(.with-sub-menu) {\\n  background-color: #00abff;\\n}\\n[_nghost-%COMP%]     .al-sidebar-list-item.selected:not(.with-sub-menu) a.al-sidebar-list-link {\\n  color: #ffffff;\\n}\\n[_nghost-%COMP%]     .al-sidebar-list-item.selected:not(.with-sub-menu) a.al-sidebar-list-link b {\\n  color: #ffffff;\\n}\\n[_nghost-%COMP%]     .ba-sidebar-item-expanded > ul.al-sidebar-sublist {\\n  display: block !important;\\n}\\n[_nghost-%COMP%]     .al-sidebar-list-item.ba-sidebar-item-expanded > .al-sidebar-list-link b, [_nghost-%COMP%]     .ba-sidebar-sublist-item.ba-sidebar-item-expanded > .al-sidebar-list-link b {\\n  transform: rotate(180deg);\\n}\\n[_nghost-%COMP%]     .al-sidebar-list-item.ba-sidebar-item-expanded > .al-sidebar-sublist, [_nghost-%COMP%]     .ba-sidebar-sublist-item.ba-sidebar-item-expanded > .al-sidebar-sublist {\\n  display: block;\\n}\\n[_nghost-%COMP%]     a.al-sidebar-list-link {\\n  display: block;\\n  height: 40px;\\n  padding-left: 10px;\\n  text-shadow: none;\\n  text-decoration: none;\\n  color: #ffffff;\\n  line-height: 2.6;\\n  white-space: nowrap;\\n  overflow: hidden;\\n  cursor: pointer;\\n}\\n[_nghost-%COMP%]     a.al-sidebar-list-link:hover {\\n  color: #00abff;\\n}\\n[_nghost-%COMP%]     a.al-sidebar-list-link:hover b {\\n  color: #00abff;\\n}\\n[_nghost-%COMP%]     a.al-sidebar-list-link i {\\n  margin-right: 8px;\\n  width: 16px;\\n  display: inline-block;\\n}\\n[_nghost-%COMP%]     a.al-sidebar-list-link b {\\n  display: block;\\n  opacity: 1;\\n  width: 14px;\\n  height: 14px;\\n  line-height: 14px;\\n  text-shadow: none;\\n  font-size: 14px;\\n  position: absolute;\\n  right: 18px;\\n  top: 15px;\\n  padding: 0;\\n  text-align: center;\\n  color: #ffffff;\\n  transition: transform 0.2s linear;\\n}\\n[_nghost-%COMP%]     .slimScrollBar, [_nghost-%COMP%]     .slimScrollRail {\\n  border-radius: 0 !important;\\n  width: 4px !important;\\n  left: 246px;\\n}\\n[_nghost-%COMP%]     .al-sidebar-sublist {\\n  padding: 0;\\n  list-style: none;\\n  position: relative;\\n  display: none;\\n}\\n[_nghost-%COMP%]     .al-sidebar-sublist.expanded {\\n  display: block;\\n}\\n[_nghost-%COMP%]     .al-sidebar-sublist > ic-menu-item > li {\\n  display: block;\\n  float: none;\\n  padding: 0;\\n  border-bottom: none;\\n  position: relative;\\n}\\n[_nghost-%COMP%]     .al-sidebar-sublist > ic-menu-item > li a {\\n  display: block;\\n  text-shadow: none;\\n  font-size: 14px;\\n  text-decoration: none;\\n  color: #ffffff;\\n  padding-left: 40px;\\n  height: 37px;\\n  line-height: 2.6;\\n}\\n[_nghost-%COMP%]     .al-sidebar-sublist > ic-menu-item > li a:hover {\\n  color: #00abff;\\n}\\n[_nghost-%COMP%]     .al-sidebar-sublist > ic-menu-item > li.selected:not(.with-sub-menu) > a {\\n  border: none;\\n  background-color: #00abff;\\n}\\n[_nghost-%COMP%]     .al-sidebar-sublist > ic-menu-item > li.selected:not(.with-sub-menu) > a:hover {\\n  color: #ffffff;\\n}\\n[_nghost-%COMP%]     .sidebar-hover-elem {\\n  width: 4px;\\n  background: #00abff;\\n  position: absolute;\\n  top: -150px;\\n  left: 246px;\\n  transition: all 0.5s ease;\\n  transition-property: top, height;\\n  height: 42px;\\n  display: block;\\n}\\n[_nghost-%COMP%]     .sidebar-select-elem {\\n  display: block;\\n  top: 94px;\\n}\\n[_nghost-%COMP%]     .menu-collapsed .slimScrollBar, [_nghost-%COMP%]     .menu-collapsed .slimScrollRail {\\n  display: none !important;\\n}\\n[_nghost-%COMP%]     .showLeftBar {\\n  display: none;\\n}\\n/*# sourceMappingURL=data:application/json;base64, */\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"]\n});","map":{"version":3,"mappings":";;;;;;;AAEA;;;;;;;;;;AACaA,mBAAW,GAAG;EACzBC,uBAAuB,EAAE,IAAI;EAC7BC,mBAAmB,EAAE;CACtB;AAED,MAKaC,kBAAkB;EAM7BC,YAAoBC,WAAuB,EAAUC,MAAmB;IAApD,gBAAW,GAAXD,WAAW;IAAsB,WAAM,GAANC,MAAM;IAJpD,oBAAe,GAAG,KAAK;IACvB,0BAAqB,GAAG,KAAK;IAC7B,gBAAW,GAAG,KAAK;IAGxB,IAAI,CAACA,MAAM,CAACC,SAAS,CAAC,kBAAkB,EAAGC,WAAoB,IAAI;MACjE,IAAI,CAACC,eAAe,GAAGD,WAAW;IACpC,CAAC,CAAC;EACJ;EAEOE,QAAQ;IACb,IAAI,IAAI,CAACC,mBAAmB,EAAE,EAAE;MAC9B,IAAI,CAACC,YAAY,EAAE;;EAEvB;EAEOC,eAAe;IACpBC,UAAU,CAAC,MAAM,IAAI,CAACC,mBAAmB,EAAE,CAAC;EAC9C;EAEA,IACIC,QAAQ,CAACC,UAAmB;IAC9B,IAAI,CAACC,WAAW,GAAGD,UAAU;EAC/B;EAGOE,cAAc;IACnB,MAAMC,qBAAqB,GAAG,IAAI,CAACT,mBAAmB,EAAE;IAExD,IAAI,IAAI,CAACS,qBAAqB,KAAKA,qBAAqB,EAAE;MACxD,IAAI,CAACC,uBAAuB,CAACD,qBAAqB,CAAC;;IAErD,IAAI,CAACA,qBAAqB,GAAGA,qBAAqB;IAClD,IAAI,CAACL,mBAAmB,EAAE;EAC5B;EAEOO,UAAU;IACf,IAAI,CAACD,uBAAuB,CAAC,KAAK,CAAC;EACrC;EAEOT,YAAY;IACjB,IAAI,CAACS,uBAAuB,CAAC,IAAI,CAAC;EACpC;EAEOA,uBAAuB,CAACb,WAAoB;IACjD,IAAI,CAACC,eAAe,GAAGD,WAAW;IAClC,IAAI,CAACF,MAAM,CAACiB,iBAAiB,CAAC,kBAAkB,EAAE,IAAI,CAACd,eAAe,CAAC;EACzE;EAEOM,mBAAmB;IACxB;IACA,IAAI,CAAC,IAAI,CAACS,UAAU,EAAE;MACpB,IAAI,CAACA,UAAU,GAAI,oBAAM,EAACC,MAAM,CAAC,CAACC,MAAM,EAAU,GAAG,EAAE;KACxD,MAAM;MACL,IAAI,CAAC,IAAI,CAACrB,WAAW,CAACsB,aAAa,CAACC,UAAU,CAAC,CAAC,CAAC,CAACC,YAAY,EAAE;QAC9D,IAAI,CAACL,UAAU,GAAI,oBAAM,EAACC,MAAM,CAAC,CAACC,MAAM,EAAU,GAAG,EAAE;OACxD,MAAM;QACL,IAAI,CAACF,UAAU,GAAG,IAAI,CAACnB,WAAW,CAACsB,aAAa,CAACC,UAAU,CAAC,CAAC,CAAC,CAACC,YAAY,GAAG,EAAE;;;EAGtF;EAEQlB,mBAAmB;IACzB;IACA,OAAO,IAAI;EACb;;AAxEFX;;mBAKaG,kBAAkB;AAAA;;QAAlBA,kBAAkB;EAAA2B;EAAAC;IAAA;;eAAlBC,oBAAgB;MAAA;;;;;;;;;;;MCb7BC,gCAAiF;MAC/EA;MAAAA,kCAEC;MAFuEA;QAAA,OAAcD,gBAAY;MAAA,EAAC;QAAA,OAC5EA,gBAAY;MAAA,EADgE;QAAA,OAChDA,kBAAc;MAAA,EADkC;MAElGC,iBAAU;MACbA;MAAAA,iBAAQ;MACRA;;;MAL0BA,sEAAwC;MACvDA,eAAyB;MAAzBA,2CAAyB","names":["exports","resWidthCollapseSidebar","resWidthHideSidebar","IcSidebarComponent","constructor","_elementRef","_state","subscribe","isCollapsed","isMenuCollapsed","ngOnInit","_shouldMenuCollapse","menuCollapse","ngAfterViewInit","setTimeout","updateSidebarHeight","showMenu","isShowMenu","showLeftBar","onWindowResize","isMenuShouldCollapsed","menuCollapseStateChange","menuExpand","notifyDataChanged","menuHeight","window","height","nativeElement","childNodes","clientHeight","selectors","hostBindings","ctx","i0"],"sourceRoot":"","sources":["C:\\Users\\D1347074\\Desktop\\projects 2\\nspayiiapp\\src\\main\\webapp\\app\\layouts\\sidebar\\sidebar.component.ts","C:\\Users\\D1347074\\Desktop\\projects 2\\nspayiiapp\\src\\main\\webapp\\app\\layouts\\sidebar\\sidebar.html"],"sourcesContent":["import { Component, Input, ElementRef, HostListener, OnInit, AfterViewInit } from '@angular/core';\r\nimport { GlobalState } from './global.state';\r\nimport jQuery from 'jquery';\r\nexport const layoutSizes = {\r\n  resWidthCollapseSidebar: 1200,\r\n  resWidthHideSidebar: 500,\r\n};\r\n\r\n@Component({\r\n  selector: 'ic-sidebar',\r\n  templateUrl: './sidebar.html',\r\n  styleUrls: ['./sidebar.scss'],\r\n})\r\nexport class IcSidebarComponent implements OnInit, AfterViewInit {\r\n  public menuHeight: number | undefined;\r\n  public isMenuCollapsed = false;\r\n  public isMenuShouldCollapsed = false;\r\n  public showLeftBar = false;\r\n\r\n  constructor(private _elementRef: ElementRef, private _state: GlobalState) {\r\n    this._state.subscribe('menu.isCollapsed', (isCollapsed: boolean) => {\r\n      this.isMenuCollapsed = isCollapsed;\r\n    });\r\n  }\r\n\r\n  public ngOnInit(): void {\r\n    if (this._shouldMenuCollapse()) {\r\n      this.menuCollapse();\r\n    }\r\n  }\r\n\r\n  public ngAfterViewInit(): void {\r\n    setTimeout(() => this.updateSidebarHeight());\r\n  }\r\n\r\n  @Input()\r\n  set showMenu(isShowMenu: boolean) {\r\n    this.showLeftBar = isShowMenu;\r\n  }\r\n\r\n  @HostListener('window:resize')\r\n  public onWindowResize(): void {\r\n    const isMenuShouldCollapsed = this._shouldMenuCollapse();\r\n\r\n    if (this.isMenuShouldCollapsed !== isMenuShouldCollapsed) {\r\n      this.menuCollapseStateChange(isMenuShouldCollapsed);\r\n    }\r\n    this.isMenuShouldCollapsed = isMenuShouldCollapsed;\r\n    this.updateSidebarHeight();\r\n  }\r\n\r\n  public menuExpand(): void {\r\n    this.menuCollapseStateChange(false);\r\n  }\r\n\r\n  public menuCollapse(): void {\r\n    this.menuCollapseStateChange(true);\r\n  }\r\n\r\n  public menuCollapseStateChange(isCollapsed: boolean): void {\r\n    this.isMenuCollapsed = isCollapsed;\r\n    this._state.notifyDataChanged('menu.isCollapsed', this.isMenuCollapsed);\r\n  }\r\n\r\n  public updateSidebarHeight(): void {\r\n    // TODO: get rid of magic 84 constant\r\n    if (!this.menuHeight) {\r\n      this.menuHeight = (jQuery(window).height() as any) - 84;\r\n    } else {\r\n      if (!this._elementRef.nativeElement.childNodes[0].clientHeight) {\r\n        this.menuHeight = (jQuery(window).height() as any) - 84;\r\n      } else {\r\n        this.menuHeight = this._elementRef.nativeElement.childNodes[0].clientHeight - 84;\r\n      }\r\n    }\r\n  }\r\n\r\n  private _shouldMenuCollapse(): boolean {\r\n    // return window.innerWidth <= layoutSizes.resWidthCollapseSidebar;\r\n    return true;\r\n  }\r\n}\r\n","<aside class=\"al-sidebar\" [ngClass]=\"{'showLeftBar':!showLeftBar}\" sidebarResize>\r\n  <ic-menu [menuHeight]=\"menuHeight\" [sidebarCollapsed]=\"isMenuCollapsed\" (expandMenu)=\"menuExpand()\"\r\n           (mouseenter)=\"menuExpand()\" (mouseleave)=\"menuCollapse()\"\r\n  ></ic-menu>\r\n</aside>\r\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}