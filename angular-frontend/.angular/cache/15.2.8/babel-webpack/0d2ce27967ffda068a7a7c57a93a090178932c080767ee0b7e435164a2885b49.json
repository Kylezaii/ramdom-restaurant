{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.StringNotAllowedValidator = void 0;\nclass StringNotAllowedValidator {\n  static stringNotAllowed(disallowedString, overiddingPredicate) {\n    console.log(\"the disallaoewd\", disallowedString);\n    return c => {\n      if (overiddingPredicate) {\n        const disallowedCapString = disallowedString.map(x => {\n          return x.toUpperCase();\n        });\n        if (disallowedCapString.includes(c.value?.toUpperCase())) {\n          return {\n            invalidStringNotAllowed: true\n          };\n        }\n      } else return null;\n      return null;\n    };\n  }\n}\nexports.StringNotAllowedValidator = StringNotAllowedValidator;","map":{"version":3,"mappings":";;;;;;AAEA,MAAaA,yBAAyB;EAEpC,OAAOC,gBAAgB,CAACC,gBAA0B,EAAEC,mBAA4B;IAC9EC,OAAO,CAACC,GAAG,CAAC,iBAAiB,EAAEH,gBAAgB,CAAC;IAEhD,OAAQI,CAAkB,IAAuC;MAC/D,IAAGH,mBAAmB,EAAC;QACrB,MAAMI,mBAAmB,GAAGL,gBAAgB,CAACM,GAAG,CAACC,CAAC,IAAE;UAClD,OAAOA,CAAC,CAACC,WAAW,EAAE;QACxB,CAAC,CAAC;QACF,IAAGH,mBAAmB,CAACI,QAAQ,CAACL,CAAC,CAACM,KAAK,EAAEF,WAAW,EAAE,CAAC,EAAC;UACtD,OAAO;YAAEG,uBAAuB,EAAE;UAAI,CAAE;;OAE3C,MAAK,OAAO,IAAI;MAEjB,OAAO,IAAI;IACb,CAAC;EACH;;AAjBFC","names":["StringNotAllowedValidator","stringNotAllowed","disallowedString","overiddingPredicate","console","log","c","disallowedCapString","map","x","toUpperCase","includes","value","invalidStringNotAllowed","exports"],"sourceRoot":"","sources":["C:\\Users\\D1347074\\Desktop\\projects 2\\nspayiiapp\\src\\main\\webapp\\app\\shared\\validator\\string-not-allowed.directive.ts"],"sourcesContent":["import { ValidatorFn, AbstractControl } from '@angular/forms';\r\n\r\nexport class StringNotAllowedValidator {\r\n\r\n  static stringNotAllowed(disallowedString: string[], overiddingPredicate: boolean): ValidatorFn {\r\n    console.log(\"the disallaoewd\", disallowedString)\r\n\r\n    return (c: AbstractControl): { [key: string]: boolean } | null => {\r\n      if(overiddingPredicate){\r\n        const disallowedCapString = disallowedString.map(x=>{\r\n          return x.toUpperCase();\r\n        })\r\n        if(disallowedCapString.includes(c.value?.toUpperCase())){\r\n          return { invalidStringNotAllowed: true };\r\n        }\r\n      }else return null;\r\n   \r\n      return null;\r\n    };\r\n  }\r\n  \r\n}"]},"metadata":{},"sourceType":"script","externalDependencies":[]}