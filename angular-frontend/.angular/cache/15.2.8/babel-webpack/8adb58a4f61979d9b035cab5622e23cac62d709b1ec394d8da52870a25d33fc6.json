{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SEClaimService = void 0;\nconst tslib_1 = require(\"tslib\");\nconst i0 = tslib_1.__importStar(require(\"@angular/core\"));\nconst i1 = tslib_1.__importStar(require(\"app/core/config/application-config.service\"));\nconst i2 = tslib_1.__importStar(require(\"app/shared/service/ns2-http.service\"));\nconst i3 = tslib_1.__importStar(require(\"@angular/common/http\"));\nclass SEClaimService {\n  constructor(applicationConfigService, ns2Http, http) {\n    this.applicationConfigService = applicationConfigService;\n    this.ns2Http = ns2Http;\n    this.http = http;\n    this.resourceUrl = this.applicationConfigService.getEndpointFor('api/claim/se-claim');\n    this.data = undefined;\n  }\n  retrieveLatestSEClaimCoy(options) {\n    const path = `${this.resourceUrl}/retrieve_latest_seclaim_coy`;\n    return this.ns2Http.get(path, options);\n  }\n  // createHardCopySEClaim(request: any): Observable<any>{\n  //     const path = `${this.resourceUrl}/create_hardcopy_seclaim`;\n  //     return this.ns2Http.post(path, JSON.stringify(request));\n  // }\n  retrieveSEClaimDetails(claimId, options) {\n    const path = `${this.resourceUrl}/retrieve_se_claim_details/${claimId}`;\n    return this.ns2Http.get(path, options);\n  }\n  retrieveNewSEHardCopyClaimDetails(options) {\n    const path = `${this.resourceUrl}/retrieve_new_hardcopy_se_claim_details`;\n    return this.ns2Http.get(path, options);\n  }\n  saveSEHardcopyDraft(request, options) {\n    const path = this.resourceUrl + '/save_draft_hardcopy_seclaim';\n    console.log(\"request\", request);\n    return this.ns2Http.post(path, JSON.stringify(request), options);\n  }\n  submitSEHardcopyDraft(request, options) {\n    const path = this.resourceUrl + '/submit_hardcopy_seclaim';\n    console.log(\"request\", request);\n    return this.ns2Http.post(path, JSON.stringify(request), options);\n  }\n  retrieveIrasDownloadDetails(options) {\n    const path = `${this.resourceUrl}/retrieve_iras_dld_details`;\n    return this.ns2Http.get(path, options);\n  }\n  retrieveIrasConsent(nric) {\n    const path = `${this.resourceUrl}/iras_consent/${nric}`;\n    return this.ns2Http.get(path);\n  }\n  retrieveIrasConsentHistory(nric, options) {\n    const path = `${this.resourceUrl}/iras_consent_history/${nric}`;\n    return this.ns2Http.get(path, options);\n  }\n  retrieveInsurWD(options) {\n    const path = `${this.resourceUrl}/retrieve_insurance_working_data`;\n    return this.ns2Http.get(path, options);\n  }\n  retrieveSolePropPartnerWD(options) {\n    const path = `${this.resourceUrl}/retrieve_partner_sole_working_data`;\n    return this.ns2Http.get(path, options);\n  }\n  retrieveWDDropdown(options) {\n    const path = `${this.resourceUrl}/retrieve_working_data_dropdown`;\n    return this.ns2Http.get(path, options);\n  }\n  retrievePropertyAgentWD(options) {\n    const path = `${this.resourceUrl}/retrieve_prop_agent_working_data`;\n    return this.ns2Http.get(path, options);\n  }\n  retrieveRefreshOtherInsurClaims(options) {\n    const path = `${this.resourceUrl}/retrieve_refresh_other_insur_claims`;\n    return this.ns2Http.get(path, options);\n  }\n  retrieveRefreshOtherSPPClaims(options) {\n    const path = `${this.resourceUrl}/retrieve_refresh_other_spp_claims`;\n    return this.ns2Http.get(path, options);\n  }\n  setData(data) {\n    this.data = data;\n  }\n  getData(paramName) {\n    if (this.data) {\n      return this.data[paramName];\n    } else return null;\n  }\n  retrieveOthersLegacyWD(params) {\n    const path = `${this.resourceUrl}/retrieve_others_legacy_working_data`;\n    return this.http.get(path, {\n      params\n    });\n  }\n  retrievePhdDeliveryWD(params) {\n    const path = `${this.resourceUrl}/retrieve_phd_delivery_working_data`;\n    return this.http.get(path, {\n      params\n    });\n  }\n  retrieveRefreshPhdDeliveryWD(params) {\n    const path = `${this.resourceUrl}/retrieve_refresh_phd_delivery_wd`;\n    return this.http.get(path, {\n      params\n    });\n  }\n  retrieveNewPopulatedPhdDeliveryWD(params) {\n    const path = `${this.resourceUrl}/retrieve_new_populated_phd_delivery_wd`;\n    return this.http.get(path, {\n      params\n    });\n  }\n  saveSEClaimVerification(request, options) {\n    const path = this.resourceUrl + '/save_seclaim_verification';\n    console.log(\"request\", request);\n    return this.ns2Http.post(path, JSON.stringify(request), options);\n  }\n  retrieveTaxiWD(params) {\n    const path = `${this.resourceUrl}/retrieve_taxi_working_data`;\n    return this.http.get(path, {\n      params\n    });\n  }\n  retrieveClaimItems(options) {\n    const path = this.resourceUrl + '/retrieve_claim_items';\n    return this.ns2Http.get(path, options);\n  }\n  retrieveReferenceClaimNip(options) {\n    const path = this.resourceUrl + '/retrieve_reference_claim';\n    return this.ns2Http.get(path, options);\n  }\n  retrieveReplacementWD(params) {\n    const path = `${this.resourceUrl}/retrieve_replacement_working_data`;\n    return this.http.get(path, {\n      params\n    });\n  }\n  retrieveOthersWD(params) {\n    const path = `${this.resourceUrl}/retrieve_others_working_data`;\n    return this.http.get(path, {\n      params\n    });\n  }\n  retrieveRefreshOthersWD(params) {\n    const path = `${this.resourceUrl}/retrieve_refresh_others_wd`;\n    return this.http.get(path, {\n      params\n    });\n  }\n  retrieveSerbDateList(options) {\n    const path = `${this.resourceUrl}/retrieve_serb_date_list`;\n    return this.ns2Http.get(path, options);\n  }\n  retrieveSerbRationaleAmendment(options) {\n    const path = `${this.resourceUrl}/retrieve_serb_rationale_amendment`;\n    return this.ns2Http.get(path, options);\n  }\n  retrieveSerbApprovalSection(options) {\n    const path = `${this.resourceUrl}/retrieve_serb_approval`;\n    return this.ns2Http.get(path, options);\n  }\n  copySerbApprovalFromCaseId(options) {\n    const path = `${this.resourceUrl}/copy_serb_approval_from_caseid`;\n    return this.ns2Http.get(path, options);\n  }\n  retrieveLatestOwners(params) {\n    const path = `${this.resourceUrl}/retrieve_latest_owner`;\n    return this.http.get(path, {\n      params\n    });\n  }\n  retrieveInitialSEClaim(params) {\n    const path = `${this.resourceUrl}/retrieve_initial_se_claim`;\n    return this.http.get(path, {\n      params\n    });\n  }\n  getSerbReportDetails(options) {\n    const path = `${this.resourceUrl}/retrieve_serb_report_pop_up`;\n    return this.ns2Http.get(path, options);\n  }\n  retrieveEClaimAdditionalInfo(params) {\n    const path = `${this.resourceUrl}/retrieve_eclaim_additional_info`;\n    return this.http.get(path, {\n      params\n    });\n  }\n  retrieveOverlappingSEClaim(options) {\n    const path = `${this.resourceUrl}/retrieve_overlapping_se_claim_by_group`;\n    return this.ns2Http.get(path, options);\n  }\n  retrieveEditableSEItemStatus(options) {\n    const path = `${this.resourceUrl}/retrieve_editable_se_item_Status`;\n    return this.ns2Http.get(path, options);\n  }\n  retrieveLastPendCertClaim(options) {\n    const path = `${this.resourceUrl}/retrieve_last_pend_cert_claim`;\n    return this.ns2Http.get(path, options);\n  }\n  retrieveConflictApprovedSEClaim(options) {\n    const path = `${this.resourceUrl}/retrieve_conflict_approved_se_claim`;\n    return this.ns2Http.get(path, options);\n  }\n}\nexports.SEClaimService = SEClaimService;\nSEClaimService.ɵfac = function SEClaimService_Factory(t) {\n  return new (t || SEClaimService)(i0.ɵɵinject(i1.ApplicationConfigService), i0.ɵɵinject(i2.Ns2HttpService), i0.ɵɵinject(i3.HttpClient));\n};\nSEClaimService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: SEClaimService,\n  factory: SEClaimService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["SEClaimService","constructor","applicationConfigService","ns2Http","http","getEndpointFor","undefined","retrieveLatestSEClaimCoy","options","path","resourceUrl","get","retrieveSEClaimDetails","claimId","retrieveNewSEHardCopyClaimDetails","saveSEHardcopyDraft","request","console","log","post","JSON","stringify","submitSEHardcopyDraft","retrieveIrasDownloadDetails","retrieveIrasConsent","nric","retrieveIrasConsentHistory","retrieveInsurWD","retrieveSolePropPartnerWD","retrieveWDDropdown","retrievePropertyAgentWD","retrieveRefreshOtherInsurClaims","retrieveRefreshOtherSPPClaims","setData","data","getData","paramName","retrieveOthersLegacyWD","params","retrievePhdDeliveryWD","retrieveRefreshPhdDeliveryWD","retrieveNewPopulatedPhdDeliveryWD","saveSEClaimVerification","retrieveTaxiWD","retrieveClaimItems","retrieveReferenceClaimNip","retrieveReplacementWD","retrieveOthersWD","retrieveRefreshOthersWD","retrieveSerbDateList","retrieveSerbRationaleAmendment","retrieveSerbApprovalSection","copySerbApprovalFromCaseId","retrieveLatestOwners","retrieveInitialSEClaim","getSerbReportDetails","retrieveEClaimAdditionalInfo","retrieveOverlappingSEClaim","retrieveEditableSEItemStatus","retrieveLastPendCertClaim","retrieveConflictApprovedSEClaim","exports","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\D1347074\\Desktop\\projects 2\\nspayiiapp\\src\\main\\webapp\\app\\claim\\se-claim\\service\\se-claim.service.ts"],"sourcesContent":["import {HttpClient, HttpParams, HttpResponse} from '@angular/common/http';\r\nimport {Injectable} from '@angular/core';\r\nimport {ApplicationConfigService} from 'app/core/config/application-config.service';\r\nimport {Ns2HttpService} from 'app/shared/service/ns2-http.service';\r\nimport {Observable} from 'rxjs';\r\nimport {Ns2Response} from \"app/shared/model/ns2-response.model\";\r\nimport {OthersLegacySubData} from \"app/claim/se-claim/se-claim-verification/working-data-section/others-legacy/others-legacy.model\";\r\nimport {PhdDeliveryWD} from \"app/claim/se-claim/model/phd-delivery.model\";\r\nimport {\r\n  RefreshPhdDeliveryInfo\r\n} from \"app/claim/se-claim/model/refresh-phd-delivery-info.model\";\r\nimport {TaxiWD} from \"app/claim/se-claim/model/taxi-model\";\r\nimport {ReplacementWD} from \"app/claim/se-claim/model/replacement.model\";\r\nimport {OthersWD} from \"app/claim/se-claim/model/others.model\";\r\nimport {RefreshOthersInfo} from \"app/claim/se-claim/model/refresh-others-info.model\";\r\nimport {LatestClaimOwner} from \"app/claim/model/latest-claim-owner.model\";\r\nimport {InitialSEClaim} from \"app/claim/se-claim/model/initial-se-claim.model\";\r\nimport {SeEclaimAdditionalInfo} from \"app/claim/se-claim/model/se-eclaim-additional-info.model\";\r\n\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class SEClaimService {\r\n\r\n    public resourceUrl = this.applicationConfigService.getEndpointFor('api/claim/se-claim');\r\n\r\n    private data:any = undefined;\r\n\r\n\r\n    constructor(\r\n        private applicationConfigService: ApplicationConfigService,\r\n        private ns2Http: Ns2HttpService,\r\n        private http: HttpClient) { }\r\n\r\n    retrieveLatestSEClaimCoy(options: any) : Observable<any>{\r\n        const path = `${this.resourceUrl}/retrieve_latest_seclaim_coy`;\r\n        return this.ns2Http.get(path, options);\r\n    }\r\n\r\n    // createHardCopySEClaim(request: any): Observable<any>{\r\n    //     const path = `${this.resourceUrl}/create_hardcopy_seclaim`;\r\n    //     return this.ns2Http.post(path, JSON.stringify(request));\r\n    // }\r\n\r\n    retrieveSEClaimDetails(claimId: string, options: any) : Observable<any>{\r\n        const path =`${this.resourceUrl}/retrieve_se_claim_details/${claimId}`;\r\n        return this.ns2Http.get(path, options);\r\n    }\r\n\r\n    retrieveNewSEHardCopyClaimDetails(options: any) : Observable<any>{\r\n        const path =`${this.resourceUrl}/retrieve_new_hardcopy_se_claim_details`;\r\n        return this.ns2Http.get(path, options);\r\n    }\r\n\r\n    saveSEHardcopyDraft(request: any, options: any): Observable<any>{\r\n        const path = this.resourceUrl + '/save_draft_hardcopy_seclaim';\r\n        console.log(\"request\", request);\r\n        return this.ns2Http.post(path, JSON.stringify(request), options);\r\n    }\r\n\r\n    submitSEHardcopyDraft(request: any, options: any): Observable<any>{\r\n        const path = this.resourceUrl + '/submit_hardcopy_seclaim';\r\n        console.log(\"request\", request);\r\n        return this.ns2Http.post(path, JSON.stringify(request), options);\r\n    }\r\n\r\n    retrieveIrasDownloadDetails(options: any) : Observable<any>{\r\n        const path =`${this.resourceUrl}/retrieve_iras_dld_details`;\r\n        return this.ns2Http.get(path, options);\r\n    }\r\n\r\n    retrieveIrasConsent(nric: string): Observable<any>{\r\n        const path =`${this.resourceUrl}/iras_consent/${nric}`;\r\n        return this.ns2Http.get(path);\r\n    }\r\n\r\n    retrieveIrasConsentHistory(nric: string, options: any): Observable<any>{\r\n        const path =`${this.resourceUrl}/iras_consent_history/${nric}`;\r\n        return this.ns2Http.get(path, options);\r\n    }\r\n\r\n    retrieveInsurWD(options: any) : Observable<any>{\r\n        const path =`${this.resourceUrl}/retrieve_insurance_working_data`;\r\n        return this.ns2Http.get(path, options);\r\n    }\r\n\r\n    retrieveSolePropPartnerWD(options: any) : Observable<any>{\r\n        const path =`${this.resourceUrl}/retrieve_partner_sole_working_data`;\r\n        return this.ns2Http.get(path, options);\r\n    }\r\n\r\n\r\n    retrieveWDDropdown(options: any) : Observable<any>{\r\n        const path =`${this.resourceUrl}/retrieve_working_data_dropdown`;\r\n        return this.ns2Http.get(path, options);\r\n    }\r\n\r\n    retrievePropertyAgentWD(options: any) : Observable<any>{\r\n        const path =`${this.resourceUrl}/retrieve_prop_agent_working_data`;\r\n        return this.ns2Http.get(path, options);\r\n    }\r\n\r\n    retrieveRefreshOtherInsurClaims(options: any) : Observable<any>{\r\n        const path =`${this.resourceUrl}/retrieve_refresh_other_insur_claims`;\r\n        return this.ns2Http.get(path, options);\r\n    }\r\n\r\n    retrieveRefreshOtherSPPClaims(options: any) : Observable<any>{\r\n        const path =`${this.resourceUrl}/retrieve_refresh_other_spp_claims`;\r\n        return this.ns2Http.get(path, options);\r\n    }\r\n\r\n    setData(data:any){\r\n        this.data = data;\r\n    }\r\n\r\n    getData(paramName: string):any{\r\n        if(this.data){\r\n            return this.data[paramName];\r\n        }else return null;\r\n    }\r\n\r\n    retrieveOthersLegacyWD(params: HttpParams): Observable<Ns2Response<OthersLegacySubData[]>> {\r\n      const path =`${this.resourceUrl}/retrieve_others_legacy_working_data`;\r\n      return this.http.get<Ns2Response<OthersLegacySubData[]>>(path,{params});\r\n    }\r\n\r\n    retrievePhdDeliveryWD(params: HttpParams): Observable<Ns2Response<PhdDeliveryWD>> {\r\n      const path =`${this.resourceUrl}/retrieve_phd_delivery_working_data`;\r\n      return this.http.get<Ns2Response<PhdDeliveryWD>>(path,{params});\r\n    }\r\n\r\n    retrieveRefreshPhdDeliveryWD(params: HttpParams): Observable<Ns2Response<RefreshPhdDeliveryInfo[]>> {\r\n        const path =`${this.resourceUrl}/retrieve_refresh_phd_delivery_wd`;\r\n        return this.http.get<Ns2Response<RefreshPhdDeliveryInfo[]>>(path,{params});\r\n    }\r\n\r\n    retrieveNewPopulatedPhdDeliveryWD(params: HttpParams): Observable<Ns2Response<PhdDeliveryWD>> {\r\n        const path =`${this.resourceUrl}/retrieve_new_populated_phd_delivery_wd`;\r\n        return this.http.get<Ns2Response<PhdDeliveryWD>>(path,{params});\r\n    }\r\n\r\n    saveSEClaimVerification(request: any, options: any): Observable<any>{\r\n        const path = this.resourceUrl + '/save_seclaim_verification';\r\n        console.log(\"request\", request);\r\n        return this.ns2Http.post(path, JSON.stringify(request), options);\r\n    }\r\n\r\n    retrieveTaxiWD(params: HttpParams): Observable<Ns2Response<TaxiWD>> {\r\n        const path =`${this.resourceUrl}/retrieve_taxi_working_data`;\r\n        return this.http.get<Ns2Response<TaxiWD>>(path,{params});\r\n    }\r\n\r\n    retrieveClaimItems(options: any) : Observable<any>{\r\n        const path = this.resourceUrl + '/retrieve_claim_items';\r\n        return this.ns2Http.get(path, options);\r\n    }\r\n\r\n    retrieveReferenceClaimNip(options: any) : Observable<any>{\r\n        const path = this.resourceUrl + '/retrieve_reference_claim';\r\n        return this.ns2Http.get(path, options);\r\n    }\r\n\r\n    retrieveReplacementWD(params: HttpParams): Observable<Ns2Response<ReplacementWD>> {\r\n      const path =`${this.resourceUrl}/retrieve_replacement_working_data`;\r\n      return this.http.get<Ns2Response<ReplacementWD>>(path,{params});\r\n    }\r\n\r\n    retrieveOthersWD(params: HttpParams): Observable<Ns2Response<OthersWD>> {\r\n      const path =`${this.resourceUrl}/retrieve_others_working_data`;\r\n      return this.http.get<Ns2Response<OthersWD>>(path,{params});\r\n    }\r\n\r\n    retrieveRefreshOthersWD(params: HttpParams): Observable<Ns2Response<RefreshOthersInfo[]>> {\r\n      const path =`${this.resourceUrl}/retrieve_refresh_others_wd`;\r\n      return this.http.get<Ns2Response<RefreshOthersInfo[]>>(path,{params});\r\n    }\r\n\r\n    retrieveSerbDateList(options: any) : Observable<any>{\r\n        const path =`${this.resourceUrl}/retrieve_serb_date_list`;\r\n        return this.ns2Http.get(path, options);\r\n    }\r\n\r\n    retrieveSerbRationaleAmendment(options: any) : Observable<any>{\r\n        const path =`${this.resourceUrl}/retrieve_serb_rationale_amendment`;\r\n        return this.ns2Http.get(path, options);\r\n    }\r\n\r\n    retrieveSerbApprovalSection(options: any) : Observable<any>{\r\n        const path =`${this.resourceUrl}/retrieve_serb_approval`;\r\n        return this.ns2Http.get(path, options);\r\n    }\r\n\r\n    copySerbApprovalFromCaseId(options: any) : Observable<any>{\r\n        const path =`${this.resourceUrl}/copy_serb_approval_from_caseid`;\r\n        return this.ns2Http.get(path, options);\r\n    }\r\n\r\n    retrieveLatestOwners(params: HttpParams): Observable<Ns2Response<LatestClaimOwner>> {\r\n      const path =`${this.resourceUrl}/retrieve_latest_owner`;\r\n      return this.http.get<Ns2Response<LatestClaimOwner>>(path,{params});\r\n    }\r\n\r\n  retrieveInitialSEClaim(params: HttpParams): Observable<Ns2Response<InitialSEClaim>> {\r\n    const path =`${this.resourceUrl}/retrieve_initial_se_claim`;\r\n    return this.http.get<Ns2Response<InitialSEClaim>>(path,{params});\r\n  }\r\n\r\n  getSerbReportDetails(options: any) : Observable<any>{\r\n    const path =`${this.resourceUrl}/retrieve_serb_report_pop_up`;\r\n    return this.ns2Http.get(path, options);\r\n}\r\n\r\n  retrieveEClaimAdditionalInfo(params: HttpParams): Observable<Ns2Response<SeEclaimAdditionalInfo>> {\r\n    const path =`${this.resourceUrl}/retrieve_eclaim_additional_info`;\r\n    return this.http.get<Ns2Response<SeEclaimAdditionalInfo>>(path,{params});\r\n  }\r\n\r\n  retrieveOverlappingSEClaim(options: any):Observable<any>{\r\n    const path =`${this.resourceUrl}/retrieve_overlapping_se_claim_by_group`;\r\n    return this.ns2Http.get(path, options);\r\n  }\r\n\r\n  retrieveEditableSEItemStatus(options: any):Observable<any>{\r\n    const path =`${this.resourceUrl}/retrieve_editable_se_item_Status`;\r\n    return this.ns2Http.get(path, options);\r\n  }\r\n  \r\n  retrieveLastPendCertClaim(options: any):Observable<any>{\r\n    const path =`${this.resourceUrl}/retrieve_last_pend_cert_claim`;\r\n    return this.ns2Http.get(path, options);\r\n  }\r\n\r\n  retrieveConflictApprovedSEClaim(options: any):Observable<any>{\r\n    const path =`${this.resourceUrl}/retrieve_conflict_approved_se_claim`;\r\n    return this.ns2Http.get(path, options);\r\n  }\r\n\r\n\r\n\r\n}\r\n\r\n\r\n\r\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}