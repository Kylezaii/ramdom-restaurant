{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MetricsComponent = void 0;\nconst tslib_1 = require(\"tslib\");\nconst rxjs_1 = require(\"rxjs\");\nconst i0 = tslib_1.__importStar(require(\"@angular/core\"));\nconst i1 = tslib_1.__importStar(require(\"./metrics.service\"));\nconst i2 = tslib_1.__importStar(require(\"@angular/common\"));\nconst i3 = tslib_1.__importStar(require(\"@fortawesome/angular-fontawesome\"));\nconst i4 = tslib_1.__importStar(require(\"../../shared/language/translate.directive\"));\nconst i5 = tslib_1.__importStar(require(\"./blocks/jvm-memory/jvm-memory.component\"));\nconst i6 = tslib_1.__importStar(require(\"./blocks/jvm-threads/jvm-threads.component\"));\nconst i7 = tslib_1.__importStar(require(\"./blocks/metrics-cache/metrics-cache.component\"));\nconst i8 = tslib_1.__importStar(require(\"./blocks/metrics-datasource/metrics-datasource.component\"));\nconst i9 = tslib_1.__importStar(require(\"./blocks/metrics-endpoints-requests/metrics-endpoints-requests.component\"));\nconst i10 = tslib_1.__importStar(require(\"./blocks/metrics-garbagecollector/metrics-garbagecollector.component\"));\nconst i11 = tslib_1.__importStar(require(\"./blocks/metrics-request/metrics-request.component\"));\nconst i12 = tslib_1.__importStar(require(\"./blocks/metrics-system/metrics-system.component\"));\nfunction MetricsComponent_div_19_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 12);\n    i0.ɵɵtext(1, \"\\n   \");\n    i0.ɵɵelementStart(2, \"ic-jvm-memory\", 13);\n    i0.ɵɵtext(3, \"\\n   \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(4, \"\\n\\n   \");\n    i0.ɵɵelement(5, \"ic-jvm-threads\", 14);\n    i0.ɵɵtext(6, \"\\n\\n   \");\n    i0.ɵɵelement(7, \"ic-metrics-system\", 15);\n    i0.ɵɵtext(8, \"\\n   \");\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"updating\", ctx_r0.updatingMetrics)(\"jvmMemoryCommitted\", ctx_r0.jvmMemoryCommitted)(\"jvmMemoryMax\", ctx_r0.jvmMemoryMax)(\"jvmMemoryUsed\", ctx_r0.jvmMemoryUsed);\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"threads\", ctx_r0.threads);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"updating\", ctx_r0.updatingMetrics)(\"systemCpuCount\", ctx_r0.systemCpuCount)(\"systemCpuUsage\", ctx_r0.systemCpuUsage)(\"processCpuUsage\", ctx_r0.processCpuUsage)(\"processStartTime\", ctx_r0.processStartTime)(\"processUpTime\", ctx_r0.processUpTime);\n  }\n}\nfunction MetricsComponent_ic_metrics_garbagecollector_21_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"ic-metrics-garbagecollector\", 16);\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"updating\", ctx_r1.updatingMetrics)(\"garbageCollectorMetrics\", ctx_r1.metrics.garbageCollector);\n  }\n}\nfunction MetricsComponent_div_23_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 17);\n    i0.ɵɵtext(1, \"Updating...\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction MetricsComponent_ic_metrics_request_25_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"ic-metrics-request\", 18);\n  }\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"updating\", ctx_r3.updatingMetrics)(\"requestMetrics\", ctx_r3.metrics[\"http.server.requests\"]);\n  }\n}\nfunction MetricsComponent_ic_metrics_endpoints_requests_27_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"ic-metrics-endpoints-requests\", 19);\n  }\n  if (rf & 2) {\n    const ctx_r4 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"updating\", ctx_r4.updatingMetrics)(\"endpointsRequestsMetrics\", ctx_r4.metrics.services);\n  }\n}\nfunction MetricsComponent_ic_metrics_cache_29_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"ic-metrics-cache\", 20);\n  }\n  if (rf & 2) {\n    const ctx_r5 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"updating\", ctx_r5.updatingMetrics)(\"cacheMetrics\", ctx_r5.metrics.cache);\n  }\n}\nfunction MetricsComponent_ic_metrics_datasource_31_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"ic-metrics-datasource\", 21);\n  }\n  if (rf & 2) {\n    const ctx_r6 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"updating\", ctx_r6.updatingMetrics)(\"datasourceMetrics\", ctx_r6.metrics.databases);\n  }\n}\nclass MetricsComponent {\n  constructor(metricsService, changeDetector) {\n    this.metricsService = metricsService;\n    this.changeDetector = changeDetector;\n    this.updatingMetrics = true;\n  }\n  ngOnInit() {\n    this.refresh();\n  }\n  refresh() {\n    this.updatingMetrics = true;\n    (0, rxjs_1.combineLatest)([this.metricsService.getMetrics(), this.metricsService.getSystemCpuUsage(), this.metricsService.getSystemCpuCount(), this.metricsService.getJvmMemoryCommitted(), this.metricsService.getJvmMemoryMax(), this.metricsService.getJvmMemoryUsed(), this.metricsService.threadDump()]).subscribe(([metrics, systemCpuUsage, systemCpuCount, jvmMemoryCommitted, jvmMemoryMax, jvmMemoryUsed, threadDump]) => {\n      this.metrics = metrics;\n      this.systemCpuUsage = systemCpuUsage;\n      this.systemCpuCount = systemCpuCount;\n      this.jvmMemoryCommitted = jvmMemoryCommitted;\n      this.jvmMemoryMax = jvmMemoryMax;\n      this.jvmMemoryUsed = jvmMemoryUsed;\n      this.threads = threadDump.threads;\n      this.updatingMetrics = false;\n      this.changeDetector.markForCheck();\n    });\n    (0, rxjs_1.combineLatest)([this.metricsService.getProcessCpuUsage(), this.metricsService.getProcessUpTime(), this.metricsService.getProcessStartTime()]).subscribe(([processCpuUsage, processUpTime, processStartTime]) => {\n      this.processCpuUsage = processCpuUsage;\n      this.processUpTime = processUpTime;\n      this.processStartTime = processStartTime;\n      this.updatingMetrics = false;\n      this.changeDetector.markForCheck();\n    });\n  }\n  metricsKeyExists(key) {\n    return Boolean(this.metrics?.[key]);\n  }\n  metricsKeyExistsAndObjectNotEmpty(key) {\n    return Boolean(this.metrics?.[key] && JSON.stringify(this.metrics[key]) !== '{}');\n  }\n}\nexports.MetricsComponent = MetricsComponent;\nMetricsComponent.ɵfac = function MetricsComponent_Factory(t) {\n  return new (t || MetricsComponent)(i0.ɵɵdirectiveInject(i1.MetricsService), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef));\n};\nMetricsComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: MetricsComponent,\n  selectors: [[\"ic-metrics\"]],\n  decls: 34,\n  vars: 7,\n  consts: [[\"id\", \"metrics-page-heading\", \"icTranslate\", \"metrics.title\", \"data-cy\", \"metricsPageHeading\"], [1, \"btn\", \"btn-primary\", \"float-end\", 3, \"click\"], [\"icon\", \"sync\"], [\"icTranslate\", \"metrics.refresh.button\"], [\"icTranslate\", \"metrics.jvm.title\"], [\"class\", \"row\", 4, \"ngIf\"], [3, \"updating\", \"garbageCollectorMetrics\", 4, \"ngIf\"], [\"class\", \"well well-lg\", \"icTranslate\", \"metrics.updating\", 4, \"ngIf\"], [3, \"updating\", \"requestMetrics\", 4, \"ngIf\"], [3, \"updating\", \"endpointsRequestsMetrics\", 4, \"ngIf\"], [3, \"updating\", \"cacheMetrics\", 4, \"ngIf\"], [3, \"updating\", \"datasourceMetrics\", 4, \"ngIf\"], [1, \"row\"], [1, \"col-md-4\", 3, \"updating\", \"jvmMemoryCommitted\", \"jvmMemoryMax\", \"jvmMemoryUsed\"], [1, \"col-md-4\", 3, \"threads\"], [1, \"col-md-4\", 3, \"updating\", \"systemCpuCount\", \"systemCpuUsage\", \"processCpuUsage\", \"processStartTime\", \"processUpTime\"], [3, \"updating\", \"garbageCollectorMetrics\"], [\"icTranslate\", \"metrics.updating\", 1, \"well\", \"well-lg\"], [3, \"updating\", \"requestMetrics\"], [3, \"updating\", \"endpointsRequestsMetrics\"], [3, \"updating\", \"cacheMetrics\"], [3, \"updating\", \"datasourceMetrics\"]],\n  template: function MetricsComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\");\n      i0.ɵɵtext(1, \"\\n  \");\n      i0.ɵɵelementStart(2, \"h2\");\n      i0.ɵɵtext(3, \"\\n    \");\n      i0.ɵɵelementStart(4, \"span\", 0);\n      i0.ɵɵtext(5, \"Application Metrics\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(6, \"\\n\\n    \");\n      i0.ɵɵelementStart(7, \"button\", 1);\n      i0.ɵɵlistener(\"click\", function MetricsComponent_Template_button_click_7_listener() {\n        return ctx.refresh();\n      });\n      i0.ɵɵtext(8, \"\\n      \");\n      i0.ɵɵelement(9, \"fa-icon\", 2);\n      i0.ɵɵtext(10, \" \");\n      i0.ɵɵelementStart(11, \"span\", 3);\n      i0.ɵɵtext(12, \"Refresh\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(13, \"\\n    \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(14, \"\\n  \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(15, \"\\n\\n  \");\n      i0.ɵɵelementStart(16, \"h3\", 4);\n      i0.ɵɵtext(17, \"JVM Metrics\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(18, \"\\n   \");\n      i0.ɵɵtemplate(19, MetricsComponent_div_19_Template, 9, 11, \"div\", 5);\n      i0.ɵɵtext(20, \"\\n\\n\\n  \");\n      i0.ɵɵtemplate(21, MetricsComponent_ic_metrics_garbagecollector_21_Template, 1, 2, \"ic-metrics-garbagecollector\", 6);\n      i0.ɵɵtext(22, \"\\n\\n  \");\n      i0.ɵɵtemplate(23, MetricsComponent_div_23_Template, 2, 0, \"div\", 7);\n      i0.ɵɵtext(24, \"\\n\\n  \");\n      i0.ɵɵtemplate(25, MetricsComponent_ic_metrics_request_25_Template, 1, 2, \"ic-metrics-request\", 8);\n      i0.ɵɵtext(26, \"\\n\\n  \");\n      i0.ɵɵtemplate(27, MetricsComponent_ic_metrics_endpoints_requests_27_Template, 1, 2, \"ic-metrics-endpoints-requests\", 9);\n      i0.ɵɵtext(28, \"\\n\\n  \");\n      i0.ɵɵtemplate(29, MetricsComponent_ic_metrics_cache_29_Template, 1, 2, \"ic-metrics-cache\", 10);\n      i0.ɵɵtext(30, \"\\n\\n  \");\n      i0.ɵɵtemplate(31, MetricsComponent_ic_metrics_datasource_31_Template, 1, 2, \"ic-metrics-datasource\", 11);\n      i0.ɵɵtext(32, \"\\n\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(33, \"\\n\");\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(19);\n      i0.ɵɵproperty(\"ngIf\", ctx.jvmMemoryUsed && ctx.jvmMemoryMax && ctx.jvmMemoryCommitted && !ctx.updatingMetrics);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngIf\", ctx.metrics && ctx.metricsKeyExists(\"garbageCollector\"));\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngIf\", ctx.updatingMetrics);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngIf\", ctx.metrics && ctx.metricsKeyExists(\"http.server.requests\"));\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngIf\", ctx.metrics && ctx.metricsKeyExists(\"services\"));\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngIf\", ctx.metrics && ctx.metricsKeyExists(\"cache\"));\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngIf\", ctx.metrics && ctx.metricsKeyExistsAndObjectNotEmpty(\"databases\"));\n    }\n  },\n  dependencies: [i2.NgIf, i3.FaIconComponent, i4.TranslateDirective, i5.JvmMemoryComponent, i6.JvmThreadsComponent, i7.MetricsCacheComponent, i8.MetricsDatasourceComponent, i9.MetricsEndpointsRequestsComponent, i10.MetricsGarbageCollectorComponent, i11.MetricsRequestComponent, i12.MetricsSystemComponent],\n  encapsulation: 2,\n  changeDetection: 0\n});","map":{"version":3,"mappings":"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","names":["i0","MetricsComponent","constructor","metricsService","changeDetector","ngOnInit","refresh","updatingMetrics","getMetrics","getSystemCpuUsage","getSystemCpuCount","getJvmMemoryCommitted","getJvmMemoryMax","getJvmMemoryUsed","threadDump","subscribe","metrics","systemCpuUsage","systemCpuCount","jvmMemoryCommitted","jvmMemoryMax","jvmMemoryUsed","threads","markForCheck","getProcessCpuUsage","getProcessUpTime","getProcessStartTime","processCpuUsage","processUpTime","processStartTime","metricsKeyExists","key","Boolean","metricsKeyExistsAndObjectNotEmpty","JSON","stringify","exports","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["C:\\Users\\D1347074\\Desktop\\projects 2\\nspayiiapp\\src\\main\\webapp\\app\\admin\\metrics\\metrics.component.ts","C:\\Users\\D1347074\\Desktop\\projects 2\\nspayiiapp\\src\\main\\webapp\\app\\admin\\metrics\\metrics.component.html"],"sourcesContent":["import { Component, OnInit, ChangeDetectionStrategy, ChangeDetectorRef } from '@angular/core';\r\nimport { combineLatest } from 'rxjs';\r\n\r\nimport { MetricsService } from './metrics.service';\r\nimport {EnvironmentInfo, Metrics, Thread} from './metrics.model';\r\n\r\n@Component({\r\n  selector: 'ic-metrics',\r\n  templateUrl: './metrics.component.html',\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class MetricsComponent implements OnInit {\r\n\r\n  jvmMemoryCommitted?: EnvironmentInfo;\r\n  jvmMemoryMax?: EnvironmentInfo;\r\n  jvmMemoryUsed?: EnvironmentInfo;\r\n\r\n  systemCpuUsage?: EnvironmentInfo;\r\n  systemCpuCount?: EnvironmentInfo;\r\n  processCpuUsage?: EnvironmentInfo;\r\n  processUpTime?: EnvironmentInfo;\r\n  processStartTime?: EnvironmentInfo;\r\n\r\n  metrics?: any;\r\n  threads?: Thread[];\r\n  updatingMetrics = true;\r\n\r\n  constructor(private metricsService: MetricsService, private changeDetector: ChangeDetectorRef) {}\r\n\r\n  ngOnInit(): void {\r\n    this.refresh();\r\n   }\r\n\r\n  refresh(): void {\r\n    this.updatingMetrics = true;\r\n    combineLatest([\r\n    this.metricsService.getMetrics(),\r\n    this.metricsService.getSystemCpuUsage(),\r\n    this.metricsService.getSystemCpuCount(),\r\n\r\n\r\n    this.metricsService.getJvmMemoryCommitted(),\r\n    this.metricsService.getJvmMemoryMax(),\r\n    this.metricsService.getJvmMemoryUsed(),\r\n\r\n    this.metricsService.threadDump()])\r\n      .subscribe(([\r\n                   metrics,\r\n                   systemCpuUsage,\r\n                   systemCpuCount,\r\n\r\n                   jvmMemoryCommitted,\r\n                   jvmMemoryMax,\r\n                   jvmMemoryUsed,\r\n                   threadDump]) => {\r\n      this.metrics = metrics;\r\n      this.systemCpuUsage = systemCpuUsage;\r\n      this.systemCpuCount = systemCpuCount;\r\n\r\n      this.jvmMemoryCommitted = jvmMemoryCommitted;\r\n      this.jvmMemoryMax = jvmMemoryMax;\r\n      this.jvmMemoryUsed = jvmMemoryUsed;\r\n\r\n      this.threads = threadDump.threads;\r\n\r\n      this.updatingMetrics = false;\r\n      this.changeDetector.markForCheck();\r\n      });\r\n\r\n   combineLatest([\r\n     this.metricsService.getProcessCpuUsage(),\r\n     this.metricsService.getProcessUpTime(),\r\n     this.metricsService.getProcessStartTime(),\r\n   ]).subscribe(([\r\n                     processCpuUsage,\r\n                     processUpTime,\r\n                     processStartTime]) =>{\r\n     this.processCpuUsage = processCpuUsage;\r\n     this.processUpTime = processUpTime;\r\n     this.processStartTime = processStartTime;\r\n     this.updatingMetrics = false;\r\n     this.changeDetector.markForCheck();\r\n     }\r\n     )\r\n   }\r\n\r\n  metricsKeyExists(key: keyof Metrics): boolean {\r\n    return Boolean(this.metrics?.[key]);\r\n  }\r\n\r\n  metricsKeyExistsAndObjectNotEmpty(key: keyof Metrics): boolean {\r\n    return Boolean(this.metrics?.[key] && JSON.stringify(this.metrics[key]) !== '{}');\r\n  }\r\n}\r\n","<div>\r\n  <h2>\r\n    <span id=\"metrics-page-heading\" icTranslate=\"metrics.title\" data-cy=\"metricsPageHeading\">Application Metrics</span>\r\n\r\n    <button class=\"btn btn-primary float-end\" (click)=\"refresh()\">\r\n      <fa-icon icon=\"sync\"></fa-icon> <span icTranslate=\"metrics.refresh.button\">Refresh</span>\r\n    </button>\r\n  </h2>\r\n\r\n  <h3 icTranslate=\"metrics.jvm.title\">JVM Metrics</h3>\r\n   <div class=\"row\" *ngIf=\" jvmMemoryUsed && jvmMemoryMax && jvmMemoryCommitted  && !updatingMetrics\">\r\n   <ic-jvm-memory class=\"col-md-4\" [updating]=\"updatingMetrics\"\r\n                    [jvmMemoryCommitted]=\"jvmMemoryCommitted\"\r\n                    [jvmMemoryMax]=\"jvmMemoryMax\"\r\n                    [jvmMemoryUsed]=\"jvmMemoryUsed\">\r\n   </ic-jvm-memory>\r\n\r\n   <ic-jvm-threads class=\"col-md-4\" [threads]=\"threads\"></ic-jvm-threads>\r\n\r\n   <ic-metrics-system class=\"col-md-4\" [updating]=\"updatingMetrics\"\r\n                        [systemCpuCount]=\"systemCpuCount\"\r\n                        [systemCpuUsage]=\"systemCpuUsage\"\r\n                        [processCpuUsage]=\"processCpuUsage\"\r\n                        [processStartTime]=\"processStartTime\"\r\n                        [processUpTime]=\"processUpTime\"></ic-metrics-system>\r\n   </div>\r\n\r\n\r\n  <ic-metrics-garbagecollector\r\n    *ngIf=\"metrics && metricsKeyExists('garbageCollector')\"\r\n    [updating]=\"updatingMetrics\"\r\n    [garbageCollectorMetrics]=\"metrics.garbageCollector\"\r\n  ></ic-metrics-garbagecollector>\r\n\r\n  <div class=\"well well-lg\" *ngIf=\"updatingMetrics\" icTranslate=\"metrics.updating\">Updating...</div>\r\n\r\n  <ic-metrics-request\r\n    *ngIf=\"metrics && metricsKeyExists('http.server.requests')\"\r\n    [updating]=\"updatingMetrics\"\r\n    [requestMetrics]=\"metrics['http.server.requests']\"\r\n  ></ic-metrics-request>\r\n\r\n  <ic-metrics-endpoints-requests\r\n    *ngIf=\"metrics && metricsKeyExists('services')\"\r\n    [updating]=\"updatingMetrics\"\r\n    [endpointsRequestsMetrics]=\"metrics.services\"\r\n  ></ic-metrics-endpoints-requests>\r\n\r\n  <ic-metrics-cache\r\n    *ngIf=\"metrics && metricsKeyExists('cache')\"\r\n    [updating]=\"updatingMetrics\"\r\n    [cacheMetrics]=\"metrics.cache\"\r\n  ></ic-metrics-cache>\r\n\r\n  <ic-metrics-datasource\r\n    *ngIf=\"metrics && metricsKeyExistsAndObjectNotEmpty('databases')\"\r\n    [updating]=\"updatingMetrics\"\r\n    [datasourceMetrics]=\"metrics.databases\"\r\n  ></ic-metrics-datasource>\r\n</div>\r\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}