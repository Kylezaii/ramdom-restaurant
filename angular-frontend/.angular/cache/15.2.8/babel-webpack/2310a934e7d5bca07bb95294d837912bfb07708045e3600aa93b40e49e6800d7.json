{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ParseLinks = void 0;\nconst tslib_1 = require(\"tslib\");\nconst i0 = tslib_1.__importStar(require(\"@angular/core\"));\n/**\r\n * An utility service for link parsing.\r\n */\nclass ParseLinks {\n  /**\r\n   * Method to parse the links\r\n   */\n  parse(header) {\n    if (header.length === 0) {\n      throw new Error('input must not be of zero length');\n    }\n    // Split parts by comma\n    const parts = header.split(',');\n    const links = {};\n    // Parse each part into a named link\n    parts.forEach(p => {\n      const section = p.split(';');\n      if (section.length !== 2) {\n        throw new Error('section could not be split on \";\"');\n      }\n      const url = section[0].replace(/<(.*)>/, '$1').trim();\n      const queryString = {};\n      url.replace(new RegExp('([^?=&]+)(=([^&]*))?', 'g'), ($0, $1, $2, $3) => {\n        if ($1 !== undefined) {\n          queryString[$1] = $3;\n        }\n        return $3 ?? '';\n      });\n      if (queryString.page !== undefined) {\n        const name = section[1].replace(/rel=\"(.*)\"/, '$1').trim();\n        links[name] = parseInt(queryString.page, 10);\n      }\n    });\n    return links;\n  }\n}\nexports.ParseLinks = ParseLinks;\nParseLinks.ɵfac = function ParseLinks_Factory(t) {\n  return new (t || ParseLinks)();\n};\nParseLinks.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ParseLinks,\n  factory: ParseLinks.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";;;;;;;;AAEA;;;AAGA,MAGaA,UAAU;EACrB;;;EAGAC,KAAK,CAACC,MAAc;IAClB,IAAIA,MAAM,CAACC,MAAM,KAAK,CAAC,EAAE;MACvB,MAAM,IAAIC,KAAK,CAAC,kCAAkC,CAAC;;IAGrD;IACA,MAAMC,KAAK,GAAaH,MAAM,CAACI,KAAK,CAAC,GAAG,CAAC;IACzC,MAAMC,KAAK,GAA8B,EAAE;IAE3C;IACAF,KAAK,CAACG,OAAO,CAACC,CAAC,IAAG;MAChB,MAAMC,OAAO,GAAaD,CAAC,CAACH,KAAK,CAAC,GAAG,CAAC;MAEtC,IAAII,OAAO,CAACP,MAAM,KAAK,CAAC,EAAE;QACxB,MAAM,IAAIC,KAAK,CAAC,mCAAmC,CAAC;;MAGtD,MAAMO,GAAG,GAAWD,OAAO,CAAC,CAAC,CAAC,CAACE,OAAO,CAAC,QAAQ,EAAE,IAAI,CAAC,CAACC,IAAI,EAAE;MAC7D,MAAMC,WAAW,GAA0C,EAAE;MAE7DH,GAAG,CAACC,OAAO,CACT,IAAIG,MAAM,CAAC,sBAAsB,EAAE,GAAG,CAAC,EACvC,CAACC,EAAU,EAAEC,EAAsB,EAAEC,EAAsB,EAAEC,EAAsB,KAAI;QACrF,IAAIF,EAAE,KAAKG,SAAS,EAAE;UACpBN,WAAW,CAACG,EAAE,CAAC,GAAGE,EAAE;;QAEtB,OAAOA,EAAE,IAAI,EAAE;MACjB,CAAC,CACF;MAED,IAAIL,WAAW,CAACO,IAAI,KAAKD,SAAS,EAAE;QAClC,MAAME,IAAI,GAAWZ,OAAO,CAAC,CAAC,CAAC,CAACE,OAAO,CAAC,YAAY,EAAE,IAAI,CAAC,CAACC,IAAI,EAAE;QAClEN,KAAK,CAACe,IAAI,CAAC,GAAGC,QAAQ,CAACT,WAAW,CAACO,IAAI,EAAE,EAAE,CAAC;;IAEhD,CAAC,CAAC;IACF,OAAOd,KAAK;EACd;;AA3CFiB;;mBAGaxB,UAAU;AAAA;;SAAVA,UAAU;EAAAyB,SAAVzB,UAAU;EAAA0B,YAFT;AAAM","names":["ParseLinks","parse","header","length","Error","parts","split","links","forEach","p","section","url","replace","trim","queryString","RegExp","$0","$1","$2","$3","undefined","page","name","parseInt","exports","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\D1347074\\Desktop\\projects 2\\nspayiiapp\\src\\main\\webapp\\app\\core\\util\\parse-links.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\n\r\n/**\r\n * An utility service for link parsing.\r\n */\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class ParseLinks {\r\n  /**\r\n   * Method to parse the links\r\n   */\r\n  parse(header: string): { [key: string]: number } {\r\n    if (header.length === 0) {\r\n      throw new Error('input must not be of zero length');\r\n    }\r\n\r\n    // Split parts by comma\r\n    const parts: string[] = header.split(',');\r\n    const links: { [key: string]: number } = {};\r\n\r\n    // Parse each part into a named link\r\n    parts.forEach(p => {\r\n      const section: string[] = p.split(';');\r\n\r\n      if (section.length !== 2) {\r\n        throw new Error('section could not be split on \";\"');\r\n      }\r\n\r\n      const url: string = section[0].replace(/<(.*)>/, '$1').trim();\r\n      const queryString: { [key: string]: string | undefined } = {};\r\n\r\n      url.replace(\r\n        new RegExp('([^?=&]+)(=([^&]*))?', 'g'),\r\n        ($0: string, $1: string | undefined, $2: string | undefined, $3: string | undefined) => {\r\n          if ($1 !== undefined) {\r\n            queryString[$1] = $3;\r\n          }\r\n          return $3 ?? '';\r\n        }\r\n      );\r\n\r\n      if (queryString.page !== undefined) {\r\n        const name: string = section[1].replace(/rel=\"(.*)\"/, '$1').trim();\r\n        links[name] = parseInt(queryString.page, 10);\r\n      }\r\n    });\r\n    return links;\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}