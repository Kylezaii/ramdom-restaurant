{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AssignClaimsAutoComponent = void 0;\nconst tslib_1 = require(\"tslib\");\nconst forms_1 = require(\"@angular/forms\");\nconst http_1 = require(\"@angular/common/http\");\nconst i0 = tslib_1.__importStar(require(\"@angular/core\"));\nconst i1 = tslib_1.__importStar(require(\"primeng/dynamicdialog\"));\nconst i2 = tslib_1.__importStar(require(\"app/shared/confirm/nsp-confirm.service\"));\nconst i3 = tslib_1.__importStar(require(\"@angular/forms\"));\nconst i4 = tslib_1.__importStar(require(\"app/workload/service/workload-inbox.service\"));\nconst i5 = tslib_1.__importStar(require(\"app/core/util/date-utils.service\"));\nconst i6 = tslib_1.__importStar(require(\"@angular/common\"));\nconst i7 = tslib_1.__importStar(require(\"primeng/api\"));\nconst i8 = tslib_1.__importStar(require(\"primeng/button\"));\nconst i9 = tslib_1.__importStar(require(\"primeng/table\"));\nconst i10 = tslib_1.__importStar(require(\"primeng/inputtext\"));\nconst i11 = tslib_1.__importStar(require(\"primeng/confirmpopup\"));\nconst i12 = tslib_1.__importStar(require(\"primeng/radiobutton\"));\nconst _c0 = [\"dataTable\"];\nfunction AssignClaimsAutoComponent_div_4_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r8 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 18);\n    i0.ɵɵtext(1, \"\\n        \");\n    i0.ɵɵelementStart(2, \"p-radioButton\", 19);\n    i0.ɵɵlistener(\"onClick\", function AssignClaimsAutoComponent_div_4_Template_p_radioButton_onClick_2_listener() {\n      i0.ɵɵrestoreView(_r8);\n      const ctx_r7 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r7.resetFilter());\n    })(\"ngModelChange\", function AssignClaimsAutoComponent_div_4_Template_p_radioButton_ngModelChange_2_listener($event) {\n      i0.ɵɵrestoreView(_r8);\n      const ctx_r9 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r9.selectedCategory = $event);\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(3, \"\\n        \");\n    i0.ɵɵelementStart(4, \"label\", 20);\n    i0.ɵɵtext(5);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(6, \"\\n    \");\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const category_r6 = ctx.$implicit;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"inputId\", category_r6.key)(\"value\", category_r6)(\"ngModel\", ctx_r0.selectedCategory);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"for\", category_r6.key);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\"\", category_r6.name, \"\\u00A0\\u00A0\");\n  }\n}\nfunction AssignClaimsAutoComponent_ng_template_23_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtext(0, \"\\n                            \");\n    i0.ɵɵelementStart(1, \"tr\");\n    i0.ɵɵtext(2, \"\\n                                \");\n    i0.ɵɵelement(3, \"th\", 21);\n    i0.ɵɵtext(4, \"\\n                                \");\n    i0.ɵɵelementStart(5, \"th\", 22);\n    i0.ɵɵtext(6, \"Verifier\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(7, \"\\n                                \");\n    i0.ɵɵelementStart(8, \"th\", 23);\n    i0.ɵɵtext(9, \"Outstanding Claims\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(10, \"\\n                                \");\n    i0.ɵɵelementStart(11, \"th\", 23);\n    i0.ɵɵtext(12, \"Availability\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(13, \"\\n                                \");\n    i0.ɵɵelementStart(14, \"th\", 24);\n    i0.ɵɵtext(15, \"No. of Claim To Assign\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(16, \"\\n                            \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(17, \"\\n                        \");\n  }\n}\nconst _c1 = function () {\n  return {\n    \"width\": \"100%\"\n  };\n};\nfunction AssignClaimsAutoComponent_ng_template_25_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r15 = i0.ɵɵgetCurrentView();\n    i0.ɵɵtext(0, \"\\n                            \");\n    i0.ɵɵelementStart(1, \"tr\", 25);\n    i0.ɵɵtext(2, \"\\n                                \");\n    i0.ɵɵelementStart(3, \"td\");\n    i0.ɵɵtext(4, \"\\n                                    \");\n    i0.ɵɵelement(5, \"span\", 26);\n    i0.ɵɵtext(6, \"\\n                                \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(7, \"\\n                                \");\n    i0.ɵɵelementStart(8, \"td\");\n    i0.ɵɵtext(9);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(10, \"\\n                                \");\n    i0.ɵɵelementStart(11, \"td\");\n    i0.ɵɵtext(12);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(13, \"\\n                                \");\n    i0.ɵɵelementStart(14, \"td\");\n    i0.ɵɵtext(15);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(16, \"\\n                                \");\n    i0.ɵɵelementStart(17, \"td\");\n    i0.ɵɵtext(18, \"\\n                                    \");\n    i0.ɵɵelementStart(19, \"input\", 27);\n    i0.ɵɵlistener(\"blur\", function AssignClaimsAutoComponent_ng_template_25_Template_input_blur_19_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r15);\n      const rowIndex_r12 = restoredCtx.rowIndex;\n      const ctx_r14 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r14.onBlur(rowIndex_r12));\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(20, \"\\n                                \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(21, \"\\n                            \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(22, \"\\n                        \");\n  }\n  if (rf & 2) {\n    const assignClaim_r11 = ctx.$implicit;\n    const rowIndex_r12 = ctx.rowIndex;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"formGroupName\", rowIndex_r12)(\"pReorderableRow\", rowIndex_r12);\n    i0.ɵɵadvance(8);\n    i0.ɵɵtextInterpolate(assignClaim_r11.value.fullName);\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(assignClaim_r11.value.outstandingCnt);\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(assignClaim_r11.value.availStatus == \"A\" ? \"Free\" : assignClaim_r11.value.availStatus == \"H\" ? \"Half-Day\" : null);\n    i0.ɵɵadvance(4);\n    i0.ɵɵstyleMap(i0.ɵɵpureFunction0(9, _c1));\n    i0.ɵɵproperty(\"min\", 1)(\"max\", 100);\n  }\n}\nfunction AssignClaimsAutoComponent_ng_template_48_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtext(0, \"\\n                    \");\n    i0.ɵɵelementStart(1, \"tr\");\n    i0.ɵɵtext(2, \"\\n                        \");\n    i0.ɵɵelementStart(3, \"th\", 22);\n    i0.ɵɵtext(4, \"Verifier \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(5, \"\\n                        \");\n    i0.ɵɵelementStart(6, \"th\", 28);\n    i0.ɵɵtext(7, \"Outstanding Claims \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(8, \"\\n                        \");\n    i0.ɵɵelementStart(9, \"th\", 28);\n    i0.ɵɵtext(10, \"Period of Absence \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(11, \"\\n                    \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(12, \"\\n                \");\n  }\n}\nfunction AssignClaimsAutoComponent_ng_template_50_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtext(0, \"\\n                    \");\n    i0.ɵɵelementStart(1, \"tr\");\n    i0.ɵɵtext(2, \"\\n                        \");\n    i0.ɵɵelementStart(3, \"td\");\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(5, \"\\n                        \");\n    i0.ɵɵelementStart(6, \"td\");\n    i0.ɵɵtext(7);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(8, \"\\n                        \");\n    i0.ɵɵelementStart(9, \"td\");\n    i0.ɵɵtext(10);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(11, \"\\n                    \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(12, \"\\n                \");\n  }\n  if (rf & 2) {\n    const assignClaimBusy_r16 = ctx.$implicit;\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate(assignClaimBusy_r16.fullName);\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(assignClaimBusy_r16.outstandingCnt);\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(assignClaimBusy_r16.blockedDates);\n  }\n}\nconst _c2 = function () {\n  return {\n    \"margin-left\": \".5em\",\n    \"margin-bottom\": \".5em\"\n  };\n};\nclass AssignClaimsAutoComponent {\n  constructor(config, ref, nspConfirmService, formBuilder, workloadService, dateUtilsService, cd) {\n    this.config = config;\n    this.ref = ref;\n    this.nspConfirmService = nspConfirmService;\n    this.formBuilder = formBuilder;\n    this.workloadService = workloadService;\n    this.dateUtilsService = dateUtilsService;\n    this.cd = cd;\n    this.selectedRows = [];\n    this.radioCategories = [{\n      name: 'New',\n      key: 'new'\n    }, {\n      name: 'SD',\n      key: 'sd'\n    }];\n    this.selectedCategory = null;\n    // assignClaimForm:  FormGroup = new FormGroup({\n    //   assignClaimFormArray: this.formBuilder.array([])\n    // });\n    this.assignClaimForm = this.formBuilder.group({\n      assignClaimFormArray: this.formBuilder.array([])\n    });\n    this.dateFormat = \"DD-MM-YYYY\";\n    this.unassignedClaimNo = 0;\n    this.unassignedClaimList = [];\n  }\n  get assignClaimFormArray() {\n    return this.assignClaimForm?.get('assignClaimFormArray');\n  }\n  ngOnInit() {\n    // this.assignClaimForm = this.formBuilder.group({\n    //   assignClaimFormArray: this.formBuilder.array([])\n    // });\n    // this.createForm();\n    this.selectedCategory = this.radioCategories[0];\n    this.getAllClaimAssignees();\n    this.getUnassignedClaimList();\n    console.log(\"claimType\", this.config.data);\n  }\n  getAllClaimAssignees() {\n    setTimeout(() => {\n      const roleList = ['role-cv', 'role-ca', 'role-pv'];\n      const options = {\n        params: new http_1.HttpParams()\n      };\n      roleList.forEach(x => {\n        options.params = options.params.append('roleList', x);\n      });\n      this.workloadService.getVerifierAvailability(options).subscribe(resp => {\n        if (resp.body.data) {\n          this.assignClaimList = resp.body.data.filter(x => x.availStatus === \"H\" || x.availStatus === \"A\");\n          this.resetFilter();\n          console.log(\"form is\", this.assignClaimFormArray['controls']);\n          this.assignClaimBusyList = resp.body.data.filter(x => x.availStatus === \"B\").map(x => {\n            return {\n              subjectId: x.subjectId,\n              fullName: x.fullName,\n              availStatus: x.availStatus,\n              blockedDates: this.processBlockDates(x.blockedDates),\n              outstandingCnt: x.outstandingCnt\n            };\n          });\n        }\n      });\n    }, 0);\n  }\n  resetFilter() {\n    let filteredList = [];\n    if (this.config.data.claimType === \"E\" && this.selectedCategory.key === \"sd\") {\n      filteredList = this.assignClaimList.filter(x => +x.ecSDInd === 1);\n    } else if (this.config.data.claimType === \"E\" && this.selectedCategory.key === \"new\") {\n      filteredList = this.assignClaimList.filter(x => +x.ecNewInd === 1);\n    } else if (this.config.data.claimType === \"S\" && this.selectedCategory.key === \"sd\") {\n      filteredList = this.assignClaimList.filter(x => +x.seSDInd === 1);\n    } else if (this.config.data.claimType === \"S\" && this.selectedCategory.key === \"new\") {\n      filteredList = this.assignClaimList.filter(x => +x.seNewInd === 1);\n    }\n    this.assignClaimFormArray.clear();\n    this.assignClaimFormArray.reset();\n    filteredList.forEach(x => {\n      this.assignClaimFormArray.push(this.addVerifierRow(x));\n    });\n  }\n  getUnassignedClaimList() {\n    // const classType = this.selectedCategory.key === \"sd\"? \"Supp Doc\": this.selectedCategory.key === \"new\"? \"New\":  null;\n    let params = new http_1.HttpParams();\n    // params = params.append(\"claimType\", this.config.data.claimType).append(\"owner\",\"null\").append(\"reason\", classType);\n    params = params.append(\"claimType\", this.config.data.claimType).append(\"owner\", \"null\");\n    this.workloadService.getClaimsVerifierData({\n      params\n    }).subscribe(resp => {\n      if (resp.body.data.dtoList) {\n        this.unassignedClaimList = resp.body.data.dtoList;\n      }\n      console.log(\"the true length\", this.unassignedClaimList.length);\n    });\n  }\n  getUnassignedClaimNo() {\n    if (this.selectedCategory.key === \"sd\") {\n      return this.unassignedClaimList?.filter(x => x.reason === \"Supp Doc\").length;\n    } else if (this.selectedCategory.key === \"new\") {\n      return this.unassignedClaimList?.filter(x => x.reason !== \"Supp Doc\").length;\n    } else return 0;\n  }\n  getGroupName(assignClaim) {\n    // console.log(\"row is\" + assignClaim.value.subjectId);\n    return assignClaim.value.subjectId;\n  }\n  createForm() {\n    this.assignClaimForm = this.formBuilder.group({\n      assignClaimFormArray: this.formBuilder.array([\n        // this.createVerifierRow()\n      ])\n    });\n  }\n  createVerifierRow() {\n    return this.formBuilder.group({\n      subjectId: new forms_1.FormControl(null),\n      fullName: new forms_1.FormControl(null),\n      outstandingCnt: new forms_1.FormControl(null),\n      availStatus: new forms_1.FormControl(null),\n      noClaim: new forms_1.FormControl('', [forms_1.Validators.required, forms_1.Validators.min(1)])\n    });\n  }\n  addVerifierRow(assignClaim) {\n    return this.formBuilder.group({\n      subjectId: new forms_1.FormControl(assignClaim.subjectId, forms_1.Validators.required),\n      fullName: new forms_1.FormControl(assignClaim.fullName, forms_1.Validators.required),\n      outstandingCnt: new forms_1.FormControl(assignClaim.outstandingCnt, forms_1.Validators.required),\n      availStatus: new forms_1.FormControl(assignClaim.availStatus, forms_1.Validators.required),\n      noClaim: new forms_1.FormControl(0, forms_1.Validators.required)\n    });\n  }\n  // createForm(assignClaimList: any[]): void{\n  //   // let arr = this.assignClaimForm.get('assignClaimFormArray') as FormArray;\n  //   this.assignClaimForm = this.formBuilder.group({\n  //     assignClaimFormArray: this.formBuilder.array([\n  //       this.createOrderRow();\n  //     ])\n  //   })\n  // }\n  //   assignClaimList.forEach(x=>{\n  //     arr.push(this.formBuilder.group({\n  //       subjectId: new FormControl(x.subjectId, null),\n  //       fullName: new FormControl(x.fullName, null),\n  //       availStatus: new FormControl(x.availStatus,null),\n  //       noClaim: new FormControl('', [Validators.required, Validators.min(1)])\n  //     }));\n  //   })\n  // }\n  onRowReOrder(event) {\n    console.log(\"reorder... \", event);\n    console.log('reslt', this.assignClaimFormArray.controls);\n  }\n  onSubmitAssignClaim(event, type) {\n    const reqList = [];\n    const ctrls = this.assignClaimFormArray.controls;\n    ctrls.forEach((x, index) => {\n      const req = {\n        index,\n        subjectId: x.controls['subjectId'].value,\n        noClaim: x.controls['noClaim'].value ? x.controls['noClaim'].value : 0\n      };\n      reqList.push(req);\n    });\n    this.nspConfirmService.onConfirmPopupRef(event, type, this.ref, reqList);\n  }\n  getSumOfInputClaim() {\n    const ctrls = this.assignClaimFormArray.controls;\n    return ctrls.map(x => {\n      return x.controls['noClaim'].value;\n    }).reduce((a, b) => a + b, 0);\n  }\n  onBlur(rowIndex) {\n    if (this.getUnassignedClaimNo() - this.getSumOfInputClaim() < 0) {\n      console.log(\"assigning below 0\");\n    }\n    const ctrls = this.assignClaimFormArray.controls;\n    console.log(\"the num\", ctrls.at(rowIndex).get('noClaim').patchValue(this.getUnassignedClaimNo()));\n  }\n  processBlockDates(unixDate) {\n    const unixArr = unixDate.split(\",\");\n    const unixConvArr = unixArr.map(x => {\n      const dateArr = x.split(\" - \");\n      if (dateArr[0].trim() === dateArr[1].trim()) {\n        // return this.dateUtilsService.convertUnixToDateString(+dateArr[0], this.dateFormat);\n        return dateArr[0];\n      } else {\n        return dateArr[0].concat(\" - \").concat(dateArr[1]);\n        // return this.dateUtilsService.convertUnixToDateString(+dateArr[0], this.dateFormat)\n        // .concat(\" - \").concat(this.dateUtilsService.convertUnixToDateString(+dateArr[1], this.dateFormat));\n      }\n    });\n\n    return unixConvArr.join(', ');\n  }\n  onCancel() {\n    this.ref.close();\n  }\n  enableSubmitBtn() {\n    return true;\n  }\n  onReOrderList(event) {\n    console.log(\"reordered\", event);\n    console.log(\"value now\", this.assignClaimList);\n  }\n}\nexports.AssignClaimsAutoComponent = AssignClaimsAutoComponent;\nAssignClaimsAutoComponent.ɵfac = function AssignClaimsAutoComponent_Factory(t) {\n  return new (t || AssignClaimsAutoComponent)(i0.ɵɵdirectiveInject(i1.DynamicDialogConfig), i0.ɵɵdirectiveInject(i1.DynamicDialogRef), i0.ɵɵdirectiveInject(i2.NspConfirmationService), i0.ɵɵdirectiveInject(i3.FormBuilder), i0.ɵɵdirectiveInject(i4.WorkloadInboxService), i0.ɵɵdirectiveInject(i5.DateUtilsService), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef));\n};\nAssignClaimsAutoComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: AssignClaimsAutoComponent,\n  selectors: [[\"ic-assign-claims-auto\"]],\n  viewQuery: function AssignClaimsAutoComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c0, 7);\n    }\n    if (rf & 2) {\n      let _t;\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.unassignedClaimNo = _t.first);\n    }\n  },\n  features: [i0.ɵɵProvidersFeature([{\n    provide: forms_1.NG_VALUE_ACCESSOR,\n    useExisting: AssignClaimsAutoComponent,\n    multi: true\n  }])],\n  decls: 77,\n  vars: 19,\n  consts: [[1, \"p-d-flex\", \"p-flex-column\"], [\"class\", \"p-field-checkbox\", \"style\", \"display: inline\", 4, \"ngFor\", \"ngForOf\"], [1, \"row\", \"nsp-top-padding\", \"nsp-bottom-padding\"], [2, \"overflow-y\", \"auto\", \"overflow-x\", \"hidden\", \"max-height\", \"70%\", \"height\", \"650px\"], [1, \"row\"], [3, \"formGroup\"], [\"formArrayName\", \"assignClaimFormArray\"], [\"styleClass\", \"p-datatable\", \"scrollHeight\", \"30vh\", \"stateStorage\", \"session\", \"stateKey\", \"statedemo-session\", 3, \"value\", \"scrollable\", \"onRowReorder\"], [\"dataTable\", \"\"], [\"pTemplate\", \"header\"], [\"pTemplate\", \"body\"], [\"responsiveLayout\", \"scroll\", \"scrollHeight\", \"25vh\", \"styleClass\", \"p-datatable-gridlines\", 3, \"value\", \"rows\", \"responsive\", \"scrollable\"], [1, \"grid\", \"nsp-top-padding\", \"nsp-bottom-padding\"], [1, \"col-6\"], [1, \"col-6\", \"nsp-align-right\"], [\"key\", \"assignClaim\", \"header\", \"Confirmation\", \"icon\", \"fa fa-question-circle\", \"width\", \"425\"], [\"pButton\", \"\", \"label\", \"Cancel\", 1, \"p-button-danger\", 3, \"click\"], [\"pButton\", \"\", \"label\", \"Submit\", 3, \"disabled\", \"click\"], [1, \"p-field-checkbox\", 2, \"display\", \"inline\"], [\"name\", \"category\", 1, \"ui-g-12\", \"ui-md-4\", 3, \"inputId\", \"value\", \"ngModel\", \"onClick\", \"ngModelChange\"], [3, \"for\"], [\"scope\", \"col\", 2, \"width\", \"2em\"], [\"scope\", \"col\", \"width\", \"40%\"], [\"scope\", \"col\"], [\"scope\", \"col\", \"width\", \"20%\"], [3, \"formGroupName\", \"pReorderableRow\"], [\"pReorderableRowHandle\", \"\", 1, \"pi\", \"pi-bars\"], [\"pInputText\", \"\", \"type\", \"number\", \"formControlName\", \"noClaim\", \"id\", \"noClaim\", 3, \"min\", \"max\", \"blur\"], [\"scope\", \"col\", \"width\", \"30%\"]],\n  template: function AssignClaimsAutoComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtext(0, \"\\n\");\n      i0.ɵɵelementStart(1, \"div\", 0);\n      i0.ɵɵtext(2, \"\\n    \");\n      i0.ɵɵtext(3, \"\\n    \");\n      i0.ɵɵtemplate(4, AssignClaimsAutoComponent_div_4_Template, 7, 5, \"div\", 1);\n      i0.ɵɵtext(5, \"\\n    \");\n      i0.ɵɵelementStart(6, \"div\", 2);\n      i0.ɵɵtext(7, \"\\n        \");\n      i0.ɵɵelementStart(8, \"h6\");\n      i0.ɵɵtext(9, \"Please select the amount of claims to assign to each verifiers\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(10, \"\\n    \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(11, \"\\n    \");\n      i0.ɵɵelementStart(12, \"div\", 3);\n      i0.ɵɵtext(13, \"\\n        \");\n      i0.ɵɵelementStart(14, \"div\", 4);\n      i0.ɵɵtext(15, \"\\n            \");\n      i0.ɵɵelementStart(16, \"form\", 5);\n      i0.ɵɵtext(17, \"\\n                \");\n      i0.ɵɵelementStart(18, \"div\", 6);\n      i0.ɵɵtext(19, \"\\n                    \");\n      i0.ɵɵelementStart(20, \"p-table\", 7, 8);\n      i0.ɵɵlistener(\"onRowReorder\", function AssignClaimsAutoComponent_Template_p_table_onRowReorder_20_listener($event) {\n        return ctx.onRowReOrder($event);\n      });\n      i0.ɵɵtext(22, \"\\n                        \");\n      i0.ɵɵtemplate(23, AssignClaimsAutoComponent_ng_template_23_Template, 18, 0, \"ng-template\", 9);\n      i0.ɵɵtext(24, \"\\n\\n                        \");\n      i0.ɵɵtemplate(25, AssignClaimsAutoComponent_ng_template_25_Template, 23, 10, \"ng-template\", 10);\n      i0.ɵɵtext(26, \"\\n                    \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(27, \"\\n                \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(28, \"\\n            \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(29, \"\\n\\n        \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(30, \"\\n\\n        \");\n      i0.ɵɵtext(31, \"\\n        \");\n      i0.ɵɵtext(32, \"\\n            \");\n      i0.ɵɵtext(33, \"\\n                    \");\n      i0.ɵɵtext(34, \"\\n                    \");\n      i0.ɵɵtext(35, \"\\n                \");\n      i0.ɵɵtext(36, \"\\n\\n\\n\\n        \");\n      i0.ɵɵtext(37, \"\\n        \");\n      i0.ɵɵelementStart(38, \"div\", 2);\n      i0.ɵɵtext(39, \"\\n            \");\n      i0.ɵɵelementStart(40, \"h6\");\n      i0.ɵɵtext(41, \"Verifier that are busy today\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(42, \"\\n        \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(43, \"\\n\\n        \");\n      i0.ɵɵelementStart(44, \"div\", 4);\n      i0.ɵɵtext(45, \"\\n            \");\n      i0.ɵɵelementStart(46, \"p-table\", 11);\n      i0.ɵɵtext(47, \"\\n                \");\n      i0.ɵɵtemplate(48, AssignClaimsAutoComponent_ng_template_48_Template, 13, 0, \"ng-template\", 9);\n      i0.ɵɵtext(49, \"\\n                \");\n      i0.ɵɵtemplate(50, AssignClaimsAutoComponent_ng_template_50_Template, 13, 3, \"ng-template\", 10);\n      i0.ɵɵtext(51, \"\\n            \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(52, \"\\n        \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(53, \"\\n    \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(54, \"\\n\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(55, \"\\n\");\n      i0.ɵɵelementStart(56, \"div\", 12);\n      i0.ɵɵtext(57, \"\\n    \");\n      i0.ɵɵelementStart(58, \"div\", 13);\n      i0.ɵɵtext(59, \"\\n        \");\n      i0.ɵɵelementStart(60, \"h6\");\n      i0.ɵɵtext(61);\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(62, \"\\n        \");\n      i0.ɵɵelementStart(63, \"h6\");\n      i0.ɵɵtext(64);\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(65, \"\\n\\n    \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(66, \"\\n    \");\n      i0.ɵɵelementStart(67, \"div\", 14);\n      i0.ɵɵtext(68, \"\\n        \");\n      i0.ɵɵelement(69, \"p-confirmPopup\", 15);\n      i0.ɵɵtext(70, \"\\n        \");\n      i0.ɵɵelementStart(71, \"button\", 16);\n      i0.ɵɵlistener(\"click\", function AssignClaimsAutoComponent_Template_button_click_71_listener() {\n        return ctx.onCancel();\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(72, \"\\n        \");\n      i0.ɵɵelementStart(73, \"button\", 17);\n      i0.ɵɵlistener(\"click\", function AssignClaimsAutoComponent_Template_button_click_73_listener($event) {\n        return ctx.onSubmitAssignClaim($event, \"assignClaim\");\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(74, \"\\n    \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(75, \"\\n\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(76, \"\\n\");\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"ngForOf\", ctx.radioCategories);\n      i0.ɵɵadvance(12);\n      i0.ɵɵproperty(\"formGroup\", ctx.assignClaimForm);\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"value\", ctx.assignClaimFormArray.controls)(\"scrollable\", true);\n      i0.ɵɵadvance(26);\n      i0.ɵɵproperty(\"value\", ctx.assignClaimBusyList)(\"rows\", 5)(\"responsive\", true)(\"scrollable\", true);\n      i0.ɵɵadvance(15);\n      i0.ɵɵtextInterpolate3(\"Total number of unassigned \", ctx.config.data.claimType, \" \", ctx.selectedCategory.name, \": \", ctx.getUnassignedClaimNo(), \"\\n        \");\n      i0.ɵɵadvance(3);\n      i0.ɵɵtextInterpolate1(\"Total number of EC New claims left remaining to be assigned: \", ctx.getUnassignedClaimNo() - ctx.getSumOfInputClaim(), \" \");\n      i0.ɵɵadvance(7);\n      i0.ɵɵstyleMap(i0.ɵɵpureFunction0(17, _c2));\n      i0.ɵɵadvance(2);\n      i0.ɵɵstyleMap(i0.ɵɵpureFunction0(18, _c2));\n      i0.ɵɵproperty(\"disabled\", !ctx.enableSubmitBtn());\n    }\n  },\n  dependencies: [i3.ɵNgNoValidate, i3.DefaultValueAccessor, i3.NumberValueAccessor, i3.NgControlStatus, i3.NgControlStatusGroup, i3.MinValidator, i3.MaxValidator, i3.NgModel, i6.NgForOf, i3.FormGroupDirective, i3.FormControlName, i3.FormGroupName, i3.FormArrayName, i7.PrimeTemplate, i8.ButtonDirective, i9.Table, i9.ReorderableRowHandle, i9.ReorderableRow, i10.InputText, i11.ConfirmPopup, i12.RadioButton],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJhc3NpZ24tY2xhaW1zLWF1dG8uY29tcG9uZW50LnNjc3MifQ== */\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9tYWluL3dlYmFwcC9hcHAvd29ya2xvYWQvY2xhaW0tYXBwcm92ZXIvY2xhaW0tdmVyaWZpZXItaW5ib3gvYXNzaWduLWNsYWltcy1hdXRvL2Fzc2lnbi1jbGFpbXMtYXV0by5jb21wb25lbnQuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQ0Esb0xBQW9MIiwic291cmNlUm9vdCI6IiJ9 */\"]\n});","map":{"version":3,"mappings":"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","names":["i0","AssignClaimsAutoComponent","constructor","config","ref","nspConfirmService","formBuilder","workloadService","dateUtilsService","cd","name","key","group","assignClaimFormArray","array","assignClaimForm","get","ngOnInit","selectedCategory","radioCategories","getAllClaimAssignees","getUnassignedClaimList","console","log","data","setTimeout","roleList","options","params","http_1","forEach","x","append","getVerifierAvailability","subscribe","resp","body","assignClaimList","filter","availStatus","resetFilter","assignClaimBusyList","map","subjectId","fullName","blockedDates","processBlockDates","outstandingCnt","filteredList","claimType","ecSDInd","ecNewInd","seSDInd","seNewInd","clear","reset","push","addVerifierRow","getClaimsVerifierData","dtoList","unassignedClaimList","length","getUnassignedClaimNo","reason","getGroupName","assignClaim","value","createForm","createVerifierRow","forms_1","noClaim","required","min","onRowReOrder","event","controls","onSubmitAssignClaim","type","reqList","ctrls","index","req","onConfirmPopupRef","getSumOfInputClaim","reduce","a","b","onBlur","rowIndex","at","patchValue","unixDate","unixArr","split","unixConvArr","dateArr","trim","concat","join","onCancel","close","enableSubmitBtn","onReOrderList","exports","selectors","viewQuery","provide","useExisting","multi","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["C:\\Users\\D1347074\\Desktop\\projects 2\\nspayiiapp\\src\\main\\webapp\\app\\workload\\claim-approver\\claim-verifier-inbox\\assign-claims-auto\\assign-claims-auto.component.ts","C:\\Users\\D1347074\\Desktop\\projects 2\\nspayiiapp\\src\\main\\webapp\\app\\workload\\claim-approver\\claim-verifier-inbox\\assign-claims-auto\\assign-claims-auto.component.html"],"sourcesContent":["import {ChangeDetectorRef, Component, OnInit, ViewChild} from '@angular/core';\r\nimport {DynamicDialogConfig, DynamicDialogRef} from 'primeng/dynamicdialog';\r\nimport {NspConfirmationService} from 'app/shared/confirm/nsp-confirm.service';\r\nimport {FormArray, FormBuilder, FormControl, FormGroup, NG_VALUE_ACCESSOR, Validators} from '@angular/forms';\r\nimport {WorkloadInboxService} from 'app/workload/service/workload-inbox.service';\r\nimport {DateUtilsService} from 'app/core/util/date-utils.service';\r\nimport {HttpParams} from '@angular/common/http';\r\nimport {Table} from 'primeng/table';\r\n\r\n@Component({\r\n  selector: 'ic-assign-claims-auto',\r\n  templateUrl: './assign-claims-auto.component.html',\r\n  styleUrls: ['./assign-claims-auto.component.scss'],\r\n  providers: [\r\n    {\r\n      provide: NG_VALUE_ACCESSOR,\r\n      useExisting: AssignClaimsAutoComponent,\r\n      multi: true\r\n    }\r\n  ]\r\n})\r\nexport class AssignClaimsAutoComponent implements OnInit {\r\n\r\n  availAssignees!: any;\r\n  unavailAssingees!: any;\r\n  assignClaimList!: any[];\r\n  public selectedRows: any[] = [];\r\n\r\n  radioCategories: any[] = [{name: 'New', key: 'new'}, {name: 'SD', key: 'sd'}];\r\n  selectedCategory: any = null;\r\n  assignClaimBusyList!: any[];\r\n\r\n  // assignClaimForm:  FormGroup = new FormGroup({\r\n  //   assignClaimFormArray: this.formBuilder.array([])\r\n  // });\r\n  assignClaimForm: FormGroup = this.formBuilder.group({\r\n    assignClaimFormArray: this.formBuilder.array([\r\n    ])\r\n  })\r\n  dateFormat = \"DD-MM-YYYY\";\r\n\r\n  @ViewChild('dataTable', {static: true})\r\n  unassignedClaimNo=0;\r\n  unassignedClaimList: any[] = [];\r\n\r\n  private dataTable!: Table;\r\n\r\n\r\n  constructor(\r\n    public config: DynamicDialogConfig,\r\n    public ref: DynamicDialogRef,\r\n    private nspConfirmService: NspConfirmationService,\r\n    private formBuilder: FormBuilder,\r\n    private workloadService: WorkloadInboxService,\r\n    private dateUtilsService: DateUtilsService,\r\n    private cd: ChangeDetectorRef,\r\n  ) {\r\n  }\r\n\r\n  get assignClaimFormArray(): FormArray {\r\n    return this.assignClaimForm?.get('assignClaimFormArray') as FormArray\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    // this.assignClaimForm = this.formBuilder.group({\r\n    //   assignClaimFormArray: this.formBuilder.array([])\r\n    // });\r\n    // this.createForm();\r\n\r\n    this.selectedCategory = this.radioCategories[0];\r\n    this.getAllClaimAssignees();\r\n    this.getUnassignedClaimList();\r\n\r\n    console.log(\"claimType\", this.config.data);\r\n\r\n  }\r\n\r\n  getAllClaimAssignees(): void {\r\n    setTimeout(() => {\r\n      const roleList = ['role-cv', 'role-ca', 'role-pv'];\r\n      const options = {\r\n        params: new HttpParams()\r\n      }\r\n      roleList.forEach(x => {\r\n        options.params = options.params.append('roleList', x);\r\n      })\r\n      this.workloadService.getVerifierAvailability(options).subscribe((resp: any) => {\r\n        if (resp.body.data) {\r\n          this.assignClaimList = resp.body.data.filter((x: any) => x.availStatus === \"H\" || x.availStatus === \"A\")\r\n          this.resetFilter();\r\n          console.log(\"form is\", this.assignClaimFormArray['controls']);\r\n          this.assignClaimBusyList = resp.body.data.filter((x: any) =>\r\n            x.availStatus === \"B\"\r\n          ).map((x: any) => {\r\n            return {\r\n              subjectId: x.subjectId,\r\n              fullName: x.fullName,\r\n              availStatus: x.availStatus,\r\n              blockedDates: this.processBlockDates(x.blockedDates),\r\n              outstandingCnt: x.outstandingCnt\r\n            };\r\n          })\r\n        }\r\n      });\r\n    }, 0);\r\n\r\n  }\r\n\r\n  resetFilter(): void {\r\n\r\n    let filteredList: any[] = [];\r\n    if (this.config.data.claimType === \"E\" && this.selectedCategory.key === \"sd\") {\r\n      filteredList = this.assignClaimList.filter(x =>\r\n        +x.ecSDInd === 1\r\n      )\r\n    } else if (this.config.data.claimType === \"E\" && this.selectedCategory.key === \"new\") {\r\n      filteredList = this.assignClaimList.filter(x =>\r\n        +x.ecNewInd === 1\r\n      )\r\n    } else if (this.config.data.claimType === \"S\" && this.selectedCategory.key === \"sd\") {\r\n      filteredList = this.assignClaimList.filter(x =>\r\n        +x.seSDInd === 1\r\n      )\r\n    } else if (this.config.data.claimType === \"S\" && this.selectedCategory.key === \"new\") {\r\n      filteredList = this.assignClaimList.filter(x =>\r\n        +x.seNewInd === 1\r\n      )\r\n    }\r\n    this.assignClaimFormArray.clear();\r\n    this.assignClaimFormArray.reset();\r\n\r\n    filteredList.forEach(x => {\r\n      this.assignClaimFormArray.push(this.addVerifierRow(x));\r\n    })\r\n  }\r\n\r\n   getUnassignedClaimList(){\r\n    // const classType = this.selectedCategory.key === \"sd\"? \"Supp Doc\": this.selectedCategory.key === \"new\"? \"New\":  null;\r\n    let params = new HttpParams();\r\n    // params = params.append(\"claimType\", this.config.data.claimType).append(\"owner\",\"null\").append(\"reason\", classType);\r\n    params = params.append(\"claimType\", this.config.data.claimType).append(\"owner\",\"null\");\r\n\r\n    this.workloadService.getClaimsVerifierData({params}).subscribe((resp:any) => {\r\n      if(resp.body.data.dtoList){\r\n        this.unassignedClaimList = resp.body.data.dtoList;\r\n      }\r\n      console.log(\"the true length\" ,this.unassignedClaimList.length);\r\n\r\n    });\r\n  }\r\n\r\n  getUnassignedClaimNo(): number{\r\n    if (this.selectedCategory.key === \"sd\") {\r\n      return this.unassignedClaimList?.filter(x=> x.reason === \"Supp Doc\").length;\r\n    }else if(this.selectedCategory.key === \"new\"){\r\n      return this.unassignedClaimList?.filter(x=> x.reason !== \"Supp Doc\").length;\r\n    }else return 0;\r\n\r\n  }\r\n\r\n\r\n  getGroupName(assignClaim: any): any {\r\n    // console.log(\"row is\" + assignClaim.value.subjectId);\r\n    return assignClaim.value.subjectId;\r\n  }\r\n\r\n  createForm(): void {\r\n    this.assignClaimForm = this.formBuilder.group({\r\n      assignClaimFormArray: this.formBuilder.array([\r\n        // this.createVerifierRow()\r\n      ])\r\n    })\r\n  }\r\n\r\n  createVerifierRow(): FormGroup {\r\n    return this.formBuilder.group({\r\n      subjectId: new FormControl(null),\r\n      fullName: new FormControl(null),\r\n      outstandingCnt: new FormControl(null),\r\n      availStatus: new FormControl(null),\r\n      noClaim: new FormControl('', [Validators.required, Validators.min(1)])\r\n    })\r\n  }\r\n\r\n  addVerifierRow(assignClaim: any): FormGroup {\r\n    return this.formBuilder.group({\r\n      subjectId: new FormControl(assignClaim.subjectId, Validators.required),\r\n      fullName: new FormControl(assignClaim.fullName, Validators.required),\r\n      outstandingCnt: new FormControl(assignClaim.outstandingCnt, Validators.required),\r\n      availStatus: new FormControl(assignClaim.availStatus, Validators.required),\r\n      noClaim: new FormControl(0, Validators.required)\r\n    })\r\n  }\r\n\r\n  // createForm(assignClaimList: any[]): void{\r\n  //   // let arr = this.assignClaimForm.get('assignClaimFormArray') as FormArray;\r\n  //   this.assignClaimForm = this.formBuilder.group({\r\n  //     assignClaimFormArray: this.formBuilder.array([\r\n  //       this.createOrderRow();\r\n  //     ])\r\n  //   })\r\n  // }\r\n\r\n\r\n  //   assignClaimList.forEach(x=>{\r\n  //     arr.push(this.formBuilder.group({\r\n  //       subjectId: new FormControl(x.subjectId, null),\r\n  //       fullName: new FormControl(x.fullName, null),\r\n  //       availStatus: new FormControl(x.availStatus,null),\r\n  //       noClaim: new FormControl('', [Validators.required, Validators.min(1)])\r\n  //     }));\r\n  //   })\r\n  // }\r\n\r\n  onRowReOrder(event: Event): void {\r\n    console.log(\"reorder... \", event);\r\n    console.log('reslt', this.assignClaimFormArray.controls);\r\n  }\r\n\r\n  onSubmitAssignClaim(event: Event, type: any): void {\r\n    const reqList: unknown[] = [];\r\n    const ctrls: any[] = this.assignClaimFormArray.controls;\r\n\r\n    ctrls.forEach((x: any, index: number) => {\r\n      const req = {\r\n        index,\r\n        subjectId: x.controls['subjectId'].value,\r\n        noClaim: x.controls['noClaim'].value ? x.controls['noClaim'].value : 0\r\n      }\r\n      reqList.push(req);\r\n    })\r\n    this.nspConfirmService.onConfirmPopupRef(event, type, this.ref, reqList);\r\n  }\r\n\r\n  getSumOfInputClaim(): number{\r\n    const ctrls: any[] = this.assignClaimFormArray.controls;\r\n    return ctrls.map((x:any)=>{\r\n      return x.controls['noClaim'].value as number;\r\n    }).reduce((a:number,b:number)=> a+b,0);\r\n    \r\n  }\r\n\r\n  onBlur(rowIndex: number): void{\r\n    if(this.getUnassignedClaimNo() - this.getSumOfInputClaim()<0){\r\n      console.log(\"assigning below 0\");\r\n    }\r\n    const ctrls: any[] = this.assignClaimFormArray.controls;\r\n    console.log(\"the num\",ctrls.at(rowIndex).get('noClaim').patchValue(this.getUnassignedClaimNo()));\r\n\r\n\r\n  }\r\n\r\n  processBlockDates(unixDate: string): string {\r\n    const unixArr: string[] = unixDate.split(\",\");\r\n    const unixConvArr = unixArr.map(x=>{\r\n      const dateArr = x.split(\" - \");\r\n      if(dateArr[0].trim()===dateArr[1].trim()){\r\n        // return this.dateUtilsService.convertUnixToDateString(+dateArr[0], this.dateFormat);\r\n        return dateArr[0];\r\n      }\r\n      else{\r\n        return dateArr[0]\r\n        .concat(\" - \").concat(dateArr[1]);\r\n        // return this.dateUtilsService.convertUnixToDateString(+dateArr[0], this.dateFormat)\r\n        // .concat(\" - \").concat(this.dateUtilsService.convertUnixToDateString(+dateArr[1], this.dateFormat));\r\n      }\r\n    })\r\n    return unixConvArr.join(', ');\r\n\r\n  }\r\n\r\n  onCancel(): void {\r\n    this.ref.close();\r\n  }\r\n\r\n  enableSubmitBtn(): boolean {\r\n    return true;\r\n  }\r\n\r\n  onReOrderList(event: Event): void {\r\n    console.log(\"reordered\", event);\r\n    console.log(\"value now\", this.assignClaimList);\r\n  }\r\n\r\n\r\n}\r\n","\r\n<div class=\"p-d-flex p-flex-column\">\r\n    <!-- <h2>Assign Claims</h2> -->\r\n    <div *ngFor=\"let category of radioCategories\" class=\"p-field-checkbox\" style=\"display: inline\">\r\n        <p-radioButton  class = \"ui-g-12 ui-md-4\"\r\n        [inputId]=\"category.key\" name=\"category\" [value]=\"category\"\r\n        (onClick) = \"resetFilter()\"\r\n        [(ngModel)]=\"selectedCategory\"></p-radioButton>\r\n        <label [for]=\"category.key\">{{category.name}}&nbsp;&nbsp;</label>\r\n    </div>\r\n    <div class = \"row nsp-top-padding nsp-bottom-padding\">\r\n        <h6>Please select the amount of claims to assign to each verifiers</h6>\r\n    </div>\r\n    <div style=\"overflow-y:auto; overflow-x: hidden; max-height: 70%; height: 650px\">\r\n        <div class = \"row\">\r\n            <form [formGroup]=\"assignClaimForm\">\r\n                <div formArrayName=\"assignClaimFormArray\">\r\n                    <p-table styleClass=\"p-datatable\"\r\n                    [value]=\"assignClaimFormArray.controls\"\r\n                    [scrollable]=\"true\" scrollHeight=\"30vh\"\r\n                    stateStorage=\"session\" stateKey=\"statedemo-session\"\r\n                    (onRowReorder) = \"onRowReOrder($event)\"\r\n                    #dataTable\r\n                    >\r\n                        <ng-template pTemplate=\"header\" let-columns>\r\n                            <tr>\r\n                                <th scope=\"col\" style=\"width:2em\"></th>\r\n                                <th scope=\"col\" width=\"40%\">Verifier</th>\r\n                                <th scope=\"col\" >Outstanding Claims</th>\r\n                                <th scope=\"col\" >Availability</th>\r\n                                <th scope=\"col\" width=\"20%\">No. of Claim To Assign</th>\r\n                            </tr>\r\n                        </ng-template>\r\n\r\n                        <ng-template pTemplate=\"body\" let-assignClaim let-rowIndex = \"rowIndex\" let-columns=\"columns\">\r\n                            <tr [formGroupName]=\"rowIndex\" [pReorderableRow]=\"rowIndex\">\r\n                                <td>\r\n                                    <span class=\"pi pi-bars\" pReorderableRowHandle></span>\r\n                                </td>\r\n                                <td>{{ assignClaim.value.fullName }}</td>\r\n                                <td>{{ assignClaim.value.outstandingCnt }}</td>\r\n                                <td>{{assignClaim.value.availStatus == \"A\"? 'Free': assignClaim.value.availStatus == \"H\" ? 'Half-Day': null }}</td>\r\n                                <td>\r\n                                    <input pInputText [style]=\"{'width': '100%'}\"  type=\"number\" formControlName = \"noClaim\"\r\n                                    id=\"noClaim\"  [min]=\"1\" [max]=\"100\" (blur)=\"onBlur(rowIndex)\" />\r\n                                </td>\r\n                            </tr>\r\n                        </ng-template>\r\n                    </p-table>\r\n                </div>\r\n            </form>\r\n\r\n        </div>\r\n\r\n        <!-- <div class = \"row\">\r\n\r\n            <p-table styleClass=\"p-datatable\">\r\n                <ng-template pTemplate=\"caption\">\r\n\r\n                    <div class=\"nsp-orderlist-item\">\r\n                        <div class=\"nsp-orderlist-detail\">Verifier</div>\r\n                        <div class=\"nsp-orderlist-detail\">Outstanding Claims</div>\r\n                        <div class=\"nsp-orderlist-detail\">Availability</div>\r\n                        <div class=\"nsp-orderlist-detail\">No. of Claim To Assign</div>\r\n                    </div>\r\n                </ng-template>\r\n            </p-table>\r\n        </div> -->\r\n        <!-- <div class = \"row\" > -->\r\n            <!-- <form [formGroup]=\"assignClaimForm\">\r\n                <div formArrayName=\"assignClaimFormArray\"> -->\r\n                    <!-- jiga is {{ assignClaimForm.controls.assignClaimFormArray['controls'].length }} -->\r\n                    <!-- <p-orderList\r\n                    [value]=\"assignClaimList\"\r\n                    [dragdrop]=\"true\"\r\n                    [listStyle]=\"{'max-height':'20vh'}\"\r\n                    (onReorder) = \"onReOrderList($event)\"\r\n                    appendTo=\"body\">\r\n\r\n                        <ng-template let-assignClaim pTemplate=\"item\">\r\n                            <div class=\"nsp-orderlist-item\">\r\n                                <div class=\"nsp-orderlist-detail\">{{ assignClaim.fullName }} </div>\r\n                                <div class=\"nsp-orderlist-detail\">{{ assignClaim.outstandingCnt }}</div>\r\n                                <div class=\"nsp-orderlist-detail\">{{assignClaim.availStatus == \"A\"? 'Free': assignClaim.availStatus == \"H\" ? 'Half-Day': null }}</div>\r\n                                <div class=\"nsp-orderlist-detail\">\r\n                                    <div class=\"nsp-orderlist-detail\">\r\n                                        <input type=\"text\" pInputText />\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </ng-template>\r\n\r\n\r\n                    </p-orderList> -->\r\n                <!-- </div>\r\n            </form> -->\r\n\r\n\r\n\r\n        <!-- </div> -->\r\n        <div class = \"row nsp-top-padding nsp-bottom-padding\">\r\n            <h6>Verifier that are busy today</h6>\r\n        </div>\r\n\r\n        <div class = \"row\">\r\n            <p-table\r\n            [value]=\"assignClaimBusyList\"\r\n            responsiveLayout=\"scroll\"\r\n            [rows]=\"5\"\r\n            [responsive]=\"true\"\r\n            scrollHeight=\"25vh\"\r\n            styleClass=\"p-datatable-gridlines\"\r\n            [scrollable]=\"true\"\r\n            >\r\n                <ng-template pTemplate=\"header\">\r\n                    <tr>\r\n                        <th scope=\"col\" width=\"40%\">Verifier </th>\r\n                        <th scope=\"col\" width=\"30%\">Outstanding Claims </th>\r\n                        <th scope=\"col\" width=\"30%\">Period of Absence </th>\r\n                    </tr>\r\n                </ng-template>\r\n                <ng-template pTemplate=\"body\" let-assignClaimBusy>\r\n                    <tr>\r\n                        <td>{{assignClaimBusy.fullName}}</td>\r\n                        <td>{{assignClaimBusy.outstandingCnt}}</td>\r\n                        <td>{{assignClaimBusy.blockedDates}}</td>\r\n                    </tr>\r\n                </ng-template>\r\n            </p-table>\r\n        </div>\r\n    </div>\r\n</div>\r\n<div class = \"grid nsp-top-padding nsp-bottom-padding\">\r\n    <div class = \"col-6\">\r\n        <h6>Total number of unassigned {{ config.data.claimType }} {{ selectedCategory.name }}: {{ getUnassignedClaimNo() }}\r\n        </h6>\r\n        <h6>Total number of EC New claims left remaining to be assigned: {{ getUnassignedClaimNo() - getSumOfInputClaim() }} </h6>\r\n\r\n    </div>\r\n    <div class = \"col-6 nsp-align-right\">\r\n        <p-confirmPopup key = \"assignClaim\" header=\"Confirmation\" icon=\"fa fa-question-circle\" width=\"425\"></p-confirmPopup>\r\n        <button pButton class =\"p-button-danger\" label=\"Cancel\" (click) = \"onCancel()\" [style]=\"{'margin-left': '.5em', 'margin-bottom': '.5em'}\"></button>\r\n        <button pButton label=\"Submit\" [disabled] = \"!enableSubmitBtn()\" (click) = \"onSubmitAssignClaim($event, 'assignClaim')\" [style]=\"{'margin-left': '.5em', 'margin-bottom': '.5em'}\"></button>\r\n    </div>\r\n</div>\r\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}