{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.GroupService = void 0;\nconst tslib_1 = require(\"tslib\");\nconst operators_1 = require(\"rxjs/operators\");\nconst request_util_1 = require(\"app/core/request/request-util\");\nconst app_constants_1 = require(\"../../../app.constants\");\nconst i0 = tslib_1.__importStar(require(\"@angular/core\"));\nconst i1 = tslib_1.__importStar(require(\"@angular/common/http\"));\nclass GroupService {\n  constructor(http) {\n    this.http = http;\n    this.resourceUrl = app_constants_1.SERVER_API_URL + 'api/groups';\n    this.assignedUsersUrl = this.resourceUrl + '/assignedUsers';\n    this.unAssignUsersUrl = this.resourceUrl + '/unAssignUsers';\n    this.searchUnAssignedUsersUrl = this.resourceUrl + '/search/unAssignedUsers';\n    this.assignUsersUrl = this.resourceUrl + '/assignUsers';\n    this.assignedRolesUrl = this.resourceUrl + '/assignedRoles';\n    this.unAssignRolesUrl = this.resourceUrl + '/unAssignRoles';\n    this.searchUnAssignedRolesUrl = this.resourceUrl + '/search/unAssignedRoles';\n    this.assignRolesUrl = this.resourceUrl + '/assignRoles';\n  }\n  create(group) {\n    const copy = this.convert(group);\n    return this.http.post(this.resourceUrl, copy, {\n      observe: 'response'\n    }).pipe((0, operators_1.map)(res => {\n      const jsonResponse = res.body;\n      this.convertItemFromServer(jsonResponse, false);\n      return jsonResponse;\n    }));\n  }\n  update(group) {\n    const copy = this.convert(group);\n    return this.http.put(this.resourceUrl, copy, {\n      observe: 'response'\n    }).pipe((0, operators_1.map)(res => {\n      const jsonUpdateResponse = res.body;\n      this.convertItemFromServer(jsonUpdateResponse, false);\n      return jsonUpdateResponse;\n    }));\n  }\n  find(id) {\n    return this.http.get(`${this.resourceUrl}/${id}`, {\n      observe: 'response'\n    }).pipe((0, operators_1.map)(res => {\n      const jsonFindResponse = res.body;\n      this.convertItemFromServer(jsonFindResponse, false);\n      return jsonFindResponse;\n    }));\n  }\n  query(req) {\n    const params = (0, request_util_1.createRequestOption)(req);\n    return this.http.get(this.resourceUrl, {\n      params,\n      observe: 'response'\n    }).pipe((0, operators_1.map)(res => this.convertArrayResponse(res, false)));\n  }\n  delete(id) {\n    return this.http.delete(`${this.resourceUrl}/${id}`, {\n      observe: 'response'\n    });\n  }\n  findAll(request) {\n    const params = (0, request_util_1.createRequestOption)(request);\n    return this.http.get(this.resourceUrl, {\n      params,\n      observe: 'response'\n    }).pipe((0, operators_1.map)(res => this.convertArrayResponse(res, false)));\n  }\n  findAllAssignedUsers(id) {\n    return this.http.get(`${this.assignedUsersUrl}/${id}`, {\n      observe: 'response'\n    }).pipe((0, operators_1.map)(res => this.convertArrayResponse(res, true)));\n  }\n  findAllAssignedRoles(id) {\n    return this.http.get(`${this.assignedRolesUrl}/${id}`, {\n      observe: 'response'\n    }).pipe((0, operators_1.map)(res => this.convertArrayResponse(res, false)));\n  }\n  unAssignUsers(id, subjects) {\n    return this.http.put(`${this.unAssignUsersUrl}/${id}`, subjects, {\n      observe: 'response'\n    });\n  }\n  assignUsers(id, subjects) {\n    return this.http.put(`${this.assignUsersUrl}/${id}`, subjects, {\n      observe: 'response'\n    });\n  }\n  searchUnAssignedUsers(req) {\n    const params = (0, request_util_1.createRequestOption)(req);\n    return this.http.get(this.searchUnAssignedUsersUrl, {\n      params,\n      observe: 'response'\n    }).pipe((0, operators_1.map)(res => this.convertArrayResponse(res, true)));\n  }\n  unAssignRoles(id, resources) {\n    return this.http.put(`${this.unAssignRolesUrl}/${id}`, resources, {\n      observe: 'response'\n    });\n  }\n  assignRoles(id, subjects) {\n    return this.http.put(`${this.assignRolesUrl}/${id}`, subjects, {\n      observe: 'response'\n    });\n  }\n  searchUnAssignedRoles(req) {\n    const params = (0, request_util_1.createRequestOption)(req);\n    return this.http.get(this.searchUnAssignedRolesUrl, {\n      params,\n      observe: 'response'\n    }).pipe((0, operators_1.map)(res => this.convertArrayResponse(res, false)));\n  }\n  convertArrayResponse(res, isUser) {\n    const jsonResponse = res.body;\n    const body = [];\n    if (jsonResponse) {\n      for (let i = 0; i < jsonResponse.length; i++) {\n        body.push(this.convertItemFromServer(jsonResponse[i], isUser));\n      }\n    }\n    return res.clone({\n      body\n    });\n  }\n  convertItemFromServer(entity, isUser) {\n    if (entity) {\n      if (isUser) {\n        // eslint-disable-next-line @typescript-eslint/restrict-plus-operands\n        entity.fullName = entity.firstName + ' ' + entity.lastName;\n      }\n      entity.createdBy = entity.createdBy ? entity.createdBy.replace('PASSWORD/', '').replace('NCSAD/', '') : '';\n      entity.updatedBy = entity.updatedBy ? entity.updatedBy.replace('PASSWORD/', '').replace('NCSAD/', '') : '';\n    }\n    return entity;\n  }\n  convert(group) {\n    const copy = Object.assign({}, group);\n    return copy;\n  }\n}\nexports.GroupService = GroupService;\nGroupService.ɵfac = function GroupService_Factory(t) {\n  return new (t || GroupService)(i0.ɵɵinject(i1.HttpClient));\n};\nGroupService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: GroupService,\n  factory: GroupService.ɵfac\n});","map":{"version":3,"mappings":"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","names":["GroupService","constructor","http","app_constants_1","resourceUrl","create","group","copy","convert","post","observe","pipe","res","jsonResponse","body","convertItemFromServer","update","put","jsonUpdateResponse","find","id","get","jsonFindResponse","query","req","params","convertArrayResponse","delete","findAll","request","findAllAssignedUsers","assignedUsersUrl","findAllAssignedRoles","assignedRolesUrl","unAssignUsers","subjects","unAssignUsersUrl","assignUsers","assignUsersUrl","searchUnAssignedUsers","searchUnAssignedUsersUrl","unAssignRoles","resources","unAssignRolesUrl","assignRoles","assignRolesUrl","searchUnAssignedRoles","searchUnAssignedRolesUrl","isUser","i","length","push","clone","entity","fullName","firstName","lastName","createdBy","replace","updatedBy","Object","assign","exports","factory"],"sourceRoot":"","sources":["C:\\Users\\D1347074\\Desktop\\projects 2\\nspayiiapp\\src\\main\\webapp\\app\\admin\\access-control\\group\\group.service.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-unsafe-return */\r\nimport { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpParams, HttpResponse } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { Group } from './group.model';\r\nimport { createRequestOption } from 'app/core/request/request-util';\r\nimport { Subject } from '../user/user.model';\r\nimport { Resource } from '../resource/resource.model';\r\nimport { SERVER_API_URL } from '../../../app.constants';\r\n\r\n@Injectable()\r\nexport class GroupService {\r\n  private resourceUrl = SERVER_API_URL + 'api/groups';\r\n  private assignedUsersUrl = this.resourceUrl + '/assignedUsers';\r\n  private unAssignUsersUrl = this.resourceUrl + '/unAssignUsers';\r\n  private searchUnAssignedUsersUrl = this.resourceUrl + '/search/unAssignedUsers';\r\n  private assignUsersUrl = this.resourceUrl + '/assignUsers';\r\n  private assignedRolesUrl = this.resourceUrl + '/assignedRoles';\r\n  private unAssignRolesUrl = this.resourceUrl + '/unAssignRoles';\r\n  private searchUnAssignedRolesUrl = this.resourceUrl + '/search/unAssignedRoles';\r\n  private assignRolesUrl = this.resourceUrl + '/assignRoles';\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  create(group: Group): Observable<Group> {\r\n    const copy = this.convert(group);\r\n    return this.http.post(this.resourceUrl, copy, { observe: 'response' }).pipe(\r\n      map((res: HttpResponse<any>) => {\r\n        const jsonResponse = res.body;\r\n        this.convertItemFromServer(jsonResponse, false);\r\n        return jsonResponse;\r\n      })\r\n    );\r\n  }\r\n\r\n  update(group: Group): Observable<Group> {\r\n    const copy = this.convert(group);\r\n    return this.http.put(this.resourceUrl, copy, { observe: 'response' }).pipe(\r\n      map((res: HttpResponse<any>) => {\r\n        const jsonUpdateResponse = res.body;\r\n        this.convertItemFromServer(jsonUpdateResponse, false);\r\n        return jsonUpdateResponse;\r\n      })\r\n    );\r\n  }\r\n\r\n  find(id: string): Observable<Group> {\r\n    return this.http.get(`${this.resourceUrl}/${id}`, { observe: 'response' }).pipe(\r\n      map((res: HttpResponse<any>) => {\r\n        const jsonFindResponse = res.body;\r\n        this.convertItemFromServer(jsonFindResponse, false);\r\n        return jsonFindResponse;\r\n      })\r\n    );\r\n  }\r\n\r\n  query(req?: any): Observable<HttpResponse<any>> {\r\n    const params: HttpParams = createRequestOption(req);\r\n    return this.http\r\n      .get(this.resourceUrl, { params, observe: 'response' })\r\n      .pipe(map((res: HttpResponse<any>) => this.convertArrayResponse(res, false)));\r\n  }\r\n\r\n  delete(id: string): Observable<HttpResponse<any>> {\r\n    return this.http.delete(`${this.resourceUrl}/${id}`, { observe: 'response' });\r\n  }\r\n\r\n  findAll(request?: any): Observable<HttpResponse<any>> {\r\n    const params: HttpParams = createRequestOption(request);\r\n    return this.http\r\n      .get(this.resourceUrl, { params, observe: 'response' })\r\n      .pipe(map((res: HttpResponse<any>) => this.convertArrayResponse(res, false)));\r\n  }\r\n\r\n  findAllAssignedUsers(id: string): Observable<HttpResponse<any>> {\r\n    return this.http\r\n      .get(`${this.assignedUsersUrl}/${id}`, { observe: 'response' })\r\n      .pipe(map((res: HttpResponse<any>) => this.convertArrayResponse(res, true)));\r\n  }\r\n\r\n  findAllAssignedRoles(id: string): Observable<HttpResponse<any>> {\r\n    return this.http\r\n      .get(`${this.assignedRolesUrl}/${id}`, { observe: 'response' })\r\n      .pipe(map((res: HttpResponse<any>) => this.convertArrayResponse(res, false)));\r\n  }\r\n\r\n  unAssignUsers(id: string, subjects: Subject[]): Observable<HttpResponse<any>> {\r\n    return this.http.put(`${this.unAssignUsersUrl}/${id}`, subjects, { observe: 'response' });\r\n  }\r\n\r\n  assignUsers(id: string, subjects: Subject[]): Observable<HttpResponse<any>> {\r\n    return this.http.put(`${this.assignUsersUrl}/${id}`, subjects, { observe: 'response' });\r\n  }\r\n\r\n  searchUnAssignedUsers(req?: any): any {\r\n    const params: HttpParams = createRequestOption(req);\r\n    return this.http\r\n      .get(this.searchUnAssignedUsersUrl, { params, observe: 'response' })\r\n      .pipe(map((res: HttpResponse<any>) => this.convertArrayResponse(res, true)));\r\n  }\r\n\r\n  unAssignRoles(id: string, resources: Resource[]): Observable<HttpResponse<any>> {\r\n    return this.http.put(`${this.unAssignRolesUrl}/${id}`, resources, { observe: 'response' });\r\n  }\r\n\r\n  assignRoles(id: string, subjects: Subject[]): Observable<HttpResponse<any>> {\r\n    return this.http.put(`${this.assignRolesUrl}/${id}`, subjects, { observe: 'response' });\r\n  }\r\n\r\n  searchUnAssignedRoles(req?: any): any {\r\n    const params: HttpParams = createRequestOption(req);\r\n    return this.http\r\n      .get(this.searchUnAssignedRolesUrl, { params, observe: 'response' })\r\n      .pipe(map((res: HttpResponse<any>) => this.convertArrayResponse(res, false)));\r\n  }\r\n\r\n  private convertArrayResponse(res: HttpResponse<any[]>, isUser: boolean): HttpResponse<any[]> {\r\n    const jsonResponse: any[] | null = res.body;\r\n    const body: any[] = [];\r\n    if (jsonResponse) {\r\n      for (let i = 0; i < jsonResponse.length; i++) {\r\n        body.push(this.convertItemFromServer(jsonResponse[i], isUser));\r\n      }\r\n    }\r\n    return res.clone({ body });\r\n  }\r\n\r\n  private convertItemFromServer(entity: any, isUser: boolean): any {\r\n    if (entity) {\r\n      if (isUser) {\r\n        // eslint-disable-next-line @typescript-eslint/restrict-plus-operands\r\n        entity.fullName = entity.firstName + ' ' + entity.lastName;\r\n      }\r\n      entity.createdBy = entity.createdBy ? entity.createdBy.replace('PASSWORD/', '').replace('NCSAD/', '') : '';\r\n      entity.updatedBy = entity.updatedBy ? entity.updatedBy.replace('PASSWORD/', '').replace('NCSAD/', '') : '';\r\n    }\r\n    return entity;\r\n  }\r\n\r\n  private convert(group: Group): Group {\r\n    const copy: Group = Object.assign({}, group);\r\n    return copy;\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}