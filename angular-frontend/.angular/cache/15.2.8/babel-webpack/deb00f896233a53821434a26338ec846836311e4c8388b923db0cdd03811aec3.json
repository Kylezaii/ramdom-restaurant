{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.WorkingDataSectionComponent = void 0;\nconst tslib_1 = require(\"tslib\");\nconst http_1 = require(\"@angular/common/http\");\nconst core_1 = require(\"@angular/core\");\nconst private_hirer_driver_component_1 = require(\"app/claim/se-claim/se-claim-verification/working-data-section/private-hirer-driver/private-hirer-driver.component\");\nconst insurance_income_tax_component_1 = require(\"./insurance-income-tax/insurance-income-tax.component\");\nconst taxi_component_1 = require(\"app/claim/se-claim/se-claim-verification/working-data-section/taxi/taxi.component\");\nconst replacement_component_1 = require(\"app/claim/se-claim/se-claim-verification/working-data-section/replacement/replacement.component\");\nconst others_component_1 = require(\"app/claim/se-claim/se-claim-verification/working-data-section/others/others.component\");\nconst property_agent_component_1 = require(\"./property-agent/property-agent.component\");\nconst insurance_avg_income_component_1 = require(\"./insurance-avg-income/insurance-avg-income.component\");\nconst partner_component_1 = require(\"./partner/partner.component\");\nconst sole_prop_component_1 = require(\"./sole-prop/sole-prop.component\");\nconst moment_1 = tslib_1.__importDefault(require(\"moment\"));\nconst nspay2_constants_1 = require(\"app/nspay2.constants\");\nconst i0 = tslib_1.__importStar(require(\"@angular/core\"));\nconst i1 = tslib_1.__importStar(require(\"../../service/se-claim.service\"));\nconst i2 = tslib_1.__importStar(require(\"app/layouts/service/customtoast.service\"));\nconst i3 = tslib_1.__importStar(require(\"app/core/util/date-utils.service\"));\nconst i4 = tslib_1.__importStar(require(\"@angular/forms\"));\nconst i5 = tslib_1.__importStar(require(\"app/shared/confirm/nsp-confirm.service\"));\nconst i6 = tslib_1.__importStar(require(\"app/core/util/clone.service\"));\nconst i7 = tslib_1.__importStar(require(\"app/ng-connect\"));\nconst i8 = tslib_1.__importStar(require(\"primeng/api\"));\nconst i9 = tslib_1.__importStar(require(\"app/core/util/export-utils.service\"));\nconst i10 = tslib_1.__importStar(require(\"app/core/auth/account.service\"));\nconst i11 = tslib_1.__importStar(require(\"@angular/common\"));\nconst i12 = tslib_1.__importStar(require(\"primeng/button\"));\nconst i13 = tslib_1.__importStar(require(\"primeng/checkbox\"));\nconst i14 = tslib_1.__importStar(require(\"primeng/dropdown\"));\nconst i15 = tslib_1.__importStar(require(\"primeng/dialog\"));\nconst i16 = tslib_1.__importStar(require(\"primeng/confirmpopup\"));\nconst i17 = tslib_1.__importStar(require(\"primeng/accordion\"));\nconst i18 = tslib_1.__importStar(require(\"./insurance-income-tax/insurance-income-tax.component\"));\nconst i19 = tslib_1.__importStar(require(\"./insurance-avg-income/insurance-avg-income.component\"));\nconst i20 = tslib_1.__importStar(require(\"./partner/partner.component\"));\nconst i21 = tslib_1.__importStar(require(\"./sole-prop/sole-prop.component\"));\nconst i22 = tslib_1.__importStar(require(\"./property-agent/property-agent.component\"));\nconst i23 = tslib_1.__importStar(require(\"./others-legacy/others-legacy.component\"));\nconst i24 = tslib_1.__importStar(require(\"./private-hirer-driver/private-hirer-driver.component\"));\nconst i25 = tslib_1.__importStar(require(\"./taxi/taxi.component\"));\nconst i26 = tslib_1.__importStar(require(\"./replacement/replacement.component\"));\nconst i27 = tslib_1.__importStar(require(\"./others/others.component\"));\nconst _c0 = [\"accordionTab\"];\nconst _c1 = [\"phdDeliveryWorkingData\"];\nconst _c2 = [\"insurITXWorkingData\"];\nfunction WorkingDataSectionComponent_ng_template_3_button_17_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r11 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"button\", 27);\n    i0.ɵɵlistener(\"click\", function WorkingDataSectionComponent_ng_template_3_button_17_Template_button_click_0_listener($event) {\n      i0.ɵɵrestoreView(_r11);\n      const ctx_r10 = i0.ɵɵnextContext(2);\n      ctx_r10.displayNIWDDialog = true;\n      $event.stopPropagation();\n      return i0.ɵɵresetView(ctx_r10.checkForITXPopulatedClaims());\n    });\n    i0.ɵɵtext(1, \"\\n          \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction WorkingDataSectionComponent_ng_template_3_button_19_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r13 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"button\", 28);\n    i0.ɵɵlistener(\"click\", function WorkingDataSectionComponent_ng_template_3_button_19_Template_button_click_0_listener($event) {\n      i0.ɵɵrestoreView(_r13);\n      const ctx_r12 = i0.ɵɵnextContext(2);\n      ctx_r12.displayNAWDDialog = true;\n      return i0.ɵɵresetView($event.stopPropagation());\n    });\n    i0.ɵɵtext(1, \"\\n          \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction WorkingDataSectionComponent_ng_template_3_button_23_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r15 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"button\", 29);\n    i0.ɵɵlistener(\"click\", function WorkingDataSectionComponent_ng_template_3_button_23_Template_button_click_0_listener($event) {\n      i0.ɵɵrestoreView(_r15);\n      const ctx_r14 = i0.ɵɵnextContext(2);\n      ctx_r14.confirmInsertNewRWD($event);\n      return i0.ɵɵresetView($event.stopPropagation());\n    });\n    i0.ɵɵtext(1, \"\\n          \");\n    i0.ɵɵelementEnd();\n  }\n}\nconst _c3 = function () {\n  return {\n    \"width\": \"20em\"\n  };\n};\nfunction WorkingDataSectionComponent_ng_template_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r17 = i0.ɵɵgetCurrentView();\n    i0.ɵɵtext(0, \"\\n        \");\n    i0.ɵɵelementStart(1, \"div\", 17);\n    i0.ɵɵtext(2, \"\\n            \");\n    i0.ɵɵelementStart(3, \"label\", 18);\n    i0.ɵɵtext(4, \"Working Data:\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(5, \"\\n            \");\n    i0.ɵɵelementStart(6, \"div\", 19);\n    i0.ɵɵtext(7, \"\\n                \");\n    i0.ɵɵelementStart(8, \"p-dropdown\", 20);\n    i0.ɵɵlistener(\"ngModelChange\", function WorkingDataSectionComponent_ng_template_3_Template_p_dropdown_ngModelChange_8_listener($event) {\n      i0.ɵɵrestoreView(_r17);\n      const ctx_r16 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r16.selectedWDOption = $event);\n    })(\"click\", function WorkingDataSectionComponent_ng_template_3_Template_p_dropdown_click_8_listener($event) {\n      return $event.stopPropagation();\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(9, \"\\n            \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(10, \"\\n        \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(11, \"\\n        \");\n    i0.ɵɵelementStart(12, \"div\", 21);\n    i0.ɵɵtext(13, \"\\n          \");\n    i0.ɵɵelementStart(14, \"button\", 22);\n    i0.ɵɵlistener(\"click\", function WorkingDataSectionComponent_ng_template_3_Template_button_click_14_listener() {\n      i0.ɵɵrestoreView(_r17);\n      const ctx_r19 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r19.tester());\n    });\n    i0.ɵɵtext(15, \"\\n          \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(16, \"\\n          \");\n    i0.ɵɵtemplate(17, WorkingDataSectionComponent_ng_template_3_button_17_Template, 2, 0, \"button\", 23);\n    i0.ɵɵtext(18, \"\\n          \");\n    i0.ɵɵtemplate(19, WorkingDataSectionComponent_ng_template_3_button_19_Template, 2, 0, \"button\", 24);\n    i0.ɵɵtext(20, \"\\n          \");\n    i0.ɵɵelement(21, \"p-confirmPopup\", 25);\n    i0.ɵɵtext(22, \"\\n          \");\n    i0.ɵɵtemplate(23, WorkingDataSectionComponent_ng_template_3_button_23_Template, 2, 0, \"button\", 26);\n    i0.ɵɵtext(24, \"\\n        \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(25, \"\\n    \");\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(8);\n    i0.ɵɵstyleMap(i0.ɵɵpureFunction0(7, _c3));\n    i0.ɵɵproperty(\"options\", ctx_r1.workingDataOptions)(\"ngModel\", ctx_r1.selectedWDOption);\n    i0.ɵɵadvance(9);\n    i0.ɵɵproperty(\"ngIf\", (ctx_r1.currHardCopyDetails == null ? null : ctx_r1.currHardCopyDetails.headerDto == null ? null : ctx_r1.currHardCopyDetails.headerDto.claimOption) === \"2\" && !ctx_r1.readOnly && ctx_r1.hasValidAuthorityAndStation());\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", (ctx_r1.currHardCopyDetails == null ? null : ctx_r1.currHardCopyDetails.headerDto == null ? null : ctx_r1.currHardCopyDetails.headerDto.claimOption) === \"1\" && !ctx_r1.readOnly && ctx_r1.hasValidAuthorityAndStation());\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"ngIf\", (ctx_r1.currHardCopyDetails == null ? null : ctx_r1.currHardCopyDetails.headerDto == null ? null : ctx_r1.currHardCopyDetails.headerDto.claimOption) === \"3\" && !ctx_r1.readOnly && ctx_r1.hasValidAuthorityAndStation());\n  }\n}\nfunction WorkingDataSectionComponent_div_5_n2_insurance_income_tax_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r32 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"n2-insurance-income-tax\", 37, 38);\n    i0.ɵɵlistener(\"totalAmtPayEvent\", function WorkingDataSectionComponent_div_5_n2_insurance_income_tax_3_Template_n2_insurance_income_tax_totalAmtPayEvent_0_listener($event) {\n      i0.ɵɵrestoreView(_r32);\n      const ctx_r31 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r31.getTotalAmtPay($event));\n    });\n    i0.ɵɵtext(2, \"\\n\\n      \");\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r20 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"selectedWDOption\", ctx_r20.selectedWDOption)(\"seHardCopyDetails\", ctx_r20.seHardCopyDetails)(\"itemDetailsSection\", ctx_r20.itemDetailsSection)(\"workingDataWithChanges\", ctx_r20.workingDataWithChanges)(\"newUnsavedWorkingData\", ctx_r20.newUnsavedWorkingData)(\"saveSEClaimRequest\", ctx_r20.saveSEClaimRequest)(\"irasDetails\", ctx_r20.irasDetails)(\"trgStartDte\", ctx_r20.trgStartDte)(\"readOnly\", ctx_r20.readOnly)(\"station\", ctx_r20.station);\n  }\n}\nfunction WorkingDataSectionComponent_div_5_n2_insurance_avg_income_6_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r34 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"n2-insurance-avg-income\", 37);\n    i0.ɵɵlistener(\"totalAmtPayEvent\", function WorkingDataSectionComponent_div_5_n2_insurance_avg_income_6_Template_n2_insurance_avg_income_totalAmtPayEvent_0_listener($event) {\n      i0.ɵɵrestoreView(_r34);\n      const ctx_r33 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r33.getTotalAmtPay($event));\n    });\n    i0.ɵɵtext(1, \"\\n      \");\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r21 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"selectedWDOption\", ctx_r21.selectedWDOption)(\"seHardCopyDetails\", ctx_r21.seHardCopyDetails)(\"itemDetailsSection\", ctx_r21.itemDetailsSection)(\"workingDataWithChanges\", ctx_r21.workingDataWithChanges)(\"newUnsavedWorkingData\", ctx_r21.newUnsavedWorkingData)(\"saveSEClaimRequest\", ctx_r21.saveSEClaimRequest)(\"irasDetails\", ctx_r21.irasDetails)(\"trgStartDte\", ctx_r21.trgStartDte)(\"readOnly\", ctx_r21.readOnly)(\"station\", ctx_r21.station);\n  }\n}\nfunction WorkingDataSectionComponent_div_5_n2_partner_9_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r36 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"n2-partner\", 39);\n    i0.ɵɵlistener(\"totalAmtPayEvent\", function WorkingDataSectionComponent_div_5_n2_partner_9_Template_n2_partner_totalAmtPayEvent_0_listener($event) {\n      i0.ɵɵrestoreView(_r36);\n      const ctx_r35 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r35.getTotalAmtPay($event));\n    });\n    i0.ɵɵtext(1, \"\\n      \");\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r22 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"selectedWDOption\", ctx_r22.selectedWDOption)(\"seHardCopyDetails\", ctx_r22.seHardCopyDetails)(\"workingDataWithChanges\", ctx_r22.workingDataWithChanges)(\"newUnsavedWorkingData\", ctx_r22.newUnsavedWorkingData)(\"saveSEClaimRequest\", ctx_r22.saveSEClaimRequest)(\"trgStartDte\", ctx_r22.trgStartDte)(\"itemDetailsSection\", ctx_r22.itemDetailsSection)(\"readOnly\", ctx_r22.readOnly)(\"station\", ctx_r22.station);\n  }\n}\nfunction WorkingDataSectionComponent_div_5_n2_property_agent_12_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r38 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"n2-property-agent\", 40);\n    i0.ɵɵlistener(\"totalAmtPayEvent\", function WorkingDataSectionComponent_div_5_n2_property_agent_12_Template_n2_property_agent_totalAmtPayEvent_0_listener($event) {\n      i0.ɵɵrestoreView(_r38);\n      const ctx_r37 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r37.getTotalAmtPay($event));\n    });\n    i0.ɵɵtext(1, \"\\n      \");\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r23 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"selectedWDOption\", ctx_r23.selectedWDOption)(\"seHardCopyDetails\", ctx_r23.seHardCopyDetails)(\"itemDetailsSection\", ctx_r23.itemDetailsSection)(\"workingDataWithChanges\", ctx_r23.workingDataWithChanges)(\"newUnsavedWorkingData\", ctx_r23.newUnsavedWorkingData)(\"saveSEClaimRequest\", ctx_r23.saveSEClaimRequest)(\"trgStartDte\", ctx_r23.trgStartDte)(\"readOnly\", ctx_r23.readOnly)(\"station\", ctx_r23.station);\n  }\n}\nfunction WorkingDataSectionComponent_div_5_n2_sole_prop_15_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r40 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"n2-sole-prop\", 40);\n    i0.ɵɵlistener(\"totalAmtPayEvent\", function WorkingDataSectionComponent_div_5_n2_sole_prop_15_Template_n2_sole_prop_totalAmtPayEvent_0_listener($event) {\n      i0.ɵɵrestoreView(_r40);\n      const ctx_r39 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r39.getTotalAmtPay($event));\n    });\n    i0.ɵɵtext(1, \"\\n      \");\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r24 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"selectedWDOption\", ctx_r24.selectedWDOption)(\"seHardCopyDetails\", ctx_r24.seHardCopyDetails)(\"itemDetailsSection\", ctx_r24.itemDetailsSection)(\"workingDataWithChanges\", ctx_r24.workingDataWithChanges)(\"newUnsavedWorkingData\", ctx_r24.newUnsavedWorkingData)(\"saveSEClaimRequest\", ctx_r24.saveSEClaimRequest)(\"trgStartDte\", ctx_r24.trgStartDte)(\"readOnly\", ctx_r24.readOnly)(\"station\", ctx_r24.station);\n  }\n}\nfunction WorkingDataSectionComponent_div_5_n2_private_hirer_driver_18_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r43 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"n2-private-hirer-driver\", 41, 42);\n    i0.ɵɵlistener(\"totalAmtPayEvent\", function WorkingDataSectionComponent_div_5_n2_private_hirer_driver_18_Template_n2_private_hirer_driver_totalAmtPayEvent_0_listener($event) {\n      i0.ɵɵrestoreView(_r43);\n      const ctx_r42 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r42.getTotalAmtPay($event));\n    });\n    i0.ɵɵtext(2, \"\\n      \");\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r25 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"selectedWDOption\", ctx_r25.selectedWDOption)(\"seHardCopyDetails\", ctx_r25.seHardCopyDetails)(\"itemDetailsSection\", ctx_r25.itemDetailsSection)(\"workingDataWithChanges\", ctx_r25.workingDataWithChanges)(\"newUnsavedWorkingData\", ctx_r25.newUnsavedWorkingData)(\"saveSEClaimRequest\", ctx_r25.saveSEClaimRequest)(\"readOnly\", ctx_r25.readOnly)(\"station\", ctx_r25.station);\n  }\n}\nfunction WorkingDataSectionComponent_div_5_n2_taxi_21_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"n2-taxi\", 43);\n    i0.ɵɵtext(1, \"\\n      \");\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r26 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"selectedWDOption\", ctx_r26.selectedWDOption)(\"seHardCopyDetails\", ctx_r26.seHardCopyDetails)(\"workingDataWithChanges\", ctx_r26.workingDataWithChanges)(\"newUnsavedWorkingData\", ctx_r26.newUnsavedWorkingData)(\"saveSEClaimRequest\", ctx_r26.saveSEClaimRequest)(\"readOnly\", ctx_r26.readOnly)(\"station\", ctx_r26.station);\n  }\n}\nfunction WorkingDataSectionComponent_div_5_n2_others_24_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r45 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"n2-others\", 40);\n    i0.ɵɵlistener(\"totalAmtPayEvent\", function WorkingDataSectionComponent_div_5_n2_others_24_Template_n2_others_totalAmtPayEvent_0_listener($event) {\n      i0.ɵɵrestoreView(_r45);\n      const ctx_r44 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r44.getTotalAmtPay($event));\n    });\n    i0.ɵɵtext(1, \"\\n      \");\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r27 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"selectedWDOption\", ctx_r27.selectedWDOption)(\"seHardCopyDetails\", ctx_r27.seHardCopyDetails)(\"itemDetailsSection\", ctx_r27.itemDetailsSection)(\"workingDataWithChanges\", ctx_r27.workingDataWithChanges)(\"newUnsavedWorkingData\", ctx_r27.newUnsavedWorkingData)(\"saveSEClaimRequest\", ctx_r27.saveSEClaimRequest)(\"trgStartDte\", ctx_r27.trgStartDte)(\"readOnly\", ctx_r27.readOnly)(\"station\", ctx_r27.station);\n  }\n}\nfunction WorkingDataSectionComponent_div_5_n2_others_legacy_27_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"n2-others-legacy\", 44);\n  }\n  if (rf & 2) {\n    const ctx_r28 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"selectedWDOption\", ctx_r28.selectedWDOption.obj)(\"seHardCopyDetails\", ctx_r28.seHardCopyDetails);\n  }\n}\nfunction WorkingDataSectionComponent_div_5_n2_replacement_30_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"n2-replacement\", 45);\n    i0.ɵɵtext(1, \"\\n      \");\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r29 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"selectedWDOption\", ctx_r29.selectedWDOption)(\"workingDataWithChanges\", ctx_r29.workingDataWithChanges)(\"newUnsavedWorkingData\", ctx_r29.newUnsavedWorkingData)(\"saveSEClaimRequest\", ctx_r29.saveSEClaimRequest)(\"readOnly\", ctx_r29.readOnly)(\"station\", ctx_r29.station);\n  }\n}\nfunction WorkingDataSectionComponent_div_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \"\\n      \");\n    i0.ɵɵtext(2, \"\\n      \");\n    i0.ɵɵtemplate(3, WorkingDataSectionComponent_div_5_n2_insurance_income_tax_3_Template, 3, 10, \"n2-insurance-income-tax\", 30);\n    i0.ɵɵtext(4, \"\\n      \");\n    i0.ɵɵtext(5, \"\\n      \");\n    i0.ɵɵtemplate(6, WorkingDataSectionComponent_div_5_n2_insurance_avg_income_6_Template, 2, 10, \"n2-insurance-avg-income\", 30);\n    i0.ɵɵtext(7, \"\\n      \");\n    i0.ɵɵtext(8, \"\\n      \");\n    i0.ɵɵtemplate(9, WorkingDataSectionComponent_div_5_n2_partner_9_Template, 2, 9, \"n2-partner\", 31);\n    i0.ɵɵtext(10, \"\\n      \");\n    i0.ɵɵtext(11, \"\\n      \");\n    i0.ɵɵtemplate(12, WorkingDataSectionComponent_div_5_n2_property_agent_12_Template, 2, 9, \"n2-property-agent\", 32);\n    i0.ɵɵtext(13, \"\\n      \");\n    i0.ɵɵtext(14, \"\\n      \");\n    i0.ɵɵtemplate(15, WorkingDataSectionComponent_div_5_n2_sole_prop_15_Template, 2, 9, \"n2-sole-prop\", 32);\n    i0.ɵɵtext(16, \"\\n      \");\n    i0.ɵɵtext(17, \"\\n      \");\n    i0.ɵɵtemplate(18, WorkingDataSectionComponent_div_5_n2_private_hirer_driver_18_Template, 3, 8, \"n2-private-hirer-driver\", 33);\n    i0.ɵɵtext(19, \"\\n      \");\n    i0.ɵɵtext(20, \"\\n      \");\n    i0.ɵɵtemplate(21, WorkingDataSectionComponent_div_5_n2_taxi_21_Template, 2, 7, \"n2-taxi\", 34);\n    i0.ɵɵtext(22, \"\\n      \");\n    i0.ɵɵtext(23, \"\\n      \");\n    i0.ɵɵtemplate(24, WorkingDataSectionComponent_div_5_n2_others_24_Template, 2, 9, \"n2-others\", 32);\n    i0.ɵɵtext(25, \"\\n      \");\n    i0.ɵɵtext(26, \"\\n      \");\n    i0.ɵɵtemplate(27, WorkingDataSectionComponent_div_5_n2_others_legacy_27_Template, 1, 2, \"n2-others-legacy\", 35);\n    i0.ɵɵtext(28, \"\\n      \");\n    i0.ɵɵtext(29, \"\\n      \");\n    i0.ɵɵtemplate(30, WorkingDataSectionComponent_div_5_n2_replacement_30_Template, 2, 6, \"n2-replacement\", 36);\n    i0.ɵɵtext(31, \"\\n    \");\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"ngIf\", (ctx_r2.selectedWDOption.obj == null ? null : ctx_r2.selectedWDOption.obj.workingDataTypeCode) === \"01\");\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"ngIf\", (ctx_r2.selectedWDOption.obj == null ? null : ctx_r2.selectedWDOption.obj.workingDataTypeCode) === \"02\");\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"ngIf\", (ctx_r2.selectedWDOption.obj == null ? null : ctx_r2.selectedWDOption.obj.workingDataTypeCode) === \"03\");\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"ngIf\", (ctx_r2.selectedWDOption.obj == null ? null : ctx_r2.selectedWDOption.obj.workingDataTypeCode) === \"04\");\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"ngIf\", (ctx_r2.selectedWDOption.obj == null ? null : ctx_r2.selectedWDOption.obj.workingDataTypeCode) === \"05\");\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"ngIf\", (ctx_r2.selectedWDOption.obj == null ? null : ctx_r2.selectedWDOption.obj.workingDataTypeCode) === \"06\");\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"ngIf\", (ctx_r2.selectedWDOption.obj == null ? null : ctx_r2.selectedWDOption.obj.workingDataTypeCode) === \"07\");\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"ngIf\", (ctx_r2.selectedWDOption.obj == null ? null : ctx_r2.selectedWDOption.obj.workingDataTypeCode) === \"08\");\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"ngIf\", (ctx_r2.selectedWDOption.obj == null ? null : ctx_r2.selectedWDOption.obj.workingDataTypeCode) === \"09\");\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"ngIf\", (ctx_r2.selectedWDOption.obj == null ? null : ctx_r2.selectedWDOption.obj.workingDataTypeCode) === \"10\");\n  }\n}\nfunction WorkingDataSectionComponent_ng_template_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtext(0, \"\\n          \");\n    i0.ɵɵelementStart(1, \"span\");\n    i0.ɵɵelement(2, \"i\", 46);\n    i0.ɵɵtext(3, \"\\n              No records found.\\n          \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(4, \"\\n    \");\n  }\n}\nfunction WorkingDataSectionComponent_ng_template_32_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r47 = i0.ɵɵgetCurrentView();\n    i0.ɵɵtext(0, \"\\n        \");\n    i0.ɵɵelementStart(1, \"button\", 47);\n    i0.ɵɵlistener(\"click\", function WorkingDataSectionComponent_ng_template_32_Template_button_click_1_listener() {\n      i0.ɵɵrestoreView(_r47);\n      const ctx_r46 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r46.displayNIWDDialog = false);\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(2, \"\\n        \");\n    i0.ɵɵelementStart(3, \"button\", 48);\n    i0.ɵɵlistener(\"click\", function WorkingDataSectionComponent_ng_template_32_Template_button_click_3_listener() {\n      i0.ɵɵrestoreView(_r47);\n      const ctx_r48 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r48.insertNewIWD());\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(4, \"\\n    \");\n  }\n}\nfunction WorkingDataSectionComponent_ng_template_56_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r50 = i0.ɵɵgetCurrentView();\n    i0.ɵɵtext(0, \"\\n    \");\n    i0.ɵɵelementStart(1, \"button\", 47);\n    i0.ɵɵlistener(\"click\", function WorkingDataSectionComponent_ng_template_56_Template_button_click_1_listener() {\n      i0.ɵɵrestoreView(_r50);\n      const ctx_r49 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r49.displayNAWDDialog = false);\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(2, \"\\n    \");\n    i0.ɵɵelementStart(3, \"button\", 48);\n    i0.ɵɵlistener(\"click\", function WorkingDataSectionComponent_ng_template_56_Template_button_click_3_listener() {\n      i0.ɵɵrestoreView(_r50);\n      const ctx_r51 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r51.insertNewAveWD());\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(4, \"\\n  \");\n  }\n}\nconst _c4 = function () {\n  return {\n    width: \"30vw\"\n  };\n};\nconst _c5 = function () {\n  return {\n    \"width\": \"100%\"\n  };\n};\nclass WorkingDataSectionComponent {\n  constructor(seClaimService, toastService, dateUtilsService, formBuilder, cd, nspConfirmationService, cloneService, codeService, nspConfirmService, confirmationService, exportUtilsService, accountService, zone, localeId) {\n    this.seClaimService = seClaimService;\n    this.toastService = toastService;\n    this.dateUtilsService = dateUtilsService;\n    this.formBuilder = formBuilder;\n    this.cd = cd;\n    this.nspConfirmationService = nspConfirmationService;\n    this.cloneService = cloneService;\n    this.codeService = codeService;\n    this.nspConfirmService = nspConfirmService;\n    this.confirmationService = confirmationService;\n    this.exportUtilsService = exportUtilsService;\n    this.accountService = accountService;\n    this.zone = zone;\n    this.localeId = localeId;\n    this.selectedChange = new core_1.EventEmitter();\n    this.displayNIWDDialog = false;\n    this.displayNAWDDialog = false;\n    this.currHardCopyDetails = {};\n    this.isPastClaimAvailable = false;\n    this.selectedWDOption = {};\n    this.selectedYearOption = {};\n    this.workingDataOptions = [];\n    this.yearOptions = [];\n    this.aveWorkingDataTemplateOptions = [];\n    this.totalAmtPay = 0;\n    this.workingDataWithChanges = new Map();\n    this.newUnsavedWorkingData = new Map();\n    this.totalAmtPayEvent = new core_1.EventEmitter();\n  }\n  ngOnInit() {\n    console.log(\"init working data section\");\n  }\n  ngOnChanges(changes) {\n    if (changes.seHardCopyDetails?.currentValue) {\n      this.currHardCopyDetails = changes.seHardCopyDetails?.currentValue;\n      this.retrieveWDDropdown();\n      if (this.currHardCopyDetails?.headerDto?.claimOption === '2') {\n        const claimStartYear = this.dateUtilsService.convertStrToDate(this.currHardCopyDetails.trgStartDte, \"DD-MM-YYYY\").getFullYear();\n        console.log(\"claim Year\", this.currHardCopyDetails.trgStartDte);\n        this.yearOptions = [{\n          name: claimStartYear,\n          key: claimStartYear\n        }, {\n          name: claimStartYear - 1,\n          key: claimStartYear - 1\n        }];\n        this.selectedYearOption = this.yearOptions[0].key;\n        // this.selectedOption = this.workingDataOptions[0];\n      }\n    }\n  }\n\n  retrieveWDDropdown() {\n    let params = new http_1.HttpParams();\n    params = params.append(\"claimId\", this.currHardCopyDetails?.claimId);\n    this.seClaimService.retrieveWDDropdown({\n      params\n    }).subscribe(resp => {\n      if (resp) {\n        if (resp.status === 200 && resp.body.data) {\n          const sortedData = resp.body.data.sort(this.sortWDTypeByCode());\n          sortedData.forEach((x, index) => {\n            let archiveDt = \"Active\";\n            if (x.archiveDt !== 0) {\n              archiveDt = this.dateUtilsService.convertUnixToDateString(x.archiveDt, \"DD-MM-YYYY\");\n            }\n            this.workingDataOptions.push({\n              name: x.workingDataTypeCode === '01' ? x.workingDataTypeDesc.concat(\" (\").concat(x.year).concat(\") \").concat(\"(\").concat(archiveDt).concat(\")\") : x.workingDataTypeDesc.concat(\" (\").concat(archiveDt).concat(\")\"),\n              key: index,\n              obj: {\n                workingDataTypeCode: x.workingDataTypeCode,\n                year: x.year,\n                archiveDt: x.archiveDt,\n                workingDataId: x.workingDataId\n              },\n              changes: false,\n              newWD: false,\n              newArchived: false\n            });\n            this.selectedWDOption = this.workingDataOptions[0];\n          });\n          if (this.currHardCopyDetails?.headerDto?.claimOption === '1') {\n            // append to working Data Template Options... shallow copy is fine\n            this.codeService.gets('working_data_ave_dropdown').subscribe(codes => {\n              this.aveWorkingDataTemplateOptions = this.workingDataOptions.concat(codes[0].map(x => {\n                return {\n                  name: x.label['en-US'],\n                  key: x.codeId\n                };\n              }));\n            });\n          }\n        }\n      }\n    }, error => {\n      console.log(\"error is\" + String(error?.error?.error_desc));\n      this.toastService.error(String(error?.error?.error_desc));\n    });\n  }\n  getTotalAmtPay(data) {\n    this.totalAmtPayEvent.emit(data);\n  }\n  // sortWDTypeByCode(){\n  //   return function (a: any, b: any) {\n  //     if (a.workingDataTypeCode === b.workingDataTypeCode) {\n  //       if(a.year === b.year){\n  //         if(a.archiveDt === 0){\n  //           return -1;\n  //         }else if(b.archiveDt === 0){\n  //           return -1;\n  //         }else {\n  //           return a.archiveDt < b.archiveDt ? 1 : -1;\n  //         }\n  //       }else {\n  //         return a.year < b.year ? 1 : -1;\n  //       }\n  //     }\n  //       return (a.workingDataTypeCode as string).localeCompare((b.workingDataTypeCode as string));\n  //     }\n  //   }\n  sortWDTypeByCode() {\n    return function (a, b) {\n      if (a.archiveDt === 0) {\n        return -1;\n      } else if (b.archiveDt === 0) {\n        return 1;\n      } else if (a.archiveDt === b.archiveDt && a.archiveDt !== 0) {\n        return a.workingDataTypeCode.localeCompare(b.workingDataTypeCode);\n      } else {\n        return a.archiveDt < b.archiveDt ? 1 : -1;\n      }\n    };\n  }\n  insertNewIWD() {\n    console.log(\"selected year\", this.selectedYearOption);\n    console.log(\"populate past claim\", this.populatePastClaim);\n    const workingDataOption = {\n      name: \"Insurance \".concat(\" (Active)\"),\n      key: this.newUnsavedWorkingData.size,\n      obj: {\n        workingDataTypeCode: \"01\",\n        year: this.selectedYearOption,\n        archiveDt: 0,\n        workingDataId: null\n      },\n      changes: false,\n      newWD: true,\n      newArchived: false\n    };\n    this.workingDataOptions.unshift(workingDataOption);\n    // const newFormGrp = this.insurITXWorkingData.populateIncomeTaxInsurForm({dataList:[]}, true);\n    // let phdDeliveryFormGroup:FormGroup;\n    let newFormGrp = null;\n    if (!this.populatePastClaim) {\n      newFormGrp = insurance_income_tax_component_1.InsuranceIncomeTaxComponent.createNewITXInsurFormGroup(this.selectedYearOption, this.formBuilder, this.dateUtilsService);\n    } else {\n      newFormGrp = this.populateFormGroup;\n    }\n    // newFormGrp = insurItxComponent.createNewIncomeTaxInsurForm({dataList:[], year: this.selectedYearOption}, this.populatePastClaim, 'MTH');\n    // //just use the index as the map key\n    this.newUnsavedWorkingData.set(this.newUnsavedWorkingData.size.toString(), {\n      obj: workingDataOption.obj,\n      formGroup: newFormGrp\n    });\n    console.log(\"new unsaved is2 \", this.newUnsavedWorkingData);\n    this.saveSEClaimRequest.workingDataSectionInd = true;\n    this.selectedWDOption = this.workingDataOptions[0];\n    this.displayNIWDDialog = false;\n    this.archiveAllActiveData();\n  }\n  archiveAllActiveData2() {\n    //archive all active working data, also shift them to \"with changes Array in parent Working Data Component\"\n    const existingActiveWD = this.workingDataOptions.slice(1).filter(x => x.obj.archiveDt === 0);\n    existingActiveWD.forEach((x, index) => {\n      const currDate = new Date();\n      x.obj.archiveDt = this.dateUtilsService.convertMomentToUnix(currDate);\n      x.name = x.name.replace(\"Active\", this.dateUtilsService.convertDateToStr(currDate, \"DD-MM-YYYY\"));\n      x.changes = true;\n      // shifting only needs to be done for non-new WD, any new WD will already be in the unsaved list,\n      // updating the dates will be enough, since there is a reference\n      if (!x.newWD) {\n        if (!this.workingDataWithChanges.has(x.obj.workingDataId)) {\n          x.newArchived = true;\n          this.workingDataWithChanges.set(x.obj.workingDataId, {\n            obj: x.obj,\n            formGroup: null\n          });\n        } else {\n          const formGroup = this.workingDataWithChanges.get(x.obj.workingDataId).formGroup;\n          x.newArchived = false;\n          this.workingDataWithChanges.set(x.obj.workingDataId, {\n            obj: x.obj,\n            formGroup\n          });\n        }\n      }\n    });\n  }\n  insertNewAveWD() {\n    if (this.selectedAveWorkingDataTemplateOption !== undefined) {\n      console.log(\"the options\", this.workingDataOptions);\n      console.log(\"the selected\", this.selectedAveWorkingDataTemplateOption);\n      //Check if selected is an existing WD or a new template\n      const existingWD = this.workingDataOptions.find(x => x.key === this.selectedAveWorkingDataTemplateOption);\n      console.log(\"selected What\", existingWD);\n      if (existingWD !== undefined) {\n        //Create new Working Data by copying of selected existing Working Data from db/changed-existing/new-unsaved\n        //find the workingdata based on workingDataId of selected and create new one based of it\n        switch (existingWD.obj.workingDataTypeCode) {\n          //Insurance (AVE)\n          case '02':\n            {\n              const workingDataOption = {\n                name: \"Insurance \".concat(\" (Active)\"),\n                key: this.newUnsavedWorkingData.size,\n                obj: {\n                  workingDataTypeCode: \"02\",\n                  year: null,\n                  archiveDt: 0,\n                  workingDataId: null\n                },\n                changes: false,\n                newWD: true\n              };\n              let insurAveFormGroup;\n              if (!existingWD.changes && !existingWD.newWD) {\n                let params = new http_1.HttpParams();\n                params = params.append(\"workingDataId\", existingWD?.obj?.workingDataId);\n                this.seClaimService.retrieveInsurWD({\n                  params\n                }).subscribe(resp => {\n                  if (resp.status === 200 && resp.body.data) {\n                    insurAveFormGroup = insurance_avg_income_component_1.InsuranceAvgIncomeComponent.mapInsurAveWDToFormGroup(resp.body.data, this.formBuilder, this.dateUtilsService);\n                    this.updateNewWD(insurAveFormGroup, workingDataOption);\n                  }\n                });\n              } else if (existingWD.changes && !existingWD.newWD) {\n                console.log(\"get from changes WD Map\");\n                insurAveFormGroup = this.cloneService.deepCloneFormControlValuesOnly(this.workingDataWithChanges.get(existingWD?.obj?.workingDataId).formGroup);\n                this.updateNewWD(insurAveFormGroup, workingDataOption);\n              } else if (existingWD.newWD) {\n                console.log(\"get from new WD Map\");\n                insurAveFormGroup = this.cloneService.deepCloneFormControlValuesOnly(this.newUnsavedWorkingData.get(existingWD?.key.toString()).formGroup);\n                this.updateNewWD(insurAveFormGroup, workingDataOption);\n              }\n              break;\n            }\n          //Partner\n          case '03':\n            {\n              const workingDataOption = {\n                name: \"Partner \".concat(\" (Active)\"),\n                key: this.newUnsavedWorkingData.size,\n                obj: {\n                  workingDataTypeCode: \"03\",\n                  year: null,\n                  archiveDt: 0,\n                  workingDataId: null\n                },\n                changes: false,\n                newWD: true\n              };\n              let newPartnerFormGroup;\n              if (!existingWD.changes && !existingWD.newWD) {\n                let params = new http_1.HttpParams();\n                params = params.append(\"workingDataId\", existingWD?.obj?.workingDataId);\n                this.seClaimService.retrieveSolePropPartnerWD({\n                  params\n                }).subscribe(resp => {\n                  if (resp.status === 200 && resp.body.data) {\n                    newPartnerFormGroup = partner_component_1.PartnerComponent.mapPartnerWDToFormGroup(resp.body.data, this.dateUtilsService, this.formBuilder);\n                    this.updateNewWD(newPartnerFormGroup, workingDataOption);\n                  }\n                });\n              } else if (existingWD.changes && !existingWD.newWD) {\n                console.log(\"get from changes WD Map\", existingWD?.obj?.workingDataId);\n                newPartnerFormGroup = this.cloneService.deepCloneFormControlValuesOnly(this.workingDataWithChanges.get(existingWD?.obj?.workingDataId).formGroup);\n                this.updateNewWD(newPartnerFormGroup, workingDataOption);\n              } else if (existingWD.newWD) {\n                console.log(\"get from new WD Map\");\n                newPartnerFormGroup = this.cloneService.deepCloneFormControlValuesOnly(this.newUnsavedWorkingData.get(existingWD?.key.toString()).formGroup);\n                this.updateNewWD(newPartnerFormGroup, workingDataOption);\n              }\n              break;\n            }\n          //Property Agent\n          case '04':\n            {\n              const workingDataOption = {\n                name: \"Property Agent \".concat(\" (Active)\"),\n                key: this.newUnsavedWorkingData.size,\n                obj: {\n                  workingDataTypeCode: \"04\",\n                  year: null,\n                  archiveDt: 0,\n                  workingDataId: null\n                },\n                changes: false,\n                newWD: true\n              };\n              let newPropertyAgentFormGroup;\n              if (!existingWD.changes && !existingWD.newWD) {\n                let params = new http_1.HttpParams();\n                params = params.append(\"workingDataId\", existingWD?.obj?.workingDataId);\n                this.seClaimService.retrievePropertyAgentWD({\n                  params\n                }).subscribe(resp => {\n                  if (resp.status === 200 && resp.body.data) {\n                    newPropertyAgentFormGroup = property_agent_component_1.PropertyAgentComponent.mapPropertyAgentWDToFormGroup(resp.body.data, this.dateUtilsService, this.formBuilder, this.currHardCopyDetails?.trgStartDte, this.cd);\n                    this.updateNewWD(newPropertyAgentFormGroup, workingDataOption);\n                  }\n                });\n              } else if (existingWD.changes && !existingWD.newWD) {\n                console.log(\"get from changes WD Map\", existingWD?.obj?.workingDataId);\n                newPropertyAgentFormGroup = this.cloneService.deepCloneFormControlValuesOnly(this.workingDataWithChanges.get(existingWD?.obj?.workingDataId).formGroup);\n                this.updateNewWD(newPropertyAgentFormGroup, workingDataOption);\n              } else if (existingWD.newWD) {\n                console.log(\"get from new WD Map\");\n                newPropertyAgentFormGroup = this.cloneService.deepCloneFormControlValuesOnly(this.newUnsavedWorkingData.get(existingWD?.key.toString()).formGroup);\n                this.updateNewWD(newPropertyAgentFormGroup, workingDataOption);\n              }\n              break;\n            }\n          //Sole Prop\n          case '05':\n            {\n              const workingDataOption = {\n                name: \"Sole Prop \".concat(\" (Active)\"),\n                key: this.newUnsavedWorkingData.size,\n                obj: {\n                  workingDataTypeCode: \"05\",\n                  year: null,\n                  archiveDt: 0,\n                  workingDataId: null\n                },\n                changes: false,\n                newWD: true\n              };\n              let newSolePropFormGroup;\n              if (!existingWD.changes && !existingWD.newWD) {\n                let params = new http_1.HttpParams();\n                params = params.append(\"workingDataId\", existingWD?.obj?.workingDataId);\n                this.seClaimService.retrieveSolePropPartnerWD({\n                  params\n                }).subscribe(resp => {\n                  if (resp.status === 200 && resp.body.data) {\n                    newSolePropFormGroup = sole_prop_component_1.SolePropComponent.mapSolePropWDToFormGroup(resp.body.data, this.dateUtilsService, this.formBuilder);\n                    this.updateNewWD(newSolePropFormGroup, workingDataOption);\n                  }\n                });\n              } else if (existingWD.changes && !existingWD.newWD) {\n                console.log(\"get from changes WD Map\", existingWD?.obj?.workingDataId);\n                newSolePropFormGroup = this.cloneService.deepCloneFormControlValuesOnly(this.workingDataWithChanges.get(existingWD?.obj?.workingDataId).formGroup);\n                this.updateNewWD(newSolePropFormGroup, workingDataOption);\n              } else if (existingWD.newWD) {\n                console.log(\"get from new WD Map\");\n                newSolePropFormGroup = this.cloneService.deepCloneFormControlValuesOnly(this.newUnsavedWorkingData.get(existingWD?.key.toString()).formGroup);\n                this.updateNewWD(newSolePropFormGroup, workingDataOption);\n              }\n              break;\n            }\n          //PHD/Delivery\n          case '06':\n            {\n              const workingDataOption = {\n                name: \"PHD/Delivery \".concat(\" (Active)\"),\n                key: this.newUnsavedWorkingData.size,\n                obj: {\n                  workingDataTypeCode: \"06\",\n                  year: null,\n                  archiveDt: 0,\n                  workingDataId: null\n                },\n                changes: false,\n                newWD: true\n              };\n              let phdDeliveryFormGroup;\n              if (!existingWD.changes && !existingWD.newWD) {\n                let params = new http_1.HttpParams();\n                params = params.append(\"workingDataId\", existingWD?.obj?.workingDataId);\n                this.seClaimService.retrievePhdDeliveryWD(params).subscribe(res => {\n                  if (res.data) {\n                    phdDeliveryFormGroup = private_hirer_driver_component_1.PrivateHirerDriverComponent.mapPhdDeliveryWDToFormGroup(res.data, this.dateUtilsService, this.formBuilder);\n                    this.updateNewWD(phdDeliveryFormGroup, workingDataOption);\n                  }\n                });\n              } else if (existingWD.changes && !existingWD.newWD) {\n                console.log(\"get from changes WD Map\");\n                phdDeliveryFormGroup = this.cloneService.deepCloneFormControlValuesOnly(this.workingDataWithChanges.get(existingWD?.obj?.workingDataId).formGroup);\n                this.updateNewWD(phdDeliveryFormGroup, workingDataOption);\n              } else if (existingWD.newWD) {\n                console.log(\"get from new WD Map\");\n                phdDeliveryFormGroup = this.cloneService.deepCloneFormControlValuesOnly(this.newUnsavedWorkingData.get(existingWD?.key.toString()).formGroup);\n                this.updateNewWD(phdDeliveryFormGroup, workingDataOption);\n              }\n              break;\n            }\n          //Taxi Driver\n          case '07':\n            {\n              const workingDataOption = {\n                name: \"Taxi \".concat(\" (Active)\"),\n                key: this.newUnsavedWorkingData.size,\n                obj: {\n                  workingDataTypeCode: \"07\",\n                  year: null,\n                  archiveDt: 0,\n                  workingDataId: null\n                },\n                changes: false,\n                newWD: true\n              };\n              let taxiFormGroup;\n              if (!existingWD.changes && !existingWD.newWD) {\n                let params = new http_1.HttpParams();\n                params = params.append(\"workingDataId\", existingWD?.obj?.workingDataId);\n                this.seClaimService.retrieveTaxiWD(params).subscribe(res => {\n                  if (res.data) {\n                    taxiFormGroup = taxi_component_1.TaxiComponent.mapTaxiWDToFormGroup(res.data, this.formBuilder, this.currHardCopyDetails);\n                    this.updateNewWD(taxiFormGroup, workingDataOption);\n                  }\n                });\n              } else if (existingWD.changes && !existingWD.newWD) {\n                console.log(\"get from changes WD Map\");\n                taxiFormGroup = this.cloneService.deepCloneFormControlValuesOnly(this.workingDataWithChanges.get(existingWD?.obj?.workingDataId).formGroup);\n                this.updateNewWD(taxiFormGroup, workingDataOption);\n              } else if (existingWD.newWD) {\n                console.log(\"get from new WD Map\");\n                taxiFormGroup = this.cloneService.deepCloneFormControlValuesOnly(this.newUnsavedWorkingData.get(existingWD?.key.toString()).formGroup);\n                this.updateNewWD(taxiFormGroup, workingDataOption);\n              }\n              break;\n            }\n          //Others\n          case '08':\n            {\n              const workingDataOption = {\n                name: \"Others \".concat(\" (Active)\"),\n                key: this.newUnsavedWorkingData.size,\n                obj: {\n                  workingDataTypeCode: \"08\",\n                  year: null,\n                  archiveDt: 0,\n                  workingDataId: null\n                },\n                changes: false,\n                newWD: true\n              };\n              let othersFormGroup;\n              if (!existingWD.changes && !existingWD.newWD) {\n                let params = new http_1.HttpParams();\n                params = params.append(\"workingDataId\", existingWD?.obj?.workingDataId);\n                this.seClaimService.retrieveOthersWD(params).subscribe(res => {\n                  if (res.data) {\n                    othersFormGroup = others_component_1.OthersComponent.mapOthersWDToFormGroup(res.data, this.formBuilder, this.dateUtilsService);\n                    this.updateNewWD(othersFormGroup, workingDataOption);\n                  }\n                });\n              } else if (existingWD.changes && !existingWD.newWD) {\n                console.log(\"get from changes WD Map\");\n                othersFormGroup = this.cloneService.deepCloneFormControlValuesOnly(this.workingDataWithChanges.get(existingWD?.obj?.workingDataId).formGroup);\n                this.updateNewWD(othersFormGroup, workingDataOption);\n              } else if (existingWD.newWD) {\n                console.log(\"get from new WD Map\");\n                othersFormGroup = this.cloneService.deepCloneFormControlValuesOnly(this.newUnsavedWorkingData.get(existingWD?.key.toString()).formGroup);\n                this.updateNewWD(othersFormGroup, workingDataOption);\n              }\n              break;\n            }\n          default:\n            break;\n        }\n      } else {\n        console.log(\"new template\");\n        //Create completely new working Data\n        switch (this.selectedAveWorkingDataTemplateOption) {\n          //Insurance (AVE)\n          case '02':\n            {\n              // code Type later\n              const workingDataOption = {\n                name: \"Insurance \".concat(\" (Active)\"),\n                key: this.newUnsavedWorkingData.size,\n                obj: {\n                  workingDataTypeCode: \"02\",\n                  year: null,\n                  archiveDt: 0,\n                  workingDataId: null\n                },\n                changes: false,\n                newWD: true\n              };\n              const startYrmth = this.dateUtilsService.convertMomentToStr(this.dateUtilsService.convertStrToMoment(this.currHardCopyDetails?.trgStartDte, \"DD-MM-YYYY\").subtract(6, 'months'), \"DD-MM-YYYY\");\n              const endYrmth = this.dateUtilsService.convertMomentToStr(this.dateUtilsService.convertStrToMoment(this.currHardCopyDetails.trgStartDte, \"DD-MM-YYYY\").subtract(1, 'months'), \"DD-MM-YYYY\");\n              let newInsurAvgFormGroup = null;\n              if (!this.populatePastClaim) {\n                newInsurAvgFormGroup = insurance_avg_income_component_1.InsuranceAvgIncomeComponent.createNewAveInsurFormGroup(startYrmth, endYrmth, this.formBuilder, this.dateUtilsService);\n              } else {\n                newInsurAvgFormGroup = this.populateFormGroup;\n              }\n              //just use the index as the map key\n              this.newUnsavedWorkingData.set(this.newUnsavedWorkingData.size.toString(), {\n                obj: workingDataOption.obj,\n                formGroup: newInsurAvgFormGroup\n              });\n              console.log(\"new unsaved is2 \", this.newUnsavedWorkingData);\n              this.saveSEClaimRequest.workingDataSectionInd = true;\n              this.workingDataOptions.splice(0, 0, workingDataOption);\n              this.archiveAllActiveData();\n              this.aveWorkingDataTemplateOptions.splice(0, 0, workingDataOption);\n              this.cd.detectChanges();\n              setTimeout(() => {\n                this.selectedWDOption = this.workingDataOptions[0];\n              }, 0);\n              break;\n            }\n          //Partner\n          case '03':\n            {\n              // code Type later\n              const workingDataOption = {\n                name: \"Partner \".concat(\" (Active)\"),\n                key: this.newUnsavedWorkingData.size,\n                obj: {\n                  workingDataTypeCode: \"03\",\n                  year: null,\n                  archiveDt: 0,\n                  workingDataId: null\n                },\n                changes: false,\n                newWD: true\n              };\n              let newPartnerFormGroup = null;\n              const startYrmth = this.dateUtilsService.convertMomentToStr(this.dateUtilsService.convertStrToMoment(this.currHardCopyDetails?.trgStartDte, \"DD-MM-YYYY\").subtract(6, 'months'), \"DD-MM-YYYY\");\n              const endYrmth = this.dateUtilsService.convertMomentToStr(this.dateUtilsService.convertStrToMoment(this.currHardCopyDetails.trgStartDte, \"DD-MM-YYYY\").subtract(1, 'months'), \"DD-MM-YYYY\");\n              if (!this.populatePastClaim) {\n                newPartnerFormGroup = partner_component_1.PartnerComponent.staticCreateNewPartnerForm(startYrmth, endYrmth, workingDataOption, this.dateUtilsService, this.formBuilder, this.currHardCopyDetails?.trgStartDte);\n              } else {\n                newPartnerFormGroup = this.populateFormGroup;\n              }\n              //just use the index as the map key\n              this.newUnsavedWorkingData.set(this.newUnsavedWorkingData.size.toString(), {\n                obj: workingDataOption.obj,\n                formGroup: newPartnerFormGroup\n              });\n              console.log(\"new unsaved is2 \", this.newUnsavedWorkingData);\n              console.log(\"new with changes is2 \", this.workingDataWithChanges);\n              this.saveSEClaimRequest.workingDataSectionInd = true;\n              this.workingDataOptions.splice(0, 0, workingDataOption);\n              this.archiveAllActiveData();\n              this.aveWorkingDataTemplateOptions.splice(0, 0, workingDataOption);\n              this.cd.detectChanges();\n              // this.selectedWDOption = this.workingDataOptions[0]\n              setTimeout(() => {\n                this.selectedWDOption = this.workingDataOptions[0];\n              }, 0);\n              break;\n            }\n          //Property Agent\n          case '04':\n            {\n              // code Type later\n              const workingDataOption = {\n                name: \"Property Agent \".concat(\" (Active)\"),\n                key: this.newUnsavedWorkingData.size,\n                obj: {\n                  workingDataTypeCode: \"04\",\n                  year: null,\n                  archiveDt: 0,\n                  workingDataId: null\n                },\n                changes: false,\n                newWD: true\n              };\n              let newPropertyAgentFormGroup = null;\n              if (!this.populatePastClaim) {\n                newPropertyAgentFormGroup = property_agent_component_1.PropertyAgentComponent.staticCreateNewPropertyAgentForm(workingDataOption, this.dateUtilsService, this.formBuilder, this.currHardCopyDetails?.trgStartDte, this.cd);\n              } else {\n                newPropertyAgentFormGroup = this.populateFormGroup;\n              }\n              //just use the index as the map key\n              this.newUnsavedWorkingData.set(this.newUnsavedWorkingData.size.toString(), {\n                obj: workingDataOption.obj,\n                formGroup: newPropertyAgentFormGroup\n              });\n              console.log(\"new unsaved is2 \", this.newUnsavedWorkingData);\n              this.saveSEClaimRequest.workingDataSectionInd = true;\n              this.workingDataOptions.splice(0, 0, workingDataOption);\n              this.archiveAllActiveData();\n              this.aveWorkingDataTemplateOptions.splice(0, 0, workingDataOption);\n              this.cd.detectChanges();\n              setTimeout(() => {\n                this.selectedWDOption = this.workingDataOptions[0];\n              }, 0);\n              break;\n            }\n          //Sole Prop\n          case '05':\n            {\n              // code Type later\n              const workingDataOption = {\n                name: \"Sole Prop \".concat(\" (Active)\"),\n                key: this.newUnsavedWorkingData.size,\n                obj: {\n                  workingDataTypeCode: \"05\",\n                  year: null,\n                  archiveDt: 0,\n                  workingDataId: null\n                },\n                changes: false,\n                newWD: true\n              };\n              let newSolePropFormGroup = null;\n              const startYrmth = this.dateUtilsService.convertMomentToStr(this.dateUtilsService.convertStrToMoment(this.currHardCopyDetails?.trgStartDte, \"DD-MM-YYYY\").subtract(6, 'months'), \"DD-MM-YYYY\");\n              const endYrmth = this.dateUtilsService.convertMomentToStr(this.dateUtilsService.convertStrToMoment(this.currHardCopyDetails.trgStartDte, \"DD-MM-YYYY\").subtract(1, 'months'), \"DD-MM-YYYY\");\n              if (!this.populatePastClaim) {\n                newSolePropFormGroup = sole_prop_component_1.SolePropComponent.createNewSolePropForm(startYrmth, endYrmth, workingDataOption, this.dateUtilsService, this.formBuilder, this.currHardCopyDetails?.trgStartDte);\n              } else {\n                newSolePropFormGroup = this.populateFormGroup;\n              }\n              //just use the index as the map key\n              this.newUnsavedWorkingData.set(this.newUnsavedWorkingData.size.toString(), {\n                obj: workingDataOption.obj,\n                formGroup: newSolePropFormGroup\n              });\n              console.log(\"new unsaved is2 \", this.newUnsavedWorkingData);\n              this.saveSEClaimRequest.workingDataSectionInd = true;\n              this.workingDataOptions.splice(0, 0, workingDataOption);\n              this.archiveAllActiveData();\n              this.aveWorkingDataTemplateOptions.splice(0, 0, workingDataOption);\n              this.cd.detectChanges();\n              setTimeout(() => {\n                this.selectedWDOption = this.workingDataOptions[0];\n              }, 0);\n              break;\n            }\n          //PHD/Delivery\n          case '06':\n            {\n              // code Type later\n              const workingDataOption = {\n                name: \"PHD/Delivery \".concat(\" (Active)\"),\n                key: this.newUnsavedWorkingData.size,\n                obj: {\n                  workingDataTypeCode: \"06\",\n                  year: null,\n                  archiveDt: 0,\n                  workingDataId: null\n                },\n                changes: false,\n                newWD: true\n              };\n              const {\n                startDate,\n                endDate\n              } = this.calculateStartAndEndForPhd();\n              let newPhdDeliveryFormGroup = null;\n              if (!this.populatePastClaim) {\n                newPhdDeliveryFormGroup = private_hirer_driver_component_1.PrivateHirerDriverComponent.createNewPhdDeliveryFormGroup(startDate, endDate, workingDataOption, this.dateUtilsService, this.formBuilder);\n              } else {\n                newPhdDeliveryFormGroup = this.populateFormGroup;\n              }\n              //just use the index as the map key\n              this.newUnsavedWorkingData.set(this.newUnsavedWorkingData.size.toString(), {\n                obj: workingDataOption.obj,\n                formGroup: newPhdDeliveryFormGroup\n              });\n              this.saveSEClaimRequest.workingDataSectionInd = true;\n              this.workingDataOptions.splice(0, 0, workingDataOption);\n              this.archiveAllActiveData();\n              this.aveWorkingDataTemplateOptions.splice(0, 0, workingDataOption);\n              this.cd.detectChanges();\n              setTimeout(() => {\n                this.selectedWDOption = this.workingDataOptions[0];\n              }, 0);\n              break;\n              //Taxi Driver\n            }\n\n          case '07':\n            {\n              // code Type later\n              const workingDataOption = {\n                name: \"Taxi \".concat(\" (Active)\"),\n                key: this.newUnsavedWorkingData.size,\n                obj: {\n                  workingDataTypeCode: \"07\",\n                  year: null,\n                  archiveDt: 0,\n                  workingDataId: null\n                },\n                changes: false,\n                newWD: true\n              };\n              const newTaxiFormGroup = taxi_component_1.TaxiComponent.createNewTaxiFormGroup(this.formBuilder, this.currHardCopyDetails);\n              //just use the index as the map key\n              this.newUnsavedWorkingData.set(this.newUnsavedWorkingData.size.toString(), {\n                obj: workingDataOption.obj,\n                formGroup: newTaxiFormGroup\n              });\n              this.saveSEClaimRequest.workingDataSectionInd = true;\n              this.workingDataOptions.splice(0, 0, workingDataOption);\n              this.archiveAllActiveData();\n              this.aveWorkingDataTemplateOptions.splice(0, 0, workingDataOption);\n              this.cd.detectChanges();\n              setTimeout(() => {\n                this.selectedWDOption = this.workingDataOptions[0];\n              }, 0);\n              break;\n            }\n          //Others\n          case '08':\n            {\n              // code Type later\n              const workingDataOption = {\n                name: \"Others \".concat(\" (Active)\"),\n                key: this.newUnsavedWorkingData.size,\n                obj: {\n                  workingDataTypeCode: \"08\",\n                  year: null,\n                  archiveDt: 0,\n                  workingDataId: null\n                },\n                changes: false,\n                newWD: true\n              };\n              const endDate = this.dateUtilsService.convertStrToDate(this.currHardCopyDetails?.trgStartDte, \"DD-MM-YYYY\");\n              endDate.setMonth(endDate.getMonth() - 1);\n              endDate.setDate(1);\n              const startDate = new Date(endDate);\n              startDate.setMonth(startDate.getMonth() - 5);\n              let newOthersFormGroup = null;\n              if (!this.populatePastClaim) {\n                newOthersFormGroup = others_component_1.OthersComponent.createNewOthersFormGroup(startDate, endDate, this.formBuilder, this.dateUtilsService);\n              } else {\n                newOthersFormGroup = this.populateFormGroup;\n              }\n              //just use the index as the map key\n              this.newUnsavedWorkingData.set(this.newUnsavedWorkingData.size.toString(), {\n                obj: workingDataOption.obj,\n                formGroup: newOthersFormGroup\n              });\n              this.saveSEClaimRequest.workingDataSectionInd = true;\n              this.workingDataOptions.splice(0, 0, workingDataOption);\n              this.archiveAllActiveData();\n              this.aveWorkingDataTemplateOptions.splice(0, 0, workingDataOption);\n              this.cd.detectChanges();\n              setTimeout(() => {\n                this.selectedWDOption = this.workingDataOptions[0];\n              }, 0);\n              break;\n            }\n          default:\n            break;\n        }\n      }\n      console.log(this.workingDataOptions);\n    }\n    this.displayNAWDDialog = false;\n  }\n  updateNewWD(fg, workingDataOption) {\n    console.log(\"the update fg\", fg);\n    fg.get('id').setValue(null);\n    fg.get('workingDataId').setValue(null);\n    this.newUnsavedWorkingData.set(this.newUnsavedWorkingData.size.toString(), {\n      obj: workingDataOption.obj,\n      formGroup: fg\n    });\n    this.saveSEClaimRequest.workingDataSectionInd = true;\n    this.workingDataOptions.splice(0, 0, workingDataOption);\n    console.log(\"into update\");\n    this.archiveAllActiveData();\n    if (this.currHardCopyDetails?.headerDto?.claimOption === '1') {\n      this.aveWorkingDataTemplateOptions.splice(0, 0, workingDataOption);\n    }\n    this.cd.detectChanges();\n    setTimeout(() => {\n      this.selectedWDOption = this.workingDataOptions[0];\n    }, 0);\n  }\n  archiveAllActiveData() {\n    //archive all active working data, also shift them to \"with changes Array in parent Working Data Component\"\n    this.workingDataOptions.forEach((x, index) => {\n      if (x.obj.archiveDt === 0 && index !== 0) {\n        const currDate = new Date();\n        x.obj.archiveDt = this.dateUtilsService.convertMomentToUnix(currDate);\n        x.name = x.name.replace(\"Active\", this.dateUtilsService.convertDateToStr(currDate, \"DD-MM-YYYY\"));\n        x.changes = true;\n        // shifting only needs to be done for non-new WD, any new WD will already be in the unsaved list,\n        // updating the dates will be enough, since there is a reference\n        if (!x.newWD) {\n          switch (x.obj.workingDataTypeCode) {\n            case '01':\n              {\n                if (!this.workingDataWithChanges.has(x.obj.workingDataId)) {\n                  let params = new http_1.HttpParams();\n                  params = params.append(\"workingDataId\", x.obj.workingDataId);\n                  this.seClaimService.retrieveInsurWD({\n                    params\n                  }).subscribe(resp => {\n                    if (resp.status === 200 && resp.body.data) {\n                      this.workingDataWithChanges.set(x.obj.workingDataId, {\n                        obj: x.obj,\n                        formGroup: insurance_income_tax_component_1.InsuranceIncomeTaxComponent.mapInsurITXWDToFormGroup(resp.body.data, this.formBuilder, this.dateUtilsService)\n                      });\n                    }\n                  });\n                }\n                break;\n              }\n            //Insurance (AVE)\n            case '02':\n              {\n                if (!this.workingDataWithChanges.has(x.obj.workingDataId)) {\n                  let params = new http_1.HttpParams();\n                  params = params.append(\"workingDataId\", x.obj.workingDataId);\n                  this.seClaimService.retrieveInsurWD({\n                    params\n                  }).subscribe(resp => {\n                    if (resp.status === 200 && resp.body.data) {\n                      this.workingDataWithChanges.set(x.obj.workingDataId, {\n                        obj: x.obj,\n                        formGroup: insurance_avg_income_component_1.InsuranceAvgIncomeComponent.mapInsurAveWDToFormGroup(resp.body.data, this.formBuilder, this.dateUtilsService)\n                      });\n                    }\n                  });\n                }\n                break;\n              }\n            //Partner\n            case '03':\n              {\n                if (!this.workingDataWithChanges.has(x.obj.workingDataId)) {\n                  let params = new http_1.HttpParams();\n                  params = params.append(\"workingDataId\", x.obj.workingDataId);\n                  console.log(\"the archived here\");\n                  this.seClaimService.retrieveSolePropPartnerWD({\n                    params\n                  }).subscribe(resp => {\n                    if (resp.status === 200 && resp.body.data) {\n                      console.log(\"the archived data\", resp.body.data);\n                      this.workingDataWithChanges.set(x.obj.workingDataId, {\n                        obj: x.obj,\n                        formGroup: partner_component_1.PartnerComponent.mapPartnerWDToFormGroup(resp.body.data, this.dateUtilsService, this.formBuilder)\n                      });\n                    }\n                  });\n                }\n                break;\n              }\n            //Property Agent\n            case '04':\n              {\n                if (!this.workingDataWithChanges.has(x.obj.workingDataId)) {\n                  let params = new http_1.HttpParams();\n                  params = params.append(\"workingDataId\", x.obj.workingDataId);\n                  this.seClaimService.retrievePropertyAgentWD({\n                    params\n                  }).subscribe(resp => {\n                    if (resp.status === 200 && resp.body.data) {\n                      console.log(\"miley\", resp.body.data);\n                      this.workingDataWithChanges.set(x.obj.workingDataId, {\n                        obj: x.obj,\n                        formGroup: property_agent_component_1.PropertyAgentComponent.mapPropertyAgentWDToFormGroup(resp.body.data, this.dateUtilsService, this.formBuilder, this.currHardCopyDetails?.trgStartDte, this.cd)\n                      });\n                    }\n                  });\n                  console.log(\"changes is noiw\", this.workingDataWithChanges);\n                }\n                break;\n              }\n            //Sole Prop\n            case '05':\n              {\n                if (!this.workingDataWithChanges.has(x.obj.workingDataId)) {\n                  let params = new http_1.HttpParams();\n                  params = params.append(\"workingDataId\", x.obj.workingDataId);\n                  this.seClaimService.retrieveSolePropPartnerWD({\n                    params\n                  }).subscribe(resp => {\n                    if (resp.status === 200 && resp.body.data) {\n                      console.log(\"the archived data\", resp.body.data);\n                      this.workingDataWithChanges.set(x.obj.workingDataId, {\n                        obj: x.obj,\n                        formGroup: sole_prop_component_1.SolePropComponent.mapSolePropWDToFormGroup(resp.body.data, this.dateUtilsService, this.formBuilder)\n                      });\n                    }\n                  });\n                }\n                break;\n              }\n            //PHD/Delivery\n            case '06':\n              {\n                if (!this.workingDataWithChanges.has(x.obj.workingDataId)) {\n                  let params = new http_1.HttpParams();\n                  params = params.append(\"workingDataId\", x.obj.workingDataId);\n                  this.seClaimService.retrievePhdDeliveryWD(params).subscribe(res => {\n                    if (res.data) {\n                      this.workingDataWithChanges.set(x.obj.workingDataId, {\n                        obj: x.obj,\n                        formGroup: private_hirer_driver_component_1.PrivateHirerDriverComponent.mapPhdDeliveryWDToFormGroup(res.data, this.dateUtilsService, this.formBuilder)\n                      });\n                    }\n                  });\n                }\n                break;\n              }\n            //Taxi Driver\n            case '07':\n              {\n                if (!this.workingDataWithChanges.has(x.obj.workingDataId)) {\n                  let params = new http_1.HttpParams();\n                  params = params.append(\"workingDataId\", x.obj.workingDataId);\n                  this.seClaimService.retrieveTaxiWD(params).subscribe(res => {\n                    if (res.data) {\n                      this.workingDataWithChanges.set(x.obj.workingDataId, {\n                        obj: x.obj,\n                        formGroup: taxi_component_1.TaxiComponent.mapTaxiWDToFormGroup(res.data, this.formBuilder, this.currHardCopyDetails)\n                      });\n                    }\n                  });\n                }\n                break;\n              }\n            //Others\n            case '08':\n              {\n                if (!this.workingDataWithChanges.has(x.obj.workingDataId)) {\n                  let params = new http_1.HttpParams();\n                  params = params.append(\"workingDataId\", x.obj.workingDataId);\n                  this.seClaimService.retrieveOthersWD(params).subscribe(res => {\n                    if (res.data) {\n                      this.workingDataWithChanges.set(x.obj.workingDataId, {\n                        obj: x.obj,\n                        formGroup: others_component_1.OthersComponent.mapOthersWDToFormGroup(res.data, this.formBuilder, this.dateUtilsService)\n                      });\n                    }\n                  });\n                }\n                break;\n              }\n            //Replacement\n            case '10':\n              {\n                if (!this.workingDataWithChanges.has(x.obj.workingDataId)) {\n                  let params = new http_1.HttpParams();\n                  params = params.append(\"workingDataId\", x.obj.workingDataId);\n                  this.seClaimService.retrieveReplacementWD(params).subscribe(res => {\n                    if (res.data) {\n                      this.workingDataWithChanges.set(x.obj.workingDataId, {\n                        obj: x.obj,\n                        formGroup: replacement_component_1.ReplacementComponent.mapReplacementWDToFormGroup(res.data, this.formBuilder)\n                      });\n                    }\n                  });\n                }\n                break;\n              }\n            default:\n              break;\n          }\n        }\n        console.log(\"total changes\", this.workingDataWithChanges);\n      }\n    });\n  }\n  init() {\n    console.log(\"changes\", this.workingDataWithChanges);\n    console.log(\"unsaved\", this.newUnsavedWorkingData);\n    console.log(\"phdSection,\", this.phdDeliveryWorkingData);\n  }\n  tester() {\n    console.log(\"changes\", this.workingDataWithChanges);\n    console.log(\"unsaved\", this.newUnsavedWorkingData);\n  }\n  populateRequestWithWDSectionChanges() {\n    this.workingDataWithChanges.forEach((value, key) => {\n      console.log(\"this the one with change\"); // 👉️ Tom name, Germany country, 30 age\n      console.log(value, key); // 👉️ Tom name, Germany country, 30 age\n      this.populateRequestWithIndividualWDChanges(value);\n    });\n    this.newUnsavedWorkingData.forEach((value, key) => {\n      console.log(\"this the one\"); // 👉️ Tom name, Germany country, 30 age\n      console.log(value, key); // 👉️ Tom name, Germany country, 30 age\n      this.populateRequestWithIndividualWDChanges(value);\n    });\n    console.log(\"ultimate\", this.saveSEClaimRequest.workingDataPartnerList);\n  }\n  populateRequestWithIndividualWDChanges(workingDataChanges) {\n    switch (workingDataChanges.obj.workingDataTypeCode) {\n      //Insurance (ITX)\n      case '01':\n        {\n          const insurITXWD = insurance_income_tax_component_1.InsuranceIncomeTaxComponent.mapInsurITXFormGroupToWD(workingDataChanges.formGroup, workingDataChanges.obj);\n          if (this.saveSEClaimRequest.insuranceWorkingDataDtoList === undefined) {\n            this.saveSEClaimRequest.insuranceWorkingDataDtoList = [insurITXWD];\n          } else {\n            this.saveSEClaimRequest.insuranceWorkingDataDtoList.push(insurITXWD);\n          }\n          break;\n        }\n      //Insurance (AVE)\n      case '02':\n        {\n          const insurAveWD = insurance_avg_income_component_1.InsuranceAvgIncomeComponent.mapInsurAveFormGroupToWD(workingDataChanges.formGroup, workingDataChanges.obj, this.dateUtilsService);\n          if (this.saveSEClaimRequest.insuranceWorkingDataDtoList === undefined) {\n            this.saveSEClaimRequest.insuranceWorkingDataDtoList = [insurAveWD];\n          } else {\n            this.saveSEClaimRequest.insuranceWorkingDataDtoList.push(insurAveWD);\n          }\n          break;\n        }\n      //Partner\n      case '03':\n        {\n          const partnerWD = partner_component_1.PartnerComponent.mapPartnerFormGroupToWD(workingDataChanges.formGroup, workingDataChanges.obj);\n          if (this.saveSEClaimRequest.workingDataPartnerList === undefined) {\n            this.saveSEClaimRequest.workingDataPartnerList = [partnerWD];\n          } else {\n            this.saveSEClaimRequest.workingDataPartnerList.push(partnerWD);\n          }\n          break;\n        }\n      //Property Agent\n      case '04':\n        {\n          const propertyAgentWD = property_agent_component_1.PropertyAgentComponent.mapPropertyAgentFormGroupToWD(workingDataChanges.formGroup, workingDataChanges.obj, this.dateUtilsService);\n          if (this.saveSEClaimRequest.workingDataPropertyAgentList === undefined) {\n            this.saveSEClaimRequest.workingDataPropertyAgentList = [propertyAgentWD];\n          } else {\n            this.saveSEClaimRequest.workingDataPropertyAgentList.push(propertyAgentWD);\n          }\n          break;\n        }\n      //Sole Prop\n      case '05':\n        {\n          const solePropWD = sole_prop_component_1.SolePropComponent.mapSolePropFormGroupToWD(workingDataChanges.formGroup, workingDataChanges.obj, this.dateUtilsService);\n          if (this.saveSEClaimRequest.workingDataSolePropList === undefined) {\n            this.saveSEClaimRequest.workingDataSolePropList = [solePropWD];\n          } else {\n            this.saveSEClaimRequest.workingDataSolePropList.push(solePropWD);\n          }\n          break;\n        }\n      //PHD/Delivery\n      case '06':\n        {\n          const phdDeliveryWD = private_hirer_driver_component_1.PrivateHirerDriverComponent.mapPhdDeliveryFormGroupToWD(workingDataChanges.formGroup, workingDataChanges.obj, this.dateUtilsService);\n          if (this.saveSEClaimRequest.workingDataPhdDeliveryList === undefined) {\n            this.saveSEClaimRequest.workingDataPhdDeliveryList = [phdDeliveryWD];\n          } else {\n            this.saveSEClaimRequest.workingDataPhdDeliveryList.push(phdDeliveryWD);\n          }\n          break;\n        }\n      //Taxi Driver\n      case '07':\n        {\n          const taxiWD = taxi_component_1.TaxiComponent.mapTaxiFormGroupToWD(workingDataChanges.formGroup, workingDataChanges.obj);\n          if (this.saveSEClaimRequest.workingDataTaxiList === undefined) {\n            this.saveSEClaimRequest.workingDataTaxiList = [taxiWD];\n          } else {\n            this.saveSEClaimRequest.workingDataTaxiList.push(taxiWD);\n          }\n          break;\n        }\n      //Others\n      case '08':\n        {\n          const othersWD = others_component_1.OthersComponent.mapOthersFormGroupToWD(workingDataChanges.formGroup, workingDataChanges.obj, this.dateUtilsService);\n          if (this.saveSEClaimRequest.workingDataOthersList === undefined) {\n            this.saveSEClaimRequest.workingDataOthersList = [othersWD];\n          } else {\n            this.saveSEClaimRequest.workingDataOthersList.push(othersWD);\n          }\n          break;\n        }\n      //Replacement\n      case '10':\n        {\n          const replacementWD = replacement_component_1.ReplacementComponent.mapReplacementFormGroupToWD(workingDataChanges.formGroup, workingDataChanges.obj);\n          if (this.saveSEClaimRequest.workingDataReplacementList === undefined) {\n            this.saveSEClaimRequest.workingDataReplacementList = [replacementWD];\n          } else {\n            this.saveSEClaimRequest.workingDataReplacementList.push(replacementWD);\n          }\n          break;\n        }\n      default:\n        break;\n    }\n  }\n  onHideNAWDDialog() {\n    this.selectedAveWorkingDataTemplateOption = undefined;\n    this.isPastClaimAvailable = false;\n    this.populatePastClaim = false;\n  }\n  checkForITXPopulatedClaims() {\n    //Insurance (ITX)\n    console.log(\"checkling for itx\");\n    const yrmthList = [];\n    //form yr mth based on selected year option\n    if (this.selectedYearOption) {\n      const claimStartYr = this.selectedYearOption;\n      const claimStartDt = (0, moment_1.default)(new Date(claimStartYr, 0, 1));\n      const claimEndDt = (0, moment_1.default)(new Date(claimStartYr, 11, 31));\n      const colStartDt = claimStartDt.clone();\n      const colEndDt = claimEndDt.clone();\n      for (let mth = colStartDt; mth.isSameOrBefore(colEndDt); mth.add(1, 'month')) {\n        yrmthList.push(mth.format(\"MM-YYYY\"));\n      }\n      let params = new http_1.HttpParams();\n      params = params.append(\"nric\", this.currHardCopyDetails?.headerDto.nsManNric);\n      params = params.append(\"yrmthList\", JSON.stringify(yrmthList));\n      params = params.append(\"caseId\", this.currHardCopyDetails?.headerDto.caseId);\n      this.populateFormGroup = insurance_income_tax_component_1.InsuranceIncomeTaxComponent.createNewITXInsurFormGroup(this.selectedYearOption, this.formBuilder, this.dateUtilsService);\n      this.seClaimService.retrieveRefreshOtherInsurClaims({\n        params\n      }).subscribe(resp => {\n        if (resp) {\n          if (resp.status === 200 && resp.body.data.length > 0) {\n            const incomeTaxInsurArrayMthly = this.populateFormGroup.get('incomeTaxInsurArrayMthly');\n            resp.body.data.forEach(y => {\n              const ctrl = incomeTaxInsurArrayMthly.controls.find(x => x.get('yrmthReCon').value === y.yrmth);\n              if (ctrl) {\n                ctrl.get('firstYrCommission').setValue(y?.firstYrCommission || null);\n                ctrl.get('generalInsurance').setValue(y?.generalInsurance || null);\n                ctrl.get('otherCommission').setValue(y?.otherCommission || null);\n                ctrl.get('otherNonPayable').setValue(y?.otherNonPayable || null);\n                ctrl.get('overridingCommission').setValue(y?.overridingCommission || null);\n                ctrl.get('prdBonus').setValue(y?.prdBonus || null);\n                ctrl.get('prdCommission').setValue(y?.prdCommission || null);\n                ctrl.get('renewalCommission').setValue(y?.renewalCommission || null);\n                ctrl.get('singlePremium').setValue(y?.singlePremium || null);\n              }\n            });\n            const unrefreshed = incomeTaxInsurArrayMthly.controls.filter(x => !resp.body.data.map(y => y.yrmth).includes(x.get('yrmthReCon').value));\n            unrefreshed.forEach(ctrl => {\n              ctrl.get('firstYrCommission').setValue(null);\n              ctrl.get('generalInsurance').setValue(null);\n              ctrl.get('otherCommission').setValue(null);\n              ctrl.get('otherNonPayable').setValue(null);\n              ctrl.get('overridingCommission').setValue(null);\n              ctrl.get('prdBonus').setValue(null);\n              ctrl.get('prdCommission').setValue(null);\n              ctrl.get('renewalCommission').setValue(null);\n              ctrl.get('singlePremium').setValue(null);\n            });\n          } else {\n            console.log(\"no data\");\n            this.isPastClaimAvailable = false;\n            this.populatePastClaim = false;\n          }\n        }\n      });\n    } else {\n      console.log(\"no data\");\n      this.isPastClaimAvailable = false;\n      this.populatePastClaim = false;\n    }\n  }\n  checkForPopulatedClaims() {\n    console.log(this.selectedAveWorkingDataTemplateOption);\n    if (this.selectedAveWorkingDataTemplateOption !== undefined) {\n      console.log(this.selectedAveWorkingDataTemplateOption);\n      //Check if selected is an existing WD or a new template\n      const existingWD = this.workingDataOptions.find(x => x.key === this.selectedAveWorkingDataTemplateOption);\n      if (existingWD !== undefined) {\n        this.isPastClaimAvailable = false;\n      } else {\n        //new template selected, check if db has other claims have WD to copy from, refer to Appendix\n        //reset reference first and default to false\n        this.populateFormGroup = undefined;\n        this.isPastClaimAvailable = false;\n        this.populatePastClaim = false;\n        switch (this.selectedAveWorkingDataTemplateOption) {\n          //Insurance (AVE)\n          case '02':\n            {\n              const yrmthList = [];\n              const startYrmth = (0, moment_1.default)(this.dateUtilsService.convertStrToMoment(this.currHardCopyDetails?.trgStartDte, \"DD-MM-YYYY\").subtract(6, 'months'));\n              const endYrmth = (0, moment_1.default)(this.dateUtilsService.convertStrToMoment(this.currHardCopyDetails.trgStartDte, \"DD-MM-YYYY\").subtract(1, 'months'));\n              for (let mth = startYrmth; mth.isSameOrBefore(endYrmth); mth.add(1, 'month')) {\n                yrmthList.push(mth.format(\"MM-YYYY\"));\n              }\n              let params = new http_1.HttpParams();\n              params = params.append(\"nric\", this.currHardCopyDetails?.headerDto.nsManNric);\n              params = params.append(\"yrmthList\", JSON.stringify(yrmthList));\n              params = params.append(\"caseId\", this.currHardCopyDetails?.headerDto.caseId);\n              this.populateFormGroup = insurance_avg_income_component_1.InsuranceAvgIncomeComponent.createNewAveInsurFormGroup(this.dateUtilsService.convertMomentToStr(startYrmth, \"DD-MM-YYYY\"), this.dateUtilsService.convertMomentToStr(endYrmth, \"DD-MM-YYYY\"), this.formBuilder, this.dateUtilsService);\n              this.seClaimService.retrieveRefreshOtherInsurClaims({\n                params\n              }).subscribe(resp => {\n                if (resp.status === 200 && resp.body.data.length > 0) {\n                  const refreshedArr = [];\n                  const incomeTaxInsurArrayMthly = this.populateFormGroup.get('incomeTaxInsurArrayMthly');\n                  resp.body.data.forEach(dataR => {\n                    const ctrl = incomeTaxInsurArrayMthly.get(dataR.yrmth);\n                    if (ctrl) {\n                      ctrl.get('firstYrCommission').setValue(dataR.firstYrCommission || null);\n                      ctrl.get('generalInsurance').setValue(dataR.generalInsurance || null);\n                      ctrl.get('otherCommission').setValue(dataR.otherCommission || null);\n                      ctrl.get('otherNonPayable').setValue(dataR.otherNonPayable || null);\n                      ctrl.get('overridingCommission').setValue(dataR.overridingCommission || null);\n                      ctrl.get('prdBonus').setValue(dataR.prdBonus || null);\n                      ctrl.get('prdCommission').setValue(dataR.prdCommission || null);\n                      ctrl.get('renewalCommission').setValue(dataR.renewalCommission || null);\n                      ctrl.get('singlePremium').setValue(dataR.singlePremium || null);\n                    }\n                    refreshedArr.push(dataR.yrmth);\n                  });\n                  const existingYrMthControls = Object.keys(incomeTaxInsurArrayMthly.controls);\n                  const unrefreshed = refreshedArr.filter(x => !existingYrMthControls.includes(x));\n                  unrefreshed.forEach(unrefreshMths => {\n                    if (incomeTaxInsurArrayMthly.get(unrefreshMths)) {\n                      incomeTaxInsurArrayMthly.get(unrefreshMths).get('revenue').setValue(null);\n                      incomeTaxInsurArrayMthly.get(unrefreshMths).get('netProfit').setValue(null);\n                      incomeTaxInsurArrayMthly.get(unrefreshMths).get('nsmanShareOfProfit').setValue(null);\n                      incomeTaxInsurArrayMthly.get(unrefreshMths).get('nsmanPartnerSalary').setValue(null);\n                      incomeTaxInsurArrayMthly.get(unrefreshMths).get('firstYrCommission').setValue(null);\n                      incomeTaxInsurArrayMthly.get(unrefreshMths).get('generalInsurance').setValue(null);\n                      incomeTaxInsurArrayMthly.get(unrefreshMths).get('otherCommission').setValue(null);\n                      incomeTaxInsurArrayMthly.get(unrefreshMths).get('otherNonPayable').setValue(null);\n                      incomeTaxInsurArrayMthly.get(unrefreshMths).get('overridingCommission').setValue(null);\n                      incomeTaxInsurArrayMthly.get(unrefreshMths).get('prdBonus').setValue(null);\n                      incomeTaxInsurArrayMthly.get(unrefreshMths).get('prdCommission').setValue(null);\n                      incomeTaxInsurArrayMthly.get(unrefreshMths).get('renewalCommission').setValue(null);\n                      incomeTaxInsurArrayMthly.get(unrefreshMths).get('singlePremium').setValue(null);\n                    }\n                  });\n                  this.isPastClaimAvailable = true;\n                  this.populatePastClaim = true;\n                } else {\n                  console.log(\"no data\");\n                  this.isPastClaimAvailable = false;\n                  this.populatePastClaim = false;\n                }\n              });\n              break;\n            }\n          //Partner\n          case '03':\n            {\n              const yrmthList = [];\n              const startYrmth = (0, moment_1.default)(this.dateUtilsService.convertStrToMoment(this.currHardCopyDetails?.trgStartDte, \"DD-MM-YYYY\").subtract(6, 'months'));\n              const endYrmth = (0, moment_1.default)(this.dateUtilsService.convertStrToMoment(this.currHardCopyDetails.trgStartDte, \"DD-MM-YYYY\").subtract(1, 'months'));\n              for (let mth = startYrmth; mth.isSameOrBefore(endYrmth); mth.add(1, 'month')) {\n                yrmthList.push(mth.format(\"MM-YYYY\"));\n              }\n              let params = new http_1.HttpParams();\n              params = params.append(\"nric\", this.currHardCopyDetails?.headerDto.nsManNric);\n              params = params.append(\"yrmthList\", JSON.stringify(yrmthList));\n              params = params.append(\"caseId\", this.currHardCopyDetails?.headerDto.caseId);\n              params = params.append(\"workingDataTypeCode\", this.selectedWDOption?.obj.workingDataTypeCode);\n              this.populateFormGroup = partner_component_1.PartnerComponent.staticCreateNewPartnerForm(this.dateUtilsService.convertMomentToStr(startYrmth, \"DD-MM-YYYY\"), this.dateUtilsService.convertMomentToStr(endYrmth, \"DD-MM-YYYY\"), null, this.dateUtilsService, this.formBuilder, this.currHardCopyDetails?.trgStartDte);\n              this.seClaimService.retrieveRefreshOtherSPPClaims({\n                params\n              }).subscribe(resp => {\n                if (resp.status === 200 && resp.body.data.length > 0) {\n                  const refreshedArr = [];\n                  const dataFormArray = this.populateFormGroup.get('dataFormArray');\n                  resp.body.data.forEach(y => {\n                    const ctrl = dataFormArray.get(y.yrmth);\n                    if (ctrl) {\n                      ctrl.get('revenue').setValue(y.revenue || null);\n                      ctrl.get('netProfit').setValue(y.netProfit || null);\n                      ctrl.get('nsmanShareOfProfit').setValue(y.revenue || null);\n                      ctrl.get('nsmanPartnerSalary').setValue(y.netProfit || null);\n                    }\n                    refreshedArr.push(y.yrmth);\n                  });\n                  const existingYrMthControls = Object.keys(dataFormArray.controls);\n                  const unrefreshed = refreshedArr.filter(x => !existingYrMthControls.includes(x));\n                  unrefreshed.forEach(unrefreshMths => {\n                    if (dataFormArray.get(unrefreshMths)) {\n                      dataFormArray.get(unrefreshMths).get('revenue').setValue(null);\n                      dataFormArray.get(unrefreshMths).get('netProfit').setValue(null);\n                      dataFormArray.get(unrefreshMths).get('nsmanShareOfProfit').setValue(null);\n                      dataFormArray.get(unrefreshMths).get('nsmanPartnerSalary').setValue(null);\n                    }\n                  });\n                  this.isPastClaimAvailable = true;\n                  this.populatePastClaim = true;\n                } else {\n                  console.log(\"no data\");\n                  this.isPastClaimAvailable = false;\n                  this.populatePastClaim = false;\n                }\n              });\n              break;\n            }\n          //Property Agent\n          case '04':\n            {\n              //TODO check if propery agent actually has refresh other claims\n              break;\n            }\n          //Sole Prop\n          case '05':\n            {\n              const yrmthList = [];\n              const startYrmth = (0, moment_1.default)(this.dateUtilsService.convertStrToMoment(this.currHardCopyDetails?.trgStartDte, \"DD-MM-YYYY\").subtract(6, 'months'));\n              const endYrmth = (0, moment_1.default)(this.dateUtilsService.convertStrToMoment(this.currHardCopyDetails.trgStartDte, \"DD-MM-YYYY\").subtract(1, 'months'));\n              for (let mth = startYrmth; mth.isSameOrBefore(endYrmth); mth.add(1, 'month')) {\n                yrmthList.push(mth.format(\"MM-YYYY\"));\n              }\n              let params = new http_1.HttpParams();\n              params = params.append(\"nric\", this.currHardCopyDetails?.headerDto?.nsManNric);\n              params = params.append(\"yrmthList\", JSON.stringify(yrmthList));\n              params = params.append(\"caseId\", this.currHardCopyDetails?.headerDto.caseId);\n              params = params.append(\"workingDataTypeCode\", this.selectedWDOption?.obj.workingDataTypeCode);\n              console.log(\"whjy the nric\", this.currHardCopyDetails?.headerDto?.nsManNric);\n              console.log(\"whjy working data code\", this.selectedWDOption);\n              this.populateFormGroup = sole_prop_component_1.SolePropComponent.createNewSolePropForm(this.dateUtilsService.convertMomentToStr(startYrmth, \"DD-MM-YYYY\"), this.dateUtilsService.convertMomentToStr(endYrmth, \"DD-MM-YYYY\"), null, this.dateUtilsService, this.formBuilder, this.currHardCopyDetails?.trgStartDte);\n              this.seClaimService.retrieveRefreshOtherSPPClaims({\n                params\n              }).subscribe(resp => {\n                if (resp.status === 200 && resp.body.data.length > 0) {\n                  const refreshedArr = [];\n                  const dataFormArray = this.populateFormGroup.get('dataFormArray');\n                  resp.body.data.forEach(y => {\n                    const ctrl = dataFormArray.get(y.yrmth);\n                    if (ctrl) {\n                      ctrl.get('revenue').setValue(y.revenue || null);\n                      ctrl.get('netProfit').setValue(y.netProfit || null);\n                    }\n                    refreshedArr.push(y.yrmth);\n                  });\n                  const existingYrMthControls = Object.keys(dataFormArray.controls);\n                  const unrefreshed = refreshedArr.filter(x => !existingYrMthControls.includes(x));\n                  unrefreshed.forEach(unrefreshMths => {\n                    if (dataFormArray.get(unrefreshMths)) {\n                      dataFormArray.get(unrefreshMths).get('revenue').setValue(null);\n                      dataFormArray.get(unrefreshMths).get('netProfit').setValue(null);\n                    }\n                  });\n                  this.isPastClaimAvailable = true;\n                  this.populatePastClaim = true;\n                } else {\n                  console.log(\"no data\");\n                  this.isPastClaimAvailable = false;\n                  this.populatePastClaim = false;\n                }\n              });\n              break;\n            }\n          //PHD/Delivery\n          case '06':\n            {\n              const {\n                startDate,\n                endDate\n              } = this.calculateStartAndEndForPhd();\n              let params = new http_1.HttpParams();\n              params = params.append(\"nric\", this.currHardCopyDetails?.headerDto?.nsManNric);\n              params = params.append(\"caseId\", this.currHardCopyDetails?.headerDto?.caseId);\n              params = params.append(\"startDate\", this.dateUtilsService.convertDateToStr(startDate, \"DD-MM-YYYY\"));\n              params = params.append(\"endDate\", this.dateUtilsService.convertDateToStr(endDate, \"DD-MM-YYYY\"));\n              this.seClaimService.retrieveNewPopulatedPhdDeliveryWD(params).subscribe(res => {\n                if (res.data) {\n                  console.log(\"got data\");\n                  this.populateFormGroup = private_hirer_driver_component_1.PrivateHirerDriverComponent.mapPhdDeliveryWDToFormGroup(res.data, this.dateUtilsService, this.formBuilder);\n                  this.isPastClaimAvailable = true;\n                  this.populatePastClaim = true;\n                } else {\n                  console.log(\"no data\");\n                  this.isPastClaimAvailable = false;\n                  this.populatePastClaim = false;\n                }\n              });\n              break;\n            }\n          //Taxi Driver\n          case '07':\n            {\n              this.isPastClaimAvailable = false;\n              this.populatePastClaim = false;\n              break;\n            }\n          //Others\n          case '08':\n            {\n              const endDate = this.dateUtilsService.convertStrToDate(this.currHardCopyDetails?.trgStartDte, \"DD-MM-YYYY\");\n              endDate.setMonth(endDate.getMonth() - 1);\n              endDate.setDate(1);\n              const startDate = new Date(endDate);\n              startDate.setMonth(startDate.getMonth() - 5);\n              let params = new http_1.HttpParams();\n              params = params.append(\"nric\", this.currHardCopyDetails?.headerDto?.nsManNric);\n              params = params.append(\"caseId\", this.currHardCopyDetails?.headerDto?.caseId);\n              params = params.append(\"startDate\", this.dateUtilsService.convertDateToStr(startDate, \"DD-MM-YYYY\"));\n              params = params.append(\"endDate\", this.dateUtilsService.convertDateToStr(endDate, \"DD-MM-YYYY\"));\n              this.seClaimService.retrieveRefreshOthersWD(params).subscribe(res => {\n                if (res.data && res.data.length !== 0) {\n                  this.populateFormGroup = others_component_1.OthersComponent.createNewOthersFormGroup(startDate, endDate, this.formBuilder, this.dateUtilsService);\n                  console.log(this.populateFormGroup);\n                  console.log(this.populateFormGroup.get('workingDataOthersInfoList'));\n                  console.log(this.populateFormGroup.get('workingDataOthersInfoList.07-2022'));\n                  res.data.forEach(othersInfo => {\n                    this.populateFormGroup.get(\"workingDataOthersInfoList.\".concat(othersInfo.yearMonth)).setValue(othersInfo.monthlyIncome);\n                  });\n                  this.isPastClaimAvailable = true;\n                  this.populatePastClaim = true;\n                } else {\n                  this.isPastClaimAvailable = false;\n                  this.populatePastClaim = false;\n                }\n              });\n              break;\n            }\n          default:\n            break;\n        }\n      }\n    }\n  }\n  calculateStartAndEndForPhd() {\n    const commenceDate = this.dateUtilsService.convertStrToDate(this.currHardCopyDetails?.commencementDte, \"DD-MM-YYYY\");\n    const claimStartDate = this.dateUtilsService.convertStrToDate(this.currHardCopyDetails?.trgStartDte, \"DD-MM-YYYY\");\n    let endDate = this.dateUtilsService.getLastSunOfPreviousMonth(claimStartDate);\n    let startDate = this.dateUtilsService.getPhdDeliveryStartDateWithEndDate(endDate);\n    console.log(commenceDate);\n    console.log(claimStartDate);\n    console.log(startDate);\n    console.log(endDate);\n    if (this.dateUtilsService.isAfter(commenceDate, endDate)) {\n      startDate = null;\n      endDate = null;\n    } else if (this.dateUtilsService.isBefore(startDate, commenceDate)) {\n      endDate = this.dateUtilsService.getSunOfPreviousWeek(claimStartDate);\n      startDate = this.dateUtilsService.getFirstMonFromCommenceDate(commenceDate);\n    }\n    console.log(startDate);\n    console.log(endDate);\n    return {\n      startDate,\n      endDate\n    };\n  }\n  insertNewRWD() {\n    const workingDataOption = {\n      name: \"Replacement \".concat(\" (Active)\"),\n      key: this.newUnsavedWorkingData.size,\n      obj: {\n        workingDataTypeCode: \"10\",\n        year: null,\n        archiveDt: 0,\n        workingDataId: null\n      },\n      changes: false,\n      newWD: true\n    };\n    //just use the index as the map key\n    this.newUnsavedWorkingData.set(this.newUnsavedWorkingData.size.toString(), {\n      obj: workingDataOption.obj,\n      formGroup: replacement_component_1.ReplacementComponent.createNewReplacementFormGroup(this.formBuilder)\n    });\n    this.saveSEClaimRequest.workingDataSectionInd = true;\n    this.workingDataOptions.splice(0, 0, workingDataOption);\n    this.archiveAllActiveData();\n    this.cd.detectChanges();\n    setTimeout(() => {\n      this.selectedWDOption = this.workingDataOptions[0];\n    }, 0);\n  }\n  confirmInsertNewRWD(event) {\n    console.log(\"got click la\");\n    this.nspConfirmationService.onConfirmPopup(event, 'insertNewRWDPopUp', null, () => {\n      this.insertNewRWD();\n    });\n  }\n  accordionClick() {\n    this.selectedChange.emit(this.selected);\n  }\n  //allows input on need basis\n  hasValidAuthorityAndStation() {\n    if (this.accountService.hasAnyAuthority(nspay2_constants_1.NSPAY2_ROLES.CLAIMS_VERIFIER) && this.station === nspay2_constants_1.NSPAY2_STATION.STATION_VERIFICATION) {\n      return true;\n    }\n    if (this.accountService.hasAnyAuthority(nspay2_constants_1.NSPAY2_ROLES.CLAIMS_APPROVER) && this.station === nspay2_constants_1.NSPAY2_STATION.STATION_CERTIFICATION) {\n      return false;\n    }\n    if (this.accountService.hasAnyAuthority(nspay2_constants_1.NSPAY2_ROLES.CLAIMS_APPROVER) && this.station === nspay2_constants_1.NSPAY2_STATION.STATION_APPROVAL) {\n      return false;\n    }\n    return false;\n  }\n}\nexports.WorkingDataSectionComponent = WorkingDataSectionComponent;\nWorkingDataSectionComponent.ɵfac = function WorkingDataSectionComponent_Factory(t) {\n  return new (t || WorkingDataSectionComponent)(i0.ɵɵdirectiveInject(i1.SEClaimService), i0.ɵɵdirectiveInject(i2.CustomToastService), i0.ɵɵdirectiveInject(i3.DateUtilsService), i0.ɵɵdirectiveInject(i4.FormBuilder), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i5.NspConfirmationService), i0.ɵɵdirectiveInject(i6.CloneService), i0.ɵɵdirectiveInject(i7.IcCodeService), i0.ɵɵdirectiveInject(i5.NspConfirmationService), i0.ɵɵdirectiveInject(i8.ConfirmationService), i0.ɵɵdirectiveInject(i9.ExportUtilsService), i0.ɵɵdirectiveInject(i10.AccountService), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(core_1.LOCALE_ID));\n};\nWorkingDataSectionComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: WorkingDataSectionComponent,\n  selectors: [[\"n2-working-data-section\"]],\n  viewQuery: function WorkingDataSectionComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c0, 5);\n      i0.ɵɵviewQuery(_c1, 5);\n      i0.ɵɵviewQuery(_c2, 5);\n    }\n    if (rf & 2) {\n      let _t;\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.accordionTab = _t.first);\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.phdDeliveryWorkingData = _t.first);\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.insurITXWorkingData = _t.first);\n    }\n  },\n  inputs: {\n    seHardCopyDetails: \"seHardCopyDetails\",\n    itemDetailsSection: \"itemDetailsSection\",\n    trgStartDte: \"trgStartDte\",\n    selected: \"selected\",\n    station: \"station\",\n    saveSEClaimRequest: \"saveSEClaimRequest\",\n    irasDetails: \"irasDetails\",\n    readOnly: \"readOnly\"\n  },\n  outputs: {\n    selectedChange: \"selectedChange\",\n    totalAmtPayEvent: \"totalAmtPayEvent\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  decls: 59,\n  vars: 33,\n  consts: [[\"multiple\", \"true\", 3, \"selected\", \"selectedChange\", \"click\"], [\"accordionTab\", \"\"], [\"pTemplate\", \"header\"], [4, \"ngIf\", \"ngIfElse\"], [\"emptymessage\", \"\"], [\"header\", \"Insert New Insurance Working Data\", 3, \"visible\", \"modal\", \"draggable\", \"resizable\", \"visibleChange\"], [1, \"field\", \"grid\"], [\"for\", \"year\", 1, \"col-2\", \"col-form-label\"], [1, \"col-7\"], [\"id\", \"year\", \"optionLabel\", \"name\", \"optionValue\", \"key\", \"placeholder\", \"Select Year\", \"appendTo\", \"body\", 3, \"options\", \"ngModel\", \"onChange\", \"ngModelChange\"], [\"inputId\", \"populatePastClaim\", 1, \"col-1\", 3, \"ngModel\", \"binary\", \"ngModelChange\"], [\"pTemplate\", \"footer\"], [\"header\", \"Insert Working Data\", 3, \"visible\", \"modal\", \"draggable\", \"resizable\", \"visibleChange\", \"onHide\"], [1, \"col-5\", \"flex\", \"justify-content-start\"], [1, \"col-6\", \"flex\", \"justify-content-start\"], [\"id\", \"wdTemplate\", \"optionLabel\", \"name\", \"optionValue\", \"key\", \"placeholder\", \"Select Working Data Template\", \"appendTo\", \"body\", 3, \"options\", \"ngModel\", \"autoDisplayFirst\", \"onChange\", \"ngModelChange\"], [\"inputId\", \"populatePastClaim\", 1, \"col-1\", 3, \"ngModel\", \"binary\", \"disabled\", \"ngModelChange\"], [1, \"grid\", \"col-6\", \"align-items-center\", \"my-0\"], [1, \"col-form-label\", \"pl-1\"], [1, \"col-2\", \"input-group\", \"pl-3\", \"py-0\"], [\"optionLabel\", \"name\", \"placeholder\", \"Select\", \"appendTo\", \"body\", 3, \"options\", \"ngModel\", \"ngModelChange\", \"click\"], [1, \"grid\", \"col-6\", \"align-items-center\", \"justify-content-end\", \"m-0\", \"p-0\"], [\"id\", \"tester\", \"pButton\", \"\", \"label\", \"tester\", 3, \"click\"], [\"id\", \"insertNewIWD\", \"pButton\", \"\", \"label\", \"Insert New Insurance Working Data\", 3, \"click\", 4, \"ngIf\"], [\"id\", \"insertNewAWD\", \"pButton\", \"\", \"label\", \"Insert Working Data\", 3, \"click\", 4, \"ngIf\"], [\"key\", \"insertNewRWDPopUp\"], [\"id\", \"insertNewRWD\", \"pButton\", \"\", \"label\", \"Insert New Replacement Working Data\", 3, \"click\", 4, \"ngIf\"], [\"id\", \"insertNewIWD\", \"pButton\", \"\", \"label\", \"Insert New Insurance Working Data\", 3, \"click\"], [\"id\", \"insertNewAWD\", \"pButton\", \"\", \"label\", \"Insert Working Data\", 3, \"click\"], [\"id\", \"insertNewRWD\", \"pButton\", \"\", \"label\", \"Insert New Replacement Working Data\", 3, \"click\"], [3, \"selectedWDOption\", \"seHardCopyDetails\", \"itemDetailsSection\", \"workingDataWithChanges\", \"newUnsavedWorkingData\", \"saveSEClaimRequest\", \"irasDetails\", \"trgStartDte\", \"readOnly\", \"station\", \"totalAmtPayEvent\", 4, \"ngIf\"], [3, \"selectedWDOption\", \"seHardCopyDetails\", \"workingDataWithChanges\", \"newUnsavedWorkingData\", \"saveSEClaimRequest\", \"trgStartDte\", \"itemDetailsSection\", \"readOnly\", \"station\", \"totalAmtPayEvent\", 4, \"ngIf\"], [3, \"selectedWDOption\", \"seHardCopyDetails\", \"itemDetailsSection\", \"workingDataWithChanges\", \"newUnsavedWorkingData\", \"saveSEClaimRequest\", \"trgStartDte\", \"readOnly\", \"station\", \"totalAmtPayEvent\", 4, \"ngIf\"], [3, \"selectedWDOption\", \"seHardCopyDetails\", \"itemDetailsSection\", \"workingDataWithChanges\", \"newUnsavedWorkingData\", \"saveSEClaimRequest\", \"readOnly\", \"station\", \"totalAmtPayEvent\", 4, \"ngIf\"], [3, \"selectedWDOption\", \"seHardCopyDetails\", \"workingDataWithChanges\", \"newUnsavedWorkingData\", \"saveSEClaimRequest\", \"readOnly\", \"station\", 4, \"ngIf\"], [3, \"selectedWDOption\", \"seHardCopyDetails\", 4, \"ngIf\"], [3, \"selectedWDOption\", \"workingDataWithChanges\", \"newUnsavedWorkingData\", \"saveSEClaimRequest\", \"readOnly\", \"station\", 4, \"ngIf\"], [3, \"selectedWDOption\", \"seHardCopyDetails\", \"itemDetailsSection\", \"workingDataWithChanges\", \"newUnsavedWorkingData\", \"saveSEClaimRequest\", \"irasDetails\", \"trgStartDte\", \"readOnly\", \"station\", \"totalAmtPayEvent\"], [\"insurITXWorkingData\", \"\"], [3, \"selectedWDOption\", \"seHardCopyDetails\", \"workingDataWithChanges\", \"newUnsavedWorkingData\", \"saveSEClaimRequest\", \"trgStartDte\", \"itemDetailsSection\", \"readOnly\", \"station\", \"totalAmtPayEvent\"], [3, \"selectedWDOption\", \"seHardCopyDetails\", \"itemDetailsSection\", \"workingDataWithChanges\", \"newUnsavedWorkingData\", \"saveSEClaimRequest\", \"trgStartDte\", \"readOnly\", \"station\", \"totalAmtPayEvent\"], [3, \"selectedWDOption\", \"seHardCopyDetails\", \"itemDetailsSection\", \"workingDataWithChanges\", \"newUnsavedWorkingData\", \"saveSEClaimRequest\", \"readOnly\", \"station\", \"totalAmtPayEvent\"], [\"phdDeliveryWorkingData\", \"\"], [3, \"selectedWDOption\", \"seHardCopyDetails\", \"workingDataWithChanges\", \"newUnsavedWorkingData\", \"saveSEClaimRequest\", \"readOnly\", \"station\"], [3, \"selectedWDOption\", \"seHardCopyDetails\"], [3, \"selectedWDOption\", \"workingDataWithChanges\", \"newUnsavedWorkingData\", \"saveSEClaimRequest\", \"readOnly\", \"station\"], [1, \"pi\", \"pi-info-circle\"], [\"pButton\", \"\", \"label\", \"Cancel\", \"type\", \"button\", 1, \"p-button-danger\", 3, \"click\"], [\"pButton\", \"\", \"label\", \"Submit\", \"type\", \"button\", 3, \"click\"]],\n  template: function WorkingDataSectionComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"p-accordionTab\", 0, 1);\n      i0.ɵɵlistener(\"selectedChange\", function WorkingDataSectionComponent_Template_p_accordionTab_selectedChange_0_listener($event) {\n        return ctx.selected = $event;\n      })(\"click\", function WorkingDataSectionComponent_Template_p_accordionTab_click_0_listener() {\n        return ctx.accordionClick();\n      });\n      i0.ɵɵtext(2, \"\\n    \");\n      i0.ɵɵtemplate(3, WorkingDataSectionComponent_ng_template_3_Template, 26, 8, \"ng-template\", 2);\n      i0.ɵɵtext(4, \"\\n    \");\n      i0.ɵɵtemplate(5, WorkingDataSectionComponent_div_5_Template, 32, 10, \"div\", 3);\n      i0.ɵɵtext(6, \"\\n    \");\n      i0.ɵɵtemplate(7, WorkingDataSectionComponent_ng_template_7_Template, 5, 0, \"ng-template\", null, 4, i0.ɵɵtemplateRefExtractor);\n      i0.ɵɵtext(9, \"\\n\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(10, \"\\n\\n\\n\");\n      i0.ɵɵelementStart(11, \"p-dialog\", 5);\n      i0.ɵɵlistener(\"visibleChange\", function WorkingDataSectionComponent_Template_p_dialog_visibleChange_11_listener($event) {\n        return ctx.displayNIWDDialog = $event;\n      });\n      i0.ɵɵtext(12, \"\\n  \");\n      i0.ɵɵelementStart(13, \"div\", 6);\n      i0.ɵɵtext(14, \"\\n    \");\n      i0.ɵɵelementStart(15, \"label\", 7);\n      i0.ɵɵtext(16, \"Year:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(17, \"\\n    \");\n      i0.ɵɵelementStart(18, \"div\", 8);\n      i0.ɵɵtext(19, \"\\n      \");\n      i0.ɵɵelementStart(20, \"p-dropdown\", 9);\n      i0.ɵɵlistener(\"onChange\", function WorkingDataSectionComponent_Template_p_dropdown_onChange_20_listener() {\n        return ctx.checkForITXPopulatedClaims();\n      })(\"ngModelChange\", function WorkingDataSectionComponent_Template_p_dropdown_ngModelChange_20_listener($event) {\n        return ctx.selectedYearOption = $event;\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(21, \"\\n    \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(22, \"\\n  \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(23, \"\\n  \");\n      i0.ɵɵelementStart(24, \"div\", 6);\n      i0.ɵɵtext(25, \"\\n    \");\n      i0.ɵɵelementStart(26, \"p-checkbox\", 10);\n      i0.ɵɵlistener(\"ngModelChange\", function WorkingDataSectionComponent_Template_p_checkbox_ngModelChange_26_listener($event) {\n        return ctx.populatePastClaim = $event;\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(27, \"\\n    \");\n      i0.ɵɵelementStart(28, \"label\");\n      i0.ɵɵtext(29, \"Populate data from past claim?\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(30, \"\\n  \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(31, \"\\n    \");\n      i0.ɵɵtemplate(32, WorkingDataSectionComponent_ng_template_32_Template, 5, 0, \"ng-template\", 11);\n      i0.ɵɵtext(33, \"\\n\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(34, \"\\n\\n\");\n      i0.ɵɵelementStart(35, \"p-dialog\", 12);\n      i0.ɵɵlistener(\"visibleChange\", function WorkingDataSectionComponent_Template_p_dialog_visibleChange_35_listener($event) {\n        return ctx.displayNAWDDialog = $event;\n      })(\"onHide\", function WorkingDataSectionComponent_Template_p_dialog_onHide_35_listener() {\n        return ctx.onHideNAWDDialog();\n      });\n      i0.ɵɵtext(36, \"\\n  \");\n      i0.ɵɵelementStart(37, \"div\", 6);\n      i0.ɵɵtext(38, \"\\n    \");\n      i0.ɵɵelementStart(39, \"label\", 13);\n      i0.ɵɵtext(40, \"Working Data Template:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(41, \"\\n    \");\n      i0.ɵɵelementStart(42, \"div\", 14);\n      i0.ɵɵtext(43, \"\\n      \");\n      i0.ɵɵelementStart(44, \"p-dropdown\", 15);\n      i0.ɵɵlistener(\"onChange\", function WorkingDataSectionComponent_Template_p_dropdown_onChange_44_listener() {\n        return ctx.checkForPopulatedClaims();\n      })(\"ngModelChange\", function WorkingDataSectionComponent_Template_p_dropdown_ngModelChange_44_listener($event) {\n        return ctx.selectedAveWorkingDataTemplateOption = $event;\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(45, \"\\n    \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(46, \"\\n  \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(47, \"\\n  \");\n      i0.ɵɵelementStart(48, \"div\", 6);\n      i0.ɵɵtext(49, \"\\n    \");\n      i0.ɵɵelementStart(50, \"p-checkbox\", 16);\n      i0.ɵɵlistener(\"ngModelChange\", function WorkingDataSectionComponent_Template_p_checkbox_ngModelChange_50_listener($event) {\n        return ctx.populatePastClaim = $event;\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(51, \"\\n    \");\n      i0.ɵɵelementStart(52, \"label\");\n      i0.ɵɵtext(53, \"Populate data from past claim?\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(54, \"\\n  \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(55, \"\\n  \");\n      i0.ɵɵtemplate(56, WorkingDataSectionComponent_ng_template_56_Template, 5, 0, \"ng-template\", 11);\n      i0.ɵɵtext(57, \"\\n\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(58, \"\\n\\n\\n\\n\");\n    }\n    if (rf & 2) {\n      const _r3 = i0.ɵɵreference(8);\n      i0.ɵɵproperty(\"selected\", ctx.selected);\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"ngIf\", ctx.workingDataOptions.length !== 0)(\"ngIfElse\", _r3);\n      i0.ɵɵadvance(6);\n      i0.ɵɵstyleMap(i0.ɵɵpureFunction0(29, _c4));\n      i0.ɵɵproperty(\"visible\", ctx.displayNIWDDialog)(\"modal\", true)(\"draggable\", false)(\"resizable\", false);\n      i0.ɵɵadvance(9);\n      i0.ɵɵstyleMap(i0.ɵɵpureFunction0(30, _c5));\n      i0.ɵɵproperty(\"options\", ctx.yearOptions)(\"ngModel\", ctx.selectedYearOption);\n      i0.ɵɵadvance(6);\n      i0.ɵɵproperty(\"ngModel\", ctx.populatePastClaim)(\"binary\", true);\n      i0.ɵɵadvance(9);\n      i0.ɵɵstyleMap(i0.ɵɵpureFunction0(31, _c4));\n      i0.ɵɵproperty(\"visible\", ctx.displayNAWDDialog)(\"modal\", true)(\"draggable\", false)(\"resizable\", false);\n      i0.ɵɵadvance(9);\n      i0.ɵɵstyleMap(i0.ɵɵpureFunction0(32, _c5));\n      i0.ɵɵproperty(\"options\", ctx.aveWorkingDataTemplateOptions)(\"ngModel\", ctx.selectedAveWorkingDataTemplateOption)(\"autoDisplayFirst\", false);\n      i0.ɵɵadvance(6);\n      i0.ɵɵproperty(\"ngModel\", ctx.populatePastClaim)(\"binary\", true)(\"disabled\", !ctx.isPastClaimAvailable);\n    }\n  },\n  dependencies: [i11.NgIf, i4.NgControlStatus, i4.NgModel, i8.PrimeTemplate, i12.ButtonDirective, i13.Checkbox, i14.Dropdown, i15.Dialog, i16.ConfirmPopup, i17.AccordionTab, i18.InsuranceIncomeTaxComponent, i19.InsuranceAvgIncomeComponent, i20.PartnerComponent, i21.SolePropComponent, i22.PropertyAgentComponent, i23.OthersLegacyComponent, i24.PrivateHirerDriverComponent, i25.TaxiComponent, i26.ReplacementComponent, i27.OthersComponent],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJ3b3JraW5nLWRhdGEtc2VjdGlvbi5jb21wb25lbnQuc2NzcyJ9 */\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9tYWluL3dlYmFwcC9hcHAvY2xhaW0vc2UtY2xhaW0vc2UtY2xhaW0tdmVyaWZpY2F0aW9uL3dvcmtpbmctZGF0YS1zZWN0aW9uL3dvcmtpbmctZGF0YS1zZWN0aW9uLmNvbXBvbmVudC5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFDQSxvTEFBb0wiLCJzb3VyY2VSb290IjoiIn0= */\"]\n});","map":{"version":3,"mappings":"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","names":["i0","ctx_r10","$event","ctx_r12","ctx_r14","WorkingDataSectionComponent","constructor","seClaimService","toastService","dateUtilsService","formBuilder","cd","nspConfirmationService","cloneService","codeService","nspConfirmService","confirmationService","exportUtilsService","accountService","zone","localeId","core_1","Map","ngOnInit","console","log","ngOnChanges","changes","seHardCopyDetails","currentValue","currHardCopyDetails","retrieveWDDropdown","headerDto","claimOption","claimStartYear","convertStrToDate","trgStartDte","getFullYear","yearOptions","name","key","selectedYearOption","params","http_1","append","claimId","subscribe","resp","status","body","data","sortedData","sort","sortWDTypeByCode","forEach","x","index","archiveDt","convertUnixToDateString","workingDataOptions","push","workingDataTypeCode","workingDataTypeDesc","concat","year","obj","workingDataId","newWD","newArchived","selectedWDOption","gets","codes","aveWorkingDataTemplateOptions","map","label","codeId","error","String","error_desc","getTotalAmtPay","totalAmtPayEvent","emit","a","b","localeCompare","insertNewIWD","populatePastClaim","workingDataOption","newUnsavedWorkingData","size","unshift","newFormGrp","insurance_income_tax_component_1","createNewITXInsurFormGroup","populateFormGroup","set","toString","formGroup","saveSEClaimRequest","workingDataSectionInd","displayNIWDDialog","archiveAllActiveData","archiveAllActiveData2","existingActiveWD","slice","filter","currDate","Date","convertMomentToUnix","replace","convertDateToStr","workingDataWithChanges","has","get","insertNewAveWD","selectedAveWorkingDataTemplateOption","undefined","existingWD","find","insurAveFormGroup","retrieveInsurWD","insurance_avg_income_component_1","mapInsurAveWDToFormGroup","updateNewWD","deepCloneFormControlValuesOnly","newPartnerFormGroup","retrieveSolePropPartnerWD","partner_component_1","mapPartnerWDToFormGroup","newPropertyAgentFormGroup","retrievePropertyAgentWD","property_agent_component_1","mapPropertyAgentWDToFormGroup","newSolePropFormGroup","sole_prop_component_1","mapSolePropWDToFormGroup","phdDeliveryFormGroup","retrievePhdDeliveryWD","res","private_hirer_driver_component_1","mapPhdDeliveryWDToFormGroup","taxiFormGroup","retrieveTaxiWD","taxi_component_1","mapTaxiWDToFormGroup","othersFormGroup","retrieveOthersWD","others_component_1","mapOthersWDToFormGroup","startYrmth","convertMomentToStr","convertStrToMoment","subtract","endYrmth","newInsurAvgFormGroup","createNewAveInsurFormGroup","splice","detectChanges","setTimeout","staticCreateNewPartnerForm","staticCreateNewPropertyAgentForm","createNewSolePropForm","startDate","endDate","calculateStartAndEndForPhd","newPhdDeliveryFormGroup","createNewPhdDeliveryFormGroup","newTaxiFormGroup","createNewTaxiFormGroup","setMonth","getMonth","setDate","newOthersFormGroup","createNewOthersFormGroup","displayNAWDDialog","fg","setValue","mapInsurITXWDToFormGroup","retrieveReplacementWD","replacement_component_1","mapReplacementWDToFormGroup","init","phdDeliveryWorkingData","tester","populateRequestWithWDSectionChanges","value","populateRequestWithIndividualWDChanges","workingDataPartnerList","workingDataChanges","insurITXWD","mapInsurITXFormGroupToWD","insuranceWorkingDataDtoList","insurAveWD","mapInsurAveFormGroupToWD","partnerWD","mapPartnerFormGroupToWD","propertyAgentWD","mapPropertyAgentFormGroupToWD","workingDataPropertyAgentList","solePropWD","mapSolePropFormGroupToWD","workingDataSolePropList","phdDeliveryWD","mapPhdDeliveryFormGroupToWD","workingDataPhdDeliveryList","taxiWD","mapTaxiFormGroupToWD","workingDataTaxiList","othersWD","mapOthersFormGroupToWD","workingDataOthersList","replacementWD","mapReplacementFormGroupToWD","workingDataReplacementList","onHideNAWDDialog","isPastClaimAvailable","checkForITXPopulatedClaims","yrmthList","claimStartYr","claimStartDt","claimEndDt","colStartDt","clone","colEndDt","mth","isSameOrBefore","add","format","nsManNric","JSON","stringify","caseId","retrieveRefreshOtherInsurClaims","length","incomeTaxInsurArrayMthly","y","ctrl","controls","yrmth","firstYrCommission","generalInsurance","otherCommission","otherNonPayable","overridingCommission","prdBonus","prdCommission","renewalCommission","singlePremium","unrefreshed","includes","checkForPopulatedClaims","refreshedArr","dataR","existingYrMthControls","Object","keys","unrefreshMths","retrieveRefreshOtherSPPClaims","dataFormArray","revenue","netProfit","retrieveNewPopulatedPhdDeliveryWD","retrieveRefreshOthersWD","othersInfo","yearMonth","monthlyIncome","commenceDate","commencementDte","claimStartDate","getLastSunOfPreviousMonth","getPhdDeliveryStartDateWithEndDate","isAfter","isBefore","getSunOfPreviousWeek","getFirstMonFromCommenceDate","insertNewRWD","createNewReplacementFormGroup","confirmInsertNewRWD","event","onConfirmPopup","accordionClick","selectedChange","selected","hasValidAuthorityAndStation","hasAnyAuthority","nspay2_constants_1","CLAIMS_VERIFIER","station","STATION_VERIFICATION","CLAIMS_APPROVER","STATION_CERTIFICATION","STATION_APPROVAL","exports","selectors","viewQuery","ctx"],"sourceRoot":"","sources":["C:\\Users\\D1347074\\Desktop\\projects 2\\nspayiiapp\\src\\main\\webapp\\app\\claim\\se-claim\\se-claim-verification\\working-data-section\\working-data-section.component.ts","C:\\Users\\D1347074\\Desktop\\projects 2\\nspayiiapp\\src\\main\\webapp\\app\\claim\\se-claim\\se-claim-verification\\working-data-section\\working-data-section.component.html"],"sourcesContent":["import { HttpParams } from '@angular/common/http';\r\nimport {\r\n  ChangeDetectorRef,\r\n  Component,\r\n  ElementRef,\r\n  EventEmitter,\r\n  Input,\r\n  LOCALE_ID,\r\n  NgZone,\r\n  OnChanges,\r\n  OnInit,\r\n  Output,\r\n  SimpleChanges,\r\n  ViewChild,\r\n  Inject\r\n} from '@angular/core';\r\nimport { CustomToastService } from 'app/layouts/service/customtoast.service';\r\nimport { SEClaimService } from '../../service/se-claim.service';\r\nimport { DateUtilsService } from 'app/core/util/date-utils.service';\r\nimport { AccordionTab } from 'primeng/accordion';\r\nimport {FormArray, FormBuilder, FormGroup} from '@angular/forms';\r\nimport {PrivateHirerDriverComponent} from \"app/claim/se-claim/se-claim-verification/working-data-section/private-hirer-driver/private-hirer-driver.component\";\r\nimport {Ns2Response} from \"app/shared/model/ns2-response.model\";\r\nimport {PhdDeliveryWD} from \"app/claim/se-claim/model/phd-delivery.model\";\r\nimport {SaveSEClaimRequest} from \"app/claim/se-claim/model/save-se-claim-request.model\";\r\nimport { InsuranceIncomeTaxComponent } from './insurance-income-tax/insurance-income-tax.component';\r\nimport {TaxiComponent} from \"app/claim/se-claim/se-claim-verification/working-data-section/taxi/taxi.component\";\r\nimport {TaxiWD} from \"app/claim/se-claim/model/taxi-model\";\r\nimport { InsurITXWD } from '../../model/insur-income-tax.model';\r\nimport {NspConfirmationService} from \"app/shared/confirm/nsp-confirm.service\";\r\nimport {ReplacementComponent} from \"app/claim/se-claim/se-claim-verification/working-data-section/replacement/replacement.component\";\r\nimport {ReplacementWD} from \"app/claim/se-claim/model/replacement.model\";\r\nimport {CloneService} from \"app/core/util/clone.service\";\r\nimport {OthersComponent} from \"app/claim/se-claim/se-claim-verification/working-data-section/others/others.component\";\r\nimport {OthersWD} from \"app/claim/se-claim/model/others.model\";\r\nimport {RefreshOthersInfo} from \"app/claim/se-claim/model/refresh-others-info.model\";\r\nimport {CodeView, IcCodeService} from \"app/ng-connect\";\r\nimport { PropertyAgentComponent } from './property-agent/property-agent.component';\r\nimport { PropertyAgentWD } from '../../model/property-agent.model';\r\nimport { ConfirmationService } from 'primeng/api';\r\nimport { InsurAveWD } from '../../model/insur-ave.model';\r\nimport { InsuranceAvgIncomeComponent } from './insurance-avg-income/insurance-avg-income.component';\r\nimport { PartnerComponent } from './partner/partner.component';\r\nimport { PartnerWD } from '../../model/partner.model';\r\nimport { SolePropWD } from '../../model/sole-prop.model ';\r\nimport { SolePropComponent } from './sole-prop/sole-prop.component';\r\nimport { ExportUtilsService } from 'app/core/util/export-utils.service';\r\nimport moment from 'moment';\r\nimport { AccountService } from 'app/core/auth/account.service';\r\nimport { NSPAY2_ROLES, NSPAY2_STATION } from 'app/nspay2.constants';\r\n\r\n@Component({\r\n  selector: 'n2-working-data-section',\r\n  templateUrl: './working-data-section.component.html',\r\n  styleUrls: ['./working-data-section.component.scss']\r\n})\r\nexport class WorkingDataSectionComponent implements OnInit, OnChanges {\r\n\r\n  @Input() seHardCopyDetails:any;\r\n  @Input() itemDetailsSection: any;\r\n  @Input() trgStartDte: string\r\n\r\n  @Input() selected:boolean;\r\n  @Output() selectedChange = new EventEmitter<boolean>();\r\n  @Input() station: string;\r\n\r\n  displayNIWDDialog = false;\r\n  displayNAWDDialog = false;\r\n  currHardCopyDetails: any = {};\r\n  populatePastClaim: any;\r\n  isPastClaimAvailable =  false;\r\n  selectedWDOption: any = {};\r\n  selectedYearOption: any = {};\r\n  workingDataOptions: any[] = [];\r\n  yearOptions: any[] = [];\r\n  aveWorkingDataTemplateOptions: any[] = [];\r\n  selectedAveWorkingDataTemplateOption:any;\r\n  totalAmtPay = 0;\r\n  workingDataWithChanges: Map<string, any> = new Map<string, any>();\r\n  newUnsavedWorkingData: Map<string, any> = new Map<string, any>();\r\n  populateFormGroup: FormGroup;\r\n  @Output() totalAmtPayEvent: EventEmitter<any> = new EventEmitter<any>();\r\n\r\n  @Input() saveSEClaimRequest: SaveSEClaimRequest;\r\n\r\n  @ViewChild('accordionTab', {static: false})\r\n  public accordionTab?: AccordionTab;\r\n\r\n  @ViewChild('phdDeliveryWorkingData', {static: false})\r\n  public phdDeliveryWorkingData?: PrivateHirerDriverComponent;\r\n\r\n  @ViewChild('insurITXWorkingData', {static: false})\r\n  public insurITXWorkingData?: InsuranceIncomeTaxComponent;\r\n\r\n  @Input() irasDetails:any;\r\n  //meant for routing from enquiry\r\n  @Input() readOnly: boolean;\r\n  InsuranceIncomeTaxComponent: any;\r\n\r\n  constructor(\r\n    private seClaimService: SEClaimService,\r\n    private toastService: CustomToastService,\r\n    private dateUtilsService: DateUtilsService,\r\n    private formBuilder: FormBuilder,\r\n    private cd: ChangeDetectorRef,\r\n    private nspConfirmationService: NspConfirmationService,\r\n    private cloneService: CloneService,\r\n    private codeService: IcCodeService,\r\n    private nspConfirmService: NspConfirmationService,\r\n    private confirmationService: ConfirmationService,\r\n    private exportUtilsService: ExportUtilsService,\r\n    public accountService: AccountService,\r\n    private zone: NgZone,\r\n    @Inject(LOCALE_ID) protected localeId: string\r\n\r\n  ) {   \r\n\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    console.log(\"init working data section\")\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void{\r\n    if(changes.seHardCopyDetails?.currentValue){\r\n      this.currHardCopyDetails=changes.seHardCopyDetails?.currentValue;\r\n      this.retrieveWDDropdown();\r\n      if(this.currHardCopyDetails?.headerDto?.claimOption === '2') {\r\n        const claimStartYear = (this.dateUtilsService.convertStrToDate(this.currHardCopyDetails.trgStartDte, \"DD-MM-YYYY\")).getFullYear();\r\n        console.log(\"claim Year\", this.currHardCopyDetails.trgStartDte);\r\n        this.yearOptions = [\r\n          {name: claimStartYear, key: claimStartYear},\r\n          {name: claimStartYear - 1, key: claimStartYear - 1}\r\n        ];\r\n        this.selectedYearOption = this.yearOptions[0].key;\r\n\r\n        // this.selectedOption = this.workingDataOptions[0];\r\n      }\r\n    }\r\n  }\r\n\r\n  retrieveWDDropdown(): void{\r\n    let params = new HttpParams();\r\n    params = params.append(\"claimId\",this.currHardCopyDetails?.claimId);\r\n    this.seClaimService.retrieveWDDropdown({params}).subscribe((resp:any) => {\r\n      if(resp){\r\n          if(resp.status === 200 && resp.body.data){\r\n            const sortedData = resp.body.data.sort(this.sortWDTypeByCode())\r\n            sortedData.forEach((x:any, index: number)=>{\r\n              let archiveDt = \"Active\";\r\n              if(x.archiveDt!==0){\r\n                archiveDt = this.dateUtilsService.convertUnixToDateString(x.archiveDt, \"DD-MM-YYYY\");\r\n              }\r\n              this.workingDataOptions.push({\r\n                name: x.workingDataTypeCode==='01'? x.workingDataTypeDesc.concat(\" (\").concat(x.year).concat(\") \").concat(\"(\").concat(archiveDt).concat(\")\"):\r\n                x.workingDataTypeDesc.concat(\" (\").concat(archiveDt).concat(\")\"),\r\n                key: index,\r\n                obj: {\r\n                  workingDataTypeCode: x.workingDataTypeCode,\r\n                  year: x.year,\r\n                  archiveDt: x.archiveDt,\r\n                  workingDataId: x.workingDataId,\r\n                },\r\n                changes: false,\r\n                newWD: false,\r\n                newArchived: false\r\n              })\r\n              this.selectedWDOption = this.workingDataOptions[0];\r\n            });\r\n\r\n            if(this.currHardCopyDetails?.headerDto?.claimOption === '1') {\r\n              // append to working Data Template Options... shallow copy is fine\r\n              this.codeService.gets('working_data_ave_dropdown')\r\n                .subscribe((codes: any[]) => {\r\n                  this.aveWorkingDataTemplateOptions = this.workingDataOptions\r\n                    .concat(\r\n                      codes[0].map((x:CodeView)=> {\r\n                    return {name:x.label['en-US'], key: x.codeId}\r\n                  }));\r\n                });\r\n            }\r\n          }\r\n        }\r\n      },\r\n      (error: any) => {\r\n        console.log(\"error is\" + String(error?.error?.error_desc));\r\n        this.toastService.error(String(error?.error?.error_desc));\r\n      });\r\n  }\r\n\r\n  getTotalAmtPay(data: any): void{\r\n    this.totalAmtPayEvent.emit(data);\r\n  }\r\n\r\n  // sortWDTypeByCode(){\r\n  //   return function (a: any, b: any) {\r\n  //     if (a.workingDataTypeCode === b.workingDataTypeCode) {\r\n  //       if(a.year === b.year){\r\n  //         if(a.archiveDt === 0){\r\n  //           return -1;\r\n  //         }else if(b.archiveDt === 0){\r\n  //           return -1;\r\n  //         }else {\r\n  //           return a.archiveDt < b.archiveDt ? 1 : -1;\r\n  //         }\r\n  //       }else {\r\n  //         return a.year < b.year ? 1 : -1;\r\n  //       }\r\n  //     }\r\n  //       return (a.workingDataTypeCode as string).localeCompare((b.workingDataTypeCode as string));\r\n  //     }\r\n  //   }\r\n\r\n  sortWDTypeByCode(){\r\n    return function (a: any, b: any) {\r\n        if(a.archiveDt === 0){\r\n          return -1;\r\n        }\r\n        else if(b.archiveDt === 0){\r\n          return 1;\r\n        }\r\n        \r\n        else if(a.archiveDt === b.archiveDt && a.archiveDt!==0){\r\n          return (a.workingDataTypeCode as string).localeCompare((b.workingDataTypeCode as string));\r\n        } else {\r\n          return a.archiveDt < b.archiveDt ? 1 : -1;\r\n        }\r\n      }\r\n    }\r\n    \r\n\r\n  insertNewIWD(): void{\r\n    console.log(\"selected year\", this.selectedYearOption)\r\n    console.log(\"populate past claim\", this.populatePastClaim);\r\n    const workingDataOption: any = {\r\n      name: \"Insurance \".concat(\" (Active)\"),\r\n      key: this.newUnsavedWorkingData.size,\r\n      obj: {\r\n        workingDataTypeCode: \"01\",\r\n        year: this.selectedYearOption,\r\n        archiveDt: 0,\r\n        workingDataId: null\r\n      },\r\n      changes: false,\r\n      newWD: true,\r\n      newArchived: false\r\n    };\r\n\r\n    this.workingDataOptions.unshift(workingDataOption);\r\n    // const newFormGrp = this.insurITXWorkingData.populateIncomeTaxInsurForm({dataList:[]}, true);\r\n    // let phdDeliveryFormGroup:FormGroup;\r\n\r\n    let newFormGrp: FormGroup = null;\r\n\r\n    if(!this.populatePastClaim) {\r\n      newFormGrp =  InsuranceIncomeTaxComponent.createNewITXInsurFormGroup(this.selectedYearOption, this.formBuilder, this.dateUtilsService);\r\n    } else {\r\n      newFormGrp = this.populateFormGroup;\r\n    }\r\n    // newFormGrp = insurItxComponent.createNewIncomeTaxInsurForm({dataList:[], year: this.selectedYearOption}, this.populatePastClaim, 'MTH');\r\n    // //just use the index as the map key\r\n    this.newUnsavedWorkingData.set(this.newUnsavedWorkingData.size.toString(),\r\n      {\r\n        obj: workingDataOption.obj,\r\n        formGroup: newFormGrp\r\n      });\r\n\r\n      console.log(\"new unsaved is2 \", this.newUnsavedWorkingData)\r\n    this.saveSEClaimRequest.workingDataSectionInd = true;\r\n    this.selectedWDOption = this.workingDataOptions[0];\r\n    this.displayNIWDDialog = false;\r\n    this.archiveAllActiveData();\r\n\r\n  }\r\n\r\n  archiveAllActiveData2():void{\r\n    //archive all active working data, also shift them to \"with changes Array in parent Working Data Component\"\r\n    const existingActiveWD = this.workingDataOptions.slice(1).filter(x=> x.obj.archiveDt === 0);\r\n    existingActiveWD.forEach((x, index) => {\r\n        const currDate = new Date()\r\n        x.obj.archiveDt = this.dateUtilsService.convertMomentToUnix(currDate);\r\n        x.name = x.name.replace(\"Active\", this.dateUtilsService.convertDateToStr(currDate, \"DD-MM-YYYY\"));\r\n        x.changes = true;\r\n        // shifting only needs to be done for non-new WD, any new WD will already be in the unsaved list,\r\n        // updating the dates will be enough, since there is a reference\r\n        if(!x.newWD){\r\n          if(!this.workingDataWithChanges.has(x.obj.workingDataId)){\r\n            x.newArchived=true;\r\n            this.workingDataWithChanges.set(x.obj.workingDataId,\r\n              {\r\n                obj: x.obj,\r\n                formGroup: null\r\n            });\r\n          }else {\r\n            const formGroup = this.workingDataWithChanges.get(x.obj.workingDataId).formGroup;\r\n            x.newArchived=false;\r\n            this.workingDataWithChanges.set(x.obj.workingDataId,\r\n              {\r\n                obj: x.obj,\r\n                formGroup\r\n            });\r\n          }\r\n        }\r\n\r\n    })\r\n  }\r\n\r\n  insertNewAveWD(): void{\r\n    if(this.selectedAveWorkingDataTemplateOption !== undefined) {\r\n      console.log(\"the options\", this.workingDataOptions)\r\n      console.log(\"the selected\", this.selectedAveWorkingDataTemplateOption)\r\n      //Check if selected is an existing WD or a new template\r\n      const existingWD = this.workingDataOptions.find(x => x.key === this.selectedAveWorkingDataTemplateOption)\r\n      console.log(\"selected What\",existingWD);\r\n      if (existingWD !== undefined) {\r\n        //Create new Working Data by copying of selected existing Working Data from db/changed-existing/new-unsaved\r\n        //find the workingdata based on workingDataId of selected and create new one based of it\r\n        switch (existingWD.obj.workingDataTypeCode) {\r\n          //Insurance (AVE)\r\n          case '02': {\r\n            const workingDataOption:any = {\r\n              name: \"Insurance \".concat(\" (Active)\"),\r\n              key: this.newUnsavedWorkingData.size,\r\n              obj: {\r\n                workingDataTypeCode: \"02\",\r\n                year: null,\r\n                archiveDt: 0,\r\n                workingDataId: null\r\n              },\r\n              changes: false,\r\n              newWD: true\r\n            };\r\n\r\n            let insurAveFormGroup:FormGroup;\r\n            if(!existingWD.changes && !existingWD.newWD) {\r\n              let params = new HttpParams();\r\n              params = params.append(\"workingDataId\", existingWD?.obj?.workingDataId);\r\n              this.seClaimService.retrieveInsurWD({params})\r\n              .subscribe((resp:any) => {\r\n                if(resp.status === 200 && resp.body.data){                                  \r\n                    insurAveFormGroup = InsuranceAvgIncomeComponent.mapInsurAveWDToFormGroup(resp.body.data, this.formBuilder, this.dateUtilsService);\r\n                    this.updateNewWD(insurAveFormGroup, workingDataOption);\r\n                  }\r\n                });\r\n            } else if(existingWD.changes && !existingWD.newWD) {\r\n              console.log(\"get from changes WD Map\")\r\n              insurAveFormGroup = this.cloneService.deepCloneFormControlValuesOnly(this.workingDataWithChanges.get(existingWD?.obj?.workingDataId).formGroup) as FormGroup;\r\n              this.updateNewWD(insurAveFormGroup, workingDataOption);\r\n            } else if(existingWD.newWD) {\r\n              console.log(\"get from new WD Map\");\r\n              insurAveFormGroup = this.cloneService.deepCloneFormControlValuesOnly(this.newUnsavedWorkingData.get(existingWD?.key.toString()).formGroup) as FormGroup;\r\n              this.updateNewWD(insurAveFormGroup, workingDataOption);\r\n            }\r\n            break;\r\n          }\r\n          //Partner\r\n          case '03': {\r\n            const workingDataOption:any = {\r\n              name: \"Partner \".concat(\" (Active)\"),\r\n              key: this.newUnsavedWorkingData.size,\r\n              obj: {\r\n                workingDataTypeCode: \"03\",\r\n                year: null,\r\n                archiveDt: 0,\r\n                workingDataId: null\r\n              },\r\n              changes: false,\r\n              newWD: true\r\n            };\r\n            let newPartnerFormGroup:FormGroup;\r\n            if(!existingWD.changes && !existingWD.newWD) {\r\n              let params = new HttpParams();\r\n              params = params.append(\"workingDataId\", existingWD?.obj?.workingDataId);\r\n              this.seClaimService.retrieveSolePropPartnerWD({params})\r\n                .subscribe((resp:any) => {\r\n                  if(resp.status === 200 && resp.body.data){                   \r\n                    newPartnerFormGroup = PartnerComponent.mapPartnerWDToFormGroup(resp.body.data, this.dateUtilsService, this.formBuilder);\r\n                    this.updateNewWD(newPartnerFormGroup, workingDataOption);\r\n                  }\r\n                });\r\n            } else if(existingWD.changes && !existingWD.newWD) {\r\n              console.log(\"get from changes WD Map\", existingWD?.obj?.workingDataId)\r\n              newPartnerFormGroup = this.cloneService.deepCloneFormControlValuesOnly(this.workingDataWithChanges.get(existingWD?.obj?.workingDataId).formGroup) as FormGroup;\r\n              this.updateNewWD(newPartnerFormGroup, workingDataOption);\r\n            } else if(existingWD.newWD) {\r\n              console.log(\"get from new WD Map\");\r\n              newPartnerFormGroup = this.cloneService.deepCloneFormControlValuesOnly(this.newUnsavedWorkingData.get(existingWD?.key.toString()).formGroup) as FormGroup;\r\n              this.updateNewWD(newPartnerFormGroup, workingDataOption);\r\n            }\r\n            break;\r\n          }\r\n          //Property Agent\r\n          case '04': {\r\n            const workingDataOption:any = {\r\n              name: \"Property Agent \".concat(\" (Active)\"),\r\n              key: this.newUnsavedWorkingData.size,\r\n              obj: {\r\n                workingDataTypeCode: \"04\",\r\n                year: null,\r\n                archiveDt: 0,\r\n                workingDataId: null\r\n              },\r\n              changes: false,\r\n              newWD: true\r\n            };\r\n            let newPropertyAgentFormGroup:FormGroup;\r\n            if(!existingWD.changes && !existingWD.newWD) {\r\n              let params = new HttpParams();\r\n              params = params.append(\"workingDataId\", existingWD?.obj?.workingDataId);\r\n              this.seClaimService.retrievePropertyAgentWD({params})\r\n                .subscribe((resp:any) => {\r\n                  if(resp.status === 200 && resp.body.data){                   \r\n                    newPropertyAgentFormGroup = PropertyAgentComponent.mapPropertyAgentWDToFormGroup(resp.body.data, this.dateUtilsService, this.formBuilder,  this.currHardCopyDetails?.trgStartDte, this.cd)\r\n                    this.updateNewWD(newPropertyAgentFormGroup, workingDataOption);\r\n                  }\r\n                });\r\n            } else if(existingWD.changes && !existingWD.newWD) {\r\n              console.log(\"get from changes WD Map\", existingWD?.obj?.workingDataId)\r\n              newPropertyAgentFormGroup = this.cloneService.deepCloneFormControlValuesOnly(this.workingDataWithChanges.get(existingWD?.obj?.workingDataId).formGroup) as FormGroup;\r\n              this.updateNewWD(newPropertyAgentFormGroup, workingDataOption);\r\n            } else if(existingWD.newWD) {\r\n              console.log(\"get from new WD Map\");\r\n              newPropertyAgentFormGroup = this.cloneService.deepCloneFormControlValuesOnly(this.newUnsavedWorkingData.get(existingWD?.key.toString()).formGroup) as FormGroup;\r\n              this.updateNewWD(newPropertyAgentFormGroup, workingDataOption);\r\n            }\r\n            break;\r\n          }\r\n          //Sole Prop\r\n          case '05': {\r\n            const workingDataOption:any = {\r\n              name: \"Sole Prop \".concat(\" (Active)\"),\r\n              key: this.newUnsavedWorkingData.size,\r\n              obj: {\r\n                workingDataTypeCode: \"05\",\r\n                year: null,\r\n                archiveDt: 0,\r\n                workingDataId: null\r\n              },\r\n              changes: false,\r\n              newWD: true\r\n            };\r\n            let newSolePropFormGroup:FormGroup;\r\n            if(!existingWD.changes && !existingWD.newWD) {\r\n              let params = new HttpParams();\r\n              params = params.append(\"workingDataId\", existingWD?.obj?.workingDataId);\r\n              this.seClaimService.retrieveSolePropPartnerWD({params})\r\n                .subscribe((resp:any) => {\r\n                  if(resp.status === 200 && resp.body.data){                   \r\n                    newSolePropFormGroup = SolePropComponent.mapSolePropWDToFormGroup(resp.body.data, this.dateUtilsService, this.formBuilder);\r\n                    this.updateNewWD(newSolePropFormGroup, workingDataOption);\r\n                  }\r\n                });\r\n            } else if(existingWD.changes && !existingWD.newWD) {\r\n              console.log(\"get from changes WD Map\", existingWD?.obj?.workingDataId)\r\n              newSolePropFormGroup = this.cloneService.deepCloneFormControlValuesOnly(this.workingDataWithChanges.get(existingWD?.obj?.workingDataId).formGroup) as FormGroup;\r\n              this.updateNewWD(newSolePropFormGroup, workingDataOption);\r\n            } else if(existingWD.newWD) {\r\n              console.log(\"get from new WD Map\");\r\n              newSolePropFormGroup = this.cloneService.deepCloneFormControlValuesOnly(this.newUnsavedWorkingData.get(existingWD?.key.toString()).formGroup) as FormGroup;\r\n              this.updateNewWD(newSolePropFormGroup, workingDataOption);\r\n            }\r\n            break;\r\n          }\r\n          //PHD/Delivery\r\n          case '06': {\r\n            const workingDataOption:any = {\r\n              name: \"PHD/Delivery \".concat(\" (Active)\"),\r\n              key: this.newUnsavedWorkingData.size,\r\n              obj: {\r\n                workingDataTypeCode: \"06\",\r\n                year: null,\r\n                archiveDt: 0,\r\n                workingDataId: null\r\n              },\r\n              changes: false,\r\n              newWD: true\r\n            };\r\n\r\n            let phdDeliveryFormGroup:FormGroup;\r\n            if(!existingWD.changes && !existingWD.newWD) {\r\n              let params = new HttpParams();\r\n              params = params.append(\"workingDataId\", existingWD?.obj?.workingDataId);\r\n              this.seClaimService.retrievePhdDeliveryWD(params)\r\n                .subscribe((res: Ns2Response<PhdDeliveryWD>) => {\r\n                  if (res.data) {\r\n                    phdDeliveryFormGroup = PrivateHirerDriverComponent.mapPhdDeliveryWDToFormGroup(res.data, this.dateUtilsService, this.formBuilder);\r\n                    this.updateNewWD(phdDeliveryFormGroup, workingDataOption);\r\n                  }\r\n                });\r\n            } else if(existingWD.changes && !existingWD.newWD) {\r\n              console.log(\"get from changes WD Map\")\r\n              phdDeliveryFormGroup = this.cloneService.deepCloneFormControlValuesOnly(this.workingDataWithChanges.get(existingWD?.obj?.workingDataId).formGroup) as FormGroup;\r\n              this.updateNewWD(phdDeliveryFormGroup, workingDataOption);\r\n            } else if(existingWD.newWD) {\r\n              console.log(\"get from new WD Map\");\r\n              phdDeliveryFormGroup = this.cloneService.deepCloneFormControlValuesOnly(this.newUnsavedWorkingData.get(existingWD?.key.toString()).formGroup) as FormGroup;\r\n              this.updateNewWD(phdDeliveryFormGroup, workingDataOption);\r\n            }\r\n            break;\r\n          }\r\n          //Taxi Driver\r\n          case '07': {\r\n            const workingDataOption:any = {\r\n              name: \"Taxi \".concat(\" (Active)\"),\r\n              key: this.newUnsavedWorkingData.size,\r\n              obj: {\r\n                workingDataTypeCode: \"07\",\r\n                year: null,\r\n                archiveDt: 0,\r\n                workingDataId: null\r\n              },\r\n              changes: false,\r\n              newWD: true\r\n            };\r\n\r\n            let taxiFormGroup:FormGroup;\r\n            if(!existingWD.changes && !existingWD.newWD) {\r\n              let params = new HttpParams();\r\n              params = params.append(\"workingDataId\", existingWD?.obj?.workingDataId);\r\n              this.seClaimService.retrieveTaxiWD(params)\r\n                .subscribe((res: Ns2Response<TaxiWD>) => {\r\n                  if (res.data) {\r\n                    taxiFormGroup = TaxiComponent.mapTaxiWDToFormGroup(res.data, this.formBuilder, this.currHardCopyDetails);\r\n                    this.updateNewWD(taxiFormGroup, workingDataOption);\r\n                  }\r\n                });\r\n            } else if(existingWD.changes && !existingWD.newWD) {\r\n              console.log(\"get from changes WD Map\")\r\n              taxiFormGroup = this.cloneService.deepCloneFormControlValuesOnly(this.workingDataWithChanges.get(existingWD?.obj?.workingDataId).formGroup) as FormGroup;\r\n              this.updateNewWD(taxiFormGroup, workingDataOption);\r\n            } else if(existingWD.newWD) {\r\n              console.log(\"get from new WD Map\");\r\n              taxiFormGroup = this.cloneService.deepCloneFormControlValuesOnly(this.newUnsavedWorkingData.get(existingWD?.key.toString()).formGroup) as FormGroup;\r\n              this.updateNewWD(taxiFormGroup, workingDataOption);\r\n            }\r\n            break;\r\n          }\r\n          //Others\r\n          case '08': {\r\n            const workingDataOption:any = {\r\n              name: \"Others \".concat(\" (Active)\"),\r\n              key: this.newUnsavedWorkingData.size,\r\n              obj: {\r\n                workingDataTypeCode: \"08\",\r\n                year: null,\r\n                archiveDt: 0,\r\n                workingDataId: null\r\n              },\r\n              changes: false,\r\n              newWD: true\r\n            };\r\n\r\n            let othersFormGroup:FormGroup;\r\n            if(!existingWD.changes && !existingWD.newWD) {\r\n              let params = new HttpParams();\r\n              params = params.append(\"workingDataId\", existingWD?.obj?.workingDataId);\r\n              this.seClaimService.retrieveOthersWD(params)\r\n                .subscribe((res: Ns2Response<OthersWD>) => {\r\n                  if (res.data) {\r\n                    othersFormGroup = OthersComponent.mapOthersWDToFormGroup(res.data, this.formBuilder, this.dateUtilsService);\r\n                    this.updateNewWD(othersFormGroup, workingDataOption);\r\n                  }\r\n                });\r\n            } else if(existingWD.changes && !existingWD.newWD) {\r\n              console.log(\"get from changes WD Map\")\r\n              othersFormGroup = this.cloneService.deepCloneFormControlValuesOnly(this.workingDataWithChanges.get(existingWD?.obj?.workingDataId).formGroup) as FormGroup;\r\n              this.updateNewWD(othersFormGroup, workingDataOption);\r\n            } else if(existingWD.newWD) {\r\n              console.log(\"get from new WD Map\");\r\n              othersFormGroup = this.cloneService.deepCloneFormControlValuesOnly(this.newUnsavedWorkingData.get(existingWD?.key.toString()).formGroup) as FormGroup;\r\n              this.updateNewWD(othersFormGroup, workingDataOption);\r\n            }\r\n            break;\r\n          }\r\n          default:\r\n            break;\r\n        }\r\n      } else {\r\n        console.log(\"new template\");\r\n        //Create completely new working Data\r\n        switch (this.selectedAveWorkingDataTemplateOption){\r\n          //Insurance (AVE)\r\n          case '02': {\r\n             // code Type later\r\n             const workingDataOption:any = {\r\n              name: \"Insurance \".concat(\" (Active)\"),\r\n              key: this.newUnsavedWorkingData.size,\r\n              obj: {\r\n                workingDataTypeCode: \"02\",\r\n                year: null,\r\n                archiveDt: 0,\r\n                workingDataId: null\r\n              },\r\n              changes: false,\r\n              newWD: true\r\n            };\r\n            const startYrmth =  this.dateUtilsService.convertMomentToStr(this.dateUtilsService.convertStrToMoment(this.currHardCopyDetails?.trgStartDte, \"DD-MM-YYYY\").subtract(6, 'months'), \"DD-MM-YYYY\");\r\n            const endYrmth = this.dateUtilsService.convertMomentToStr(this.dateUtilsService.convertStrToMoment(this.currHardCopyDetails.trgStartDte, \"DD-MM-YYYY\").subtract(1, 'months'),  \"DD-MM-YYYY\");\r\n\r\n            let newInsurAvgFormGroup: FormGroup = null;\r\n            if(!this.populatePastClaim) {\r\n              newInsurAvgFormGroup = InsuranceAvgIncomeComponent.createNewAveInsurFormGroup(startYrmth, endYrmth,this.formBuilder, this.dateUtilsService);\r\n            } else {\r\n              newInsurAvgFormGroup = this.populateFormGroup;\r\n            }\r\n\r\n            //just use the index as the map key\r\n            this.newUnsavedWorkingData.set(this.newUnsavedWorkingData.size.toString(),\r\n              {\r\n                obj: workingDataOption.obj,\r\n                formGroup: newInsurAvgFormGroup\r\n              });\r\n            console.log(\"new unsaved is2 \", this.newUnsavedWorkingData)\r\n\r\n            this.saveSEClaimRequest.workingDataSectionInd = true;\r\n            this.workingDataOptions.splice(0,0,workingDataOption);\r\n            this.archiveAllActiveData();\r\n            this.aveWorkingDataTemplateOptions.splice(0, 0, workingDataOption);\r\n            this.cd.detectChanges();\r\n            setTimeout(() => {this.selectedWDOption = this.workingDataOptions[0]},0);\r\n            break;\r\n          }\r\n          //Partner\r\n          case '03': {\r\n             // code Type later\r\n             const workingDataOption:any = {\r\n              name: \"Partner \".concat(\" (Active)\"),\r\n              key: this.newUnsavedWorkingData.size,\r\n              obj: {\r\n                workingDataTypeCode: \"03\",\r\n                year: null,\r\n                archiveDt: 0,\r\n                workingDataId: null\r\n              },\r\n              changes: false,\r\n              newWD: true\r\n            };\r\n            let newPartnerFormGroup: FormGroup = null;\r\n            const startYrmth =  this.dateUtilsService.convertMomentToStr(this.dateUtilsService.convertStrToMoment(this.currHardCopyDetails?.trgStartDte, \"DD-MM-YYYY\").subtract(6, 'months'), \"DD-MM-YYYY\");\r\n            const endYrmth = this.dateUtilsService.convertMomentToStr(this.dateUtilsService.convertStrToMoment(this.currHardCopyDetails.trgStartDte, \"DD-MM-YYYY\").subtract(1, 'months'),  \"DD-MM-YYYY\");\r\n\r\n            if(!this.populatePastClaim) {\r\n              newPartnerFormGroup = PartnerComponent.staticCreateNewPartnerForm(startYrmth, endYrmth, workingDataOption, this.dateUtilsService, this.formBuilder, this.currHardCopyDetails?.trgStartDte);\r\n            } else {\r\n              newPartnerFormGroup = this.populateFormGroup;\r\n            }\r\n\r\n            //just use the index as the map key\r\n            this.newUnsavedWorkingData.set(this.newUnsavedWorkingData.size.toString(),\r\n              {\r\n                obj: workingDataOption.obj,\r\n                formGroup: newPartnerFormGroup\r\n              });\r\n            console.log(\"new unsaved is2 \", this.newUnsavedWorkingData)\r\n            console.log(\"new with changes is2 \", this.workingDataWithChanges)\r\n\r\n            this.saveSEClaimRequest.workingDataSectionInd = true;\r\n            this.workingDataOptions.splice(0,0,workingDataOption);\r\n\r\n            this.archiveAllActiveData();\r\n            this.aveWorkingDataTemplateOptions.splice(0, 0, workingDataOption);\r\n\r\n            this.cd.detectChanges();\r\n            // this.selectedWDOption = this.workingDataOptions[0]\r\n            setTimeout(() => {this.selectedWDOption = this.workingDataOptions[0]},0);\r\n            break;\r\n          }\r\n          //Property Agent\r\n          case '04': {\r\n              // code Type later\r\n              const workingDataOption:any = {\r\n                name: \"Property Agent \".concat(\" (Active)\"),\r\n                key: this.newUnsavedWorkingData.size,\r\n                obj: {\r\n                  workingDataTypeCode: \"04\",\r\n                  year: null,\r\n                  archiveDt: 0,\r\n                  workingDataId: null\r\n                },\r\n                changes: false,\r\n                newWD: true\r\n              };\r\n              let newPropertyAgentFormGroup: FormGroup = null;\r\n              if(!this.populatePastClaim) {\r\n                newPropertyAgentFormGroup = PropertyAgentComponent.staticCreateNewPropertyAgentForm(workingDataOption, this.dateUtilsService, this.formBuilder, this.currHardCopyDetails?.trgStartDte, this.cd);\r\n              } else {\r\n                newPropertyAgentFormGroup = this.populateFormGroup;\r\n              }\r\n  \r\n              //just use the index as the map key\r\n              this.newUnsavedWorkingData.set(this.newUnsavedWorkingData.size.toString(),\r\n                {\r\n                  obj: workingDataOption.obj,\r\n                  formGroup: newPropertyAgentFormGroup\r\n                });\r\n              console.log(\"new unsaved is2 \", this.newUnsavedWorkingData)\r\n  \r\n              this.saveSEClaimRequest.workingDataSectionInd = true;\r\n              this.workingDataOptions.splice(0,0,workingDataOption);\r\n              this.archiveAllActiveData();\r\n              this.aveWorkingDataTemplateOptions.splice(0, 0, workingDataOption);\r\n\r\n              this.cd.detectChanges();\r\n              setTimeout(() => {this.selectedWDOption = this.workingDataOptions[0]},0);\r\n              break;\r\n          }\r\n          //Sole Prop\r\n          case '05': {\r\n              // code Type later\r\n              const workingDataOption:any = {\r\n                name: \"Sole Prop \".concat(\" (Active)\"),\r\n                key: this.newUnsavedWorkingData.size,\r\n                obj: {\r\n                  workingDataTypeCode: \"05\",\r\n                  year: null,\r\n                  archiveDt: 0,\r\n                  workingDataId: null\r\n                },\r\n                changes: false,\r\n                newWD: true\r\n              };\r\n              let newSolePropFormGroup: FormGroup = null;\r\n              const startYrmth =  this.dateUtilsService.convertMomentToStr(this.dateUtilsService.convertStrToMoment(this.currHardCopyDetails?.trgStartDte, \"DD-MM-YYYY\").subtract(6, 'months'), \"DD-MM-YYYY\");\r\n              const endYrmth = this.dateUtilsService.convertMomentToStr(this.dateUtilsService.convertStrToMoment(this.currHardCopyDetails.trgStartDte, \"DD-MM-YYYY\").subtract(1, 'months'),  \"DD-MM-YYYY\");\r\n  \r\n              if(!this.populatePastClaim) {\r\n                newSolePropFormGroup = SolePropComponent.createNewSolePropForm(startYrmth, endYrmth, workingDataOption, this.dateUtilsService, this.formBuilder, this.currHardCopyDetails?.trgStartDte);\r\n              } else {\r\n                newSolePropFormGroup = this.populateFormGroup;\r\n              }\r\n  \r\n              //just use the index as the map key\r\n              this.newUnsavedWorkingData.set(this.newUnsavedWorkingData.size.toString(),\r\n                {\r\n                  obj: workingDataOption.obj,\r\n                  formGroup: newSolePropFormGroup\r\n                });\r\n              console.log(\"new unsaved is2 \", this.newUnsavedWorkingData)\r\n  \r\n              this.saveSEClaimRequest.workingDataSectionInd = true;\r\n              this.workingDataOptions.splice(0,0,workingDataOption);\r\n              this.archiveAllActiveData();\r\n              this.aveWorkingDataTemplateOptions.splice(0, 0, workingDataOption);\r\n\r\n              this.cd.detectChanges();\r\n              setTimeout(() => {this.selectedWDOption = this.workingDataOptions[0]},0);\r\n              break;\r\n          }\r\n          //PHD/Delivery\r\n          case '06': {\r\n            // code Type later\r\n            const workingDataOption:any = {\r\n              name: \"PHD/Delivery \".concat(\" (Active)\"),\r\n              key: this.newUnsavedWorkingData.size,\r\n              obj: {\r\n                workingDataTypeCode: \"06\",\r\n                year: null,\r\n                archiveDt: 0,\r\n                workingDataId: null\r\n              },\r\n              changes: false,\r\n              newWD: true\r\n            };\r\n            const {startDate, endDate} = this.calculateStartAndEndForPhd();\r\n\r\n            let newPhdDeliveryFormGroup: FormGroup = null;\r\n            if(!this.populatePastClaim) {\r\n              newPhdDeliveryFormGroup = PrivateHirerDriverComponent.createNewPhdDeliveryFormGroup(startDate, endDate, workingDataOption, this.dateUtilsService, this.formBuilder);\r\n            } else {\r\n              newPhdDeliveryFormGroup = this.populateFormGroup;\r\n            }\r\n            //just use the index as the map key\r\n            this.newUnsavedWorkingData.set(this.newUnsavedWorkingData.size.toString(),\r\n              {\r\n                obj: workingDataOption.obj,\r\n                formGroup: newPhdDeliveryFormGroup\r\n              });\r\n            this.saveSEClaimRequest.workingDataSectionInd = true;\r\n            this.workingDataOptions.splice(0,0,workingDataOption);\r\n            this.archiveAllActiveData();\r\n            this.aveWorkingDataTemplateOptions.splice(0, 0, workingDataOption);\r\n            this.cd.detectChanges();\r\n            setTimeout(() => {this.selectedWDOption = this.workingDataOptions[0]},0);\r\n            break;\r\n            //Taxi Driver\r\n          }\r\n          case '07': {\r\n            // code Type later\r\n            const workingDataOption:any = {\r\n              name: \"Taxi \".concat(\" (Active)\"),\r\n              key: this.newUnsavedWorkingData.size,\r\n              obj: {\r\n                workingDataTypeCode: \"07\",\r\n                year: null,\r\n                archiveDt: 0,\r\n                workingDataId: null\r\n              },\r\n              changes: false,\r\n              newWD: true\r\n            };\r\n\r\n            const newTaxiFormGroup: FormGroup = TaxiComponent.createNewTaxiFormGroup(this.formBuilder, this.currHardCopyDetails);\r\n\r\n            //just use the index as the map key\r\n            this.newUnsavedWorkingData.set(this.newUnsavedWorkingData.size.toString(),\r\n              {\r\n                obj: workingDataOption.obj,\r\n                formGroup: newTaxiFormGroup\r\n              });\r\n            this.saveSEClaimRequest.workingDataSectionInd = true;\r\n            this.workingDataOptions.splice(0,0,workingDataOption);\r\n            this.archiveAllActiveData();\r\n            this.aveWorkingDataTemplateOptions.splice(0, 0, workingDataOption);\r\n            this.cd.detectChanges();\r\n            setTimeout(() => {this.selectedWDOption = this.workingDataOptions[0]},0);\r\n            break;\r\n          }\r\n          //Others\r\n          case '08': {\r\n            // code Type later\r\n            const workingDataOption:any = {\r\n              name: \"Others \".concat(\" (Active)\"),\r\n              key: this.newUnsavedWorkingData.size,\r\n              obj: {\r\n                workingDataTypeCode: \"08\",\r\n                year: null,\r\n                archiveDt: 0,\r\n                workingDataId: null\r\n              },\r\n              changes: false,\r\n              newWD: true\r\n            };\r\n\r\n            const endDate = this.dateUtilsService.convertStrToDate(this.currHardCopyDetails?.trgStartDte, \"DD-MM-YYYY\");\r\n            endDate.setMonth(endDate.getMonth() - 1);\r\n            endDate.setDate(1);\r\n            const startDate = new Date(endDate);\r\n            startDate.setMonth(startDate.getMonth() - 5);\r\n\r\n            let newOthersFormGroup: FormGroup = null;\r\n            if(!this.populatePastClaim) {\r\n              newOthersFormGroup = OthersComponent.createNewOthersFormGroup(startDate, endDate, this.formBuilder, this.dateUtilsService);\r\n            } else {\r\n              newOthersFormGroup = this.populateFormGroup;\r\n            }\r\n\r\n            //just use the index as the map key\r\n            this.newUnsavedWorkingData.set(this.newUnsavedWorkingData.size.toString(),\r\n              {\r\n                obj: workingDataOption.obj,\r\n                formGroup: newOthersFormGroup\r\n              });\r\n            this.saveSEClaimRequest.workingDataSectionInd = true;\r\n            this.workingDataOptions.splice(0,0,workingDataOption);\r\n            this.archiveAllActiveData();\r\n            this.aveWorkingDataTemplateOptions.splice(0, 0, workingDataOption);\r\n            this.cd.detectChanges();\r\n            setTimeout(() => {this.selectedWDOption = this.workingDataOptions[0]},0);\r\n            break;\r\n          }\r\n          default:\r\n            break;\r\n        }\r\n      }\r\n\r\n      console.log(this.workingDataOptions);\r\n\r\n    }\r\n    this.displayNAWDDialog = false;\r\n  }\r\n\r\n  updateNewWD(fg: FormGroup, workingDataOption: any) {\r\n    console.log(\"the update fg\", fg)\r\n    fg.get('id').setValue(null);\r\n    fg.get('workingDataId').setValue(null);\r\n    this.newUnsavedWorkingData.set(this.newUnsavedWorkingData.size.toString(),\r\n      {\r\n        obj: workingDataOption.obj,\r\n        formGroup: fg\r\n      });\r\n    this.saveSEClaimRequest.workingDataSectionInd = true;\r\n    this.workingDataOptions.splice(0, 0, workingDataOption);\r\n    console.log(\"into update\")\r\n    this.archiveAllActiveData();\r\n    if(this.currHardCopyDetails?.headerDto?.claimOption === '1') {\r\n      this.aveWorkingDataTemplateOptions.splice(0, 0, workingDataOption);\r\n    }\r\n    this.cd.detectChanges();\r\n    setTimeout(() => {\r\n      this.selectedWDOption = this.workingDataOptions[0]\r\n    }, 0);\r\n  }\r\n\r\n  archiveAllActiveData() {\r\n    //archive all active working data, also shift them to \"with changes Array in parent Working Data Component\"\r\n    this.workingDataOptions.forEach((x, index) => {\r\n      if (x.obj.archiveDt === 0 && index !== 0) {\r\n        const currDate = new Date()\r\n        x.obj.archiveDt = this.dateUtilsService.convertMomentToUnix(currDate);\r\n        x.name = x.name.replace(\"Active\", this.dateUtilsService.convertDateToStr(currDate, \"DD-MM-YYYY\"));\r\n        x.changes = true;\r\n        // shifting only needs to be done for non-new WD, any new WD will already be in the unsaved list,\r\n        // updating the dates will be enough, since there is a reference\r\n        if (!x.newWD) {\r\n          switch (x.obj.workingDataTypeCode) {\r\n            case '01':{\r\n              if(!this.workingDataWithChanges.has(x.obj.workingDataId)){\r\n                let params = new HttpParams();\r\n                params = params.append(\"workingDataId\", x.obj.workingDataId);\r\n                this.seClaimService.retrieveInsurWD({params}).subscribe((resp:any) => {\r\n                  if(resp.status === 200 && resp.body.data){\r\n                    this.workingDataWithChanges.set(x.obj.workingDataId,\r\n                      {\r\n                        obj: x.obj,\r\n                        formGroup: InsuranceIncomeTaxComponent.mapInsurITXWDToFormGroup(resp.body.data,this.formBuilder,this.dateUtilsService)\r\n                      });\r\n                  }\r\n                });\r\n\r\n              }\r\n\r\n              break;\r\n            }\r\n            //Insurance (AVE)\r\n            case '02': {\r\n              if(!this.workingDataWithChanges.has(x.obj.workingDataId)){\r\n                let params = new HttpParams();\r\n                params = params.append(\"workingDataId\", x.obj.workingDataId);\r\n                this.seClaimService.retrieveInsurWD({params}).subscribe((resp:any) => {\r\n                  if(resp.status === 200 && resp.body.data){\r\n                    this.workingDataWithChanges.set(x.obj.workingDataId,\r\n                      {\r\n                        obj: x.obj,\r\n                        formGroup: InsuranceAvgIncomeComponent.mapInsurAveWDToFormGroup(resp.body.data, this.formBuilder,this.dateUtilsService)\r\n                      });\r\n                  }\r\n                });\r\n              }\r\n              break;\r\n            }\r\n            //Partner\r\n            case '03': {\r\n              if(!this.workingDataWithChanges.has(x.obj.workingDataId)){\r\n                let params = new HttpParams();\r\n                params = params.append(\"workingDataId\", x.obj.workingDataId);\r\n                console.log(\"the archived here\");\r\n\r\n                this.seClaimService.retrieveSolePropPartnerWD({params}).subscribe((resp:any) => {\r\n                  if(resp.status === 200 && resp.body.data){\r\n                    console.log(\"the archived data\", resp.body.data);\r\n                    this.workingDataWithChanges.set(x.obj.workingDataId,\r\n                      {\r\n                        obj: x.obj,\r\n                        formGroup: PartnerComponent.mapPartnerWDToFormGroup(resp.body.data, this.dateUtilsService, this.formBuilder)\r\n                      });\r\n                  }\r\n                });\r\n              }\r\n              break;\r\n            }\r\n            //Property Agent\r\n            case '04': {\r\n              if(!this.workingDataWithChanges.has(x.obj.workingDataId)){\r\n                let params = new HttpParams();\r\n                params = params.append(\"workingDataId\", x.obj.workingDataId);\r\n                this.seClaimService.retrievePropertyAgentWD({params}).subscribe((resp:any) => {\r\n                  if(resp.status === 200 && resp.body.data){\r\n                    console.log(\"miley\", resp.body.data)\r\n                    this.workingDataWithChanges.set(x.obj.workingDataId,\r\n                      {\r\n                        obj: x.obj,\r\n                        formGroup: PropertyAgentComponent.mapPropertyAgentWDToFormGroup(resp.body.data, this.dateUtilsService, this.formBuilder,  this.currHardCopyDetails?.trgStartDte, this.cd)\r\n                      });\r\n                  }\r\n                });\r\n                console.log(\"changes is noiw\", this.workingDataWithChanges)\r\n\r\n              }\r\n              break;\r\n            }\r\n            //Sole Prop\r\n            case '05': {\r\n              if(!this.workingDataWithChanges.has(x.obj.workingDataId)){\r\n                let params = new HttpParams();\r\n                params = params.append(\"workingDataId\", x.obj.workingDataId);\r\n                this.seClaimService.retrieveSolePropPartnerWD({params}).subscribe((resp:any) => {\r\n                  if(resp.status === 200 && resp.body.data){\r\n                    console.log(\"the archived data\", resp.body.data);\r\n\r\n                    this.workingDataWithChanges.set(x.obj.workingDataId,\r\n                      {\r\n                        obj: x.obj,\r\n                        formGroup: SolePropComponent.mapSolePropWDToFormGroup(resp.body.data, this.dateUtilsService, this.formBuilder)\r\n                      });\r\n                  }\r\n                });\r\n              }\r\n              break;\r\n            }\r\n            //PHD/Delivery\r\n            case '06': {\r\n\r\n              if (!this.workingDataWithChanges.has(x.obj.workingDataId)) {\r\n                let params = new HttpParams();\r\n                params = params.append(\"workingDataId\", x.obj.workingDataId);\r\n                this.seClaimService.retrievePhdDeliveryWD(params).subscribe((res: Ns2Response<PhdDeliveryWD>) => {\r\n                  if (res.data) {\r\n                    this.workingDataWithChanges.set(x.obj.workingDataId,\r\n                      {\r\n                        obj: x.obj,\r\n                        formGroup: PrivateHirerDriverComponent.mapPhdDeliveryWDToFormGroup(res.data, this.dateUtilsService, this.formBuilder)\r\n                      });\r\n                  }\r\n                });\r\n              }\r\n              break;\r\n            }\r\n            //Taxi Driver\r\n            case '07': {\r\n              if (!this.workingDataWithChanges.has(x.obj.workingDataId)) {\r\n                let params = new HttpParams();\r\n                params = params.append(\"workingDataId\", x.obj.workingDataId);\r\n                this.seClaimService.retrieveTaxiWD(params).subscribe((res: Ns2Response<TaxiWD>) => {\r\n                  if (res.data) {\r\n                    this.workingDataWithChanges.set(x.obj.workingDataId,\r\n                      {\r\n                        obj: x.obj,\r\n                        formGroup: TaxiComponent.mapTaxiWDToFormGroup(res.data, this.formBuilder, this.currHardCopyDetails)\r\n                      });\r\n                  }\r\n                });\r\n              }\r\n              break;\r\n            }\r\n            //Others\r\n            case '08': {\r\n              if (!this.workingDataWithChanges.has(x.obj.workingDataId)) {\r\n                let params = new HttpParams();\r\n                params = params.append(\"workingDataId\", x.obj.workingDataId);\r\n                this.seClaimService.retrieveOthersWD(params).subscribe((res: Ns2Response<OthersWD>) => {\r\n                  if (res.data) {\r\n                    this.workingDataWithChanges.set(x.obj.workingDataId,\r\n                      {\r\n                        obj: x.obj,\r\n                        formGroup: OthersComponent.mapOthersWDToFormGroup(res.data, this.formBuilder, this.dateUtilsService)\r\n                      });\r\n                  }\r\n                });\r\n              }\r\n              break;\r\n            }\r\n            //Replacement\r\n            case '10': {\r\n              if (!this.workingDataWithChanges.has(x.obj.workingDataId)) {\r\n                let params = new HttpParams();\r\n                params = params.append(\"workingDataId\", x.obj.workingDataId);\r\n                this.seClaimService.retrieveReplacementWD(params).subscribe((res: Ns2Response<ReplacementWD>) => {\r\n                  if (res.data) {\r\n                    this.workingDataWithChanges.set(x.obj.workingDataId,\r\n                      {\r\n                        obj: x.obj,\r\n                        formGroup: ReplacementComponent.mapReplacementWDToFormGroup(res.data, this.formBuilder)\r\n                      });\r\n                  }\r\n                });\r\n              }\r\n              break;\r\n            }\r\n            default:\r\n              break;\r\n          }\r\n        }\r\n        console.log(\"total changes\", this.workingDataWithChanges);\r\n      }\r\n    });\r\n  }\r\n\r\n  init():void {\r\n    console.log(\"changes\", this.workingDataWithChanges);\r\n    console.log(\"unsaved\", this.newUnsavedWorkingData);\r\n    console.log(\"phdSection,\",this.phdDeliveryWorkingData);\r\n  }\r\n\r\n  tester():void {\r\n    console.log(\"changes\", this.workingDataWithChanges);\r\n    console.log(\"unsaved\", this.newUnsavedWorkingData);\r\n  }\r\n\r\n  populateRequestWithWDSectionChanges(): void {\r\n\r\n    this.workingDataWithChanges.forEach((value, key) => {\r\n      console.log(\"this the one with change\"); // 👉️ Tom name, Germany country, 30 age\r\n      console.log(value, key); // 👉️ Tom name, Germany country, 30 age\r\n      this.populateRequestWithIndividualWDChanges(value);\r\n    });\r\n\r\n    this.newUnsavedWorkingData.forEach((value, key) => {\r\n      console.log(\"this the one\"); // 👉️ Tom name, Germany country, 30 age\r\n\r\n      console.log(value, key); // 👉️ Tom name, Germany country, 30 age\r\n      this.populateRequestWithIndividualWDChanges(value);\r\n\r\n    });\r\n    console.log(\"ultimate\",this.saveSEClaimRequest.workingDataPartnerList)\r\n}\r\n\r\n  populateRequestWithIndividualWDChanges(workingDataChanges: any) {\r\n    switch (workingDataChanges.obj.workingDataTypeCode) {\r\n      //Insurance (ITX)\r\n\r\n      case '01': {\r\n\r\n        const insurITXWD: InsurITXWD = InsuranceIncomeTaxComponent.mapInsurITXFormGroupToWD(workingDataChanges.formGroup,workingDataChanges.obj)\r\n        if (this.saveSEClaimRequest.insuranceWorkingDataDtoList === undefined) {\r\n          this.saveSEClaimRequest.insuranceWorkingDataDtoList = [insurITXWD];\r\n        } else {\r\n          this.saveSEClaimRequest.insuranceWorkingDataDtoList.push(insurITXWD);\r\n        }\r\n        break;\r\n      }\r\n      //Insurance (AVE)\r\n      case '02': {\r\n        const insurAveWD: InsurAveWD = InsuranceAvgIncomeComponent.mapInsurAveFormGroupToWD(workingDataChanges.formGroup,workingDataChanges.obj, this.dateUtilsService)\r\n        if (this.saveSEClaimRequest.insuranceWorkingDataDtoList === undefined) {\r\n          this.saveSEClaimRequest.insuranceWorkingDataDtoList = [insurAveWD];\r\n        } else {\r\n          this.saveSEClaimRequest.insuranceWorkingDataDtoList.push(insurAveWD);\r\n        }\r\n        break;\r\n      }\r\n      //Partner\r\n      case '03': {\r\n        const partnerWD: PartnerWD = PartnerComponent.mapPartnerFormGroupToWD(workingDataChanges.formGroup,workingDataChanges.obj)\r\n        if (this.saveSEClaimRequest.workingDataPartnerList === undefined) {\r\n          this.saveSEClaimRequest.workingDataPartnerList = [partnerWD];\r\n        } else {\r\n          this.saveSEClaimRequest.workingDataPartnerList.push(partnerWD);\r\n        }\r\n        break;\r\n      }\r\n      //Property Agent\r\n      case '04': {\r\n        const propertyAgentWD: PropertyAgentWD = PropertyAgentComponent.mapPropertyAgentFormGroupToWD(workingDataChanges.formGroup,workingDataChanges.obj, this.dateUtilsService)\r\n        if (this.saveSEClaimRequest.workingDataPropertyAgentList === undefined) {\r\n          this.saveSEClaimRequest.workingDataPropertyAgentList = [propertyAgentWD];\r\n        } else {\r\n          this.saveSEClaimRequest.workingDataPropertyAgentList.push(propertyAgentWD);\r\n        }\r\n        break;\r\n      }\r\n      //Sole Prop\r\n      case '05': {\r\n        const solePropWD: SolePropWD = SolePropComponent.mapSolePropFormGroupToWD(workingDataChanges.formGroup,workingDataChanges.obj, this.dateUtilsService)\r\n        if (this.saveSEClaimRequest.workingDataSolePropList === undefined) {\r\n          this.saveSEClaimRequest.workingDataSolePropList = [solePropWD];\r\n        } else {\r\n          this.saveSEClaimRequest.workingDataSolePropList.push(solePropWD);\r\n        }\r\n        break;\r\n      }\r\n      //PHD/Delivery\r\n      case '06': {\r\n        const phdDeliveryWD: PhdDeliveryWD = PrivateHirerDriverComponent.mapPhdDeliveryFormGroupToWD(workingDataChanges.formGroup, workingDataChanges.obj, this.dateUtilsService);\r\n        if (this.saveSEClaimRequest.workingDataPhdDeliveryList === undefined) {\r\n          this.saveSEClaimRequest.workingDataPhdDeliveryList = [phdDeliveryWD];\r\n        } else {\r\n          this.saveSEClaimRequest.workingDataPhdDeliveryList.push(phdDeliveryWD);\r\n        }\r\n        break;\r\n      }\r\n      //Taxi Driver\r\n      case '07': {\r\n        const taxiWD: TaxiWD = TaxiComponent.mapTaxiFormGroupToWD(workingDataChanges.formGroup, workingDataChanges.obj);\r\n        if (this.saveSEClaimRequest.workingDataTaxiList === undefined) {\r\n          this.saveSEClaimRequest.workingDataTaxiList = [taxiWD];\r\n        } else {\r\n          this.saveSEClaimRequest.workingDataTaxiList.push(taxiWD);\r\n        }\r\n        break;\r\n      }\r\n      //Others\r\n      case '08': {\r\n        const othersWD: OthersWD = OthersComponent.mapOthersFormGroupToWD(workingDataChanges.formGroup, workingDataChanges.obj, this.dateUtilsService);\r\n        if (this.saveSEClaimRequest.workingDataOthersList === undefined) {\r\n          this.saveSEClaimRequest.workingDataOthersList = [othersWD];\r\n        } else {\r\n          this.saveSEClaimRequest.workingDataOthersList.push(othersWD);\r\n        }\r\n        break;\r\n      }\r\n      //Replacement\r\n      case '10': {\r\n        const replacementWD: ReplacementWD = ReplacementComponent.mapReplacementFormGroupToWD(workingDataChanges.formGroup, workingDataChanges.obj);\r\n        if (this.saveSEClaimRequest.workingDataReplacementList === undefined) {\r\n          this.saveSEClaimRequest.workingDataReplacementList = [replacementWD];\r\n        } else {\r\n          this.saveSEClaimRequest.workingDataReplacementList.push(replacementWD);\r\n        }\r\n        break;\r\n      }\r\n      default:\r\n        break;\r\n    }\r\n  }\r\n\r\n  onHideNAWDDialog(): void {\r\n    this.selectedAveWorkingDataTemplateOption = undefined;\r\n    this.isPastClaimAvailable = false;\r\n    this.populatePastClaim = false;\r\n  }\r\n\r\n  checkForITXPopulatedClaims(): void{\r\n    //Insurance (ITX)\r\n    console.log(\"checkling for itx\")\r\n    const yrmthList = [];\r\n    //form yr mth based on selected year option\r\n    if(this.selectedYearOption){\r\n      const claimStartYr = this.selectedYearOption;\r\n      const claimStartDt = moment(new Date(claimStartYr, 0,1));\r\n      const claimEndDt = moment(new Date(claimStartYr, 11,31));\r\n      const colStartDt = claimStartDt.clone();\r\n      const colEndDt = claimEndDt.clone();\r\n      for(let mth = colStartDt; mth.isSameOrBefore(colEndDt); mth.add(1, 'month')){\r\n        yrmthList.push(mth.format(\"MM-YYYY\"));\r\n      }\r\n      let params = new HttpParams();\r\n      params = params.append(\"nric\", this.currHardCopyDetails?.headerDto.nsManNric);\r\n      params = params.append(\"yrmthList\", JSON.stringify(yrmthList));\r\n      params = params.append(\"caseId\", this.currHardCopyDetails?.headerDto.caseId);\r\n  \r\n      this.populateFormGroup = InsuranceIncomeTaxComponent.createNewITXInsurFormGroup(this.selectedYearOption, this.formBuilder, this.dateUtilsService);\r\n      this.seClaimService.retrieveRefreshOtherInsurClaims({params}).subscribe((resp:any) => {\r\n        if(resp){\r\n          if(resp.status === 200 && resp.body.data.length>0){\r\n            const incomeTaxInsurArrayMthly = this.populateFormGroup.get('incomeTaxInsurArrayMthly') as FormArray;\r\n            resp.body.data.forEach((y:any)=> {\r\n              const ctrl = incomeTaxInsurArrayMthly.controls.find((x:any)=> x.get('yrmthReCon').value === y.yrmth)\r\n              if(ctrl){\r\n                ctrl.get('firstYrCommission').setValue(y?.firstYrCommission || null);\r\n                ctrl.get('generalInsurance').setValue(y?.generalInsurance || null);\r\n                ctrl.get('otherCommission').setValue(y?.otherCommission || null);\r\n                ctrl.get('otherNonPayable').setValue(y?.otherNonPayable || null);\r\n                ctrl.get('overridingCommission').setValue(y?.overridingCommission || null);\r\n                ctrl.get('prdBonus').setValue(y?.prdBonus || null);\r\n                ctrl.get('prdCommission').setValue(y?.prdCommission || null);\r\n                ctrl.get('renewalCommission').setValue(y?.renewalCommission || null);\r\n                ctrl.get('singlePremium').setValue(y?.singlePremium || null);\r\n              }\r\n            });\r\n            const unrefreshed = incomeTaxInsurArrayMthly.controls.filter((x:any)=> !(resp.body.data.map((y:any)=> y.yrmth as string)).includes(x.get('yrmthReCon').value));\r\n            unrefreshed.forEach(ctrl=> {\r\n              ctrl.get('firstYrCommission').setValue(null);\r\n              ctrl.get('generalInsurance').setValue(null);\r\n              ctrl.get('otherCommission').setValue(null);\r\n              ctrl.get('otherNonPayable').setValue(null);\r\n              ctrl.get('overridingCommission').setValue(null);\r\n              ctrl.get('prdBonus').setValue(null);\r\n              ctrl.get('prdCommission').setValue(null);\r\n              ctrl.get('renewalCommission').setValue(null);\r\n              ctrl.get('singlePremium').setValue(null);\r\n            })\r\n          }\r\n          else {\r\n            console.log(\"no data\")\r\n            this.isPastClaimAvailable = false;\r\n            this.populatePastClaim = false;\r\n          }\r\n        }\r\n      });\r\n\r\n    } else {\r\n      console.log(\"no data\")\r\n      this.isPastClaimAvailable = false;\r\n      this.populatePastClaim = false;\r\n    }\r\n      \r\n  }\r\n\r\n  checkForPopulatedClaims(): void {\r\n    console.log(this.selectedAveWorkingDataTemplateOption);\r\n    if(this.selectedAveWorkingDataTemplateOption !== undefined) {\r\n      console.log(this.selectedAveWorkingDataTemplateOption);\r\n      //Check if selected is an existing WD or a new template\r\n      const existingWD = this.workingDataOptions.find(x => x.key === this.selectedAveWorkingDataTemplateOption)\r\n      if (existingWD !== undefined) {\r\n        this.isPastClaimAvailable = false;\r\n      } else {\r\n        //new template selected, check if db has other claims have WD to copy from, refer to Appendix\r\n\r\n        //reset reference first and default to false\r\n        this.populateFormGroup = undefined;\r\n        this.isPastClaimAvailable = false;\r\n        this.populatePastClaim = false;\r\n\r\n        switch (this.selectedAveWorkingDataTemplateOption) {\r\n          //Insurance (AVE)\r\n          case '02': {\r\n            const yrmthList = [];\r\n            const startYrmth =  moment(this.dateUtilsService.convertStrToMoment(this.currHardCopyDetails?.trgStartDte, \"DD-MM-YYYY\").subtract(6, 'months'));\r\n            const endYrmth = moment(this.dateUtilsService.convertStrToMoment(this.currHardCopyDetails.trgStartDte, \"DD-MM-YYYY\").subtract(1, 'months'));\r\n            for(let mth = startYrmth; mth.isSameOrBefore(endYrmth); mth.add(1, 'month')){\r\n              yrmthList.push(mth.format(\"MM-YYYY\"));\r\n            }\r\n            let params = new HttpParams();\r\n            params = params.append(\"nric\", this.currHardCopyDetails?.headerDto.nsManNric);\r\n            params = params.append(\"yrmthList\", JSON.stringify(yrmthList));\r\n            params = params.append(\"caseId\", this.currHardCopyDetails?.headerDto.caseId);\r\n        \r\n            this.populateFormGroup = InsuranceAvgIncomeComponent.createNewAveInsurFormGroup(this.dateUtilsService.convertMomentToStr(startYrmth, \"DD-MM-YYYY\")\r\n            , this.dateUtilsService.convertMomentToStr(endYrmth, \"DD-MM-YYYY\"), this.formBuilder, this.dateUtilsService);\r\n\r\n            this.seClaimService.retrieveRefreshOtherInsurClaims({params}).subscribe(resp => {\r\n              if(resp.status === 200 && resp.body.data.length>0){   \r\n                const refreshedArr:string[] = [];\r\n                  const incomeTaxInsurArrayMthly = this.populateFormGroup.get('incomeTaxInsurArrayMthly') as FormGroup;\r\n                  resp.body.data.forEach((dataR:any)=> {\r\n                    const ctrl = incomeTaxInsurArrayMthly.get(dataR.yrmth);\r\n                    if(ctrl){\r\n                      ctrl.get('firstYrCommission').setValue(dataR.firstYrCommission || null);\r\n                      ctrl.get('generalInsurance').setValue(dataR.generalInsurance || null);\r\n                      ctrl.get('otherCommission').setValue(dataR.otherCommission || null);\r\n                      ctrl.get('otherNonPayable').setValue(dataR.otherNonPayable || null);\r\n                      ctrl.get('overridingCommission').setValue(dataR.overridingCommission || null);\r\n                      ctrl.get('prdBonus').setValue(dataR.prdBonus || null);\r\n                      ctrl.get('prdCommission').setValue(dataR.prdCommission || null);\r\n                      ctrl.get('renewalCommission').setValue(dataR.renewalCommission || null);\r\n                      ctrl.get('singlePremium').setValue(dataR.singlePremium || null);\r\n                    }\r\n                    refreshedArr.push(dataR.yrmth);\r\n                  });\r\n                  const existingYrMthControls =  Object.keys(incomeTaxInsurArrayMthly.controls);\r\n                  const unrefreshed: string[] = refreshedArr.filter( x => !existingYrMthControls.includes(x));\r\n                  unrefreshed.forEach(unrefreshMths=> {\r\n                    if(incomeTaxInsurArrayMthly.get(unrefreshMths)){\r\n                      incomeTaxInsurArrayMthly.get(unrefreshMths).get('revenue').setValue(null);\r\n                      incomeTaxInsurArrayMthly.get(unrefreshMths).get('netProfit').setValue(null);\r\n                      incomeTaxInsurArrayMthly.get(unrefreshMths).get('nsmanShareOfProfit').setValue(null);\r\n                      incomeTaxInsurArrayMthly.get(unrefreshMths).get('nsmanPartnerSalary').setValue(null);\r\n\r\n                      incomeTaxInsurArrayMthly.get(unrefreshMths).get('firstYrCommission').setValue(null);\r\n                      incomeTaxInsurArrayMthly.get(unrefreshMths).get('generalInsurance').setValue(null);\r\n                      incomeTaxInsurArrayMthly.get(unrefreshMths).get('otherCommission').setValue(null);\r\n                      incomeTaxInsurArrayMthly.get(unrefreshMths).get('otherNonPayable').setValue(null);\r\n                      incomeTaxInsurArrayMthly.get(unrefreshMths).get('overridingCommission').setValue( null);\r\n                      incomeTaxInsurArrayMthly.get(unrefreshMths).get('prdBonus').setValue(null);\r\n                      incomeTaxInsurArrayMthly.get(unrefreshMths).get('prdCommission').setValue(null);\r\n                      incomeTaxInsurArrayMthly.get(unrefreshMths).get('renewalCommission').setValue(null);\r\n                      incomeTaxInsurArrayMthly.get(unrefreshMths).get('singlePremium').setValue(null);\r\n                    }\r\n                  })\r\n                this.isPastClaimAvailable = true;\r\n                this.populatePastClaim = true;\r\n              }\r\n              else {\r\n                console.log(\"no data\")\r\n                this.isPastClaimAvailable = false;\r\n                this.populatePastClaim = false;\r\n              }\r\n            });\r\n            break;\r\n          }\r\n          //Partner\r\n          case '03': {\r\n            const yrmthList = [];\r\n            const startYrmth =  moment(this.dateUtilsService.convertStrToMoment(this.currHardCopyDetails?.trgStartDte, \"DD-MM-YYYY\").subtract(6, 'months'));\r\n            const endYrmth = moment(this.dateUtilsService.convertStrToMoment(this.currHardCopyDetails.trgStartDte, \"DD-MM-YYYY\").subtract(1, 'months'));\r\n            for(let mth = startYrmth; mth.isSameOrBefore(endYrmth); mth.add(1, 'month')){\r\n              yrmthList.push(mth.format(\"MM-YYYY\"));\r\n            }\r\n            let params = new HttpParams();\r\n            params = params.append(\"nric\", this.currHardCopyDetails?.headerDto.nsManNric);\r\n            params = params.append(\"yrmthList\", JSON.stringify(yrmthList));\r\n            params = params.append(\"caseId\", this.currHardCopyDetails?.headerDto.caseId);\r\n            params = params.append(\"workingDataTypeCode\", this.selectedWDOption?.obj.workingDataTypeCode);\r\n        \r\n            this.populateFormGroup = PartnerComponent.staticCreateNewPartnerForm(this.dateUtilsService.convertMomentToStr(startYrmth, \"DD-MM-YYYY\")\r\n            , this.dateUtilsService.convertMomentToStr(endYrmth, \"DD-MM-YYYY\"), null, this.dateUtilsService, this.formBuilder, this.currHardCopyDetails?.trgStartDte);\r\n\r\n            this.seClaimService.retrieveRefreshOtherSPPClaims({params}).subscribe(resp => {\r\n              if(resp.status === 200 && resp.body.data.length>0){   \r\n                const refreshedArr:string[] = [];\r\n                  const dataFormArray = this.populateFormGroup.get('dataFormArray') as FormGroup;\r\n                  resp.body.data.forEach((y:any)=> {\r\n                    const ctrl = dataFormArray.get(y.yrmth);\r\n                    if(ctrl){\r\n                      ctrl.get('revenue').setValue(y.revenue || null);\r\n                      ctrl.get('netProfit').setValue(y.netProfit|| null);\r\n                      ctrl.get('nsmanShareOfProfit').setValue(y.revenue || null);\r\n                      ctrl.get('nsmanPartnerSalary').setValue(y.netProfit|| null);\r\n                    }\r\n                    refreshedArr.push(y.yrmth);\r\n                  });\r\n                  const existingYrMthControls =  Object.keys(dataFormArray.controls);\r\n                  const unrefreshed: string[] = refreshedArr.filter( x => !existingYrMthControls.includes(x));\r\n                  unrefreshed.forEach(unrefreshMths=> {\r\n                    if(dataFormArray.get(unrefreshMths)){\r\n                      dataFormArray.get(unrefreshMths).get('revenue').setValue(null);\r\n                      dataFormArray.get(unrefreshMths).get('netProfit').setValue(null);\r\n                      dataFormArray.get(unrefreshMths).get('nsmanShareOfProfit').setValue(null);\r\n                      dataFormArray.get(unrefreshMths).get('nsmanPartnerSalary').setValue(null);\r\n\r\n                    }\r\n                  })\r\n                this.isPastClaimAvailable = true;\r\n                this.populatePastClaim = true;\r\n              }\r\n              else {\r\n                console.log(\"no data\")\r\n                this.isPastClaimAvailable = false;\r\n                this.populatePastClaim = false;\r\n              }\r\n            });\r\n            break;\r\n          }\r\n          //Property Agent\r\n          case '04': {\r\n            //TODO check if propery agent actually has refresh other claims\r\n            break;\r\n          }\r\n          //Sole Prop\r\n          case '05': {\r\n            const yrmthList = [];\r\n            const startYrmth =  moment(this.dateUtilsService.convertStrToMoment(this.currHardCopyDetails?.trgStartDte, \"DD-MM-YYYY\").subtract(6, 'months'));\r\n            const endYrmth = moment(this.dateUtilsService.convertStrToMoment(this.currHardCopyDetails.trgStartDte, \"DD-MM-YYYY\").subtract(1, 'months'));\r\n            for(let mth = startYrmth; mth.isSameOrBefore(endYrmth); mth.add(1, 'month')){\r\n              yrmthList.push(mth.format(\"MM-YYYY\"));\r\n            }\r\n            let params = new HttpParams();\r\n            params = params.append(\"nric\", this.currHardCopyDetails?.headerDto?.nsManNric);\r\n            params = params.append(\"yrmthList\", JSON.stringify(yrmthList));\r\n            params = params.append(\"caseId\", this.currHardCopyDetails?.headerDto.caseId);\r\n            params = params.append(\"workingDataTypeCode\", this.selectedWDOption?.obj.workingDataTypeCode);\r\n            console.log(\"whjy the nric\", this.currHardCopyDetails?.headerDto?.nsManNric);\r\n            console.log(\"whjy working data code\", this.selectedWDOption);\r\n\r\n            this.populateFormGroup = SolePropComponent.createNewSolePropForm(this.dateUtilsService.convertMomentToStr(startYrmth, \"DD-MM-YYYY\")\r\n            , this.dateUtilsService.convertMomentToStr(endYrmth, \"DD-MM-YYYY\"), null, this.dateUtilsService, this.formBuilder, this.currHardCopyDetails?.trgStartDte);\r\n\r\n            this.seClaimService.retrieveRefreshOtherSPPClaims({params}).subscribe(resp => {\r\n              if(resp.status === 200 && resp.body.data.length>0){   \r\n                  const refreshedArr:string[] = [];\r\n                  const dataFormArray = this.populateFormGroup.get('dataFormArray') as FormGroup;\r\n                  resp.body.data.forEach((y:any)=> {\r\n                    const ctrl = dataFormArray.get(y.yrmth);\r\n                    if(ctrl){\r\n                      ctrl.get('revenue').setValue(y.revenue || null);\r\n                      ctrl.get('netProfit').setValue(y.netProfit|| null);\r\n                    }\r\n                    refreshedArr.push(y.yrmth);\r\n                  });\r\n                  const existingYrMthControls =  Object.keys(dataFormArray.controls);\r\n                  const unrefreshed: string[] = refreshedArr.filter( x => !existingYrMthControls.includes(x));\r\n                  unrefreshed.forEach(unrefreshMths=> {\r\n                    if(dataFormArray.get(unrefreshMths)){\r\n                      dataFormArray.get(unrefreshMths).get('revenue').setValue(null);\r\n                      dataFormArray.get(unrefreshMths).get('netProfit').setValue(null);\r\n                    }\r\n                  })\r\n                this.isPastClaimAvailable = true;\r\n                this.populatePastClaim = true;\r\n              }\r\n              else {\r\n                console.log(\"no data\")\r\n                this.isPastClaimAvailable = false;\r\n                this.populatePastClaim = false;\r\n              }\r\n            });\r\n            break;\r\n          }\r\n          //PHD/Delivery\r\n          case '06': {\r\n            const {startDate, endDate} = this.calculateStartAndEndForPhd();\r\n\r\n            let params = new HttpParams();\r\n            params = params.append(\"nric\",this.currHardCopyDetails?.headerDto?.nsManNric);\r\n            params = params.append(\"caseId\",this.currHardCopyDetails?.headerDto?.caseId);\r\n            params = params.append(\"startDate\",this.dateUtilsService.convertDateToStr(startDate, \"DD-MM-YYYY\"));\r\n            params = params.append(\"endDate\",this.dateUtilsService.convertDateToStr(endDate, \"DD-MM-YYYY\"));\r\n\r\n            this.seClaimService.retrieveNewPopulatedPhdDeliveryWD(params).subscribe((res) => {\r\n              if(res.data){\r\n                console.log(\"got data\")\r\n                this.populateFormGroup = PrivateHirerDriverComponent.mapPhdDeliveryWDToFormGroup(res.data, this.dateUtilsService, this.formBuilder);\r\n                this.isPastClaimAvailable = true;\r\n                this.populatePastClaim = true;\r\n              } else {\r\n                console.log(\"no data\")\r\n                this.isPastClaimAvailable = false;\r\n                this.populatePastClaim = false;\r\n              }\r\n            });\r\n            break;\r\n          }\r\n          //Taxi Driver\r\n          case '07': {\r\n            this.isPastClaimAvailable = false;\r\n            this.populatePastClaim = false;\r\n            break;\r\n          }\r\n          //Others\r\n          case '08': {\r\n            const endDate = this.dateUtilsService.convertStrToDate(this.currHardCopyDetails?.trgStartDte, \"DD-MM-YYYY\");\r\n            endDate.setMonth(endDate.getMonth() - 1);\r\n            endDate.setDate(1);\r\n            const startDate = new Date(endDate);\r\n            startDate.setMonth(startDate.getMonth() - 5);\r\n\r\n            let params = new HttpParams();\r\n            params = params.append(\"nric\",this.currHardCopyDetails?.headerDto?.nsManNric);\r\n            params = params.append(\"caseId\",this.currHardCopyDetails?.headerDto?.caseId);\r\n            params = params.append(\"startDate\", this.dateUtilsService.convertDateToStr(startDate, \"DD-MM-YYYY\"));\r\n            params = params.append(\"endDate\",this.dateUtilsService.convertDateToStr(endDate, \"DD-MM-YYYY\"));\r\n\r\n            this.seClaimService.retrieveRefreshOthersWD(params)\r\n              .subscribe((res: Ns2Response<RefreshOthersInfo[]>) => {\r\n                if (res.data && res.data.length !== 0) {\r\n                  this.populateFormGroup = OthersComponent.createNewOthersFormGroup(startDate,endDate,this.formBuilder, this.dateUtilsService);\r\n                  console.log(this.populateFormGroup);\r\n                  console.log(this.populateFormGroup.get('workingDataOthersInfoList'));\r\n                  console.log(this.populateFormGroup.get('workingDataOthersInfoList.07-2022'));\r\n                  res.data.forEach((othersInfo: RefreshOthersInfo) => {\r\n                    this.populateFormGroup.get(\"workingDataOthersInfoList.\".concat(othersInfo.yearMonth)).setValue(othersInfo.monthlyIncome);\r\n                  });\r\n                  this.isPastClaimAvailable = true;\r\n                  this.populatePastClaim = true;\r\n                } else {\r\n                  this.isPastClaimAvailable = false;\r\n                  this.populatePastClaim = false;\r\n                }\r\n              });\r\n            break;\r\n          }\r\n          default:\r\n            break;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  calculateStartAndEndForPhd() {\r\n    const commenceDate = this.dateUtilsService.convertStrToDate(this.currHardCopyDetails?.commencementDte, \"DD-MM-YYYY\");\r\n    const claimStartDate = this.dateUtilsService.convertStrToDate(this.currHardCopyDetails?.trgStartDte, \"DD-MM-YYYY\");\r\n    let endDate = this.dateUtilsService.getLastSunOfPreviousMonth(claimStartDate)\r\n    let startDate = this.dateUtilsService.getPhdDeliveryStartDateWithEndDate(endDate);\r\n\r\n    console.log(commenceDate);\r\n    console.log(claimStartDate);\r\n    console.log(startDate);\r\n    console.log(endDate);\r\n\r\n    if (this.dateUtilsService.isAfter(commenceDate, endDate)) {\r\n      startDate = null;\r\n      endDate = null;\r\n    } else if (this.dateUtilsService.isBefore(startDate, commenceDate)) {\r\n      endDate = this.dateUtilsService.getSunOfPreviousWeek(claimStartDate);\r\n      startDate = this.dateUtilsService.getFirstMonFromCommenceDate(commenceDate);\r\n    }\r\n\r\n    console.log(startDate);\r\n    console.log(endDate);\r\n\r\n    return {startDate, endDate};\r\n  }\r\n\r\n  insertNewRWD(): void {\r\n    const workingDataOption:any = {\r\n      name: \"Replacement \".concat(\" (Active)\"),\r\n      key: this.newUnsavedWorkingData.size,\r\n      obj: {\r\n        workingDataTypeCode: \"10\",\r\n        year: null,\r\n        archiveDt: 0,\r\n        workingDataId: null\r\n      },\r\n      changes: false,\r\n      newWD: true\r\n    };\r\n\r\n    //just use the index as the map key\r\n    this.newUnsavedWorkingData.set(this.newUnsavedWorkingData.size.toString(),\r\n      {\r\n        obj: workingDataOption.obj,\r\n        formGroup: ReplacementComponent.createNewReplacementFormGroup(this.formBuilder)\r\n      });\r\n    this.saveSEClaimRequest.workingDataSectionInd = true;\r\n    this.workingDataOptions.splice(0,0,workingDataOption);\r\n    this.archiveAllActiveData();\r\n    this.cd.detectChanges();\r\n    setTimeout(() => {this.selectedWDOption = this.workingDataOptions[0]},0);\r\n  }\r\n\r\n  confirmInsertNewRWD(event: Event): void{\r\n    console.log(\"got click la\");\r\n    this.nspConfirmationService.onConfirmPopup(event, 'insertNewRWDPopUp', null, () => {\r\n      this.insertNewRWD();\r\n    });\r\n  }\r\n\r\n  accordionClick(): void{\r\n    this.selectedChange.emit(this.selected);\r\n  }\r\n\r\n    //allows input on need basis\r\n    hasValidAuthorityAndStation(): boolean{\r\n      if(this.accountService.hasAnyAuthority(NSPAY2_ROLES.CLAIMS_VERIFIER) && \r\n        this.station === NSPAY2_STATION.STATION_VERIFICATION){\r\n          return true;\r\n        }\r\n      if(this.accountService.hasAnyAuthority(NSPAY2_ROLES.CLAIMS_APPROVER) && \r\n      this.station === NSPAY2_STATION.STATION_CERTIFICATION) {\r\n        return false;\r\n      }\r\n      if(this.accountService.hasAnyAuthority(NSPAY2_ROLES.CLAIMS_APPROVER) && \r\n      this.station === NSPAY2_STATION.STATION_APPROVAL) {\r\n        return false;\r\n      }\r\n      return false;\r\n    }\r\n}\r\n","<p-accordionTab  multiple=\"true\"  #accordionTab [(selected)]=\"selected\" (click) = \"accordionClick()\">\r\n    <ng-template pTemplate=\"header\">\r\n        <div class = \"grid col-6 align-items-center my-0\">\r\n            <label class=\"col-form-label pl-1\">Working Data:</label>\r\n            <div class=\"col-2 input-group pl-3 py-0\">\r\n                <p-dropdown [options]=\"workingDataOptions\" [(ngModel)]=\"selectedWDOption\" optionLabel=\"name\"\r\n                placeholder=\"Select\" [style]=\"{'width': '20em'}\" appendTo=\"body\"\r\n               (click)=\"$event.stopPropagation()\"></p-dropdown>\r\n            </div>\r\n        </div>\r\n        <div class = \"grid col-6 align-items-center justify-content-end m-0 p-0\">\r\n          <button id = \"tester\" pButton label=\"tester\" (click)=\"tester();\">\r\n          </button>\r\n          <button *ngIf=\"currHardCopyDetails?.headerDto?.claimOption === '2' && !readOnly &&  hasValidAuthorityAndStation()\" id = \"insertNewIWD\" pButton label=\"Insert New Insurance Working Data\" (click)=\"displayNIWDDialog=true; $event.stopPropagation(); checkForITXPopulatedClaims();\">\r\n          </button>\r\n          <button *ngIf=\"currHardCopyDetails?.headerDto?.claimOption === '1' && !readOnly  &&  hasValidAuthorityAndStation()\" id =\"insertNewAWD\" pButton label=\"Insert Working Data\" (click)=\"displayNAWDDialog=true; $event.stopPropagation();\">\r\n          </button>\r\n          <p-confirmPopup key=\"insertNewRWDPopUp\"></p-confirmPopup>\r\n          <button *ngIf=\"currHardCopyDetails?.headerDto?.claimOption === '3' && !readOnly  &&  hasValidAuthorityAndStation()\" id =\"insertNewRWD\" pButton label=\"Insert New Replacement Working Data\" (click)= \"confirmInsertNewRWD($event); $event.stopPropagation()\">\r\n          </button>\r\n        </div>\r\n    </ng-template>\r\n    <div *ngIf=\"workingDataOptions.length!==0; else emptymessage\">\r\n      <!-- income tax -->\r\n      <n2-insurance-income-tax *ngIf=\"selectedWDOption.obj?.workingDataTypeCode ==='01'\" (totalAmtPayEvent)=\"getTotalAmtPay($event)\"\r\n                              [selectedWDOption] = \"selectedWDOption\" [seHardCopyDetails]=\"seHardCopyDetails\"\r\n                              [itemDetailsSection]=\"itemDetailsSection\"\r\n                              [workingDataWithChanges] = \"workingDataWithChanges\"\r\n                              [newUnsavedWorkingData] = \"newUnsavedWorkingData\"\r\n                              [saveSEClaimRequest] = \"saveSEClaimRequest\"\r\n                              [irasDetails]=\"irasDetails\"\r\n                              [trgStartDte] = \"trgStartDte\"\r\n                              #insurITXWorkingData\r\n                              [readOnly] = \"readOnly\"\r\n                              [station] = \"station\">\r\n\r\n      </n2-insurance-income-tax>\r\n      <!-- average income -->\r\n      <n2-insurance-avg-income *ngIf=\"selectedWDOption.obj?.workingDataTypeCode ==='02'\"\r\n                              [selectedWDOption] = \"selectedWDOption\"\r\n                              [seHardCopyDetails]=\"seHardCopyDetails\"\r\n                              [itemDetailsSection]=\"itemDetailsSection\"\r\n                              (totalAmtPayEvent)=\"getTotalAmtPay($event)\"\r\n                              [workingDataWithChanges] = \"workingDataWithChanges\"\r\n                              [newUnsavedWorkingData] = \"newUnsavedWorkingData\"\r\n                              [saveSEClaimRequest] = \"saveSEClaimRequest\"\r\n                              [irasDetails]=\"irasDetails\"\r\n                              [trgStartDte] = \"trgStartDte\"\r\n                              [readOnly] = \"readOnly\"\r\n                              [station] = \"station\">\r\n      </n2-insurance-avg-income>\r\n      <!-- partner -->\r\n      <n2-partner *ngIf=\"selectedWDOption.obj?.workingDataTypeCode ==='03'\"\r\n                              [selectedWDOption] = \"selectedWDOption\"\r\n                              [seHardCopyDetails]=\"seHardCopyDetails\"\r\n                              [workingDataWithChanges] = \"workingDataWithChanges\"\r\n                              [newUnsavedWorkingData] = \"newUnsavedWorkingData\"\r\n                              [saveSEClaimRequest] = \"saveSEClaimRequest\"\r\n                              [trgStartDte] = \"trgStartDte\"\r\n                              [itemDetailsSection]=\"itemDetailsSection\" \r\n                              (totalAmtPayEvent)=\"getTotalAmtPay($event)\"\r\n                              [readOnly] = \"readOnly\"\r\n                              [station] = \"station\">\r\n      </n2-partner>\r\n      <!--property agent-->\r\n      <n2-property-agent *ngIf=\"selectedWDOption.obj?.workingDataTypeCode ==='04'\"\r\n                              [selectedWDOption] = \"selectedWDOption\"\r\n                              [seHardCopyDetails]=\"seHardCopyDetails\"\r\n                              [itemDetailsSection]=\"itemDetailsSection\"\r\n                              (totalAmtPayEvent)=\"getTotalAmtPay($event)\"\r\n                              [workingDataWithChanges] = \"workingDataWithChanges\"\r\n                              [newUnsavedWorkingData] = \"newUnsavedWorkingData\"\r\n                              [saveSEClaimRequest] = \"saveSEClaimRequest\"\r\n                              [trgStartDte] = \"trgStartDte\"\r\n                              [readOnly] = \"readOnly\"\r\n                              [station] = \"station\">\r\n      </n2-property-agent>\r\n      <!--sole prop-->\r\n      <n2-sole-prop *ngIf=\"selectedWDOption.obj?.workingDataTypeCode ==='05'\"\r\n                              [selectedWDOption] = \"selectedWDOption\"\r\n                              [seHardCopyDetails]=\"seHardCopyDetails\"\r\n                              [itemDetailsSection]=\"itemDetailsSection\"\r\n                              (totalAmtPayEvent)=\"getTotalAmtPay($event)\"\r\n                              [workingDataWithChanges] = \"workingDataWithChanges\"\r\n                              [newUnsavedWorkingData] = \"newUnsavedWorkingData\"\r\n                              [saveSEClaimRequest] = \"saveSEClaimRequest\"\r\n                              [trgStartDte] = \"trgStartDte\"\r\n                              [readOnly] = \"readOnly\"\r\n                              [station] = \"station\">\r\n      </n2-sole-prop>\r\n      <!--Private Hirer Driver-->\r\n      <n2-private-hirer-driver #phdDeliveryWorkingData *ngIf=\"selectedWDOption.obj?.workingDataTypeCode ==='06'\"\r\n                               [selectedWDOption] = \"selectedWDOption\" [seHardCopyDetails]=\"seHardCopyDetails\"\r\n                               [itemDetailsSection]= \"itemDetailsSection\" (totalAmtPayEvent)=\"getTotalAmtPay($event)\"\r\n                               [workingDataWithChanges] = \"workingDataWithChanges\"\r\n                               [newUnsavedWorkingData] = \"newUnsavedWorkingData\"\r\n                               [saveSEClaimRequest] = \"saveSEClaimRequest\"\r\n                               [readOnly] = \"readOnly\"\r\n                               [station] = \"station\">\r\n      </n2-private-hirer-driver>\r\n      <!--  Taxi  -->\r\n      <n2-taxi *ngIf=\"selectedWDOption.obj?.workingDataTypeCode ==='07'\"\r\n               [selectedWDOption] = \"selectedWDOption\" [seHardCopyDetails]=\"seHardCopyDetails\"\r\n               [workingDataWithChanges] = \"workingDataWithChanges\" [newUnsavedWorkingData] = \"newUnsavedWorkingData\"\r\n               [saveSEClaimRequest] = \"saveSEClaimRequest\"\r\n               [readOnly] = \"readOnly\"\r\n               [station] = \"station\">\r\n      </n2-taxi>\r\n      <!--others-->\r\n      <n2-others *ngIf=\"selectedWDOption.obj?.workingDataTypeCode ==='08'\"\r\n                 [selectedWDOption] = \"selectedWDOption\" [seHardCopyDetails]=\"seHardCopyDetails\"\r\n                 [itemDetailsSection]= \"itemDetailsSection\" (totalAmtPayEvent)=\"getTotalAmtPay($event)\"\r\n                 [workingDataWithChanges] = \"workingDataWithChanges\"\r\n                 [newUnsavedWorkingData] = \"newUnsavedWorkingData\"\r\n                 [saveSEClaimRequest] = \"saveSEClaimRequest\"\r\n                 [trgStartDte] = \"trgStartDte\"\r\n                 [readOnly] = \"readOnly\"\r\n                 [station] = \"station\">\r\n      </n2-others>\r\n      <!--others (legacy)-->\r\n      <n2-others-legacy *ngIf=\"selectedWDOption.obj?.workingDataTypeCode === '09'\" [selectedWDOption] = \"selectedWDOption.obj\" [seHardCopyDetails]=\"seHardCopyDetails\"></n2-others-legacy>\r\n      <!--replacement-->\r\n      <n2-replacement *ngIf=\"selectedWDOption.obj?.workingDataTypeCode === '10'\" [selectedWDOption] = \"selectedWDOption\"\r\n                      [workingDataWithChanges] = \"workingDataWithChanges\"\r\n                      [newUnsavedWorkingData] = \"newUnsavedWorkingData\"\r\n                      [saveSEClaimRequest] = \"saveSEClaimRequest\"\r\n                      [readOnly] = \"readOnly\"\r\n                      [station] = \"station\">\r\n      </n2-replacement>\r\n    </div>\r\n    <ng-template #emptymessage>\r\n          <span><i class=\"pi pi-info-circle\"></i>\r\n              No records found.\r\n          </span>\r\n    </ng-template>\r\n</p-accordionTab>\r\n\r\n\r\n<p-dialog header=\"Insert New Insurance Working Data\" [(visible)]=\"displayNIWDDialog\" [modal]=\"true\" [style]=\"{width: '30vw'}\"\r\n    [draggable]=\"false\" [resizable]=\"false\">\r\n  <div class = \"field grid\" >\r\n    <label for=\"year\" class= \"col-2 col-form-label\">Year:</label>\r\n    <div class=\"col-7\">\r\n      <p-dropdown  (onChange)=\"checkForITXPopulatedClaims()\" [options]=\"yearOptions\" id=\"year\" [(ngModel)]=\"selectedYearOption\" optionLabel=\"name\" optionValue=\"key\"\r\n                   placeholder=\"Select Year\" [style]=\"{'width': '100%'}\" appendTo=\"body\"></p-dropdown>\r\n    </div>\r\n  </div>\r\n  <div class = \"field grid\">\r\n    <p-checkbox  class=\"col-1\"[(ngModel)] = \"populatePastClaim\" inputId = \"populatePastClaim\"\r\n                 [binary]=\"true\"\r\n    ></p-checkbox>\r\n    <label>Populate data from past claim?</label>\r\n  </div>\r\n    <ng-template pTemplate=\"footer\">\r\n        <button pButton label=\"Cancel\" (click) = \"displayNIWDDialog = false\" type=\"button\" class=\"p-button-danger\"></button>\r\n        <button pButton label=\"Submit\" (click) = \"insertNewIWD()\" type=\"button\"></button>\r\n    </ng-template>\r\n</p-dialog>\r\n\r\n<p-dialog header=\"Insert Working Data\" [(visible)]=\"displayNAWDDialog\" [modal]=\"true\" [style]=\"{width: '30vw'}\"\r\n          [draggable]=\"false\" [resizable]=\"false\" (onHide)=\"onHideNAWDDialog()\">\r\n  <div class = \"field grid\" >\r\n    <label class= \"col-5 flex justify-content-start\">Working Data Template:</label>\r\n    <div class=\"col-6 flex justify-content-start\">\r\n      <p-dropdown (onChange)=\"checkForPopulatedClaims()\" [options]=\"aveWorkingDataTemplateOptions\" id=\"wdTemplate\"\r\n                  [(ngModel)]=\"selectedAveWorkingDataTemplateOption\" optionLabel=\"name\" optionValue=\"key\"\r\n                  [autoDisplayFirst] = \"false\"\r\n                  placeholder=\"Select Working Data Template\" [style]=\"{'width': '100%'}\" appendTo=\"body\"></p-dropdown>\r\n    </div>\r\n  </div>\r\n  <div class = \"field grid\">\r\n    <p-checkbox  class=\"col-1\"[(ngModel)] = \"populatePastClaim\" inputId = \"populatePastClaim\"\r\n                 [binary]=\"true\" [disabled] = \"!isPastClaimAvailable\"\r\n    ></p-checkbox>\r\n    <label>Populate data from past claim?</label>\r\n  </div>\r\n  <ng-template pTemplate=\"footer\">\r\n    <button pButton label=\"Cancel\" (click) = \"displayNAWDDialog = false\" type=\"button\" class=\"p-button-danger\"></button>\r\n    <button pButton label=\"Submit\" (click) = \"insertNewAveWD()\" type=\"button\"></button>\r\n  </ng-template>\r\n</p-dialog>\r\n\r\n\r\n\r\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}