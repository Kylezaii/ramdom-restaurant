{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.EncryptService = void 0;\nconst tslib_1 = require(\"tslib\");\nconst crypto_js_1 = require(\"crypto-js\");\nconst i0 = tslib_1.__importStar(require(\"@angular/core\"));\nclass EncryptService {\n  encryptProfile(paramter, secretKey, initialValue) {\n    const clientKey = crypto_js_1.enc.Utf8.parse(secretKey);\n    const clinetIv = crypto_js_1.enc.Utf8.parse(initialValue);\n    return crypto_js_1.AES.encrypt(paramter, clientKey, {\n      mode: crypto_js_1.mode.CTR,\n      padding: crypto_js_1.pad.NoPadding,\n      iv: clinetIv\n    }).toString();\n  }\n}\nexports.EncryptService = EncryptService;\nEncryptService.ɵfac = function EncryptService_Factory(t) {\n  return new (t || EncryptService)();\n};\nEncryptService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: EncryptService,\n  factory: EncryptService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";;;;;;;AACA;;AAEA,MACaA,cAAc;EACzBC,cAAc,CAACC,QAAgB,EAAEC,SAAiB,EAAEC,YAAoB;IACtE,MAAMC,SAAS,GAAGC,eAAG,CAACC,IAAI,CAACC,KAAK,CAACL,SAAS,CAAC;IAC3C,MAAMM,QAAQ,GAAGH,eAAG,CAACC,IAAI,CAACC,KAAK,CAACJ,YAAY,CAAC;IAE7C,OAAOE,eAAG,CAACI,OAAO,CAACR,QAAQ,EAAEG,SAAS,EAAE;MACtCM,IAAI,EAAEL,gBAAI,CAACM,GAAG;MACdC,OAAO,EAAEP,eAAG,CAACQ,SAAS;MACtBC,EAAE,EAAEN;KACL,CAAC,CAACO,QAAQ,EAAE;EACf;;AAXFC;;mBACajB,cAAc;AAAA;;SAAdA,cAAc;EAAAkB,SAAdlB,cAAc;EAAAmB,YADD;AAAM","names":["EncryptService","encryptProfile","paramter","secretKey","initialValue","clientKey","crypto_js_1","Utf8","parse","clinetIv","encrypt","mode","CTR","padding","NoPadding","iv","toString","exports","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\D1347074\\Desktop\\projects 2\\nspayiiapp\\src\\main\\webapp\\app\\core\\auth\\encrypt.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { AES, mode, pad, enc } from 'crypto-js';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class EncryptService {\r\n  encryptProfile(paramter: string, secretKey: string, initialValue: string): string {\r\n    const clientKey = enc.Utf8.parse(secretKey);\r\n    const clinetIv = enc.Utf8.parse(initialValue);\r\n\r\n    return AES.encrypt(paramter, clientKey, {\r\n      mode: mode.CTR,\r\n      padding: pad.NoPadding,\r\n      iv: clinetIv,\r\n    }).toString();\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}