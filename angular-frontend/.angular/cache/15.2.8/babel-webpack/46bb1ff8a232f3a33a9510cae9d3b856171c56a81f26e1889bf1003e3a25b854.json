{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.PayrollApprovalService = void 0;\nconst tslib_1 = require(\"tslib\");\nconst i0 = tslib_1.__importStar(require(\"@angular/core\"));\nconst i1 = tslib_1.__importStar(require(\"@angular/common/http\"));\nconst i2 = tslib_1.__importStar(require(\"app/core/config/application-config.service\"));\nconst i3 = tslib_1.__importStar(require(\"app/shared/service/ns2-http.service\"));\nclass PayrollApprovalService {\n  constructor(http, applicationConfigService, ns2Http) {\n    this.http = http;\n    this.applicationConfigService = applicationConfigService;\n    this.ns2Http = ns2Http;\n    this.resourceUrl = this.applicationConfigService.getEndpointFor('/api/payroll/payroll');\n    this.infoResourceUrl = this.applicationConfigService.getEndpointFor('api/common/nsman');\n    this.resourceUrlForFindMultipleCodeType = 'api/codes';\n    //\n  }\n\n  getCodes(codeTypes) {\n    return this.ns2Http.get(`${this.resourceUrlForFindMultipleCodeType}/${codeTypes}`);\n  }\n  approve(approveRequest) {\n    const url = `${this.resourceUrl}/approval`;\n    return this.ns2Http.post(url, approveRequest);\n  }\n  getPayrollRecord(id) {\n    const url = this.resourceUrl + '/approval/pending/' + id;\n    return this.ns2Http.get(url);\n  }\n  getAllPayrollRecord(recordnric) {\n    const url = this.resourceUrl;\n    return this.ns2Http.get(url, {\n      params: recordnric\n    });\n  }\n  getAmendmentHistoryByID(id) {\n    const url = `${this.resourceUrl}/${id}/history`;\n    return this.ns2Http.get(url);\n  }\n  getNsman(nric) {\n    const url = `${this.infoResourceUrl}/${nric}`;\n    return this.ns2Http.get(url);\n  }\n  getPaymode(id) {\n    const url = `${this.resourceUrl}/${id}/pay-mode`;\n    return this.ns2Http.get(url);\n  }\n  getPayrollDetailByID(id) {\n    const url = `${this.resourceUrl}/${id}`;\n    return this.ns2Http.get(url);\n  }\n}\nexports.PayrollApprovalService = PayrollApprovalService;\nPayrollApprovalService.ɵfac = function PayrollApprovalService_Factory(t) {\n  return new (t || PayrollApprovalService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.ApplicationConfigService), i0.ɵɵinject(i3.Ns2HttpService));\n};\nPayrollApprovalService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: PayrollApprovalService,\n  factory: PayrollApprovalService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";;;;;;;;;;;AAYA,MAGaA,sBAAsB;EAMjCC,YAAsBC,IAAgB,EAC5BC,wBAAkD,EAClDC,OAAuB;IAFX,SAAI,GAAJF,IAAI;IAChB,6BAAwB,GAAxBC,wBAAwB;IACxB,YAAO,GAAPC,OAAO;IAPV,gBAAW,GAAG,IAAI,CAACD,wBAAwB,CAACE,cAAc,CAAC,sBAAsB,CAAC;IAClF,oBAAe,GAAG,IAAI,CAACF,wBAAwB,CAACE,cAAc,CAAC,kBAAkB,CAAC;IACjF,uCAAkC,GAAG,WAAW;IAMtD;EACF;;EAEAC,QAAQ,CAACC,SAAiB;IACxB,OAAO,IAAI,CAACH,OAAO,CAACI,GAAG,CAAC,GAAG,IAAI,CAACC,kCAAkC,IAAIF,SAAS,EAAE,CAAC;EACpF;EAEAG,OAAO,CAACC,cAAmB;IACzB,MAAMC,GAAG,GAAG,GAAG,IAAI,CAACC,WAAW,WAAW;IAC1C,OAAO,IAAI,CAACT,OAAO,CAACU,IAAI,CAACF,GAAG,EAAED,cAAc,CAAC;EAC/C;EAEAI,gBAAgB,CAACC,EAAU;IACzB,MAAMJ,GAAG,GAAG,IAAI,CAACC,WAAW,GAAG,oBAAoB,GAAGG,EAAE;IACxD,OAAO,IAAI,CAACZ,OAAO,CAACI,GAAG,CAACI,GAAG,CAAC;EAC9B;EAEAK,mBAAmB,CAACC,UAAgB;IAClC,MAAMN,GAAG,GAAG,IAAI,CAACC,WAAW;IAC5B,OAAO,IAAI,CAACT,OAAO,CAACI,GAAG,CAACI,GAAG,EAAE;MAAEO,MAAM,EAAED;IAAU,CAAE,CAAC;EACtD;EAEOE,uBAAuB,CAACJ,EAAU;IACvC,MAAMJ,GAAG,GAAG,GAAG,IAAI,CAACC,WAAW,IAAIG,EAAE,UAAU;IAC/C,OAAO,IAAI,CAACZ,OAAO,CAACI,GAAG,CAACI,GAAG,CAAC;EAC9B;EAEOS,QAAQ,CAACC,IAAY;IAC1B,MAAMV,GAAG,GAAG,GAAG,IAAI,CAACW,eAAe,IAAID,IAAI,EAAE;IAC7C,OAAO,IAAI,CAAClB,OAAO,CAACI,GAAG,CAACI,GAAG,CAAC;EAC9B;EAGAY,UAAU,CAACR,EAAU;IACnB,MAAMJ,GAAG,GAAG,GAAG,IAAI,CAACC,WAAW,IAAIG,EAAE,WAAW;IAChD,OAAO,IAAI,CAACZ,OAAO,CAACI,GAAG,CAACI,GAAG,CAAC;EAC9B;EAEOa,oBAAoB,CAACT,EAAU;IACpC,MAAMJ,GAAG,GAAG,GAAG,IAAI,CAACC,WAAW,IAAIG,EAAE,EAAE;IACvC,OAAO,IAAI,CAACZ,OAAO,CAACI,GAAG,CAACI,GAAG,CAAC;EAC9B;;AArDFc;;mBAGa1B,sBAAsB;AAAA;;SAAtBA,sBAAsB;EAAA2B,SAAtB3B,sBAAsB;EAAA4B,YAFrB;AAAM","names":["PayrollApprovalService","constructor","http","applicationConfigService","ns2Http","getEndpointFor","getCodes","codeTypes","get","resourceUrlForFindMultipleCodeType","approve","approveRequest","url","resourceUrl","post","getPayrollRecord","id","getAllPayrollRecord","recordnric","params","getAmendmentHistoryByID","getNsman","nric","infoResourceUrl","getPaymode","getPayrollDetailByID","exports","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\D1347074\\Desktop\\projects 2\\nspayiiapp\\src\\main\\webapp\\app\\payroll\\approval\\service\\payroll-approval.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { IQueryApproveVES } from \"../model/payroll.model\";\r\nimport { HttpClient, HttpResponse } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\n\r\nimport { ApplicationConfigService } from 'app/core/config/application-config.service';\r\nimport { Ns2HttpService } from 'app/shared/service/ns2-http.service';\r\nimport { identity } from 'lodash';\r\n\r\nexport type EntityResponseType = HttpResponse<IQueryApproveVES>;\r\nexport type EntityArrayResponseType = HttpResponse<IQueryApproveVES[]>;\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class PayrollApprovalService {\r\n  public resourceUrl = this.applicationConfigService.getEndpointFor('/api/payroll/payroll');\r\n  public infoResourceUrl = this.applicationConfigService.getEndpointFor('api/common/nsman');\r\n  private resourceUrlForFindMultipleCodeType = 'api/codes';\r\n\r\n\r\n  constructor(protected http: HttpClient,\r\n    private applicationConfigService: ApplicationConfigService,\r\n    private ns2Http: Ns2HttpService) {\r\n    //\r\n  }\r\n\r\n  getCodes(codeTypes: string): Observable<any> {\r\n    return this.ns2Http.get(`${this.resourceUrlForFindMultipleCodeType}/${codeTypes}`)\r\n  }\r\n\r\n  approve(approveRequest: any): Observable<any> {\r\n    const url = `${this.resourceUrl}/approval`;\r\n    return this.ns2Http.post(url, approveRequest);\r\n  }\r\n\r\n  getPayrollRecord(id: string): Observable<any> {\r\n    const url = this.resourceUrl + '/approval/pending/' + id;\r\n    return this.ns2Http.get(url);\r\n  }\r\n\r\n  getAllPayrollRecord(recordnric?: any): Observable<any> {\r\n    const url = this.resourceUrl;\r\n    return this.ns2Http.get(url, { params: recordnric });\r\n  }\r\n\r\n  public getAmendmentHistoryByID(id: string): Observable<any> {\r\n    const url = `${this.resourceUrl}/${id}/history`;\r\n    return this.ns2Http.get(url);\r\n  }\r\n\r\n  public getNsman(nric: string): Observable<any> {\r\n    const url = `${this.infoResourceUrl}/${nric}`;\r\n    return this.ns2Http.get(url);\r\n  }\r\n\r\n\r\n  getPaymode(id: string): Observable<any> {\r\n    const url = `${this.resourceUrl}/${id}/pay-mode`;\r\n    return this.ns2Http.get(url);\r\n  }\r\n\r\n  public getPayrollDetailByID(id: string): Observable<any> {\r\n    const url = `${this.resourceUrl}/${id}`;\r\n    return this.ns2Http.get(url);\r\n  }\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}