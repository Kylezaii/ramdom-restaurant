{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ParameterService = void 0;\nconst tslib_1 = require(\"tslib\");\nconst i0 = tslib_1.__importStar(require(\"@angular/core\"));\nconst i1 = tslib_1.__importStar(require(\"@angular/common/http\"));\nconst i2 = tslib_1.__importStar(require(\"app/core/config/application-config.service\"));\nclass ParameterService {\n  constructor(http, applicationConfigService) {\n    this.http = http;\n    this.applicationConfigService = applicationConfigService;\n    this.resourceUrl = this.applicationConfigService.getEndpointFor('api/parameters');\n  }\n  get() {\n    return this.http.get(this.resourceUrl, {\n      observe: 'response'\n    });\n  }\n  update(parameter) {\n    return this.http.post(this.resourceUrl, parameter, {\n      observe: 'response'\n    });\n  }\n  approve(parameter) {\n    return this.http.post(this.resourceUrl + \"/approve\", parameter, {\n      observe: 'response'\n    });\n  }\n  reject(parameter) {\n    return this.http.post(this.resourceUrl + \"/reject\", parameter, {\n      observe: 'response'\n    });\n  }\n}\nexports.ParameterService = ParameterService;\nParameterService.ɵfac = function ParameterService_Factory(t) {\n  return new (t || ParameterService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.ApplicationConfigService));\n};\nParameterService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ParameterService,\n  factory: ParameterService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";;;;;;;;;;AASA,MACaA,gBAAgB;EAG3BC,YAAsBC,IAAgB,EAAUC,wBAAkD;IAA5E,SAAI,GAAJD,IAAI;IAAsB,6BAAwB,GAAxBC,wBAAwB;IAFjE,gBAAW,GAAG,IAAI,CAACA,wBAAwB,CAACC,cAAc,CAAC,gBAAgB,CAAC;EAEkB;EAErGC,GAAG;IACD,OAAO,IAAI,CAACH,IAAI,CAACG,GAAG,CAAa,IAAI,CAACC,WAAW,EAAE;MAAEC,OAAO,EAAE;IAAU,CAAE,CAAC;EAC7E;EAEAC,MAAM,CAACC,SAAqB;IAC1B,OAAO,IAAI,CAACP,IAAI,CAACQ,IAAI,CAAa,IAAI,CAACJ,WAAW,EAAEG,SAAS,EAAE;MAAEF,OAAO,EAAE;IAAU,CAAE,CAAC;EACzF;EAEAI,OAAO,CAACF,SAAqB;IAC3B,OAAO,IAAI,CAACP,IAAI,CAACQ,IAAI,CAAa,IAAI,CAACJ,WAAW,GAAG,UAAU,EAAEG,SAAS,EAAE;MAAEF,OAAO,EAAG;IAAU,CAAC,CAAC;EACtG;EAEAK,MAAM,CAACH,SAAqB;IAC1B,OAAO,IAAI,CAACP,IAAI,CAACQ,IAAI,CAAa,IAAI,CAACJ,WAAW,GAAG,SAAS,EAAEG,SAAS,EAAE;MAAEF,OAAO,EAAG;IAAU,CAAC,CAAC;EACrG;;AApBFM;;mBACab,gBAAgB;AAAA;;SAAhBA,gBAAgB;EAAAc,SAAhBd,gBAAgB;EAAAe,YADH;AAAM","names":["ParameterService","constructor","http","applicationConfigService","getEndpointFor","get","resourceUrl","observe","update","parameter","post","approve","reject","exports","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\D1347074\\Desktop\\projects 2\\nspayiiapp\\src\\main\\webapp\\app\\administration\\parameter\\service\\parameter.service.ts"],"sourcesContent":["import {Injectable} from '@angular/core';\r\nimport {HttpClient, HttpResponse} from '@angular/common/http';\r\nimport {Observable} from 'rxjs';\r\nimport {IParameter} from '../parameter.model';\r\nimport {ApplicationConfigService} from 'app/core/config/application-config.service';\r\n\r\nexport type EntityResponseType = HttpResponse<IParameter>;\r\nexport type EntityArrayResponseType = HttpResponse<IParameter[]>;\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class ParameterService {\r\n  public resourceUrl = this.applicationConfigService.getEndpointFor('api/parameters');\r\n\r\n  constructor(protected http: HttpClient, private applicationConfigService: ApplicationConfigService) {}\r\n\r\n  get(): Observable<EntityResponseType> {\r\n    return this.http.get<IParameter>(this.resourceUrl, { observe: 'response' });\r\n  }\r\n\r\n  update(parameter: IParameter): Observable<EntityResponseType> {\r\n    return this.http.post<IParameter>(this.resourceUrl, parameter, { observe: 'response' });\r\n  }\r\n\r\n  approve(parameter: IParameter): Observable<EntityResponseType> {\r\n    return this.http.post<IParameter>(this.resourceUrl + \"/approve\", parameter, { observe : 'response'});\r\n  }\r\n\r\n  reject(parameter: IParameter): Observable<EntityResponseType> {\r\n    return this.http.post<IParameter>(this.resourceUrl + \"/reject\", parameter, { observe : 'response'});\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}