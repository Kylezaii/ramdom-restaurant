{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.RoleService = void 0;\nconst tslib_1 = require(\"tslib\");\nconst operators_1 = require(\"rxjs/operators\");\nconst request_util_1 = require(\"app/core/request/request-util\");\nconst app_constants_1 = require(\"../../../app.constants\");\nconst i0 = tslib_1.__importStar(require(\"@angular/core\"));\nconst i1 = tslib_1.__importStar(require(\"@angular/common/http\"));\nclass RoleService {\n  constructor(http) {\n    this.http = http;\n    this.roleUrl = app_constants_1.SERVER_API_URL + 'api/roles';\n    this.getAllApplicationUrl = this.roleUrl + '/applications';\n    this.assignedUsersUrl = this.roleUrl + '/assignedUsers';\n    this.unAssignUsersUrl = this.roleUrl + '/unAssignUsers';\n    this.searchUnAssignedUsersUrl = this.roleUrl + '/search/unAssignedUsers';\n    this.assignUsersUrl = this.roleUrl + '/assignUsers';\n    this.assignedFuncsUrl = this.roleUrl + '/assignedFuncs';\n    this.unAssignFuncsUrl = this.roleUrl + '/unAssignFuncs';\n    this.searchUnAssignedFuncsUrl = this.roleUrl + '/search/unAssignedFuncs';\n    this.assignFuncsUrl = this.roleUrl + '/assignFuncs';\n    this.assignedGroupsUrl = this.roleUrl + '/assignedGroups';\n    this.unAssignGroupsUrl = this.roleUrl + '/unAssignGroups';\n    this.searchUnAssignedGroupsUrl = this.roleUrl + '/search/unAssignedGroups';\n    this.assignGroupsUrl = this.roleUrl + '/assignGroups';\n  }\n  create(role) {\n    const copy = this.convert(role);\n    return this.http.post(this.roleUrl, copy, {\n      observe: 'response'\n    }).pipe((0, operators_1.map)(res => {\n      const jsonResponse = res.body;\n      this.convertItemFromServer(jsonResponse, false);\n      return jsonResponse;\n    }));\n  }\n  update(role) {\n    const copy = this.convert(role);\n    return this.http.put(this.roleUrl, copy, {\n      observe: 'response'\n    }).pipe((0, operators_1.map)(res => {\n      const jsonUpdateResponse = res.body;\n      this.convertItemFromServer(jsonUpdateResponse, false);\n      return jsonUpdateResponse;\n    }));\n  }\n  find(id) {\n    return this.http.get(`${this.roleUrl}/${id}`, {\n      observe: 'response'\n    }).pipe((0, operators_1.map)(res => {\n      const jsonFindResponse = res.body;\n      this.convertItemFromServer(jsonFindResponse, false);\n      return jsonFindResponse;\n    }));\n  }\n  query(req) {\n    const params = (0, request_util_1.createRequestOption)(req);\n    return this.http.get(this.roleUrl, {\n      params,\n      observe: 'response'\n    }).pipe((0, operators_1.map)(res => this.convertArrayResponse(res, false)));\n  }\n  delete(id) {\n    return this.http.delete(`${this.roleUrl}/${id}`, {\n      observe: 'response'\n    });\n  }\n  findAllApplication() {\n    return this.http.get(this.getAllApplicationUrl, {\n      observe: 'response'\n    }).pipe((0, operators_1.map)(res => this.convertArrayResponse(res, false)));\n  }\n  findAllAssignedUsers(id) {\n    return this.http.get(`${this.assignedUsersUrl}/${id}`, {\n      observe: 'response'\n    }).pipe((0, operators_1.map)(res => this.convertArrayResponse(res, true)));\n  }\n  unAssignUsers(id, subjects) {\n    return this.http.put(`${this.unAssignUsersUrl}/${id}`, subjects, {\n      observe: 'response'\n    });\n  }\n  searchUnAssignedUsers(req) {\n    const params = (0, request_util_1.createRequestOption)(req);\n    return this.http.get(this.searchUnAssignedUsersUrl, {\n      params,\n      observe: 'response'\n    }).pipe((0, operators_1.map)(res => this.convertArrayResponse(res, true)));\n  }\n  assignUsers(id, users) {\n    return this.http.put(`${this.assignUsersUrl}/${id}`, users, {\n      observe: 'response'\n    });\n  }\n  findAllAssignedFuncs(id) {\n    return this.http.get(`${this.assignedFuncsUrl}/${id}`, {\n      observe: 'response'\n    }).pipe((0, operators_1.map)(res => this.convertArrayResponse(res, false)));\n  }\n  unAssignFuncs(id, resources) {\n    return this.http.put(`${this.unAssignFuncsUrl}/${id}`, resources, {\n      observe: 'response'\n    });\n  }\n  searchUnAssignedFuncs(req) {\n    const params = (0, request_util_1.createRequestOption)(req);\n    return this.http.get(this.searchUnAssignedFuncsUrl, {\n      params,\n      observe: 'response'\n    }).pipe((0, operators_1.map)(res => this.convertArrayResponse(res, false)));\n  }\n  assignFuncs(id, functions) {\n    return this.http.put(`${this.assignFuncsUrl}/${id}`, functions, {\n      observe: 'response'\n    });\n  }\n  findAllAssignedGroups(id) {\n    return this.http.get(`${this.assignedGroupsUrl}/${id}`, {\n      observe: 'response'\n    }).pipe((0, operators_1.map)(res => this.convertArrayResponse(res, false)));\n  }\n  unAssignGroups(id, groups) {\n    return this.http.put(`${this.unAssignGroupsUrl}/${id}`, groups, {\n      observe: 'response'\n    });\n  }\n  searchUnAssignedGroups(req) {\n    const params = (0, request_util_1.createRequestOption)(req);\n    return this.http.get(this.searchUnAssignedGroupsUrl, {\n      params,\n      observe: 'response'\n    }).pipe((0, operators_1.map)(res => this.convertArrayResponse(res, false)));\n  }\n  assignGroups(id, groups) {\n    return this.http.put(`${this.assignGroupsUrl}/${id}`, groups, {\n      observe: 'response'\n    });\n  }\n  convertArrayResponse(res, isUser) {\n    const jsonResponse = res.body;\n    const body = [];\n    if (jsonResponse) {\n      for (let i = 0; i < jsonResponse.length; i++) {\n        body.push(this.convertItemFromServer(jsonResponse[i], isUser));\n      }\n    }\n    return res.clone({\n      body\n    });\n  }\n  convertItemFromServer(entity, isUser) {\n    if (entity) {\n      if (isUser) {\n        // eslint-disable-next-line @typescript-eslint/restrict-plus-operands\n        entity.fullName = entity.firstName + ' ' + entity.lastName;\n      }\n      entity.createdBy = entity.createdBy ? entity.createdBy.replace('PASSWORD/', '').replace('NCSAD/', '') : '';\n      entity.updatedBy = entity.updatedBy ? entity.updatedBy.replace('PASSWORD/', '').replace('NCSAD/', '') : '';\n    }\n    return entity;\n  }\n  convert(role) {\n    const copy = Object.assign({}, role);\n    return copy;\n  }\n}\nexports.RoleService = RoleService;\nRoleService.ɵfac = function RoleService_Factory(t) {\n  return new (t || RoleService)(i0.ɵɵinject(i1.HttpClient));\n};\nRoleService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: RoleService,\n  factory: RoleService.ɵfac\n});","map":{"version":3,"mappings":"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","names":["RoleService","constructor","http","app_constants_1","roleUrl","create","role","copy","convert","post","observe","pipe","res","jsonResponse","body","convertItemFromServer","update","put","jsonUpdateResponse","find","id","get","jsonFindResponse","query","req","params","convertArrayResponse","delete","findAllApplication","getAllApplicationUrl","findAllAssignedUsers","assignedUsersUrl","unAssignUsers","subjects","unAssignUsersUrl","searchUnAssignedUsers","searchUnAssignedUsersUrl","assignUsers","users","assignUsersUrl","findAllAssignedFuncs","assignedFuncsUrl","unAssignFuncs","resources","unAssignFuncsUrl","searchUnAssignedFuncs","searchUnAssignedFuncsUrl","assignFuncs","functions","assignFuncsUrl","findAllAssignedGroups","assignedGroupsUrl","unAssignGroups","groups","unAssignGroupsUrl","searchUnAssignedGroups","searchUnAssignedGroupsUrl","assignGroups","assignGroupsUrl","isUser","i","length","push","clone","entity","fullName","firstName","lastName","createdBy","replace","updatedBy","Object","assign","exports","factory"],"sourceRoot":"","sources":["C:\\Users\\D1347074\\Desktop\\projects 2\\nspayiiapp\\src\\main\\webapp\\app\\admin\\access-control\\role\\role.service.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-unsafe-return */\r\nimport { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpParams, HttpResponse } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { Resource } from '../resource/resource.model';\r\nimport { createRequestOption } from 'app/core/request/request-util';\r\nimport { Subject } from '../user/user.model';\r\nimport { Group } from '../group/group.model';\r\nimport { SERVER_API_URL } from '../../../app.constants';\r\n\r\n@Injectable()\r\nexport class RoleService {\r\n  private roleUrl = SERVER_API_URL + 'api/roles';\r\n  private getAllApplicationUrl = this.roleUrl + '/applications';\r\n  private assignedUsersUrl = this.roleUrl + '/assignedUsers';\r\n  private unAssignUsersUrl = this.roleUrl + '/unAssignUsers';\r\n  private searchUnAssignedUsersUrl = this.roleUrl + '/search/unAssignedUsers';\r\n  private assignUsersUrl = this.roleUrl + '/assignUsers';\r\n\r\n  private assignedFuncsUrl = this.roleUrl + '/assignedFuncs';\r\n  private unAssignFuncsUrl = this.roleUrl + '/unAssignFuncs';\r\n  private searchUnAssignedFuncsUrl = this.roleUrl + '/search/unAssignedFuncs';\r\n  private assignFuncsUrl = this.roleUrl + '/assignFuncs';\r\n\r\n  private assignedGroupsUrl = this.roleUrl + '/assignedGroups';\r\n  private unAssignGroupsUrl = this.roleUrl + '/unAssignGroups';\r\n  private searchUnAssignedGroupsUrl = this.roleUrl + '/search/unAssignedGroups';\r\n  private assignGroupsUrl = this.roleUrl + '/assignGroups';\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  create(role: Resource): Observable<Resource> {\r\n    const copy = this.convert(role);\r\n    return this.http.post(this.roleUrl, copy, { observe: 'response' }).pipe(\r\n      map((res: HttpResponse<any>) => {\r\n        const jsonResponse = res.body;\r\n        this.convertItemFromServer(jsonResponse, false);\r\n        return jsonResponse;\r\n      })\r\n    );\r\n  }\r\n\r\n  update(role: Resource): Observable<Resource> {\r\n    const copy = this.convert(role);\r\n    return this.http.put(this.roleUrl, copy, { observe: 'response' }).pipe(\r\n      map((res: HttpResponse<any>) => {\r\n        const jsonUpdateResponse = res.body;\r\n        this.convertItemFromServer(jsonUpdateResponse, false);\r\n        return jsonUpdateResponse;\r\n      })\r\n    );\r\n  }\r\n\r\n  find(id: number): Observable<Resource> {\r\n    return this.http.get(`${this.roleUrl}/${id}`, { observe: 'response' }).pipe(\r\n      map((res: HttpResponse<any>) => {\r\n        const jsonFindResponse = res.body;\r\n        this.convertItemFromServer(jsonFindResponse, false);\r\n        return jsonFindResponse;\r\n      })\r\n    );\r\n  }\r\n\r\n  query(req?: any): Observable<HttpResponse<any>> {\r\n    const params: HttpParams = createRequestOption(req);\r\n    return this.http\r\n      .get(this.roleUrl, { params, observe: 'response' })\r\n      .pipe(map((res: HttpResponse<any>) => this.convertArrayResponse(res, false)));\r\n  }\r\n\r\n  delete(id: string): Observable<HttpResponse<any>> {\r\n    return this.http.delete(`${this.roleUrl}/${id}`, { observe: 'response' });\r\n  }\r\n\r\n  findAllApplication(): Observable<HttpResponse<any>> {\r\n    return this.http\r\n      .get(this.getAllApplicationUrl, { observe: 'response' })\r\n      .pipe(map((res: HttpResponse<any>) => this.convertArrayResponse(res, false)));\r\n  }\r\n\r\n  findAllAssignedUsers(id: string): Observable<HttpResponse<any>> {\r\n    return this.http\r\n      .get(`${this.assignedUsersUrl}/${id}`, { observe: 'response' })\r\n      .pipe(map((res: HttpResponse<any>) => this.convertArrayResponse(res, true)));\r\n  }\r\n\r\n  unAssignUsers(id: string, subjects: Subject[]): Observable<HttpResponse<any>> {\r\n    return this.http.put(`${this.unAssignUsersUrl}/${id}`, subjects, { observe: 'response' });\r\n  }\r\n\r\n  searchUnAssignedUsers(req?: any): any {\r\n    const params: HttpParams = createRequestOption(req);\r\n    return this.http\r\n      .get(this.searchUnAssignedUsersUrl, { params, observe: 'response' })\r\n      .pipe(map((res: HttpResponse<any>) => this.convertArrayResponse(res, true)));\r\n  }\r\n\r\n  assignUsers(id: string, users: Subject[]): Observable<HttpResponse<any>> {\r\n    return this.http.put(`${this.assignUsersUrl}/${id}`, users, { observe: 'response' });\r\n  }\r\n\r\n  findAllAssignedFuncs(id: string): Observable<HttpResponse<any>> {\r\n    return this.http\r\n      .get(`${this.assignedFuncsUrl}/${id}`, { observe: 'response' })\r\n      .pipe(map((res: HttpResponse<any>) => this.convertArrayResponse(res, false)));\r\n  }\r\n\r\n  unAssignFuncs(id: string, resources: Resource[]): Observable<HttpResponse<any>> {\r\n    return this.http.put(`${this.unAssignFuncsUrl}/${id}`, resources, { observe: 'response' });\r\n  }\r\n\r\n  searchUnAssignedFuncs(req?: any): any {\r\n    const params: HttpParams = createRequestOption(req);\r\n    return this.http\r\n      .get(this.searchUnAssignedFuncsUrl, { params, observe: 'response' })\r\n      .pipe(map((res: HttpResponse<any>) => this.convertArrayResponse(res, false)));\r\n  }\r\n\r\n  assignFuncs(id: string, functions: Resource[]): Observable<HttpResponse<any>> {\r\n    return this.http.put(`${this.assignFuncsUrl}/${id}`, functions, { observe: 'response' });\r\n  }\r\n\r\n  findAllAssignedGroups(id: string): Observable<HttpResponse<any>> {\r\n    return this.http\r\n      .get(`${this.assignedGroupsUrl}/${id}`, { observe: 'response' })\r\n      .pipe(map((res: HttpResponse<any>) => this.convertArrayResponse(res, false)));\r\n  }\r\n\r\n  unAssignGroups(id: string, groups: Group[]): Observable<HttpResponse<any>> {\r\n    return this.http.put(`${this.unAssignGroupsUrl}/${id}`, groups, { observe: 'response' });\r\n  }\r\n\r\n  searchUnAssignedGroups(req?: any): any {\r\n    const params: HttpParams = createRequestOption(req);\r\n    return this.http\r\n      .get(this.searchUnAssignedGroupsUrl, { params, observe: 'response' })\r\n      .pipe(map((res: HttpResponse<any>) => this.convertArrayResponse(res, false)));\r\n  }\r\n\r\n  assignGroups(id: string, groups: Group[]): Observable<HttpResponse<any>> {\r\n    return this.http.put(`${this.assignGroupsUrl}/${id}`, groups, { observe: 'response' });\r\n  }\r\n\r\n  private convertArrayResponse(res: HttpResponse<any[]>, isUser: boolean): HttpResponse<any[]> {\r\n    const jsonResponse: any[] | null = res.body;\r\n    const body: any[] = [];\r\n    if (jsonResponse) {\r\n      for (let i = 0; i < jsonResponse.length; i++) {\r\n        body.push(this.convertItemFromServer(jsonResponse[i], isUser));\r\n      }\r\n    }\r\n    return res.clone({ body });\r\n  }\r\n\r\n  private convertItemFromServer(entity: any, isUser: boolean): any {\r\n    if (entity) {\r\n      if (isUser) {\r\n        // eslint-disable-next-line @typescript-eslint/restrict-plus-operands\r\n        entity.fullName = entity.firstName + ' ' + entity.lastName;\r\n      }\r\n      entity.createdBy = entity.createdBy ? entity.createdBy.replace('PASSWORD/', '').replace('NCSAD/', '') : '';\r\n      entity.updatedBy = entity.updatedBy ? entity.updatedBy.replace('PASSWORD/', '').replace('NCSAD/', '') : '';\r\n    }\r\n    return entity;\r\n  }\r\n\r\n  private convert(role: Resource): Resource {\r\n    const copy: Resource = Object.assign({}, role);\r\n    return copy;\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}