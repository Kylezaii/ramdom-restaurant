{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.VesService = void 0;\nconst tslib_1 = require(\"tslib\");\nconst http_1 = require(\"@angular/common/http\");\nconst i0 = tslib_1.__importStar(require(\"@angular/core\"));\nconst i1 = tslib_1.__importStar(require(\"@angular/common/http\"));\nconst i2 = tslib_1.__importStar(require(\"app/core/config/application-config.service\"));\nconst i3 = tslib_1.__importStar(require(\"app/shared/service/ns2-http.service\"));\n// import { IVesRecord, IVesRecordRemark } from '../model/ves-record.model';\nclass VesService {\n  constructor(http, applicationConfigService, ns2Http) {\n    this.http = http;\n    this.applicationConfigService = applicationConfigService;\n    this.ns2Http = ns2Http;\n    this.resourceUrl = this.applicationConfigService.getEndpointFor('api/payroll/ves');\n    this.resourceUrlForFindMultipleCodeType = 'api/codes';\n  }\n  getCodes(codeTypes) {\n    return this.ns2Http.get(`${this.resourceUrlForFindMultipleCodeType}/${codeTypes}`);\n  }\n  getAllRecords(options) {\n    return this.ns2Http.get(this.resourceUrl, options);\n  }\n  getRecordById(recordId) {\n    const url = `${this.resourceUrl}/${recordId}`;\n    return this.ns2Http.get(url);\n  }\n  getAllRecordsById(recordIds) {\n    const url = `${this.resourceUrl}/records`;\n    return this.ns2Http.get(url, {\n      params: recordIds\n    });\n  }\n  createEditRecordRequest(editRecordRequest) {\n    const url = `${this.resourceUrl}/request/edit`;\n    return this.ns2Http.post(url, editRecordRequest);\n  }\n  createDeleteRecordRequest(deleteRecordsRequest) {\n    const url = `${this.resourceUrl}/request/delete`;\n    return this.ns2Http.post(url, deleteRecordsRequest);\n  }\n  addRecordRemarks(recordId, body) {\n    const url = `${this.resourceUrl}/${recordId}/remarks`;\n    return this.ns2Http.post(url, body);\n  }\n  downloadSupportingDocuments(docId) {\n    const url = `${this.resourceUrl}/download/${docId}`;\n    return this.ns2Http.post(url);\n  }\n  convertLazyEvent(event, pageData, pageSize) {\n    // console.log(\"filters\", event.filters)\n    const eventFilters = event.filters;\n    const keys = Object.keys(eventFilters);\n    // console.log(\"filters2\", keys);\n    const filterArray = [];\n    keys.forEach(key => {\n      const arr = [];\n      if (eventFilters[key][0] && eventFilters[key][0].value !== null) {\n        arr.push(key);\n        arr.push(eventFilters[key][0].value);\n        filterArray.push(arr);\n      } else if (eventFilters[key].value) {\n        arr.push(key);\n        arr.push(eventFilters[key].value);\n        filterArray.push(arr);\n      }\n    });\n    // console.log(\"the filter array\", filterArray)\n    let params = new http_1.HttpParams();\n    if (pageData) {\n      params = params.set('page', pageData.currentPage);\n    }\n    if (pageSize) {\n      params = params.set('size', pageSize);\n    }\n    // .set('sort', sort);\n    filterArray.forEach(extraHttpParams => {\n      if (Array.isArray(extraHttpParams[1])) {\n        extraHttpParams[1].forEach(value => {\n          // For array filters\n          params = params.append(extraHttpParams[0], value);\n        });\n      } else {\n        // For single filters\n        params = params.append(extraHttpParams[0], extraHttpParams[1]);\n      }\n    });\n    if (event.sortField) {\n      const sort = event.sortField.concat(',').concat(event.sortOrder === 1 ? 'asc' : 'desc');\n      params = params.append('sort', sort);\n    }\n    const options = {\n      params\n    };\n    // console.log(\"params\", params);\n    return options;\n  }\n}\nexports.VesService = VesService;\nVesService.ɵfac = function VesService_Factory(t) {\n  return new (t || VesService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.ApplicationConfigService), i0.ɵɵinject(i3.Ns2HttpService));\n};\nVesService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: VesService,\n  factory: VesService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["VesService","constructor","http","applicationConfigService","ns2Http","getEndpointFor","getCodes","codeTypes","get","resourceUrlForFindMultipleCodeType","getAllRecords","options","resourceUrl","getRecordById","recordId","url","getAllRecordsById","recordIds","params","createEditRecordRequest","editRecordRequest","post","createDeleteRecordRequest","deleteRecordsRequest","addRecordRemarks","body","downloadSupportingDocuments","docId","convertLazyEvent","event","pageData","pageSize","eventFilters","filters","keys","Object","filterArray","forEach","key","arr","value","push","http_1","set","currentPage","extraHttpParams","Array","isArray","append","sortField","sort","concat","sortOrder","exports","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\D1347074\\Desktop\\projects 2\\nspayiiapp\\src\\main\\webapp\\app\\payroll\\ves\\service\\ves.service.ts"],"sourcesContent":["import { HttpClient, HttpParams } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { ApplicationConfigService } from 'app/core/config/application-config.service';\r\nimport { DateUtilsService } from 'app/core/util/date-utils.service';\r\nimport { Ns2HttpService } from 'app/shared/service/ns2-http.service';\r\nimport { LazyLoadEvent } from 'primeng/api';\r\nimport { Observable } from 'rxjs';\r\n// import { IVesRecord, IVesRecordRemark } from '../model/ves-record.model';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class VesService {\r\n  public resourceUrl = this.applicationConfigService.getEndpointFor('api/payroll/ves');\r\n  private resourceUrlForFindMultipleCodeType = 'api/codes';\r\n\r\n  constructor(protected http: HttpClient,\r\n    private applicationConfigService: ApplicationConfigService,\r\n    private ns2Http: Ns2HttpService) { }\r\n\r\n  getCodes(codeTypes: string): Observable<any> {\r\n    return this.ns2Http.get(`${this.resourceUrlForFindMultipleCodeType}/${codeTypes}`)\r\n  }\r\n\r\n  getAllRecords(options?: any): Observable<any> {\r\n    return this.ns2Http.get(this.resourceUrl, options);\r\n  }\r\n\r\n  getRecordById(recordId?: string): Observable<any> {\r\n    const url = `${this.resourceUrl}/${recordId}`;\r\n    return this.ns2Http.get(url);\r\n  }\r\n\r\n  getAllRecordsById(recordIds?: any): Observable<any> {\r\n    const url = `${this.resourceUrl}/records`;\r\n    return this.ns2Http.get(url, { params: recordIds })\r\n  }\r\n\r\n  createEditRecordRequest(editRecordRequest: any): Observable<any> {\r\n    const url = `${this.resourceUrl}/request/edit`;\r\n    return this.ns2Http.post(url, editRecordRequest);\r\n  }\r\n\r\n  createDeleteRecordRequest(deleteRecordsRequest: any): Observable<any> {\r\n    const url = `${this.resourceUrl}/request/delete`;\r\n    return this.ns2Http.post(url, deleteRecordsRequest);\r\n  }\r\n\r\n  addRecordRemarks(recordId: string, body: any): Observable<any> {\r\n    const url = `${this.resourceUrl}/${recordId}/remarks`;\r\n    return this.ns2Http.post(url, body);\r\n  }\r\n\r\n  downloadSupportingDocuments(docId: string): Observable<any> {\r\n    const url = `${this.resourceUrl}/download/${docId}`;\r\n    return this.ns2Http.post(url);\r\n  }\r\n\r\n\r\n  public convertLazyEvent(event: LazyLoadEvent, pageData: any, pageSize: number): { params: HttpParams } {\r\n\r\n    // console.log(\"filters\", event.filters)\r\n    const eventFilters: any = event.filters;\r\n    const keys = Object.keys(eventFilters) as (keyof typeof event.filters)[];\r\n    // console.log(\"filters2\", keys);\r\n\r\n    const filterArray: any[] = [];\r\n    keys.forEach(key => {\r\n      const arr: any[] = [];\r\n\r\n      if (eventFilters[key][0] && eventFilters[key][0].value !== null) {\r\n        arr.push(key);\r\n        arr.push(eventFilters[key][0].value);\r\n        filterArray.push(arr);\r\n      } else if (eventFilters[key].value) {\r\n        arr.push(key);\r\n        arr.push(eventFilters[key].value);\r\n        filterArray.push(arr);\r\n      }\r\n    })\r\n    // console.log(\"the filter array\", filterArray)\r\n\r\n    let params = new HttpParams();\r\n    if (pageData) {\r\n      params = params.set('page', pageData.currentPage);\r\n    }\r\n    if (pageSize) {\r\n      params = params.set('size', pageSize);\r\n    }\r\n    // .set('sort', sort);\r\n\r\n    filterArray.forEach(extraHttpParams => {\r\n      if (Array.isArray(extraHttpParams[1])) {\r\n        extraHttpParams[1].forEach((value: any) => {\r\n          // For array filters\r\n          params = params.append(extraHttpParams[0], value);\r\n        });\r\n      } else {\r\n        // For single filters\r\n        params = params.append(extraHttpParams[0], extraHttpParams[1]);\r\n      }\r\n    });\r\n\r\n    if (event.sortField) {\r\n      const sort = event.sortField.concat(',').concat(event.sortOrder === 1 ? 'asc' : 'desc');\r\n      params = params.append('sort', sort);\r\n    }\r\n\r\n    const options = {\r\n      params\r\n    };\r\n    // console.log(\"params\", params);\r\n    return options;\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}