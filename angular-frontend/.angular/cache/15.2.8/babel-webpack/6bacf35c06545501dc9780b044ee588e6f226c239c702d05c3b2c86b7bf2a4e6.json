{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.FormlyTableComponent = void 0;\nconst tslib_1 = require(\"tslib\");\nconst core_1 = require(\"@angular/core\");\nconst forms_1 = require(\"@angular/forms\");\nconst core_2 = require(\"@ngx-formly/core\");\nconst moment_1 = tslib_1.__importDefault(require(\"moment\"));\nconst i0 = tslib_1.__importStar(require(\"@angular/core\"));\nconst i1 = tslib_1.__importStar(require(\"@angular/forms\"));\nconst i2 = tslib_1.__importStar(require(\"primeng/api\"));\nconst i3 = tslib_1.__importStar(require(\"primeng/table\"));\nconst i4 = tslib_1.__importStar(require(\"@ngx-formly/core\"));\nfunction FormlyTableComponent_ng_template_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtext(0, \"\\n            \");\n    i0.ɵɵelementStart(1, \"tr\");\n    i0.ɵɵtext(2, \"\\n                \");\n    i0.ɵɵelementStart(3, \"th\", 4);\n    i0.ɵɵelement(4, \"p-tableHeaderCheckbox\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(5, \"\\n                \");\n    i0.ɵɵelementStart(6, \"th\");\n    i0.ɵɵtext(7, \"Check List Items\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(8, \"\\n            \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(9, \"\\n            \");\n  }\n}\nconst _c0 = function () {\n  return {\n    \"max-width\": \"5em\",\n    \"border-bottom\": \"0px\",\n    \"align-items\": \"center\"\n  };\n};\nconst _c1 = function () {\n  return {\n    \"border-bottom\": \"0px\",\n    \"align-items\": \"center\",\n    \"padding-bottom\": \"0px\"\n  };\n};\nconst _c2 = function () {\n  return {\n    \"align-items\": \"center\"\n  };\n};\nfunction FormlyTableComponent_ng_template_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtext(0, \"\\n            \");\n    i0.ɵɵelementStart(1, \"tr\");\n    i0.ɵɵtext(2, \"\\n                \");\n    i0.ɵɵelementStart(3, \"td\");\n    i0.ɵɵtext(4, \"\\n                    \");\n    i0.ɵɵelement(5, \"p-tableCheckbox\", 5);\n    i0.ɵɵtext(6, \"\\n                \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(7, \"\\n                \");\n    i0.ɵɵelementStart(8, \"td\");\n    i0.ɵɵtext(9, \"\\n                    \");\n    i0.ɵɵelement(10, \"formly-field\", 6);\n    i0.ɵɵtext(11, \"\\n                \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(12, \"\\n            \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(13, \"\\n            \");\n  }\n  if (rf & 2) {\n    const f_r3 = ctx.$implicit;\n    i0.ɵɵadvance(3);\n    i0.ɵɵstyleMap(i0.ɵɵpureFunction0(8, _c0));\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"value\", f_r3);\n    i0.ɵɵadvance(3);\n    i0.ɵɵstyleMap(i0.ɵɵpureFunction0(9, _c1));\n    i0.ɵɵadvance(2);\n    i0.ɵɵstyleMap(i0.ɵɵpureFunction0(10, _c2));\n    i0.ɵɵproperty(\"field\", f_r3);\n  }\n}\n// [style]=\"{'border':'0px !important'}\"\nclass FormlyTableComponent extends core_2.FieldType {\n  constructor(formBuilder) {\n    super();\n    this.formBuilder = formBuilder;\n    // <button   class=\"flex align-items-center justify-content-center\" pButton label=\"TESTER\" (click) = \"tester()\"  class=\"p-button-success\">    </button>\n    this.selectAll = false;\n    this.optionChanged = new core_1.EventEmitter();\n    this.checklistFG = this.formBuilder.group({\n      checklistArr: this.formBuilder.array([]),\n      checklistCheckBox: new forms_1.FormControl([], null)\n    });\n    this.resolverMap = new Map();\n  }\n  ngOnInit() {\n    this.fieldConfig = this.form;\n    this.resolveTemplateByKeyType();\n  }\n  resolveTemplateByKeyType() {\n    const filterModelData = Object.fromEntries(Object.entries(this.field.props.modelData).filter(([k, v]) => {\n      return v !== undefined && v !== null;\n    }));\n    const keyList = Object.keys(filterModelData);\n    const targetGrpArr = this.field.fieldGroup.filter(x => {\n      return keyList.includes(String(x.key));\n    });\n    for (const [k, v] of Object.entries(filterModelData)) {\n      const fieldGrpObj = targetGrpArr.find(fgObj => fgObj.key === k);\n      const innerMap = new Map();\n      if (fieldGrpObj) {\n        for (const [innerK, innerV] of Object.entries(v)) {\n          //set type here\n          const innerfieldGrpObj = fieldGrpObj.fieldGroup.find(fgObj => fgObj.key === innerK);\n          const conversionType = innerfieldGrpObj.props.conversionType;\n          innerMap.set(innerK, conversionType);\n        }\n      }\n      this.resolverMap.set(k, innerMap);\n    }\n    console.log(\"finally\", this.resolverMap);\n    //converting on form control end\n    for (const [k, v] of Object.entries(this.field.props.modelData)) {\n      if (v) {\n        const fc = this.fieldConfig.get(k);\n        if (fc) {\n          // console.log(\"inside\", fc);\n          // console.log(\"hiya\", this.resolverMap.get(k));\n          const innerFC = this.fieldConfig.get(k);\n          innerFC.setValue(this.constructFormControlObj(this.resolverMap.get(k), innerFC.value));\n        }\n      }\n    }\n  }\n  constructFormControlObj(innerMap, innerModel) {\n    if (innerModel) {\n      for (const [k, v] of Object.entries(innerModel)) {\n        if (innerMap.get(k) === \"date\") {\n          const parsedDate = (0, moment_1.default)(v, \"DD-MM-YYYY\").toDate();\n          innerModel[k] = parsedDate;\n        }\n      }\n    }\n    console.log(\"inner modela\", innerModel);\n    return innerModel;\n  }\n  checkboxChanged(event) {\n    this.optionChanged.emit(event);\n  }\n  onSelectAllChange(event) {\n    const checked = event.checked;\n    if (checked) {\n      this.field.props.selectedRows = this.field.fieldGroup;\n      this.selectAll = true;\n    } else {\n      this.field.props.selectedRows = [];\n      this.selectAll = false;\n    }\n  }\n  tester() {\n    console.log(\"myla\", this.field.fieldGroup);\n    console.log(\"rita\", this.fieldConfig);\n    console.log(\"selected\", this.field.props.selectedRows);\n    console.log(\"rita2\", this.field.props.modelData);\n  }\n}\nexports.FormlyTableComponent = FormlyTableComponent;\nFormlyTableComponent.ɵfac = function FormlyTableComponent_Factory(t) {\n  return new (t || FormlyTableComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder));\n};\nFormlyTableComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: FormlyTableComponent,\n  selectors: [[\"n2-formly-table\"]],\n  outputs: {\n    optionChanged: \"optionChanged\"\n  },\n  features: [i0.ɵɵInheritDefinitionFeature],\n  decls: 11,\n  vars: 6,\n  consts: [[3, \"formGroup\"], [\"scrollHeight\", \"50vh\", 3, \"value\", \"selection\", \"selectAll\", \"scrollable\", \"styleClass\", \"selectionChange\", \"selectAllChange\"], [\"pTemplate\", \"header\"], [\"pTemplate\", \"body\"], [2, \"max-width\", \"5em\"], [3, \"value\"], [3, \"field\"]],\n  template: function FormlyTableComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtext(0, \"  \\n\\n    \");\n      i0.ɵɵelementStart(1, \"form\", 0);\n      i0.ɵɵtext(2, \"\\n\\n        \");\n      i0.ɵɵelementStart(3, \"p-table\", 1);\n      i0.ɵɵlistener(\"selectionChange\", function FormlyTableComponent_Template_p_table_selectionChange_3_listener($event) {\n        return ctx.field.props.selectedRows = $event;\n      })(\"selectAllChange\", function FormlyTableComponent_Template_p_table_selectAllChange_3_listener($event) {\n        return ctx.onSelectAllChange($event);\n      });\n      i0.ɵɵtext(4, \"\\n\\n        \\n            \");\n      i0.ɵɵtemplate(5, FormlyTableComponent_ng_template_5_Template, 10, 0, \"ng-template\", 2);\n      i0.ɵɵtext(6, \"\\n\\n            \");\n      i0.ɵɵtemplate(7, FormlyTableComponent_ng_template_7_Template, 14, 11, \"ng-template\", 3);\n      i0.ɵɵtext(8, \"\\n        \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(9, \"\\n    \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(10, \"\\n\");\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"formGroup\", ctx.checklistFG);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"value\", ctx.field.fieldGroup)(\"selection\", ctx.field.props.selectedRows)(\"selectAll\", ctx.selectAll)(\"scrollable\", true)(\"styleClass\", ctx.field == null ? null : ctx.field.templateOptions == null ? null : ctx.field.templateOptions.theme == null ? null : ctx.field.templateOptions.theme.table == null ? null : ctx.field.templateOptions.theme.table.class);\n    }\n  },\n  dependencies: [i1.ɵNgNoValidate, i1.NgControlStatusGroup, i1.FormGroupDirective, i2.PrimeTemplate, i3.Table, i3.TableCheckbox, i3.TableHeaderCheckbox, i4.FormlyField],\n  encapsulation: 2\n});","map":{"version":3,"mappings":"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","names":["i0","FormlyTableComponent","core_2","constructor","formBuilder","core_1","group","checklistArr","array","checklistCheckBox","forms_1","Map","ngOnInit","fieldConfig","form","resolveTemplateByKeyType","filterModelData","Object","fromEntries","entries","field","props","modelData","filter","k","v","undefined","keyList","keys","targetGrpArr","fieldGroup","x","includes","String","key","fieldGrpObj","find","fgObj","innerMap","innerK","innerV","innerfieldGrpObj","conversionType","set","resolverMap","console","log","fc","get","innerFC","setValue","constructFormControlObj","value","innerModel","parsedDate","toDate","checkboxChanged","event","optionChanged","emit","onSelectAllChange","checked","selectedRows","selectAll","tester","exports","selectors","outputs","features","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["C:\\Users\\D1347074\\Desktop\\projects 2\\nspayiiapp\\src\\main\\webapp\\app\\shared\\component\\formly-input-field\\formly-table.component.ts"],"sourcesContent":["import { Component, EventEmitter, OnDestroy, OnInit, Output } from '@angular/core';\r\nimport { FormArray, FormBuilder, FormControl, FormGroup } from '@angular/forms';\r\nimport { FieldType, FieldTypeConfig } from '@ngx-formly/core';\r\nimport moment from 'moment';\r\nimport { FieldConfig } from './field.config';\r\n// [style]=\"{'border':'0px !important'}\"\r\n@Component({\r\n  selector: 'n2-formly-table',\r\n  template: `  \r\n\r\n    <form [formGroup]=\"checklistFG\">\r\n\r\n        <p-table [value]=\"field.fieldGroup\"\r\n        [(selection)] = \"field.props.selectedRows\"\r\n        [selectAll]=\"selectAll\"\r\n        [scrollable]=\"true\"  scrollHeight=\"50vh\"\r\n\r\n        (selectAllChange)=\"onSelectAllChange($event)\" \r\n        [styleClass]=\"field?.templateOptions?.theme?.table?.class\"\r\n        >\r\n\r\n        \r\n            <ng-template pTemplate=\"header\" let-columns>\r\n            <tr>\r\n                <th style=\"max-width:5em\"><p-tableHeaderCheckbox></p-tableHeaderCheckbox></th>\r\n                <th >Check List Items</th>\r\n            </tr>\r\n            </ng-template>\r\n\r\n            <ng-template pTemplate=\"body\" let-f  let-rowIndex= \"rowIndex\">\r\n            <tr>\r\n                <td [style]=\"{'max-width':'5em', 'border-bottom': '0px', 'align-items': 'center'}\">\r\n                    <p-tableCheckbox [value]=\"f\"></p-tableCheckbox>\r\n                </td>\r\n                <td [style]=\"{'border-bottom': '0px', 'align-items': 'center', 'padding-bottom': '0px'}\">\r\n                    <formly-field [field]=\"f\" [style]= \"{'align-items': 'center'}\"></formly-field>\r\n                </td>\r\n            </tr>\r\n            </ng-template>\r\n        </p-table>\r\n    </form>\r\n`,    \r\n\r\n})\r\nexport class FormlyTableComponent extends FieldType implements OnInit {\r\n    // <button   class=\"flex align-items-center justify-content-center\" pButton label=\"TESTER\" (click) = \"tester()\"  class=\"p-button-success\">    </button>\r\n\r\n\r\n    selectAll = false;\r\n    @Output() optionChanged = new EventEmitter<string>();\r\n    checklistFG:FormGroup = this.formBuilder.group({\r\n        checklistArr: this.formBuilder.array([]),\r\n        checklistCheckBox: new FormControl([], null)\r\n    });\r\n    private resolverMap = new Map<string,any>();\r\n\r\n    private fieldConfig: FieldConfig;\r\n\r\n    constructor(\r\n        private formBuilder: FormBuilder\r\n    ) {\r\n        super();\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.fieldConfig = this.form;\r\n        this.resolveTemplateByKeyType();\r\n    }\r\n\r\n    resolveTemplateByKeyType(): void{\r\n        const filterModelData = Object.fromEntries(Object.entries(this.field.props.modelData).filter(([k,v])=>{\r\n           return v!==undefined && v!==null;\r\n        }));\r\n        const keyList = Object.keys(filterModelData);\r\n        const targetGrpArr = this.field.fieldGroup.filter(x=> {\r\n            return keyList.includes(String(x.key));\r\n        });\r\n        for (const [k, v] of Object.entries(filterModelData)) { \r\n            const fieldGrpObj = targetGrpArr.find(fgObj=>fgObj.key === k );\r\n            const innerMap = new Map<string, string>();\r\n\r\n            if(fieldGrpObj){\r\n                for(const [innerK, innerV] of Object.entries(v)){//set type here\r\n                    const innerfieldGrpObj = fieldGrpObj.fieldGroup.find(fgObj=>fgObj.key === innerK);\r\n                    const conversionType = innerfieldGrpObj.props.conversionType;\r\n                    innerMap.set(innerK, conversionType);\r\n                }\r\n            }\r\n            this.resolverMap.set(k, innerMap);\r\n        }\r\n        console.log(\"finally\", this.resolverMap);\r\n   \r\n        //converting on form control end\r\n        for (const [k, v] of Object.entries(this.field.props.modelData)) {\r\n            if(v){\r\n                const fc = (this.fieldConfig.get(k) as FormControl)\r\n                if(fc){\r\n                    // console.log(\"inside\", fc);\r\n                    // console.log(\"hiya\", this.resolverMap.get(k));\r\n                    const innerFC = this.fieldConfig.get(k) as FormControl;\r\n                    innerFC.setValue(\r\n                        this.constructFormControlObj( this.resolverMap.get(k),innerFC.value)\r\n                    );\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    constructFormControlObj(innerMap: Map<string, string>, innerModel:any):any{\r\n        if(innerModel){\r\n            for (const [k, v] of Object.entries(innerModel)) {\r\n                if(innerMap.get(k)===\"date\"){\r\n                    const parsedDate = moment(v,\"DD-MM-YYYY\").toDate();\r\n                    innerModel[k] = parsedDate;\r\n                }\r\n            }\r\n        }\r\n        console.log(\"inner modela\", innerModel);\r\n      return innerModel\r\n    }\r\n\r\n    checkboxChanged(event: any){\r\n        this.optionChanged.emit(event)\r\n    }\r\n\r\n    onSelectAllChange(event: any): void {\r\n        const checked = event.checked;\r\n        if (checked) {\r\n          this.field.props.selectedRows = this.field.fieldGroup;\r\n          this.selectAll = true;\r\n        } else {\r\n          this.field.props.selectedRows = [];\r\n          this.selectAll = false;\r\n        }\r\n      }\r\n \r\n      tester(): void{\r\n        console.log(\"myla\", this.field.fieldGroup)\r\n        console.log(\"rita\", this.fieldConfig as FormGroup)\r\n        console.log(\"selected\", this.field.props.selectedRows)\r\n        console.log(\"rita2\",  this.field.props.modelData)\r\n      }\r\n\r\n}\r\n\r\n\r\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}