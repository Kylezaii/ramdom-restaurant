{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.UserRouteAccessService = void 0;\nconst tslib_1 = require(\"tslib\");\nconst core_1 = require(\"@angular/core\");\nconst operators_1 = require(\"rxjs/operators\");\nconst i0 = tslib_1.__importStar(require(\"@angular/core\"));\nconst i1 = tslib_1.__importStar(require(\"@angular/router\"));\nconst i2 = tslib_1.__importStar(require(\"app/core/auth/account.service\"));\nconst i3 = tslib_1.__importStar(require(\"./state-storage.service\"));\nclass UserRouteAccessService {\n  constructor(router, accountService, stateStorageService) {\n    this.router = router;\n    this.accountService = accountService;\n    this.stateStorageService = stateStorageService;\n  }\n  canActivate(route, state) {\n    return this.accountService.identity().pipe((0, operators_1.map)(account => {\n      if (account) {\n        const authorities = route.data['authorities'];\n        if (!authorities || authorities.length === 0 || this.accountService.hasAnyAuthority(authorities)) {\n          return true;\n        }\n        if ((0, core_1.isDevMode)()) {\n          console.error('User has not any of required authorities: ', authorities);\n        }\n        this.router.navigate(['accessdenied']);\n        return false;\n      }\n      this.stateStorageService.storeUrl(state.url);\n      this.router.navigate(['/login']);\n      return false;\n    }));\n  }\n}\nexports.UserRouteAccessService = UserRouteAccessService;\nUserRouteAccessService.ɵfac = function UserRouteAccessService_Factory(t) {\n  return new (t || UserRouteAccessService)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.AccountService), i0.ɵɵinject(i3.StateStorageService));\n};\nUserRouteAccessService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: UserRouteAccessService,\n  factory: UserRouteAccessService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";;;;;;;AAAA;AAGA;;;;;AAKA,MACaA,sBAAsB;EACjCC,YAAoBC,MAAc,EAAUC,cAA8B,EAAUC,mBAAwC;IAAxG,WAAM,GAANF,MAAM;IAAkB,mBAAc,GAAdC,cAAc;IAA0B,wBAAmB,GAAnBC,mBAAmB;EAAwB;EAE/HC,WAAW,CAACC,KAA6B,EAAEC,KAA0B;IACnE,OAAO,IAAI,CAACJ,cAAc,CAACK,QAAQ,EAAE,CAACC,IAAI,CACxC,mBAAG,EAACC,OAAO,IAAG;MACZ,IAAIA,OAAO,EAAE;QACX,MAAMC,WAAW,GAAGL,KAAK,CAACM,IAAI,CAAC,aAAa,CAAC;QAE7C,IAAI,CAACD,WAAW,IAAIA,WAAW,CAACE,MAAM,KAAK,CAAC,IAAI,IAAI,CAACV,cAAc,CAACW,eAAe,CAACH,WAAW,CAAC,EAAE;UAChG,OAAO,IAAI;;QAGb,IAAI,oBAAS,GAAE,EAAE;UACfI,OAAO,CAACC,KAAK,CAAC,4CAA4C,EAAEL,WAAW,CAAC;;QAE1E,IAAI,CAACT,MAAM,CAACe,QAAQ,CAAC,CAAC,cAAc,CAAC,CAAC;QACtC,OAAO,KAAK;;MAGd,IAAI,CAACb,mBAAmB,CAACc,QAAQ,CAACX,KAAK,CAACY,GAAG,CAAC;MAC5C,IAAI,CAACjB,MAAM,CAACe,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;MAChC,OAAO,KAAK;IACd,CAAC,CAAC,CACH;EACH;;AA1BFG;;mBACapB,sBAAsB;AAAA;;SAAtBA,sBAAsB;EAAAqB,SAAtBrB,sBAAsB;EAAAsB,YADT;AAAM","names":["UserRouteAccessService","constructor","router","accountService","stateStorageService","canActivate","route","state","identity","pipe","account","authorities","data","length","hasAnyAuthority","console","error","navigate","storeUrl","url","exports","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\D1347074\\Desktop\\projects 2\\nspayiiapp\\src\\main\\webapp\\app\\core\\auth\\user-route-access.service.ts"],"sourcesContent":["import { Injectable, isDevMode } from '@angular/core';\r\nimport { ActivatedRouteSnapshot, CanActivate, Router, RouterStateSnapshot } from '@angular/router';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\n\r\nimport { AccountService } from 'app/core/auth/account.service';\r\nimport { StateStorageService } from './state-storage.service';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class UserRouteAccessService implements CanActivate {\r\n  constructor(private router: Router, private accountService: AccountService, private stateStorageService: StateStorageService) {}\r\n\r\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<boolean> {\r\n    return this.accountService.identity().pipe(\r\n      map(account => {\r\n        if (account) {\r\n          const authorities = route.data['authorities'];\r\n\r\n          if (!authorities || authorities.length === 0 || this.accountService.hasAnyAuthority(authorities)) {\r\n            return true;\r\n          }\r\n\r\n          if (isDevMode()) {\r\n            console.error('User has not any of required authorities: ', authorities);\r\n          }\r\n          this.router.navigate(['accessdenied']);\r\n          return false;\r\n        }\r\n\r\n        this.stateStorageService.storeUrl(state.url);\r\n        this.router.navigate(['/login']);\r\n        return false;\r\n      })\r\n    );\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}