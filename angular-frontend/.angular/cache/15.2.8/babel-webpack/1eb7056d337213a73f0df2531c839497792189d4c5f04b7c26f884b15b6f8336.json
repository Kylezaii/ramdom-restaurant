{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AuthServerProvider = void 0;\nconst tslib_1 = require(\"tslib\");\nconst rxjs_1 = require(\"rxjs\");\nconst operators_1 = require(\"rxjs/operators\");\nconst request_util_1 = require(\"app/core/request/request-util\");\nconst app_constants_1 = require(\"app/app.constants\");\nconst i0 = tslib_1.__importStar(require(\"@angular/core\"));\nconst i1 = tslib_1.__importStar(require(\"@angular/common/http\"));\nconst i2 = tslib_1.__importStar(require(\"ngx-webstorage\"));\nconst i3 = tslib_1.__importStar(require(\"../config/application-config.service\"));\nclass AuthServerProvider {\n  constructor(http, $localStorage, $sessionStorage, applicationConfigService) {\n    this.http = http;\n    this.$localStorage = $localStorage;\n    this.$sessionStorage = $sessionStorage;\n    this.applicationConfigService = applicationConfigService;\n  }\n  getToken() {\n    const tokenInLocalStorage = this.$localStorage.retrieve('authenticationToken');\n    const tokenInSessionStorage = this.$sessionStorage.retrieve('authenticationToken');\n    return tokenInLocalStorage ?? tokenInSessionStorage ?? '';\n  }\n  login(credentials) {\n    return this.http.post(this.applicationConfigService.getEndpointFor('api/authenticate'), credentials).pipe((0, operators_1.map)(response => this.authenticateSuccess(response, credentials.rememberMe)));\n  }\n  // Kerberos Added 20220408 , Start\n  loginKerberos() {\n    return this.http.get(this.applicationConfigService.getEndpointFor('api/login')).pipe((0, operators_1.map)(response => this.authenticateSuccess(response, false)));\n  }\n  // Kerberos Added 20220408 , End\n  logout() {\n    return new rxjs_1.Observable(observer => {\n      this.http.get(this.applicationConfigService.getEndpointFor('api/logout')).subscribe();\n      this.$localStorage.clear('authenticationToken');\n      this.$sessionStorage.clear('authenticationToken');\n      this.$localStorage.clear('minPasswordLength');\n      this.$localStorage.clear('maxPasswordLength');\n      this.$localStorage.clear('passwordRule');\n      observer.complete();\n    });\n  }\n  forceUserLogin(loginNameAndAuthMethod) {\n    const params = (0, request_util_1.createRequestOption)(loginNameAndAuthMethod);\n    return this.http.get(app_constants_1.SERVER_API_URL + 'api/forceUserLogin', {\n      params,\n      observe: 'response'\n    });\n  }\n  authenticateSuccess(response, rememberMe) {\n    const jwt = response.id_token;\n    if (rememberMe) {\n      this.$localStorage.store('authenticationToken', jwt);\n      this.$sessionStorage.clear('authenticationToken');\n    } else {\n      this.$sessionStorage.store('authenticationToken', jwt);\n      this.$localStorage.clear('authenticationToken');\n    }\n  }\n}\nexports.AuthServerProvider = AuthServerProvider;\nAuthServerProvider.ɵfac = function AuthServerProvider_Factory(t) {\n  return new (t || AuthServerProvider)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.LocalStorageService), i0.ɵɵinject(i2.SessionStorageService), i0.ɵɵinject(i3.ApplicationConfigService));\n};\nAuthServerProvider.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthServerProvider,\n  factory: AuthServerProvider.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";;;;;;;AAEA;AACA;AAEA;AACA;;;;;AAQA,MACaA,kBAAkB;EAC7BC,YACUC,IAAgB,EAChBC,aAAkC,EAClCC,eAAsC,EACtCC,wBAAkD;IAHlD,SAAI,GAAJH,IAAI;IACJ,kBAAa,GAAbC,aAAa;IACb,oBAAe,GAAfC,eAAe;IACf,6BAAwB,GAAxBC,wBAAwB;EAC/B;EAEHC,QAAQ;IACN,MAAMC,mBAAmB,GAAkB,IAAI,CAACJ,aAAa,CAACK,QAAQ,CAAC,qBAAqB,CAAC;IAC7F,MAAMC,qBAAqB,GAAkB,IAAI,CAACL,eAAe,CAACI,QAAQ,CAAC,qBAAqB,CAAC;IACjG,OAAOD,mBAAmB,IAAIE,qBAAqB,IAAI,EAAE;EAC3D;EAEAC,KAAK,CAACC,WAAkB;IACtB,OAAO,IAAI,CAACT,IAAI,CACbU,IAAI,CAAW,IAAI,CAACP,wBAAwB,CAACQ,cAAc,CAAC,kBAAkB,CAAC,EAAEF,WAAW,CAAC,CAC7FG,IAAI,CAAC,mBAAG,EAACC,QAAQ,IAAI,IAAI,CAACC,mBAAmB,CAACD,QAAQ,EAAEJ,WAAW,CAACM,UAAU,CAAC,CAAC,CAAC;EACtF;EAEA;EACAC,aAAa;IACX,OAAO,IAAI,CAAChB,IAAI,CACbiB,GAAG,CAAW,IAAI,CAACd,wBAAwB,CAACQ,cAAc,CAAC,WAAW,CAAC,CAAC,CACxEC,IAAI,CAAC,mBAAG,EAACC,QAAQ,IAAI,IAAI,CAACC,mBAAmB,CAACD,QAAQ,EAAE,KAAK,CAAC,CAAC,CAAC;EACrE;EACA;EAEAK,MAAM;IACJ,OAAO,IAAIC,iBAAU,CAACC,QAAQ,IAAG;MAC/B,IAAI,CAACpB,IAAI,CAACiB,GAAG,CAAO,IAAI,CAACd,wBAAwB,CAACQ,cAAc,CAAC,YAAY,CAAC,CAAC,CAACU,SAAS,EAAE;MAC3F,IAAI,CAACpB,aAAa,CAACqB,KAAK,CAAC,qBAAqB,CAAC;MAC/C,IAAI,CAACpB,eAAe,CAACoB,KAAK,CAAC,qBAAqB,CAAC;MACjD,IAAI,CAACrB,aAAa,CAACqB,KAAK,CAAC,mBAAmB,CAAC;MAC7C,IAAI,CAACrB,aAAa,CAACqB,KAAK,CAAC,mBAAmB,CAAC;MAC7C,IAAI,CAACrB,aAAa,CAACqB,KAAK,CAAC,cAAc,CAAC;MACxCF,QAAQ,CAACG,QAAQ,EAAE;IACrB,CAAC,CAAC;EACJ;EAEAC,cAAc,CAACC,sBAA2B;IACxC,MAAMC,MAAM,GAAe,sCAAmB,EAACD,sBAAsB,CAAC;IACtE,OAAO,IAAI,CAACzB,IAAI,CAACiB,GAAG,CAAMU,8BAAc,GAAG,oBAAoB,EAAE;MAAED,MAAM;MAAEE,OAAO,EAAE;IAAU,CAAE,CAAC;EACnG;EAEQd,mBAAmB,CAACD,QAAkB,EAAEE,UAAmB;IACjE,MAAMc,GAAG,GAAGhB,QAAQ,CAACiB,QAAQ;IAC7B,IAAIf,UAAU,EAAE;MACd,IAAI,CAACd,aAAa,CAAC8B,KAAK,CAAC,qBAAqB,EAAEF,GAAG,CAAC;MACpD,IAAI,CAAC3B,eAAe,CAACoB,KAAK,CAAC,qBAAqB,CAAC;KAClD,MAAM;MACL,IAAI,CAACpB,eAAe,CAAC6B,KAAK,CAAC,qBAAqB,EAAEF,GAAG,CAAC;MACtD,IAAI,CAAC5B,aAAa,CAACqB,KAAK,CAAC,qBAAqB,CAAC;;EAEnD;;AAvDFU;;mBACalC,kBAAkB;AAAA;;SAAlBA,kBAAkB;EAAAmC,SAAlBnC,kBAAkB;EAAAoC,YADL;AAAM","names":["AuthServerProvider","constructor","http","$localStorage","$sessionStorage","applicationConfigService","getToken","tokenInLocalStorage","retrieve","tokenInSessionStorage","login","credentials","post","getEndpointFor","pipe","response","authenticateSuccess","rememberMe","loginKerberos","get","logout","rxjs_1","observer","subscribe","clear","complete","forceUserLogin","loginNameAndAuthMethod","params","app_constants_1","observe","jwt","id_token","store","exports","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\D1347074\\Desktop\\projects 2\\nspayiiapp\\src\\main\\webapp\\app\\core\\auth\\auth-jwt.service.ts"],"sourcesContent":["import {Injectable} from '@angular/core';\r\nimport {HttpClient, HttpParams} from '@angular/common/http';\r\nimport {Observable} from 'rxjs';\r\nimport {map} from 'rxjs/operators';\r\nimport {LocalStorageService, SessionStorageService} from 'ngx-webstorage';\r\nimport {createRequestOption} from 'app/core/request/request-util';\r\nimport {SERVER_API_URL} from 'app/app.constants';\r\nimport {ApplicationConfigService} from '../config/application-config.service';\r\nimport {Login} from 'app/login/login.model';\r\n\r\ntype JwtToken = {\r\n  id_token: string;\r\n};\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class AuthServerProvider {\r\n  constructor(\r\n    private http: HttpClient,\r\n    private $localStorage: LocalStorageService,\r\n    private $sessionStorage: SessionStorageService,\r\n    private applicationConfigService: ApplicationConfigService\r\n  ) {}\r\n\r\n  getToken(): string {\r\n    const tokenInLocalStorage: string | null = this.$localStorage.retrieve('authenticationToken');\r\n    const tokenInSessionStorage: string | null = this.$sessionStorage.retrieve('authenticationToken');\r\n    return tokenInLocalStorage ?? tokenInSessionStorage ?? '';\r\n  }\r\n\r\n  login(credentials: Login): Observable<void> {\r\n    return this.http\r\n      .post<JwtToken>(this.applicationConfigService.getEndpointFor('api/authenticate'), credentials)\r\n      .pipe(map(response => this.authenticateSuccess(response, credentials.rememberMe)));\r\n  }\r\n\r\n  // Kerberos Added 20220408 , Start\r\n  loginKerberos(): Observable<void> {\r\n    return this.http\r\n      .get<JwtToken>(this.applicationConfigService.getEndpointFor('api/login'))\r\n      .pipe(map(response => this.authenticateSuccess(response, false)));\r\n  }\r\n  // Kerberos Added 20220408 , End\r\n\r\n  logout(): Observable<void> {\r\n    return new Observable(observer => {\r\n      this.http.get<void>(this.applicationConfigService.getEndpointFor('api/logout')).subscribe();\r\n      this.$localStorage.clear('authenticationToken');\r\n      this.$sessionStorage.clear('authenticationToken');\r\n      this.$localStorage.clear('minPasswordLength');\r\n      this.$localStorage.clear('maxPasswordLength');\r\n      this.$localStorage.clear('passwordRule');\r\n      observer.complete();\r\n    });\r\n  }\r\n\r\n  forceUserLogin(loginNameAndAuthMethod: any): Observable<any> {\r\n    const params: HttpParams = createRequestOption(loginNameAndAuthMethod);\r\n    return this.http.get<any>(SERVER_API_URL + 'api/forceUserLogin', { params, observe: 'response' });\r\n  }\r\n\r\n  private authenticateSuccess(response: JwtToken, rememberMe: boolean): void {\r\n    const jwt = response.id_token;\r\n    if (rememberMe) {\r\n      this.$localStorage.store('authenticationToken', jwt);\r\n      this.$sessionStorage.clear('authenticationToken');\r\n    } else {\r\n      this.$sessionStorage.store('authenticationToken', jwt);\r\n      this.$localStorage.clear('authenticationToken');\r\n    }\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}