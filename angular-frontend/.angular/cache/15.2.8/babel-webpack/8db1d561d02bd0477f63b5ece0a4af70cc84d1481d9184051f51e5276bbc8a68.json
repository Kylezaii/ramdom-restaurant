{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.FormlyMapService = void 0;\nconst tslib_1 = require(\"tslib\");\nconst rxjs_1 = require(\"rxjs\");\nconst i0 = tslib_1.__importStar(require(\"@angular/core\"));\nconst i1 = tslib_1.__importStar(require(\"./ns2-http.service\"));\nconst i2 = tslib_1.__importStar(require(\"app/core/config/application-config.service\"));\nconst i3 = tslib_1.__importStar(require(\"app/ng-connect\"));\nconst i4 = tslib_1.__importStar(require(\"app/core/util/date-utils.service\"));\nclass FormlyMapService {\n  constructor(ns2Http, applicationConfigService, codeService, dateUtilsService) {\n    this.ns2Http = ns2Http;\n    this.applicationConfigService = applicationConfigService;\n    this.codeService = codeService;\n    this.dateUtilsService = dateUtilsService;\n    this.dateFormat = \"DD-MM-YYYY\";\n    this.subscription = new rxjs_1.Subscription();\n  }\n  // Bind an observable to the option fields.\n  //can map on either frontend or backend\n  mapOptionFields(fields) {\n    console.log(\"inner fields\", fields);\n    return fields.map(f => {\n      console.log(\"the fieldgrp\", f.fieldGroup);\n      f.fieldGroup.forEach(innerGrp => {\n        if (innerGrp.key === 'seClaimOption') {\n          innerGrp.type = 'select';\n          innerGrp.props.options = this.codeService.gets('claim_option_long').pipe((0, rxjs_1.map)(data => data[0].map(s => ({\n            value: s.codeId,\n            label: s.label['en-US']\n          }))));\n        }\n      });\n      return f;\n    });\n  }\n  buildModel(model) {\n    //replace undefined values  with null\n    if (model) {\n      for (const [k, v] of Object.entries(model)) {\n        if (v === undefined || v === null) {\n          model[k] = null;\n        } else {\n          for (const [innerK, innerV] of Object.entries(v)) {\n            if (innerV instanceof Date) {\n              const ds = this.dateUtilsService.formatStrDate(innerV.toDateString(), this.dateFormat);\n              console.log(\"date string\", ds);\n              model[k][innerK] = ds;\n            }\n          }\n        }\n      }\n    }\n    return model;\n  }\n  ngOnDestroy() {\n    throw new Error(\"Method not implemented.\");\n  }\n}\nexports.FormlyMapService = FormlyMapService;\nFormlyMapService.ɵfac = function FormlyMapService_Factory(t) {\n  return new (t || FormlyMapService)(i0.ɵɵinject(i1.Ns2HttpService), i0.ɵɵinject(i2.ApplicationConfigService), i0.ɵɵinject(i3.IcCodeService), i0.ɵɵinject(i4.DateUtilsService));\n};\nFormlyMapService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: FormlyMapService,\n  factory: FormlyMapService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";;;;;;;AAOA;;;;;;AAKA,MACaA,gBAAgB;EAIzBC,YACYC,OAAuB,EACvBC,wBAAkD,EAClDC,WAA0B,EAC3BC,gBAAkC;IAHjC,YAAO,GAAPH,OAAO;IACP,6BAAwB,GAAxBC,wBAAwB;IACxB,gBAAW,GAAXC,WAAW;IACZ,qBAAgB,GAAhBC,gBAAgB;IAPlB,eAAU,GAAG,YAAY;IAU/B,IAAI,CAACC,YAAY,GAAG,IAAIC,mBAAY,EAAE;EAEzC;EAEA;EACA;EACAC,eAAe,CAACC,MAA2B;IACvCC,OAAO,CAACC,GAAG,CAAC,cAAc,EAAEF,MAAM,CAAC;IACnC,OAAOA,MAAM,CAACG,GAAG,CAAEC,CAAC,IAAI;MACpBH,OAAO,CAACC,GAAG,CAAC,cAAc,EAAEE,CAAC,CAACC,UAAU,CAAC;MACzCD,CAAC,CAACC,UAAU,CAACC,OAAO,CAAEC,QAAQ,IAAI;QAC9B,IAAIA,QAAQ,CAACC,GAAG,KAAK,eAAe,EAAE;UAClCD,QAAQ,CAACE,IAAI,GAAG,QAAQ;UACxBF,QAAQ,CAACG,KAAK,CAACC,OAAO,GAAG,IAAI,CAAChB,WAAW,CAACiB,IAAI,CAAC,mBAAmB,CAAC,CAACC,IAAI,CAAC,cAAG,EAAEC,IAAS,IACnFA,IAAI,CAAC,CAAC,CAAC,CAACX,GAAG,CAAEY,CAAM,KAAM;YACrBC,KAAK,EAAED,CAAC,CAACE,MAAM;YACfC,KAAK,EAAEH,CAAC,CAACG,KAAK,CAAC,OAAO;WACzB,CAAC,CAAC,CAAC,CAAC;;MAEjB,CAAC,CAAC;MAEF,OAAOd,CAAC;IACZ,CAAC,CAAC;EACN;EAEAe,UAAU,CAACC,KAAU;IACjB;IACA,IAAGA,KAAK,EAAC;MACL,KAAK,MAAM,CAACC,CAAC,EAAEC,CAAC,CAAC,IAAIC,MAAM,CAACC,OAAO,CAACJ,KAAK,CAAC,EAAE;QACxC,IAAGE,CAAC,KAAKG,SAAS,IAAIH,CAAC,KAAK,IAAI,EAAC;UAC7BF,KAAK,CAACC,CAAC,CAAC,GAAG,IAAI;SAClB,MAAI;UACD,KAAI,MAAM,CAACK,MAAM,EAAEC,MAAM,CAAC,IAAIJ,MAAM,CAACC,OAAO,CAACF,CAAC,CAAC,EAAC;YAC5C,IAAIK,MAAM,YAAYC,IAAI,EAAE;cACxB,MAAMC,EAAE,GAAG,IAAI,CAACjC,gBAAgB,CAACkC,aAAa,CAACH,MAAM,CAACI,YAAY,EAAE,EAAE,IAAI,CAACC,UAAU,CAAC;cACtF/B,OAAO,CAACC,GAAG,CAAC,aAAa,EAAE2B,EAAE,CAAC;cAC9BT,KAAK,CAACC,CAAC,CAAC,CAACK,MAAM,CAAC,GAAGG,EAAE;;;;;;IAS1C,OAAOT,KAAK;EACf;EAEAa,WAAW;IACP,MAAM,IAAIC,KAAK,CAAC,yBAAyB,CAAC;EAC9C;;AA9DJC;;mBACa5C,gBAAgB;AAAA;;SAAhBA,gBAAgB;EAAA6C,SAAhB7C,gBAAgB;EAAA8C,YADH;AAAM","names":["FormlyMapService","constructor","ns2Http","applicationConfigService","codeService","dateUtilsService","subscription","rxjs_1","mapOptionFields","fields","console","log","map","f","fieldGroup","forEach","innerGrp","key","type","props","options","gets","pipe","data","s","value","codeId","label","buildModel","model","k","v","Object","entries","undefined","innerK","innerV","Date","ds","formatStrDate","toDateString","dateFormat","ngOnDestroy","Error","exports","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\D1347074\\Desktop\\projects 2\\nspayiiapp\\src\\main\\webapp\\app\\shared\\service\\formly-map.service.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-unsafe-return */\r\n\r\nimport { Injectable, OnDestroy } from \"@angular/core\";\r\nimport { FormlyFieldConfig } from \"@ngx-formly/core\";\r\nimport { ApplicationConfigService } from \"app/core/config/application-config.service\";\r\nimport { DateUtilsService } from \"app/core/util/date-utils.service\";\r\nimport { IcCodeService } from \"app/ng-connect\";\r\nimport { map, Subscription } from \"rxjs\";\r\nimport { Ns2HttpService } from \"./ns2-http.service\";\r\n\r\n\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class FormlyMapService implements OnDestroy {\r\n    readonly dateFormat = \"DD-MM-YYYY\";\r\n    private subscription: Subscription;\r\n\r\n    constructor(\r\n        private ns2Http: Ns2HttpService,\r\n        private applicationConfigService: ApplicationConfigService,\r\n        private codeService: IcCodeService,\r\n        public dateUtilsService: DateUtilsService\r\n\r\n        ){\r\n       this.subscription = new Subscription();\r\n\r\n    }\r\n\r\n    // Bind an observable to the option fields.\r\n    //can map on either frontend or backend\r\n    mapOptionFields(fields: FormlyFieldConfig[]) {\r\n        console.log(\"inner fields\", fields);\r\n        return fields.map((f) => {\r\n            console.log(\"the fieldgrp\", f.fieldGroup);\r\n            f.fieldGroup.forEach((innerGrp) => {\r\n                if (innerGrp.key === 'seClaimOption') {\r\n                    innerGrp.type = 'select';\r\n                    innerGrp.props.options = this.codeService.gets('claim_option_long').pipe(map((data: any) =>\r\n                        data[0].map((s: any) => ({\r\n                            value: s.codeId,\r\n                            label: s.label['en-US'] as string\r\n                        }))))\r\n                }\r\n            })\r\n\r\n            return f;\r\n        });\r\n    }\r\n\r\n    buildModel(model: any): any{\r\n        //replace undefined values  with null\r\n        if(model){\r\n            for (const [k, v] of Object.entries(model)) {\r\n                if(v === undefined || v === null){\r\n                    model[k] = null;\r\n                }else{\r\n                    for(const [innerK, innerV] of Object.entries(v)){\r\n                        if (innerV instanceof Date) {\r\n                            const ds = this.dateUtilsService.formatStrDate(innerV.toDateString(), this.dateFormat);\r\n                            console.log(\"date string\", ds);\r\n                            model[k][innerK] = ds;\r\n                        }\r\n\r\n                    }\r\n                }\r\n\r\n\r\n            }\r\n        }\r\n       return model;\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}