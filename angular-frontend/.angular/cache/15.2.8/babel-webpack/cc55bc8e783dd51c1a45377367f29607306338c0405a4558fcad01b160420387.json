{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CABService = void 0;\nconst tslib_1 = require(\"tslib\");\nconst i0 = tslib_1.__importStar(require(\"@angular/core\"));\nconst i1 = tslib_1.__importStar(require(\"app/shared/service/ns2-http.service\"));\nconst i2 = tslib_1.__importStar(require(\"app/core/config/application-config.service\"));\nclass CABService {\n  constructor(ns2HttpService, applicationConfigService) {\n    this.ns2HttpService = ns2HttpService;\n    this.applicationConfigService = applicationConfigService;\n    this.resourceUrl = this.applicationConfigService.getEndpointFor('api/enquiry/cab');\n  }\n  getCABRecord(csnOrNric) {\n    const url = `${this.resourceUrl}/${csnOrNric}`;\n    return this.ns2HttpService.get(url);\n  }\n  updateCABRecord(requestBody) {\n    const url = `${this.resourceUrl}/update`;\n    return this.ns2HttpService.put(url, requestBody);\n  }\n  getCABIndicators(csnOrNric) {\n    const url = `${this.resourceUrl}/indicators/${csnOrNric}`;\n    return this.ns2HttpService.get(url);\n  }\n}\nexports.CABService = CABService;\nCABService.ɵfac = function CABService_Factory(t) {\n  return new (t || CABService)(i0.ɵɵinject(i1.Ns2HttpService), i0.ɵɵinject(i2.ApplicationConfigService));\n};\nCABService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: CABService,\n  factory: CABService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";;;;;;;;;;AAKA,MAGaA,UAAU;EAIrBC,YACUC,cAA8B,EAC9BC,wBAAkD;IADlD,mBAAc,GAAdD,cAAc;IACd,6BAAwB,GAAxBC,wBAAwB;IAJ3B,gBAAW,GAAG,IAAI,CAACA,wBAAwB,CAACC,cAAc,CAAC,iBAAiB,CAAC;EAKhF;EAEGC,YAAY,CAACC,SAAiB;IACnC,MAAMC,GAAG,GAAE,GAAG,IAAI,CAACC,WAAW,IAAIF,SAAS,EAAE;IAC7C,OAAO,IAAI,CAACJ,cAAc,CAACO,GAAG,CAACF,GAAG,CAAC;EACrC;EAEOG,eAAe,CAACC,WAAgB;IACrC,MAAMJ,GAAG,GAAG,GAAG,IAAI,CAACC,WAAW,SAAS;IACxC,OAAO,IAAI,CAACN,cAAc,CAACU,GAAG,CAACL,GAAG,EAAEI,WAAW,CAAC;EAClD;EAEOE,gBAAgB,CAACP,SAAiB;IACvC,MAAMC,GAAG,GAAE,GAAG,IAAI,CAACC,WAAW,eAAeF,SAAS,EAAE;IACxD,OAAO,IAAI,CAACJ,cAAc,CAACO,GAAG,CAACF,GAAG,CAAC;EACrC;;AAzBFO;;mBAGad,UAAU;AAAA;;SAAVA,UAAU;EAAAe,SAAVf,UAAU;EAAAgB,YAFT;AAAM","names":["CABService","constructor","ns2HttpService","applicationConfigService","getEndpointFor","getCABRecord","csnOrNric","url","resourceUrl","get","updateCABRecord","requestBody","put","getCABIndicators","exports","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\D1347074\\Desktop\\projects 2\\nspayiiapp\\src\\main\\webapp\\app\\enquiry\\caution-alert-block\\service\\cab.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { ApplicationConfigService } from 'app/core/config/application-config.service';\r\nimport { Ns2HttpService } from 'app/shared/service/ns2-http.service';\r\nimport { Observable } from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class CABService {\r\n\r\n  public resourceUrl = this.applicationConfigService.getEndpointFor('api/enquiry/cab');\r\n\r\n  constructor(\r\n    private ns2HttpService: Ns2HttpService,\r\n    private applicationConfigService: ApplicationConfigService\r\n  ) { }\r\n\r\n  public getCABRecord(csnOrNric: string): Observable<any>{\r\n    const url =`${this.resourceUrl}/${csnOrNric}`;\r\n    return this.ns2HttpService.get(url);\r\n  }\r\n\r\n  public updateCABRecord(requestBody: any): Observable<any>{\r\n    const url = `${this.resourceUrl}/update`;\r\n    return this.ns2HttpService.put(url, requestBody);\r\n  }\r\n\r\n  public getCABIndicators(csnOrNric: string): Observable<any>{\r\n    const url =`${this.resourceUrl}/indicators/${csnOrNric}`;\r\n    return this.ns2HttpService.get(url);\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}