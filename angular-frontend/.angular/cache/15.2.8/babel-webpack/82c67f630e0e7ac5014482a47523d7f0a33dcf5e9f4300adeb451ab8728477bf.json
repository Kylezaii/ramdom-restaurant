{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.RefundService = void 0;\nconst tslib_1 = require(\"tslib\");\nconst i0 = tslib_1.__importStar(require(\"@angular/core\"));\nconst i1 = tslib_1.__importStar(require(\"@angular/common/http\"));\nconst i2 = tslib_1.__importStar(require(\"app/core/config/application-config.service\"));\nconst i3 = tslib_1.__importStar(require(\"app/shared/service/ns2-http.service\"));\nclass RefundService {\n  constructor(http, applicationConfigService, ns2Http) {\n    this.http = http;\n    this.applicationConfigService = applicationConfigService;\n    this.ns2Http = ns2Http;\n    this.resourceUrl = this.applicationConfigService.getEndpointFor('/api/payment/overpayment/refund');\n  }\n  getByNSman(selectedId) {\n    const url = \"assets/mock/payment/nsman-refund-history.json\";\n    return this.http.get(url, {\n      observe: 'response'\n    });\n  }\n  getByNric(nric, options) {\n    const url = `${this.resourceUrl}/nsman/${nric}`;\n    return this.ns2Http.get(url, options);\n  }\n  getAllByCsn(csn, options) {\n    const url = `${this.resourceUrl}/company/${csn}`;\n    return this.ns2Http.get(url, options);\n  }\n  getById(id) {\n    const url = `${this.resourceUrl}/${id}`;\n    return this.ns2Http.get(url);\n  }\n  createRefundAuto(body) {\n    const url = `${this.resourceUrl}/auto`;\n    return this.ns2Http.post(url, body);\n  }\n  getPendingApprovalByNric(nric) {\n    const url = `${this.resourceUrl}/nsman/${nric}/approval`;\n    return this.ns2Http.get(url);\n  }\n  getPendingInvApprovalByNric(nric) {\n    const url = `${this.resourceUrl}/nsman/${nric}/approval/invalidate`;\n    return this.ns2Http.get(url);\n  }\n  getPendingApprovalByCsn(csn) {\n    const url = `${this.resourceUrl}/company/${csn}/approval`;\n    return this.ns2Http.get(url);\n  }\n  getPendingInvApprovalByCsn(csn) {\n    const url = `${this.resourceUrl}/company/${csn}/approval/invalidate`;\n    return this.ns2Http.get(url);\n  }\n  createRefundManual(body) {\n    const url = `${this.resourceUrl}/manual`;\n    return this.ns2Http.post(url, body);\n  }\n  postRefundApproval(nric, approvalList) {\n    const url = `${this.resourceUrl}/nsman/${nric}/approval`;\n    return this.ns2Http.post(url, approvalList);\n  }\n  postInvRefundApproval(nric, approvalList) {\n    const url = `${this.resourceUrl}/nsman/${nric}/approval/invalidate`;\n    return this.ns2Http.post(url, approvalList);\n  }\n  postInvalidate(request) {\n    const url = `${this.resourceUrl}/invalidate`;\n    return this.ns2Http.post(url, request);\n  }\n}\nexports.RefundService = RefundService;\nRefundService.ɵfac = function RefundService_Factory(t) {\n  return new (t || RefundService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.ApplicationConfigService), i0.ɵɵinject(i3.Ns2HttpService));\n};\nRefundService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: RefundService,\n  factory: RefundService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["RefundService","constructor","http","applicationConfigService","ns2Http","getEndpointFor","getByNSman","selectedId","url","get","observe","getByNric","nric","options","resourceUrl","getAllByCsn","csn","getById","id","createRefundAuto","body","post","getPendingApprovalByNric","getPendingInvApprovalByNric","getPendingApprovalByCsn","getPendingInvApprovalByCsn","createRefundManual","postRefundApproval","approvalList","postInvRefundApproval","postInvalidate","request","exports","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\D1347074\\Desktop\\projects 2\\nspayiiapp\\src\\main\\webapp\\app\\payment\\overpayment\\service\\refund-history.service.ts"],"sourcesContent":["import {Injectable} from '@angular/core';\r\nimport {HttpClient, HttpResponse} from '@angular/common/http';\r\nimport {Observable} from 'rxjs';\r\nimport {ApplicationConfigService} from 'app/core/config/application-config.service';\r\nimport {IRefundHistory} from '../refund-history/refund-history.model';\r\nimport {Ns2HttpService} from 'app/shared/service/ns2-http.service';\r\n\r\nexport type EntityResponseType = HttpResponse<IRefundHistory>;\r\nexport type EntityArrayResponseType = HttpResponse<IRefundHistory[]>;\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class RefundService {\r\n  public resourceUrl = this.applicationConfigService.getEndpointFor('/api/payment/overpayment/refund');\r\n\r\n  constructor(protected http: HttpClient,\r\n    private applicationConfigService: ApplicationConfigService,\r\n    private ns2Http: Ns2HttpService) {}\r\n\r\n  getByNSman(selectedId: string): Observable<EntityArrayResponseType> {\r\n    const url = \"assets/mock/payment/nsman-refund-history.json\";\r\n    return this.http.get<IRefundHistory[]>(url, { observe: 'response' });\r\n  }\r\n\r\n  getByNric(nric: string, options?: any): Observable<any> {\r\n    const url = `${this.resourceUrl}/nsman/${nric}`;\r\n    return this.ns2Http.get(url, options);\r\n  }\r\n\r\n  getAllByCsn(csn: string, options?: any): Observable<any> {\r\n    const url = `${this.resourceUrl}/company/${csn}`;\r\n    return this.ns2Http.get(url, options);\r\n  }\r\n\r\n  getById(id: string): Observable<any> {\r\n    const url = `${this.resourceUrl}/${id}`;\r\n    return this.ns2Http.get(url);\r\n  }\r\n\r\n  createRefundAuto(body: any): Observable<any> {\r\n    const url = `${this.resourceUrl}/auto`;\r\n    return this.ns2Http.post(url, body);\r\n  }\r\n\r\n  getPendingApprovalByNric(nric: string): Observable<any> {\r\n    const url = `${this.resourceUrl}/nsman/${nric}/approval`;\r\n    return this.ns2Http.get(url);\r\n  }\r\n\r\n  getPendingInvApprovalByNric(nric: string): Observable<any> {\r\n    const url = `${this.resourceUrl}/nsman/${nric}/approval/invalidate`;\r\n    return this.ns2Http.get(url);\r\n  }\r\n\r\n  getPendingApprovalByCsn(csn: string): Observable<any> {\r\n    const url = `${this.resourceUrl}/company/${csn}/approval`;\r\n    return this.ns2Http.get(url);\r\n  }\r\n\r\n  getPendingInvApprovalByCsn(csn: string): Observable<any> {\r\n    const url = `${this.resourceUrl}/company/${csn}/approval/invalidate`;\r\n    return this.ns2Http.get(url);\r\n  }\r\n\r\n  createRefundManual(body: any): Observable<any> {\r\n    const url = `${this.resourceUrl}/manual`;\r\n    return this.ns2Http.post(url, body);\r\n  }\r\n\r\n  postRefundApproval(nric: string, approvalList: {overpaymentRefundId: string, approve: boolean}[]): Observable<any> {\r\n    const url = `${this.resourceUrl}/nsman/${nric}/approval`;\r\n    return this.ns2Http.post(url, approvalList);\r\n  }\r\n\r\n  postInvRefundApproval(nric: string, approvalList: {overpaymentRefundId: string, approve: boolean}[]): Observable<any> {\r\n    const url = `${this.resourceUrl}/nsman/${nric}/approval/invalidate`;\r\n    return this.ns2Http.post(url, approvalList);\r\n  }\r\n\r\n  postInvalidate(request: any): Observable<any> {\r\n    const url = `${this.resourceUrl}/invalidate`;\r\n    return this.ns2Http.post(url, request);\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}