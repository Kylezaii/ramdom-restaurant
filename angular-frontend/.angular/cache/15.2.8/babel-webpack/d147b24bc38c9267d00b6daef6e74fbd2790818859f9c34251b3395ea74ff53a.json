{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TemplateService = void 0;\nconst tslib_1 = require(\"tslib\");\nconst operators_1 = require(\"rxjs/operators\");\nconst app_constants_1 = require(\"../../../app.constants\");\nconst request_util_1 = require(\"app/core/request/request-util\");\nconst i0 = tslib_1.__importStar(require(\"@angular/core\"));\nconst i1 = tslib_1.__importStar(require(\"@angular/common/http\"));\nclass TemplateService {\n  constructor(http) {\n    this.http = http;\n    this.resourceUrl = app_constants_1.SERVER_API_URL + 'api/reports';\n    this.url = app_constants_1.SERVER_API_URL + 'api/reports/templateFileUpload';\n  }\n  create(template) {\n    const copy = this.convert(template);\n    return this.http.post(this.resourceUrl, copy, {\n      observe: 'response'\n    }).pipe((0, operators_1.map)(res => this.convertResponse(res)));\n  }\n  update(template) {\n    const copy = this.convert(template);\n    return this.http.put(this.resourceUrl, copy, {\n      observe: 'response'\n    }).pipe((0, operators_1.map)(res => this.convertResponse(res)));\n  }\n  find(id) {\n    return this.http.get(`${this.resourceUrl}/${id}`, {\n      observe: 'response'\n    }).pipe((0, operators_1.map)(res => this.convertResponse(res)));\n  }\n  generateReport(id, outputFormat) {\n    return this.http.get(`${this.resourceUrl}/${id}/${outputFormat}`, {\n      observe: 'response'\n    }).pipe((0, operators_1.map)(res => this.convertResponse(res)));\n  }\n  upLoadFile(formData) {\n    return this.http.post(this.url, formData, {\n      observe: 'response'\n    }).pipe((0, operators_1.map)(res => this.convertResponse(res)));\n  }\n  query(req) {\n    const options = (0, request_util_1.createRequestOption)(req);\n    return this.http.get(this.resourceUrl, {\n      params: options,\n      observe: 'response'\n    }).pipe((0, operators_1.map)(res => this.convertArrayResponse(res)));\n  }\n  delete(id) {\n    return this.http.delete(`${this.resourceUrl}/${id}`, {\n      observe: 'response'\n    });\n  }\n  convertResponse(res) {\n    const body = this.convertItemFromServer(res.body);\n    return res.clone({\n      body\n    });\n  }\n  convertArrayResponse(res) {\n    const jsonResponse = res.body;\n    const body = [];\n    for (let i = 0; i < jsonResponse.length; i++) {\n      body.push(this.convertItemFromServer(jsonResponse[i]));\n    }\n    return res.clone({\n      body\n    });\n  }\n  /**\r\n   * Convert a returned JSON object to Template.\r\n   */\n  convertItemFromServer(template) {\n    const copy = Object.assign({}, template);\n    return copy;\n  }\n  /**\r\n   * Convert a Template to a JSON which can be sent to the server.\r\n   */\n  convert(template) {\n    const copy = Object.assign({}, template);\n    return copy;\n  }\n}\nexports.TemplateService = TemplateService;\nTemplateService.ɵfac = function TemplateService_Factory(t) {\n  return new (t || TemplateService)(i0.ɵɵinject(i1.HttpClient));\n};\nTemplateService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: TemplateService,\n  factory: TemplateService.ɵfac\n});","map":{"version":3,"mappings":"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","names":["TemplateService","constructor","http","app_constants_1","create","template","copy","convert","post","resourceUrl","observe","pipe","res","convertResponse","update","put","find","id","get","generateReport","outputFormat","upLoadFile","formData","url","query","req","options","params","convertArrayResponse","delete","body","convertItemFromServer","clone","jsonResponse","i","length","push","Object","assign","exports","factory"],"sourceRoot":"","sources":["C:\\Users\\D1347074\\Desktop\\projects 2\\nspayiiapp\\src\\main\\webapp\\app\\admin\\report\\report-template\\template.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpResponse } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { SERVER_API_URL } from '../../../app.constants';\r\nimport { Template } from './template.model';\r\nimport { createRequestOption } from 'app/core/request/request-util';\r\nexport type EntityResponseType = HttpResponse<Template>;\r\n\r\n@Injectable()\r\nexport class TemplateService {\r\n  private resourceUrl = SERVER_API_URL + 'api/reports';\r\n  private url = SERVER_API_URL + 'api/reports/templateFileUpload';\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  create(template: Template): Observable<EntityResponseType> {\r\n    const copy = this.convert(template);\r\n    return this.http\r\n      .post<Template>(this.resourceUrl, copy, { observe: 'response' })\r\n      .pipe(map((res: EntityResponseType) => this.convertResponse(res)));\r\n  }\r\n\r\n  update(template: Template): Observable<EntityResponseType> {\r\n    const copy = this.convert(template);\r\n    return this.http\r\n      .put<Template>(this.resourceUrl, copy, { observe: 'response' })\r\n      .pipe(map((res: EntityResponseType) => this.convertResponse(res)));\r\n  }\r\n\r\n  find(id: number): Observable<EntityResponseType> {\r\n    return this.http\r\n      .get<Template>(`${this.resourceUrl}/${id}`, { observe: 'response' })\r\n      .pipe(map((res: EntityResponseType) => this.convertResponse(res)));\r\n  }\r\n\r\n  generateReport(id: number, outputFormat: string): Observable<HttpResponse<any>> {\r\n    return this.http\r\n      .get<any>(`${this.resourceUrl}/${id}/${outputFormat}`, { observe: 'response' })\r\n      .pipe(map((res: EntityResponseType) => this.convertResponse(res)));\r\n  }\r\n  upLoadFile(formData: any): Observable<HttpResponse<any>> {\r\n    return this.http\r\n      .post<Template>(this.url, formData, { observe: 'response' })\r\n      .pipe(map((res: EntityResponseType) => this.convertResponse(res)));\r\n  }\r\n  query(req?: any): Observable<HttpResponse<Template[]>> {\r\n    const options = createRequestOption(req);\r\n    return this.http\r\n      .get<Template[]>(this.resourceUrl, { params: options, observe: 'response' })\r\n      .pipe(map((res: HttpResponse<Template[]>) => this.convertArrayResponse(res)));\r\n  }\r\n\r\n  delete(id: number): Observable<HttpResponse<any>> {\r\n    return this.http.delete<any>(`${this.resourceUrl}/${id}`, { observe: 'response' });\r\n  }\r\n\r\n  private convertResponse(res: EntityResponseType): EntityResponseType {\r\n    const body: Template = this.convertItemFromServer(res.body as any);\r\n    return res.clone({ body });\r\n  }\r\n\r\n  private convertArrayResponse(res: HttpResponse<Template[]>): HttpResponse<Template[]> {\r\n    const jsonResponse: Template[] = res.body as any;\r\n    const body: Template[] = [];\r\n    for (let i = 0; i < jsonResponse.length; i++) {\r\n      body.push(this.convertItemFromServer(jsonResponse[i]));\r\n    }\r\n    return res.clone({ body });\r\n  }\r\n\r\n  /**\r\n   * Convert a returned JSON object to Template.\r\n   */\r\n  private convertItemFromServer(template: Template): Template {\r\n    const copy: Template = Object.assign({}, template);\r\n    return copy;\r\n  }\r\n\r\n  /**\r\n   * Convert a Template to a JSON which can be sent to the server.\r\n   */\r\n  private convert(template: Template): Template {\r\n    const copy: Template = Object.assign({}, template);\r\n    return copy;\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}