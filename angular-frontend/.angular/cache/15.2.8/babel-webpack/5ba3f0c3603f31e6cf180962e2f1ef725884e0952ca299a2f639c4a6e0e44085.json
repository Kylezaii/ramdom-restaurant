{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CloneService = void 0;\nconst tslib_1 = require(\"tslib\");\nconst forms_1 = require(\"@angular/forms\");\nconst i0 = tslib_1.__importStar(require(\"@angular/core\"));\nclass CloneService {\n  deepClone(obj, hash = new WeakMap()) {\n    // Do not try to clone primitives or functions\n    if (Object(obj) !== obj || obj instanceof Function) return obj;\n    if (hash.has(obj)) return hash.get(obj); // Cyclic reference\n    let result;\n    try {\n      result = new obj.constructor();\n    } catch (e) {\n      result = Object.create(Object.getPrototypeOf(obj));\n    }\n    if (obj instanceof Map) Array.from(obj, ([key, val]) => result.set(this.deepClone(key, hash), this.deepClone(val, hash)));else if (obj instanceof Set) Array.from(obj, key => result.add(this.deepClone(key, hash)));\n    hash.set(obj, result);\n    return Object.assign(result, ...Object.keys(obj).map(key => ({\n      [key]: this.deepClone(obj[key], hash)\n    })));\n  }\n  deepCloneFormControlValuesOnly(control) {\n    if (control instanceof forms_1.FormControl) {\n      return new forms_1.FormControl(control.value);\n    } else if (control instanceof forms_1.FormGroup) {\n      const copy = new forms_1.FormGroup({});\n      Object.keys(control.controls).forEach(key => {\n        copy.addControl(key, this.deepCloneFormControlValuesOnly(control.controls[key]));\n      });\n      return copy;\n    } else if (control instanceof forms_1.FormArray) {\n      const copy = new forms_1.FormArray([]);\n      control.controls.forEach(formArrayControl => {\n        copy.push(this.deepCloneFormControlValuesOnly(formArrayControl));\n      });\n      return copy;\n    } else {\n      throw new Error('Error: unexpected control value');\n    }\n  }\n  deepCloneFormControlValuesAndValidators(control) {\n    if (control instanceof forms_1.FormControl) {\n      return new forms_1.FormControl(control.value, control.validator, control.asyncValidator);\n    } else if (control instanceof forms_1.FormGroup) {\n      const copy = new forms_1.FormGroup({}, control.validator, control.asyncValidator);\n      Object.keys(control.controls).forEach(key => {\n        copy.addControl(key, this.deepCloneFormControlValuesAndValidators(control.controls[key]));\n      });\n      return copy;\n    } else if (control instanceof forms_1.FormArray) {\n      const copy = new forms_1.FormArray([], control.validator, control.asyncValidator);\n      control.controls.forEach(formArrayControl => {\n        copy.push(this.deepCloneFormControlValuesAndValidators(formArrayControl));\n      });\n      return copy;\n    } else {\n      throw new Error('Error: unexpected control value');\n    }\n  }\n}\nexports.CloneService = CloneService;\nCloneService.ɵfac = function CloneService_Factory(t) {\n  return new (t || CloneService)();\n};\nCloneService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: CloneService,\n  factory: CloneService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["CloneService","deepClone","obj","hash","WeakMap","Object","Function","has","get","result","constructor","e","create","getPrototypeOf","Map","Array","from","key","val","set","Set","add","assign","keys","map","deepCloneFormControlValuesOnly","control","forms_1","value","copy","controls","forEach","addControl","formArrayControl","push","Error","deepCloneFormControlValuesAndValidators","validator","asyncValidator","exports","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\D1347074\\Desktop\\projects 2\\nspayiiapp\\src\\main\\webapp\\app\\core\\util\\clone.service.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-unsafe-return */\r\nimport { Injectable } from \"@angular/core\";\r\nimport {AbstractControl, FormArray, FormControl, FormGroup} from \"@angular/forms\";\r\n\r\n\r\n@Injectable({\r\n    providedIn: 'root',\r\n  })\r\n  export class CloneService {\r\n\r\n    public deepClone(obj: any, hash = new WeakMap()): any {\r\n        // Do not try to clone primitives or functions\r\n        if (Object(obj) !== obj || obj instanceof Function) return obj;\r\n        if (hash.has(obj)) return hash.get(obj); // Cyclic reference\r\n        let result: any;\r\n        try {\r\n            result = new obj.constructor();\r\n        } catch(e) {\r\n            result = Object.create(Object.getPrototypeOf(obj));\r\n        }\r\n        if (obj instanceof Map)\r\n            Array.from(obj, ([key, val]) => result.set(this.deepClone(key, hash),\r\n                                                       this.deepClone(val, hash)) );\r\n        else if (obj instanceof Set)\r\n            Array.from(obj, (key:any) => result.add(this.deepClone(key, hash)) );\r\n        hash.set(obj, result);\r\n        return Object.assign(result, ...Object.keys(obj).map (\r\n            key => ({ [key]: this.deepClone(obj[key], hash) }) ));\r\n    }\r\n\r\n  deepCloneFormControlValuesOnly(control: AbstractControl) : AbstractControl {\r\n    if (control instanceof FormControl) {\r\n      return new FormControl(control.value);\r\n    } else if (control instanceof FormGroup) {\r\n      const copy = new FormGroup({});\r\n      Object.keys(control.controls).forEach(key => {\r\n        copy.addControl(key, this.deepCloneFormControlValuesOnly(control.controls[key]));\r\n      });\r\n      return copy;\r\n    } else if (control instanceof FormArray) {\r\n      const copy = new FormArray([]);\r\n      control.controls.forEach(formArrayControl => {\r\n        copy.push(this.deepCloneFormControlValuesOnly(formArrayControl));\r\n      })\r\n      return copy;\r\n    }  else {\r\n      throw new Error('Error: unexpected control value');\r\n    }\r\n  }\r\n\r\n  deepCloneFormControlValuesAndValidators(control: AbstractControl) : AbstractControl {\r\n    if (control instanceof FormControl) {\r\n      return new FormControl(control.value, control.validator, control.asyncValidator);\r\n    } else if (control instanceof FormGroup) {\r\n      const copy = new FormGroup({}, control.validator, control.asyncValidator);\r\n      Object.keys(control.controls).forEach(key => {\r\n        copy.addControl(key, this.deepCloneFormControlValuesAndValidators(control.controls[key]));\r\n      });\r\n      return copy;\r\n    } else if (control instanceof FormArray) {\r\n      const copy = new FormArray([], control.validator, control.asyncValidator);\r\n      control.controls.forEach(formArrayControl => {\r\n        copy.push(this.deepCloneFormControlValuesAndValidators(formArrayControl));\r\n      })\r\n      return copy;\r\n    }  else {\r\n      throw new Error('Error: unexpected control value');\r\n    }\r\n  }\r\n\r\n  }\r\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}