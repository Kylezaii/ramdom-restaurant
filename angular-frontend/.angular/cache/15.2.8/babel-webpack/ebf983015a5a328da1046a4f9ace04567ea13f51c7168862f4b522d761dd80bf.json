{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ParamPopupService = void 0;\nconst tslib_1 = require(\"tslib\");\nconst param_model_1 = require(\"./param.model\");\nconst i0 = tslib_1.__importStar(require(\"@angular/core\"));\nconst i1 = tslib_1.__importStar(require(\"@ng-bootstrap/ng-bootstrap\"));\nconst i2 = tslib_1.__importStar(require(\"@angular/router\"));\nconst i3 = tslib_1.__importStar(require(\"./param.service\"));\nclass ParamPopupService {\n  constructor(modalService, router, paramService) {\n    this.modalService = modalService;\n    this.router = router;\n    this.paramService = paramService;\n    this.ngbModalRef = null;\n  }\n  open(component, appId, paramKey) {\n    return new Promise(resolve => {\n      // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n      const isOpen = this.ngbModalRef !== null;\n      if (isOpen) {\n        resolve(this.ngbModalRef);\n      }\n      if (appId && paramKey) {\n        this.paramService.find(appId, paramKey).subscribe(param => {\n          if (param) {\n            this.paramService.getParamTypes().forEach(paramType => {\n              if (param.paramType === paramType.codeId) {\n                param.paramTypeDesc = paramType.label;\n              }\n            });\n          }\n          this.ngbModalRef = this.paramModalRef(component, param);\n          resolve(this.ngbModalRef);\n        });\n      } else {\n        // setTimeout used as a workaround for getting ExpressionChangedAfterItHasBeenCheckedError\n        setTimeout(() => {\n          this.ngbModalRef = this.paramModalRef(component, new param_model_1.ParamModel());\n          resolve(this.ngbModalRef);\n        }, 0);\n      }\n    });\n  }\n  paramModalRef(component, param) {\n    const modalRef = this.modalService.open(component, {\n      size: 'lg',\n      backdrop: 'static'\n    });\n    modalRef.componentInstance.param = param;\n    modalRef.result.then(() => {\n      this.router.navigate([{\n        outlets: {\n          popup: null\n        }\n      }], {\n        replaceUrl: true\n      });\n      this.ngbModalRef = null;\n    }, () => {\n      this.router.navigate([{\n        outlets: {\n          popup: null\n        }\n      }], {\n        replaceUrl: true\n      });\n      this.ngbModalRef = null;\n    });\n    return modalRef;\n  }\n}\nexports.ParamPopupService = ParamPopupService;\nParamPopupService.ɵfac = function ParamPopupService_Factory(t) {\n  return new (t || ParamPopupService)(i0.ɵɵinject(i1.NgbModal), i0.ɵɵinject(i2.Router), i0.ɵɵinject(i3.ParamService));\n};\nParamPopupService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ParamPopupService,\n  factory: ParamPopupService.ɵfac\n});","map":{"version":3,"mappings":";;;;;;;AAIA;;;;;AAEA,MACaA,iBAAiB;EAG5BC,YAAoBC,YAAsB,EAAUC,MAAc,EAAUC,YAA0B;IAAlF,iBAAY,GAAZF,YAAY;IAAoB,WAAM,GAANC,MAAM;IAAkB,iBAAY,GAAZC,YAAY;IACtF,IAAI,CAACC,WAAW,GAAG,IAAW;EAChC;EAEAC,IAAI,CAACC,SAAoB,EAAEC,KAAoB,EAAEC,QAAuB;IACtE,OAAO,IAAIC,OAAO,CAAcC,OAAO,IAAG;MACxC;MACA,MAAMC,MAAM,GAAG,IAAI,CAACP,WAAW,KAAK,IAAI;MACxC,IAAIO,MAAM,EAAE;QACVD,OAAO,CAAC,IAAI,CAACN,WAAW,CAAC;;MAE3B,IAAIG,KAAK,IAAIC,QAAQ,EAAE;QACrB,IAAI,CAACL,YAAY,CAACS,IAAI,CAACL,KAAK,EAAEC,QAAQ,CAAC,CAACK,SAAS,CAAEC,KAAU,IAAI;UAC/D,IAAIA,KAAK,EAAE;YACT,IAAI,CAACX,YAAY,CAACY,aAAa,EAAE,CAACC,OAAO,CAAEC,SAAc,IAAI;cAC3D,IAAIH,KAAK,CAACG,SAAS,KAAKA,SAAS,CAACC,MAAM,EAAE;gBACxCJ,KAAK,CAACK,aAAa,GAAGF,SAAS,CAACG,KAAK;;YAEzC,CAAC,CAAC;;UAEJ,IAAI,CAAChB,WAAW,GAAG,IAAI,CAACiB,aAAa,CAACf,SAAS,EAAEQ,KAAK,CAAC;UACvDJ,OAAO,CAAC,IAAI,CAACN,WAAW,CAAC;QAC3B,CAAC,CAAC;OACH,MAAM;QACL;QACAkB,UAAU,CAAC,MAAK;UACd,IAAI,CAAClB,WAAW,GAAG,IAAI,CAACiB,aAAa,CAACf,SAAS,EAAE,IAAIiB,wBAAU,EAAE,CAAC;UAClEb,OAAO,CAAC,IAAI,CAACN,WAAW,CAAC;QAC3B,CAAC,EAAE,CAAC,CAAC;;IAET,CAAC,CAAC;EACJ;EAEAiB,aAAa,CAACf,SAAoB,EAAEQ,KAAiB;IACnD,MAAMU,QAAQ,GAAG,IAAI,CAACvB,YAAY,CAACI,IAAI,CAACC,SAAS,EAAE;MAAEmB,IAAI,EAAE,IAAI;MAAEC,QAAQ,EAAE;IAAQ,CAAE,CAAC;IACtFF,QAAQ,CAACG,iBAAiB,CAACb,KAAK,GAAGA,KAAK;IACxCU,QAAQ,CAACI,MAAM,CAACC,IAAI,CAClB,MAAK;MACH,IAAI,CAAC3B,MAAM,CAAC4B,QAAQ,CAAC,CAAC;QAAEC,OAAO,EAAE;UAAEC,KAAK,EAAE;QAAI;MAAE,CAAE,CAAC,EAAE;QAAEC,UAAU,EAAE;MAAI,CAAE,CAAC;MAC1E,IAAI,CAAC7B,WAAW,GAAG,IAAW;IAChC,CAAC,EACD,MAAK;MACH,IAAI,CAACF,MAAM,CAAC4B,QAAQ,CAAC,CAAC;QAAEC,OAAO,EAAE;UAAEC,KAAK,EAAE;QAAI;MAAE,CAAE,CAAC,EAAE;QAAEC,UAAU,EAAE;MAAI,CAAE,CAAC;MAC1E,IAAI,CAAC7B,WAAW,GAAG,IAAW;IAChC,CAAC,CACF;IACD,OAAOoB,QAAQ;EACjB;;AAnDFU;;mBACanC,iBAAiB;AAAA;;SAAjBA,iBAAiB;EAAAoC,SAAjBpC,iBAAiB;AAAA","names":["ParamPopupService","constructor","modalService","router","paramService","ngbModalRef","open","component","appId","paramKey","Promise","resolve","isOpen","find","subscribe","param","getParamTypes","forEach","paramType","codeId","paramTypeDesc","label","paramModalRef","setTimeout","param_model_1","modalRef","size","backdrop","componentInstance","result","then","navigate","outlets","popup","replaceUrl","exports","factory"],"sourceRoot":"","sources":["C:\\Users\\D1347074\\Desktop\\projects 2\\nspayiiapp\\src\\main\\webapp\\app\\admin\\param-admin\\param\\param-popup.service.ts"],"sourcesContent":["import { Injectable, Component } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { NgbModal, NgbModalRef } from '@ng-bootstrap/ng-bootstrap';\r\nimport { ParamService } from './param.service';\r\nimport { ParamModel } from './param.model';\r\n\r\n@Injectable()\r\nexport class ParamPopupService {\r\n  private ngbModalRef: NgbModalRef;\r\n\r\n  constructor(private modalService: NgbModal, private router: Router, private paramService: ParamService) {\r\n    this.ngbModalRef = null as any;\r\n  }\r\n\r\n  open(component: Component, appId?: number | any, paramKey?: number | any): Promise<NgbModalRef> {\r\n    return new Promise<NgbModalRef>(resolve => {\r\n      // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\r\n      const isOpen = this.ngbModalRef !== null;\r\n      if (isOpen) {\r\n        resolve(this.ngbModalRef);\r\n      }\r\n      if (appId && paramKey) {\r\n        this.paramService.find(appId, paramKey).subscribe((param: any) => {\r\n          if (param) {\r\n            this.paramService.getParamTypes().forEach((paramType: any) => {\r\n              if (param.paramType === paramType.codeId) {\r\n                param.paramTypeDesc = paramType.label;\r\n              }\r\n            });\r\n          }\r\n          this.ngbModalRef = this.paramModalRef(component, param);\r\n          resolve(this.ngbModalRef);\r\n        });\r\n      } else {\r\n        // setTimeout used as a workaround for getting ExpressionChangedAfterItHasBeenCheckedError\r\n        setTimeout(() => {\r\n          this.ngbModalRef = this.paramModalRef(component, new ParamModel());\r\n          resolve(this.ngbModalRef);\r\n        }, 0);\r\n      }\r\n    });\r\n  }\r\n\r\n  paramModalRef(component: Component, param: ParamModel): NgbModalRef {\r\n    const modalRef = this.modalService.open(component, { size: 'lg', backdrop: 'static' });\r\n    modalRef.componentInstance.param = param;\r\n    modalRef.result.then(\r\n      () => {\r\n        this.router.navigate([{ outlets: { popup: null } }], { replaceUrl: true });\r\n        this.ngbModalRef = null as any;\r\n      },\r\n      () => {\r\n        this.router.navigate([{ outlets: { popup: null } }], { replaceUrl: true });\r\n        this.ngbModalRef = null as any;\r\n      }\r\n    );\r\n    return modalRef;\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}