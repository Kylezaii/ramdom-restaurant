{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.UserService = void 0;\nconst tslib_1 = require(\"tslib\");\nconst operators_1 = require(\"rxjs/operators\");\nconst dayjs_1 = tslib_1.__importDefault(require(\"dayjs\"));\nconst request_util_1 = require(\"app/core/request/request-util\");\nconst app_constants_1 = require(\"../../../app.constants\");\nconst i0 = tslib_1.__importStar(require(\"@angular/core\"));\nconst i1 = tslib_1.__importStar(require(\"@angular/common/http\"));\nclass UserService {\n  constructor(http) {\n    this.http = http;\n    this.userUrl = app_constants_1.SERVER_API_URL + 'api/users';\n    this.assignedRolesUrl = this.userUrl + '/assignedRoles';\n    this.unAssignRolesUrl = this.userUrl + '/unAssignRoles';\n    this.searchUnAssignedRolesUrl = this.userUrl + '/search/unAssignedRoles';\n    this.assignRolesUrl = this.userUrl + '/assignRoles';\n    this.assignedGroupsUrl = this.userUrl + '/assignedGroups';\n    this.unAssignGroupsUrl = this.userUrl + '/unAssignGroups';\n    this.searchUnAssignedGroupsUrl = this.userUrl + '/search/unAssignedGroups';\n    this.assignGroupsUrl = this.userUrl + '/assignGroups';\n    this.resetPasswordUrl = this.userUrl + '/resetPassword';\n  }\n  create(user) {\n    const copy = this.convert(user);\n    return this.http.post(this.userUrl, copy).pipe((0, operators_1.map)(res => {\n      const jsonResponse = res.body;\n      return this.convertItemFromServer(jsonResponse);\n    }));\n  }\n  update(user) {\n    const copy = this.convert(user);\n    return this.http.put(this.userUrl, copy, {\n      observe: 'response'\n    }).pipe((0, operators_1.map)(res => {\n      const jsonResponse = res.body;\n      return this.convertItemFromServer(jsonResponse);\n    }));\n  }\n  find(id) {\n    return this.http.get(`${this.userUrl}/${id}`, {\n      observe: 'response'\n    }).pipe((0, operators_1.map)(res => {\n      const jsonResponse = res.body;\n      return this.convertItemFromServer(jsonResponse);\n    }));\n  }\n  query(req) {\n    const params = (0, request_util_1.createRequestOption)(req);\n    return this.http.get(this.userUrl, {\n      params,\n      observe: 'response'\n    }).pipe((0, operators_1.map)(res => this.convertArrayResponse(res)));\n  }\n  findAllAssignedRoles(id) {\n    return this.http.get(`${this.assignedRolesUrl}/${id}`, {\n      observe: 'response'\n    }).pipe((0, operators_1.map)(res => this.convertArrayResponse(res)));\n  }\n  unAssignRoles(id, resources) {\n    return this.http.put(`${this.unAssignRolesUrl}/${id}`, resources, {\n      observe: 'response'\n    });\n  }\n  searchUnAssignedRoles(req) {\n    const params = (0, request_util_1.createRequestOption)(req);\n    return this.http.get(this.searchUnAssignedRolesUrl, {\n      params,\n      observe: 'response'\n    }).pipe((0, operators_1.map)(res => this.convertArrayResponse(res)));\n  }\n  assignRoles(id, roles) {\n    return this.http.put(`${this.assignRolesUrl}/${id}`, roles, {\n      observe: 'response'\n    });\n  }\n  findAllAssignedGroups(id) {\n    return this.http.get(`${this.assignedGroupsUrl}/${id}`, {\n      observe: 'response'\n    }).pipe((0, operators_1.map)(res => this.convertArrayResponse(res)));\n  }\n  unAssignGroups(id, groups) {\n    return this.http.put(`${this.unAssignGroupsUrl}/${id}`, groups, {\n      observe: 'response'\n    });\n  }\n  searchUnAssignedGroups(req) {\n    const params = (0, request_util_1.createRequestOption)(req);\n    return this.http.get(this.searchUnAssignedGroupsUrl, {\n      params,\n      observe: 'response'\n    }).pipe((0, operators_1.map)(res => this.convertArrayResponse(res)));\n  }\n  assignGroups(id, groups) {\n    return this.http.put(`${this.assignGroupsUrl}/${id}`, groups, {\n      observe: 'response'\n    });\n  }\n  resetPassword(loginName) {\n    return this.http.post(`${this.resetPasswordUrl}`, loginName, {\n      observe: 'response'\n    });\n  }\n  convertArrayResponse(res) {\n    const jsonResponse = res.body;\n    const body = [];\n    if (jsonResponse) {\n      for (let i = 0; i < jsonResponse.length; i++) {\n        body.push(this.convertItemFromServer(jsonResponse[i]));\n      }\n    }\n    return res.clone({\n      body\n    });\n  }\n  convertItemFromServer(entity) {\n    const copy = Object.assign({}, entity);\n    copy.effectiveDt = copy.effectiveDt ? (0, dayjs_1.default)(copy.effectiveDt) : undefined;\n    copy.expiryDt = copy.expiryDt ? (0, dayjs_1.default)(copy.expiryDt) : undefined;\n    return copy;\n  }\n  convert(user) {\n    return Object.assign({}, user, {\n      effectiveDt: user.effectiveDt ? (0, dayjs_1.default)(user.effectiveDt).format('DD/MM/YYYY') : undefined,\n      expiryDt: user.expiryDt ? (0, dayjs_1.default)(user.expiryDt).format('DD/MM/YYYY') : undefined\n    });\n  }\n}\nexports.UserService = UserService;\nUserService.ɵfac = function UserService_Factory(t) {\n  return new (t || UserService)(i0.ɵɵinject(i1.HttpClient));\n};\nUserService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: UserService,\n  factory: UserService.ɵfac\n});","map":{"version":3,"mappings":"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","names":["UserService","constructor","http","app_constants_1","userUrl","create","user","copy","convert","post","pipe","res","jsonResponse","body","convertItemFromServer","update","put","observe","find","id","get","query","req","params","convertArrayResponse","findAllAssignedRoles","assignedRolesUrl","unAssignRoles","resources","unAssignRolesUrl","searchUnAssignedRoles","searchUnAssignedRolesUrl","assignRoles","roles","assignRolesUrl","findAllAssignedGroups","assignedGroupsUrl","unAssignGroups","groups","unAssignGroupsUrl","searchUnAssignedGroups","searchUnAssignedGroupsUrl","assignGroups","assignGroupsUrl","resetPassword","loginName","resetPasswordUrl","i","length","push","clone","entity","Object","assign","effectiveDt","undefined","expiryDt","format","exports","factory"],"sourceRoot":"","sources":["C:\\Users\\D1347074\\Desktop\\projects 2\\nspayiiapp\\src\\main\\webapp\\app\\admin\\access-control\\user\\user.service.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-unsafe-return */\r\nimport { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpParams, HttpResponse } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport dayjs from 'dayjs';\r\nimport { Subject } from './user.model';\r\nimport { createRequestOption } from 'app/core/request/request-util';\r\nimport { Resource } from '../resource/resource.model';\r\nimport { Group } from '../group/group.model';\r\nimport { SERVER_API_URL } from '../../../app.constants';\r\n\r\n@Injectable()\r\nexport class UserService {\r\n  private userUrl = SERVER_API_URL + 'api/users';\r\n\r\n  private assignedRolesUrl = this.userUrl + '/assignedRoles';\r\n  private unAssignRolesUrl = this.userUrl + '/unAssignRoles';\r\n  private searchUnAssignedRolesUrl = this.userUrl + '/search/unAssignedRoles';\r\n  private assignRolesUrl = this.userUrl + '/assignRoles';\r\n\r\n  private assignedGroupsUrl = this.userUrl + '/assignedGroups';\r\n  private unAssignGroupsUrl = this.userUrl + '/unAssignGroups';\r\n  private searchUnAssignedGroupsUrl = this.userUrl + '/search/unAssignedGroups';\r\n  private assignGroupsUrl = this.userUrl + '/assignGroups';\r\n  private resetPasswordUrl = this.userUrl + '/resetPassword';\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  create(user: Subject): Observable<Subject> {\r\n    const copy = this.convert(user);\r\n    return this.http.post(this.userUrl, copy).pipe(\r\n      map((res: any) => {\r\n        const jsonResponse = res.body;\r\n        return this.convertItemFromServer(jsonResponse);\r\n      })\r\n    );\r\n  }\r\n\r\n  update(user: Subject): Observable<Subject> {\r\n    const copy = this.convert(user);\r\n    return this.http.put(this.userUrl, copy, { observe: 'response' }).pipe(\r\n      map((res: HttpResponse<any>) => {\r\n        const jsonResponse = res.body;\r\n        return this.convertItemFromServer(jsonResponse);\r\n      })\r\n    );\r\n  }\r\n\r\n  find(id: string | number): Observable<Subject> {\r\n    return this.http.get(`${this.userUrl}/${id}`, { observe: 'response' }).pipe(\r\n      map((res: HttpResponse<any>) => {\r\n        const jsonResponse = res.body;\r\n        return this.convertItemFromServer(jsonResponse);\r\n      })\r\n    );\r\n  }\r\n\r\n  query(req?: any): Observable<HttpResponse<any>> {\r\n    const params: HttpParams = createRequestOption(req);\r\n    return this.http\r\n      .get(this.userUrl, { params, observe: 'response' })\r\n      .pipe(map((res: HttpResponse<any>) => this.convertArrayResponse(res)));\r\n  }\r\n\r\n  findAllAssignedRoles(id: string): Observable<HttpResponse<any>> {\r\n    return this.http\r\n      .get(`${this.assignedRolesUrl}/${id}`, { observe: 'response' })\r\n      .pipe(map((res: HttpResponse<any>) => this.convertArrayResponse(res)));\r\n  }\r\n\r\n  unAssignRoles(id: string, resources: Resource[]): Observable<HttpResponse<any>> {\r\n    return this.http.put(`${this.unAssignRolesUrl}/${id}`, resources, { observe: 'response' });\r\n  }\r\n\r\n  searchUnAssignedRoles(req?: any): any {\r\n    const params: HttpParams = createRequestOption(req);\r\n    return this.http\r\n      .get(this.searchUnAssignedRolesUrl, { params, observe: 'response' })\r\n      .pipe(map((res: HttpResponse<any>) => this.convertArrayResponse(res)));\r\n  }\r\n\r\n  assignRoles(id: string, roles: Resource[]): Observable<HttpResponse<any>> {\r\n    return this.http.put(`${this.assignRolesUrl}/${id}`, roles, { observe: 'response' });\r\n  }\r\n\r\n  findAllAssignedGroups(id: string): Observable<HttpResponse<any>> {\r\n    return this.http\r\n      .get(`${this.assignedGroupsUrl}/${id}`, { observe: 'response' })\r\n      .pipe(map((res: HttpResponse<any>) => this.convertArrayResponse(res)));\r\n  }\r\n\r\n  unAssignGroups(id: string, groups: Group[]): Observable<HttpResponse<any>> {\r\n    return this.http.put(`${this.unAssignGroupsUrl}/${id}`, groups, { observe: 'response' });\r\n  }\r\n\r\n  searchUnAssignedGroups(req?: any): any {\r\n    const params: HttpParams = createRequestOption(req);\r\n    return this.http\r\n      .get(this.searchUnAssignedGroupsUrl, { params, observe: 'response' })\r\n      .pipe(map((res: HttpResponse<any>) => this.convertArrayResponse(res)));\r\n  }\r\n\r\n  assignGroups(id: string, groups: Group[]): Observable<HttpResponse<any>> {\r\n    return this.http.put(`${this.assignGroupsUrl}/${id}`, groups, { observe: 'response' });\r\n  }\r\n\r\n  resetPassword(loginName: string): Observable<HttpResponse<any>> {\r\n    return this.http.post(`${this.resetPasswordUrl}`, loginName, { observe: 'response' });\r\n  }\r\n\r\n  private convertArrayResponse(res: HttpResponse<any[]>): HttpResponse<any[]> {\r\n    const jsonResponse: any[] | null = res.body;\r\n    const body: any[] = [];\r\n    if (jsonResponse) {\r\n      for (let i = 0; i < jsonResponse.length; i++) {\r\n        body.push(this.convertItemFromServer(jsonResponse[i]));\r\n      }\r\n    }\r\n    return res.clone({ body });\r\n  }\r\n\r\n  private convertItemFromServer(entity: any): any {\r\n    const copy: Subject = Object.assign({}, entity);\r\n    copy.effectiveDt = copy.effectiveDt ? dayjs(copy.effectiveDt) : undefined;\r\n    copy.expiryDt = copy.expiryDt ? dayjs(copy.expiryDt) : undefined;\r\n    return copy;\r\n  }\r\n\r\n  private convert(user: Subject): Subject {\r\n    return Object.assign({}, user, {\r\n      effectiveDt: user.effectiveDt ? dayjs(user.effectiveDt).format('DD/MM/YYYY') : undefined,\r\n      expiryDt: user.expiryDt ? dayjs(user.expiryDt).format('DD/MM/YYYY') : undefined,\r\n    });\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}