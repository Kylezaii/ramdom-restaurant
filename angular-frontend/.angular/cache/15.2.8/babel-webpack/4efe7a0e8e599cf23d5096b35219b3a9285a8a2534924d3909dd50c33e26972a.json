{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AlertErrorComponent = void 0;\nconst tslib_1 = require(\"tslib\");\nconst i0 = tslib_1.__importStar(require(\"@angular/core\"));\nconst i1 = tslib_1.__importStar(require(\"app/core/util/alert.service\"));\nconst i2 = tslib_1.__importStar(require(\"app/core/util/event-manager.service\"));\nconst i3 = tslib_1.__importStar(require(\"@ngx-translate/core\"));\nconst i4 = tslib_1.__importStar(require(\"@angular/common\"));\nconst i5 = tslib_1.__importStar(require(\"@ng-bootstrap/ng-bootstrap\"));\nfunction AlertErrorComponent_div_2_ngb_alert_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r5 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"ngb-alert\", 4);\n    i0.ɵɵlistener(\"closed\", function AlertErrorComponent_div_2_ngb_alert_2_Template_ngb_alert_closed_0_listener() {\n      i0.ɵɵrestoreView(_r5);\n      const alert_r1 = i0.ɵɵnextContext().$implicit;\n      const ctx_r3 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r3.close(alert_r1));\n    });\n    i0.ɵɵtext(1, \"\\n      \");\n    i0.ɵɵelement(2, \"pre\", 5);\n    i0.ɵɵtext(3, \"\\n    \");\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const alert_r1 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵproperty(\"type\", alert_r1.type);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"innerHTML\", alert_r1.message, i0.ɵɵsanitizeHtml);\n  }\n}\nfunction AlertErrorComponent_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 2);\n    i0.ɵɵtext(1, \"\\n    \");\n    i0.ɵɵtemplate(2, AlertErrorComponent_div_2_ngb_alert_2_Template, 4, 2, \"ngb-alert\", 3);\n    i0.ɵɵtext(3, \"\\n  \");\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const alert_r1 = ctx.$implicit;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngClass\", ctx_r0.setClasses(alert_r1));\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", alert_r1.message);\n  }\n}\nclass AlertErrorComponent {\n  constructor(alertService, eventManager, translateService) {\n    this.alertService = alertService;\n    this.eventManager = eventManager;\n    this.alerts = [];\n    this.errorListener = eventManager.subscribe('nspay2App.error', response => {\n      const errorResponse = response.content;\n      this.addErrorAlert(errorResponse.message, errorResponse.key, errorResponse.params);\n    });\n    this.httpErrorListener = eventManager.subscribe('nspay2App.httpError', response => {\n      const httpErrorResponse = response.content;\n      switch (httpErrorResponse.status) {\n        // connection refused, server not reachable\n        case 0:\n          this.addErrorAlert('Server not reachable', 'error.server.not.reachable');\n          break;\n        case 400:\n          {\n            const arr = httpErrorResponse.headers.keys();\n            let errorHeader = null;\n            let entityKey = null;\n            for (const entry of arr) {\n              if (entry.toLowerCase().endsWith('app-error')) {\n                errorHeader = httpErrorResponse.headers.get(entry);\n              } else if (entry.toLowerCase().endsWith('app-params')) {\n                entityKey = httpErrorResponse.headers.get(entry);\n              }\n            }\n            if (errorHeader) {\n              const alertData = entityKey ? {\n                entityName: translateService.instant(`global.menu.entities.${entityKey}`)\n              } : undefined;\n              this.addErrorAlert(errorHeader, errorHeader, alertData);\n            } else if (httpErrorResponse.error !== '' && httpErrorResponse.error.fieldErrors) {\n              const fieldErrors = httpErrorResponse.error.fieldErrors;\n              for (const fieldError of fieldErrors) {\n                if (['Min', 'Max', 'DecimalMin', 'DecimalMax'].includes(fieldError.message)) {\n                  fieldError.message = 'Size';\n                }\n                // convert 'something[14].other[4].id' to 'something[].other[].id' so translations can be written to it\n                const convertedField = fieldError.field.replace(/\\[\\d*\\]/g, '[]');\n                const fieldName = translateService.instant(`nspay2App.${fieldError.objectName}.${convertedField}`);\n                this.addErrorAlert(`Error on field \"${fieldName}\"`, `error.${fieldError.message}`, {\n                  fieldName\n                });\n              }\n            } else if (httpErrorResponse.error !== '' && httpErrorResponse.error.message) {\n              this.addErrorAlert(httpErrorResponse.error.detail ?? httpErrorResponse.error.message, httpErrorResponse.error.message, httpErrorResponse.error.params);\n            } else {\n              this.addErrorAlert(httpErrorResponse.error, httpErrorResponse.error);\n            }\n            break;\n          }\n        case 404:\n          this.addErrorAlert('Not found', 'error.url.not.found');\n          break;\n        default:\n          if (httpErrorResponse.error !== '' && httpErrorResponse.error.message) {\n            this.addErrorAlert(httpErrorResponse.error.detail ?? httpErrorResponse.error.message, httpErrorResponse.error.message, httpErrorResponse.error.params);\n          } else {\n            this.addErrorAlert(httpErrorResponse.error, httpErrorResponse.error);\n          }\n      }\n    });\n  }\n  setClasses(alert) {\n    const classes = {\n      'jhi-toast': Boolean(alert.toast)\n    };\n    if (alert.position) {\n      return {\n        ...classes,\n        [alert.position]: true\n      };\n    }\n    return classes;\n  }\n  ngOnDestroy() {\n    this.eventManager.destroy(this.errorListener);\n    this.eventManager.destroy(this.httpErrorListener);\n  }\n  close(alert) {\n    alert.close?.(this.alerts);\n  }\n  addErrorAlert(message, translationKey, translationParams) {\n    this.alertService.addAlert({\n      type: 'danger',\n      message,\n      translationKey,\n      translationParams\n    }, this.alerts);\n  }\n}\nexports.AlertErrorComponent = AlertErrorComponent;\nAlertErrorComponent.ɵfac = function AlertErrorComponent_Factory(t) {\n  return new (t || AlertErrorComponent)(i0.ɵɵdirectiveInject(i1.AlertService), i0.ɵɵdirectiveInject(i2.EventManager), i0.ɵɵdirectiveInject(i3.TranslateService));\n};\nAlertErrorComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: AlertErrorComponent,\n  selectors: [[\"ic-alert-error\"]],\n  decls: 5,\n  vars: 1,\n  consts: [[\"role\", \"alert\", 1, \"alerts\"], [3, \"ngClass\", 4, \"ngFor\", \"ngForOf\"], [3, \"ngClass\"], [3, \"type\", \"closed\", 4, \"ngIf\"], [3, \"type\", \"closed\"], [3, \"innerHTML\"]],\n  template: function AlertErrorComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0);\n      i0.ɵɵtext(1, \"\\n  \");\n      i0.ɵɵtemplate(2, AlertErrorComponent_div_2_Template, 4, 2, \"div\", 1);\n      i0.ɵɵtext(3, \"\\n\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(4, \"\\n\");\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngForOf\", ctx.alerts);\n    }\n  },\n  dependencies: [i4.NgClass, i4.NgForOf, i4.NgIf, i5.NgbAlert],\n  encapsulation: 2\n});","map":{"version":3,"mappings":"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","names":["i0","AlertErrorComponent","constructor","alertService","eventManager","translateService","errorListener","subscribe","response","errorResponse","content","addErrorAlert","message","key","params","httpErrorListener","httpErrorResponse","status","arr","headers","keys","errorHeader","entityKey","entry","toLowerCase","endsWith","get","alertData","entityName","instant","undefined","error","fieldErrors","fieldError","includes","convertedField","field","replace","fieldName","objectName","detail","setClasses","alert","classes","Boolean","toast","position","ngOnDestroy","destroy","close","alerts","translationKey","translationParams","addAlert","type","exports","selectors","decls","vars","consts","template"],"sourceRoot":"","sources":["C:\\Users\\D1347074\\Desktop\\projects 2\\nspayiiapp\\src\\main\\webapp\\app\\shared\\alert\\alert-error.component.html","C:\\Users\\D1347074\\Desktop\\projects 2\\nspayiiapp\\src\\main\\webapp\\app\\shared\\alert\\alert-error.component.ts"],"sourcesContent":["<div class=\"alerts\" role=\"alert\">\r\n  <div *ngFor=\"let alert of alerts\" [ngClass]=\"setClasses(alert)\">\r\n    <ngb-alert *ngIf=\"alert.message\" [type]=\"alert.type\" (closed)=\"close(alert)\">\r\n      <pre [innerHTML]=\"alert.message\"></pre>\r\n    </ngb-alert>\r\n  </div>\r\n</div>\r\n","import { Component, OnDestroy } from '@angular/core';\r\nimport { HttpErrorResponse } from '@angular/common/http';\r\nimport { Subscription } from 'rxjs';\r\nimport { TranslateService } from '@ngx-translate/core';\r\n\r\nimport { AlertError } from './alert-error.model';\r\nimport { Alert, AlertService } from 'app/core/util/alert.service';\r\nimport { EventManager, EventWithContent } from 'app/core/util/event-manager.service';\r\n\r\n@Component({\r\n  selector: 'ic-alert-error',\r\n  templateUrl: './alert-error.component.html',\r\n})\r\nexport class AlertErrorComponent implements OnDestroy {\r\n  alerts: Alert[] = [];\r\n  errorListener: Subscription;\r\n  httpErrorListener: Subscription;\r\n\r\n  constructor(private alertService: AlertService, private eventManager: EventManager, translateService: TranslateService) {\r\n    this.errorListener = eventManager.subscribe('nspay2App.error', (response: EventWithContent<unknown> | string) => {\r\n      const errorResponse = (response as EventWithContent<AlertError>).content;\r\n      this.addErrorAlert(errorResponse.message, errorResponse.key, errorResponse.params);\r\n    });\r\n\r\n    this.httpErrorListener = eventManager.subscribe(\r\n      'nspay2App.httpError',\r\n      (response: EventWithContent<unknown> | string) => {\r\n        const httpErrorResponse = (response as EventWithContent<HttpErrorResponse>).content;\r\n        switch (httpErrorResponse.status) {\r\n          // connection refused, server not reachable\r\n          case 0:\r\n            this.addErrorAlert('Server not reachable', 'error.server.not.reachable');\r\n            break;\r\n\r\n          case 400: {\r\n            const arr = httpErrorResponse.headers.keys();\r\n            let errorHeader: string | null = null;\r\n            let entityKey: string | null = null;\r\n            for (const entry of arr) {\r\n              if (entry.toLowerCase().endsWith('app-error')) {\r\n                errorHeader = httpErrorResponse.headers.get(entry);\r\n              } else if (entry.toLowerCase().endsWith('app-params')) {\r\n                entityKey = httpErrorResponse.headers.get(entry);\r\n              }\r\n            }\r\n            if (errorHeader) {\r\n              const alertData = entityKey ? { entityName: translateService.instant(`global.menu.entities.${entityKey}`) } : undefined;\r\n              this.addErrorAlert(errorHeader, errorHeader, alertData);\r\n            } else if (httpErrorResponse.error !== '' && httpErrorResponse.error.fieldErrors) {\r\n              const fieldErrors = httpErrorResponse.error.fieldErrors;\r\n              for (const fieldError of fieldErrors) {\r\n                if (['Min', 'Max', 'DecimalMin', 'DecimalMax'].includes(fieldError.message)) {\r\n                  fieldError.message = 'Size';\r\n                }\r\n                // convert 'something[14].other[4].id' to 'something[].other[].id' so translations can be written to it\r\n                const convertedField: string = fieldError.field.replace(/\\[\\d*\\]/g, '[]');\r\n                const fieldName: string = translateService.instant(\r\n                  `nspay2App.${fieldError.objectName as string}.${convertedField}`\r\n                );\r\n                this.addErrorAlert(`Error on field \"${fieldName}\"`, `error.${fieldError.message as string}`, { fieldName });\r\n              }\r\n            } else if (httpErrorResponse.error !== '' && httpErrorResponse.error.message) {\r\n              this.addErrorAlert(\r\n                httpErrorResponse.error.detail ?? httpErrorResponse.error.message,\r\n                httpErrorResponse.error.message,\r\n                httpErrorResponse.error.params\r\n              );\r\n            } else {\r\n              this.addErrorAlert(httpErrorResponse.error, httpErrorResponse.error);\r\n            }\r\n            break;\r\n          }\r\n\r\n          case 404:\r\n            this.addErrorAlert('Not found', 'error.url.not.found');\r\n            break;\r\n\r\n          default:\r\n            if (httpErrorResponse.error !== '' && httpErrorResponse.error.message) {\r\n              this.addErrorAlert(\r\n                httpErrorResponse.error.detail ?? httpErrorResponse.error.message,\r\n                httpErrorResponse.error.message,\r\n                httpErrorResponse.error.params\r\n              );\r\n            } else {\r\n              this.addErrorAlert(httpErrorResponse.error, httpErrorResponse.error);\r\n            }\r\n        }\r\n      }\r\n    );\r\n  }\r\n\r\n  setClasses(alert: Alert): { [key: string]: boolean } {\r\n    const classes = { 'jhi-toast': Boolean(alert.toast) };\r\n    if (alert.position) {\r\n      return { ...classes, [alert.position]: true };\r\n    }\r\n    return classes;\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.eventManager.destroy(this.errorListener);\r\n    this.eventManager.destroy(this.httpErrorListener);\r\n  }\r\n\r\n  close(alert: Alert): void {\r\n    alert.close?.(this.alerts);\r\n  }\r\n\r\n  private addErrorAlert(message?: string, translationKey?: string, translationParams?: { [key: string]: unknown }): void {\r\n    this.alertService.addAlert({ type: 'danger', message, translationKey, translationParams }, this.alerts);\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}