{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.UserIdleService = void 0;\nconst tslib_1 = require(\"tslib\");\nconst core_1 = require(\"@ng-idle/core\");\nconst time_out_dialog_component_1 = require(\"./time-out-dialog.component\");\nconst user_idle_dialog_component_1 = require(\"./user-idle-dialog.component\");\nconst i0 = tslib_1.__importStar(require(\"@angular/core\"));\nconst i1 = tslib_1.__importStar(require(\"@ng-bootstrap/ng-bootstrap\"));\nconst i2 = tslib_1.__importStar(require(\"@ng-idle/core\"));\nconst i3 = tslib_1.__importStar(require(\"app/core/auth/account.service\"));\nconst i4 = tslib_1.__importStar(require(\"app/login/login.service\"));\nclass UserIdleService {\n  constructor(modalService, idle, accountService, loginService) {\n    this.modalService = modalService;\n    this.idle = idle;\n    this.accountService = accountService;\n    this.loginService = loginService;\n    this.sessionTimeoutIdle = 300;\n  }\n  setUserIdle() {\n    if (!this.idle.isRunning() && !this.idle.isIdling()) {\n      this.setSessionTimoutMin();\n    } else {\n      this.resetUserIdle();\n    }\n  }\n  openUserIdle(component) {\n    return new Promise(resolve => {\n      const isOpen = this.ngbModalRef;\n      if (isOpen) {\n        resolve(this.ngbModalRef);\n      }\n      // setTimeout used as a workaround for getting ExpressionChangedAfterItHasBeenCheckedError\n      setTimeout(() => {\n        this.ngbModalRef = this.userIdleModalRef(component);\n        resolve(this.ngbModalRef);\n      }, 0);\n    });\n  }\n  userIdleModalRef(component) {\n    const modalRef = this.modalService.open(component, {\n      size: 'lg',\n      backdrop: 'static'\n    });\n    modalRef.result.then(() => {\n      this.ngbModalRef = null;\n    }, () => {\n      this.ngbModalRef = null;\n    });\n    return modalRef;\n  }\n  resetUserIdle() {\n    this.idle.watch();\n  }\n  setSessionTimoutMin() {\n    this.accountService.getSessionTimeoutMin().subscribe(res => {\n      this.sessionTimeoutMin = +res.body[0];\n      this.sessionTimeoutIdle = +res.body[1];\n      this.idle.setIdle(this.sessionTimeoutMin - this.sessionTimeoutIdle);\n      this.idle.setTimeout(this.sessionTimeoutIdle);\n      this.idle.setInterrupts(core_1.DEFAULT_INTERRUPTSOURCES);\n      this.idle.onTimeout.subscribe(() => {\n        if (this.idleModalRef) {\n          this.idleModalRef.dismiss('cancel');\n        }\n        this.openUserIdle(time_out_dialog_component_1.TimeOutDialogComponent).then(() => {\n          this.loginService.logout();\n        });\n      });\n      this.idle.onTimeoutWarning.subscribe(countdown => {\n        if (countdown === this.sessionTimeoutIdle) {\n          this.openUserIdle(user_idle_dialog_component_1.UserIdleDialogComponent).then(ngbModalRef => {\n            this.idleModalRef = ngbModalRef;\n          });\n        }\n      });\n      this.resetUserIdle();\n    });\n  }\n}\nexports.UserIdleService = UserIdleService;\nUserIdleService.ɵfac = function UserIdleService_Factory(t) {\n  return new (t || UserIdleService)(i0.ɵɵinject(i1.NgbModal), i0.ɵɵinject(i2.Idle), i0.ɵɵinject(i3.AccountService), i0.ɵɵinject(i4.LoginService));\n};\nUserIdleService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: UserIdleService,\n  factory: UserIdleService.ɵfac\n});","map":{"version":3,"mappings":"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","names":["UserIdleService","constructor","modalService","idle","accountService","loginService","setUserIdle","isRunning","isIdling","setSessionTimoutMin","resetUserIdle","openUserIdle","component","Promise","resolve","isOpen","ngbModalRef","setTimeout","userIdleModalRef","modalRef","open","size","backdrop","result","then","watch","getSessionTimeoutMin","subscribe","res","sessionTimeoutMin","body","sessionTimeoutIdle","setIdle","setInterrupts","core_1","onTimeout","idleModalRef","dismiss","time_out_dialog_component_1","logout","onTimeoutWarning","countdown","user_idle_dialog_component_1","exports","factory"],"sourceRoot":"","sources":["C:\\Users\\D1347074\\Desktop\\projects 2\\nspayiiapp\\src\\main\\webapp\\app\\login\\user-idle.service.ts"],"sourcesContent":["import { Injectable, Component } from '@angular/core';\r\nimport { NgbModal, NgbModalRef } from '@ng-bootstrap/ng-bootstrap';\r\nimport { Idle, DEFAULT_INTERRUPTSOURCES } from '@ng-idle/core';\r\nimport { TimeOutDialogComponent } from './time-out-dialog.component';\r\nimport { UserIdleDialogComponent } from './user-idle-dialog.component';\r\nimport { AccountService } from 'app/core/auth/account.service';\r\nimport { LoginService } from 'app/login/login.service';\r\nimport { HttpResponse } from '@angular/common/http';\r\n\r\n@Injectable()\r\nexport class UserIdleService {\r\n  sessionTimeoutMin?: number;\r\n  sessionTimeoutIdle: any = 300;\r\n  private ngbModalRef?: NgbModalRef;\r\n  private idleModalRef?: NgbModalRef;\r\n\r\n  constructor(\r\n    private modalService: NgbModal,\r\n    private idle: Idle,\r\n    private accountService: AccountService,\r\n    private loginService: LoginService\r\n  ) {}\r\n\r\n  setUserIdle(): void {\r\n    if (!this.idle.isRunning() && !this.idle.isIdling()) {\r\n      this.setSessionTimoutMin();\r\n    } else {\r\n      this.resetUserIdle();\r\n    }\r\n  }\r\n\r\n  private openUserIdle(component: Component): Promise<NgbModalRef> {\r\n    return new Promise<NgbModalRef>(resolve => {\r\n      const isOpen = this.ngbModalRef;\r\n      if (isOpen) {\r\n        resolve(this.ngbModalRef);\r\n      }\r\n      // setTimeout used as a workaround for getting ExpressionChangedAfterItHasBeenCheckedError\r\n      setTimeout(() => {\r\n        this.ngbModalRef = this.userIdleModalRef(component);\r\n        resolve(this.ngbModalRef);\r\n      }, 0);\r\n    });\r\n  }\r\n\r\n  private userIdleModalRef(component: Component): NgbModalRef {\r\n    const modalRef = this.modalService.open(component, { size: 'lg', backdrop: 'static' });\r\n    modalRef.result.then(\r\n      () => {\r\n        this.ngbModalRef = null as any;\r\n      },\r\n      () => {\r\n        this.ngbModalRef = null as any;\r\n      }\r\n    );\r\n    return modalRef;\r\n  }\r\n\r\n  private resetUserIdle(): void {\r\n    this.idle.watch();\r\n  }\r\n\r\n  private setSessionTimoutMin(): void {\r\n    this.accountService.getSessionTimeoutMin().subscribe((res: HttpResponse<any>) => {\r\n      this.sessionTimeoutMin = +res.body[0];\r\n      this.sessionTimeoutIdle = +res.body[1];\r\n      this.idle.setIdle(this.sessionTimeoutMin - this.sessionTimeoutIdle);\r\n      this.idle.setTimeout(this.sessionTimeoutIdle);\r\n      this.idle.setInterrupts(DEFAULT_INTERRUPTSOURCES);\r\n      this.idle.onTimeout.subscribe(() => {\r\n        if (this.idleModalRef) {\r\n          this.idleModalRef.dismiss('cancel');\r\n        }\r\n        this.openUserIdle(TimeOutDialogComponent as Component).then(() => {\r\n          this.loginService.logout();\r\n        });\r\n      });\r\n      this.idle.onTimeoutWarning.subscribe((countdown: any) => {\r\n        if (countdown === this.sessionTimeoutIdle) {\r\n          this.openUserIdle(UserIdleDialogComponent as Component).then(ngbModalRef => {\r\n            this.idleModalRef = ngbModalRef;\r\n          });\r\n        }\r\n      });\r\n      this.resetUserIdle();\r\n    });\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}