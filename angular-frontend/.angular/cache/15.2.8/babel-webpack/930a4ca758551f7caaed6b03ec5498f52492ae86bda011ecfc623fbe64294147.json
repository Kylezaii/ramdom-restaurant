{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AuthExpiredInterceptor = void 0;\nconst tslib_1 = require(\"tslib\");\nconst operators_1 = require(\"rxjs/operators\");\nconst i0 = tslib_1.__importStar(require(\"@angular/core\"));\nconst i1 = tslib_1.__importStar(require(\"app/login/login.service\"));\nconst i2 = tslib_1.__importStar(require(\"app/core/auth/state-storage.service\"));\nconst i3 = tslib_1.__importStar(require(\"@angular/router\"));\nconst i4 = tslib_1.__importStar(require(\"app/core/auth/account.service\"));\nclass AuthExpiredInterceptor {\n  constructor(loginService, stateStorageService, router, accountService) {\n    this.loginService = loginService;\n    this.stateStorageService = stateStorageService;\n    this.router = router;\n    this.accountService = accountService;\n  }\n  intercept(request, next) {\n    return next.handle(request).pipe((0, operators_1.tap)({\n      error: err => {\n        if (err.status === 401 && err.url && !err.url.includes('api/account') && this.accountService.isAuthenticated()) {\n          this.stateStorageService.storeUrl(this.router.routerState.snapshot.url);\n          this.loginService.logout();\n          this.router.navigate(['/login']);\n        }\n      }\n    }));\n  }\n}\nexports.AuthExpiredInterceptor = AuthExpiredInterceptor;\nAuthExpiredInterceptor.ɵfac = function AuthExpiredInterceptor_Factory(t) {\n  return new (t || AuthExpiredInterceptor)(i0.ɵɵinject(i1.LoginService), i0.ɵɵinject(i2.StateStorageService), i0.ɵɵinject(i3.Router), i0.ɵɵinject(i4.AccountService));\n};\nAuthExpiredInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthExpiredInterceptor,\n  factory: AuthExpiredInterceptor.ɵfac\n});","map":{"version":3,"mappings":";;;;;;;AAGA;;;;;;AAOA,MACaA,sBAAsB;EACjCC,YACUC,YAA0B,EAC1BC,mBAAwC,EACxCC,MAAc,EACdC,cAA8B;IAH9B,iBAAY,GAAZH,YAAY;IACZ,wBAAmB,GAAnBC,mBAAmB;IACnB,WAAM,GAANC,MAAM;IACN,mBAAc,GAAdC,cAAc;EACrB;EAEHC,SAAS,CAACC,OAAyB,EAAEC,IAAiB;IACpD,OAAOA,IAAI,CAACC,MAAM,CAACF,OAAO,CAAC,CAACG,IAAI,CAC9B,mBAAG,EAAC;MACFC,KAAK,EAAGC,GAAsB,IAAI;QAChC,IAAIA,GAAG,CAACC,MAAM,KAAK,GAAG,IAAID,GAAG,CAACE,GAAG,IAAI,CAACF,GAAG,CAACE,GAAG,CAACC,QAAQ,CAAC,aAAa,CAAC,IAAI,IAAI,CAACV,cAAc,CAACW,eAAe,EAAE,EAAE;UAC9G,IAAI,CAACb,mBAAmB,CAACc,QAAQ,CAAC,IAAI,CAACb,MAAM,CAACc,WAAW,CAACC,QAAQ,CAACL,GAAG,CAAC;UACvE,IAAI,CAACZ,YAAY,CAACkB,MAAM,EAAE;UAC1B,IAAI,CAAChB,MAAM,CAACiB,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;;MAEpC;KACD,CAAC,CACH;EACH;;AArBFC;;mBACatB,sBAAsB;AAAA;;SAAtBA,sBAAsB;EAAAuB,SAAtBvB,sBAAsB;AAAA","names":["AuthExpiredInterceptor","constructor","loginService","stateStorageService","router","accountService","intercept","request","next","handle","pipe","error","err","status","url","includes","isAuthenticated","storeUrl","routerState","snapshot","logout","navigate","exports","factory"],"sourceRoot":"","sources":["C:\\Users\\D1347074\\Desktop\\projects 2\\nspayiiapp\\src\\main\\webapp\\app\\core\\interceptor\\auth-expired.interceptor.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpInterceptor, HttpRequest, HttpHandler, HttpEvent, HttpErrorResponse } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { tap } from 'rxjs/operators';\r\nimport { Router } from '@angular/router';\r\n\r\nimport { LoginService } from 'app/login/login.service';\r\nimport { StateStorageService } from 'app/core/auth/state-storage.service';\r\nimport { AccountService } from 'app/core/auth/account.service';\r\n\r\n@Injectable()\r\nexport class AuthExpiredInterceptor implements HttpInterceptor {\r\n  constructor(\r\n    private loginService: LoginService,\r\n    private stateStorageService: StateStorageService,\r\n    private router: Router,\r\n    private accountService: AccountService\r\n  ) {}\r\n\r\n  intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n    return next.handle(request).pipe(\r\n      tap({\r\n        error: (err: HttpErrorResponse) => {\r\n          if (err.status === 401 && err.url && !err.url.includes('api/account') && this.accountService.isAuthenticated()) {\r\n            this.stateStorageService.storeUrl(this.router.routerState.snapshot.url);\r\n            this.loginService.logout();\r\n            this.router.navigate(['/login']);\r\n          }\r\n        },\r\n      })\r\n    );\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}