{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ProfileService = void 0;\nconst tslib_1 = require(\"tslib\");\nconst operators_1 = require(\"rxjs/operators\");\nconst i0 = tslib_1.__importStar(require(\"@angular/core\"));\nconst i1 = tslib_1.__importStar(require(\"@angular/common/http\"));\nconst i2 = tslib_1.__importStar(require(\"app/core/config/application-config.service\"));\nclass ProfileService {\n  constructor(http, applicationConfigService) {\n    this.http = http;\n    this.applicationConfigService = applicationConfigService;\n    this.infoUrl = this.applicationConfigService.getEndpointFor('management/info');\n  }\n  getProfileInfo() {\n    if (this.profileInfo$) {\n      return this.profileInfo$;\n    }\n    this.profileInfo$ = this.http.get(this.infoUrl).pipe((0, operators_1.map)(response => {\n      const profileInfo = {\n        activeProfiles: response.activeProfiles,\n        inProduction: response.activeProfiles?.includes('prod'),\n        openAPIEnabled: response.activeProfiles?.includes('api-docs')\n      };\n      if (response.activeProfiles && response['display-ribbon-on-profiles']) {\n        const displayRibbonOnProfiles = response['display-ribbon-on-profiles'].split(',');\n        const ribbonProfiles = displayRibbonOnProfiles.filter(profile => response.activeProfiles?.includes(profile));\n        if (ribbonProfiles.length > 0) {\n          profileInfo.ribbonEnv = ribbonProfiles[0];\n        }\n      }\n      return profileInfo;\n    }), (0, operators_1.shareReplay)());\n    return this.profileInfo$;\n  }\n}\nexports.ProfileService = ProfileService;\nProfileService.ɵfac = function ProfileService_Factory(t) {\n  return new (t || ProfileService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.ApplicationConfigService));\n};\nProfileService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ProfileService,\n  factory: ProfileService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";;;;;;;AAEA;;;;AAMA,MACaA,cAAc;EAIzBC,YAAoBC,IAAgB,EAAUC,wBAAkD;IAA5E,SAAI,GAAJD,IAAI;IAAsB,6BAAwB,GAAxBC,wBAAwB;IAH9D,YAAO,GAAG,IAAI,CAACA,wBAAwB,CAACC,cAAc,CAAC,iBAAiB,CAAC;EAGkB;EAEnGC,cAAc;IACZ,IAAI,IAAI,CAACC,YAAY,EAAE;MACrB,OAAO,IAAI,CAACA,YAAY;;IAG1B,IAAI,CAACA,YAAY,GAAG,IAAI,CAACJ,IAAI,CAACK,GAAG,CAAe,IAAI,CAACC,OAAO,CAAC,CAACC,IAAI,CAChE,mBAAG,EAAEC,QAAsB,IAAI;MAC7B,MAAMC,WAAW,GAAgB;QAC/BC,cAAc,EAAEF,QAAQ,CAACE,cAAc;QACvCC,YAAY,EAAEH,QAAQ,CAACE,cAAc,EAAEE,QAAQ,CAAC,MAAM,CAAC;QACvDC,cAAc,EAAEL,QAAQ,CAACE,cAAc,EAAEE,QAAQ,CAAC,UAAU;OAC7D;MACD,IAAIJ,QAAQ,CAACE,cAAc,IAAIF,QAAQ,CAAC,4BAA4B,CAAC,EAAE;QACrE,MAAMM,uBAAuB,GAAGN,QAAQ,CAAC,4BAA4B,CAAC,CAACO,KAAK,CAAC,GAAG,CAAC;QACjF,MAAMC,cAAc,GAAGF,uBAAuB,CAACG,MAAM,CAACC,OAAO,IAAIV,QAAQ,CAACE,cAAc,EAAEE,QAAQ,CAACM,OAAO,CAAC,CAAC;QAC5G,IAAIF,cAAc,CAACG,MAAM,GAAG,CAAC,EAAE;UAC7BV,WAAW,CAACW,SAAS,GAAGJ,cAAc,CAAC,CAAC,CAAC;;;MAG7C,OAAOP,WAAW;IACpB,CAAC,CAAC,EACF,2BAAW,GAAE,CACd;IACD,OAAO,IAAI,CAACL,YAAY;EAC1B;;AA/BFiB;;mBACavB,cAAc;AAAA;;SAAdA,cAAc;EAAAwB,SAAdxB,cAAc;EAAAyB,YADD;AAAM","names":["ProfileService","constructor","http","applicationConfigService","getEndpointFor","getProfileInfo","profileInfo$","get","infoUrl","pipe","response","profileInfo","activeProfiles","inProduction","includes","openAPIEnabled","displayRibbonOnProfiles","split","ribbonProfiles","filter","profile","length","ribbonEnv","exports","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\D1347074\\Desktop\\projects 2\\nspayiiapp\\src\\main\\webapp\\app\\layouts\\profiles\\profile.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { map, shareReplay } from 'rxjs/operators';\r\nimport { Observable } from 'rxjs';\r\n\r\nimport { ApplicationConfigService } from 'app/core/config/application-config.service';\r\nimport { ProfileInfo, InfoResponse } from './profile-info.model';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class ProfileService {\r\n  private infoUrl = this.applicationConfigService.getEndpointFor('management/info');\r\n  private profileInfo$?: Observable<ProfileInfo>;\r\n\r\n  constructor(private http: HttpClient, private applicationConfigService: ApplicationConfigService) {}\r\n\r\n  getProfileInfo(): Observable<ProfileInfo> {\r\n    if (this.profileInfo$) {\r\n      return this.profileInfo$;\r\n    }\r\n\r\n    this.profileInfo$ = this.http.get<InfoResponse>(this.infoUrl).pipe(\r\n      map((response: InfoResponse) => {\r\n        const profileInfo: ProfileInfo = {\r\n          activeProfiles: response.activeProfiles,\r\n          inProduction: response.activeProfiles?.includes('prod'),\r\n          openAPIEnabled: response.activeProfiles?.includes('api-docs'),\r\n        };\r\n        if (response.activeProfiles && response['display-ribbon-on-profiles']) {\r\n          const displayRibbonOnProfiles = response['display-ribbon-on-profiles'].split(',');\r\n          const ribbonProfiles = displayRibbonOnProfiles.filter(profile => response.activeProfiles?.includes(profile));\r\n          if (ribbonProfiles.length > 0) {\r\n            profileInfo.ribbonEnv = ribbonProfiles[0];\r\n          }\r\n        }\r\n        return profileInfo;\r\n      }),\r\n      shareReplay()\r\n    );\r\n    return this.profileInfo$;\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}