{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ScheduleService = void 0;\nconst tslib_1 = require(\"tslib\");\nconst http_1 = require(\"@angular/common/http\");\nconst operators_1 = require(\"rxjs/operators\");\nconst app_constants_1 = require(\"app/app.constants\");\nconst i0 = tslib_1.__importStar(require(\"@angular/core\"));\nconst i1 = tslib_1.__importStar(require(\"@angular/common/http\"));\nconst i2 = tslib_1.__importStar(require(\"app/core/config/application-config.service\"));\nconst i3 = tslib_1.__importStar(require(\"app/shared/service/ns2-http.service\"));\nclass ScheduleService {\n  constructor(httpClient, applicationConfigService, ns2Http) {\n    this.httpClient = httpClient;\n    this.applicationConfigService = applicationConfigService;\n    this.ns2Http = ns2Http;\n    // public resourceUrl = this.applicationConfigService.getEndpointFor('api/job');\n    this.BASE_URL = app_constants_1.SERVER_API_URL + 'api/';\n    this.SCHEDULE_URL = this.BASE_URL + 'job';\n    this.CRON_VALID_URL = this.BASE_URL + 'cron/valid';\n    this.STOP_JOB_URL = this.BASE_URL + 'job/stop';\n    this.START_JOB_URL = this.BASE_URL + 'job/start';\n    this.START_ADHOC_JOB_URL = this.BASE_URL + 'job/startAdhoc';\n    this.RESTART_ALL_JOB_URL = this.BASE_URL + 'job/restartAll';\n    this.STOP_ALL_JOB_URL = this.BASE_URL + 'job/stopAll';\n    this.CRON_RUNTIME_URL = this.BASE_URL + 'cron/runTime';\n  }\n  // public search(searchCriteria: any): Observable<HttpResponse<Job[]>> {\n  //   const params: HttpParams = createRequestOption(searchCriteria);\n  //   return this.httpClient\n  //     .get(this.SCHEDULE_URL, { params, observe: 'response' })\n  //     .pipe(map((res: HttpResponse<any>) => this.convertArrayResponse(res)));\n  // }\n  search(options) {\n    return this.ns2Http.get(this.SCHEDULE_URL, options);\n  }\n  stopJob(name, group) {\n    let params = new http_1.HttpParams();\n    params = params.set('name', name);\n    params = params.set('group', group);\n    return this.httpClient.get(this.STOP_JOB_URL, {\n      params,\n      observe: 'response'\n    });\n  }\n  startJob(name, group) {\n    let params = new http_1.HttpParams();\n    params = params.set('name', name);\n    params = params.set('group', group);\n    return this.httpClient.get(this.START_JOB_URL, {\n      params,\n      observe: 'response'\n    });\n  }\n  startAdhocJob(job) {\n    const copy = this.convert(job);\n    return this.httpClient.post(this.START_ADHOC_JOB_URL, copy, {\n      observe: 'response'\n    });\n  }\n  restartAllJob() {\n    return this.httpClient.get(this.RESTART_ALL_JOB_URL, {\n      observe: 'response'\n    });\n  }\n  stopAllJob() {\n    return this.httpClient.get(this.STOP_ALL_JOB_URL, {\n      observe: 'response'\n    });\n  }\n  getRunTime(cron) {\n    let params = new http_1.HttpParams();\n    params = params.set('cron', cron);\n    return this.httpClient.get(this.CRON_RUNTIME_URL, {\n      params,\n      observe: 'body'\n    });\n  }\n  create(job) {\n    const copy = this.convert(job);\n    return this.httpClient.post(this.SCHEDULE_URL, copy, {\n      observe: 'response'\n    });\n    // .pipe(\n    //   map((res: any) => {\n    //     const jsonResponse = res.body;\n    //     this.convertItemFromServer(jsonResponse);\n    //     return jsonResponse;\n    //   })\n    // );\n  }\n\n  find(id) {\n    return this.httpClient.get(`${this.SCHEDULE_URL}/${id}`, {\n      observe: 'response'\n    }).pipe((0, operators_1.map)(res => {\n      const jsonResponse = res.body;\n      this.convertItemFromServer(res);\n      return jsonResponse;\n    }));\n  }\n  findByNameAndGroup(group, name) {\n    return this.httpClient.get(`${this.SCHEDULE_URL}/${group}/${name}`, {\n      observe: 'response'\n    }).pipe((0, operators_1.map)(res => {\n      const jsonResponse = res.body;\n      this.convertItemFromServer(res);\n      return jsonResponse;\n    }));\n  }\n  update(job) {\n    const copy = this.convert(job);\n    return this.httpClient.put(this.SCHEDULE_URL, copy, {\n      observe: 'response'\n    });\n    //   .pipe(\n    //   map((res: HttpResponse<any>) => {\n    //     const jsonUpdateResponse = res.body;\n    //     this.convertItemFromServer(jsonUpdateResponse);\n    //     return jsonUpdateResponse;\n    //   })\n    // );\n  }\n\n  delete(id, name) {\n    return this.httpClient.delete(`${this.SCHEDULE_URL}/${id}/${name}`, {\n      observe: 'response'\n    });\n  }\n  cronIsValid(cron) {\n    let params = new http_1.HttpParams();\n    params = params.set('cron', cron);\n    return this.httpClient.get(this.CRON_VALID_URL, {\n      params,\n      observe: 'body'\n    });\n  }\n  convertArrayResponse(res) {\n    const jsonResponse = res.body;\n    const body = [];\n    for (let i = 0; i < jsonResponse.length; i++) {\n      body.push(this.convertItemFromServer(jsonResponse[i]));\n    }\n    return res.clone({\n      body\n    });\n  }\n  convertItemFromServer(entity) {\n    return entity;\n  }\n  convert(job) {\n    const copy = Object.assign({}, job);\n    copy.startDt = new Date(job.startDt.getTime() + Math.abs(new Date().getTimezoneOffset()) * 60 * 1000);\n    if (job.endDt) {\n      copy.endDt = new Date(job.endDt.getTime() + Math.abs(new Date().getTimezoneOffset()) * 60 * 1000);\n    }\n    return copy;\n  }\n}\nexports.ScheduleService = ScheduleService;\nScheduleService.ɵfac = function ScheduleService_Factory(t) {\n  return new (t || ScheduleService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.ApplicationConfigService), i0.ɵɵinject(i3.Ns2HttpService));\n};\nScheduleService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ScheduleService,\n  factory: ScheduleService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["ScheduleService","constructor","httpClient","applicationConfigService","ns2Http","app_constants_1","BASE_URL","search","options","get","SCHEDULE_URL","stopJob","name","group","params","http_1","set","STOP_JOB_URL","observe","startJob","START_JOB_URL","startAdhocJob","job","copy","convert","post","START_ADHOC_JOB_URL","restartAllJob","RESTART_ALL_JOB_URL","stopAllJob","STOP_ALL_JOB_URL","getRunTime","cron","CRON_RUNTIME_URL","create","find","id","pipe","res","jsonResponse","body","convertItemFromServer","findByNameAndGroup","update","put","delete","cronIsValid","CRON_VALID_URL","convertArrayResponse","i","length","push","clone","entity","Object","assign","startDt","Date","getTime","Math","abs","getTimezoneOffset","endDt","exports","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\D1347074\\Desktop\\projects 2\\nspayiiapp\\src\\main\\webapp\\app\\admin\\schedule\\schedule.service.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-unsafe-return */\r\nimport {Observable} from 'rxjs';\r\nimport {HttpClient, HttpParams, HttpResponse} from '@angular/common/http';\r\nimport {Injectable} from '@angular/core';\r\nimport {Job} from './schedule.model';\r\nimport {map} from 'rxjs/operators';\r\nimport {SERVER_API_URL} from 'app/app.constants';\r\nimport {Ns2HttpService} from \"app/shared/service/ns2-http.service\";\r\nimport {ApplicationConfigService} from \"app/core/config/application-config.service\";\r\nimport {Ns2Response} from \"app/shared/model/ns2-response.model\";\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class ScheduleService {\r\n  // public resourceUrl = this.applicationConfigService.getEndpointFor('api/job');\r\n\r\n  private BASE_URL = SERVER_API_URL + 'api/';\r\n  private SCHEDULE_URL = this.BASE_URL + 'job';\r\n  private CRON_VALID_URL = this.BASE_URL + 'cron/valid';\r\n  private STOP_JOB_URL = this.BASE_URL + 'job/stop';\r\n  private START_JOB_URL = this.BASE_URL + 'job/start';\r\n  private START_ADHOC_JOB_URL = this.BASE_URL + 'job/startAdhoc';\r\n  private RESTART_ALL_JOB_URL = this.BASE_URL + 'job/restartAll';\r\n\r\n  private STOP_ALL_JOB_URL = this.BASE_URL + 'job/stopAll';\r\n  private CRON_RUNTIME_URL = this.BASE_URL + 'cron/runTime';\r\n\r\n  constructor(private httpClient: HttpClient,\r\n              private applicationConfigService: ApplicationConfigService,\r\n              private ns2Http: Ns2HttpService) {}\r\n\r\n  // public search(searchCriteria: any): Observable<HttpResponse<Job[]>> {\r\n  //   const params: HttpParams = createRequestOption(searchCriteria);\r\n  //   return this.httpClient\r\n  //     .get(this.SCHEDULE_URL, { params, observe: 'response' })\r\n  //     .pipe(map((res: HttpResponse<any>) => this.convertArrayResponse(res)));\r\n  // }\r\n\r\n  public search(options?: any): Observable<HttpResponse<any>> {\r\n    return this.ns2Http.get(this.SCHEDULE_URL, options);\r\n  }\r\n\r\n  public stopJob(name: string, group: string): Observable<HttpResponse<any>> {\r\n    let params: HttpParams = new HttpParams();\r\n    params = params.set('name', name);\r\n    params = params.set('group', group);\r\n    return this.httpClient.get(this.STOP_JOB_URL, { params, observe: 'response' });\r\n  }\r\n\r\n  public startJob(name: string, group: string): Observable<HttpResponse<any>> {\r\n    let params: HttpParams = new HttpParams();\r\n    params = params.set('name', name);\r\n    params = params.set('group', group);\r\n    return this.httpClient.get(this.START_JOB_URL, { params, observe: 'response' });\r\n  }\r\n\r\n  public startAdhocJob(job: Job): Observable<any> {\r\n    const copy = this.convert(job);\r\n    return this.httpClient.post(this.START_ADHOC_JOB_URL, copy, { observe: 'response' });\r\n\r\n  }\r\n\r\n  public restartAllJob(): Observable<HttpResponse<any>> {\r\n    return this.httpClient.get(this.RESTART_ALL_JOB_URL, { observe: 'response' });\r\n  }\r\n\r\n  public stopAllJob(): Observable<HttpResponse<any>> {\r\n    return this.httpClient.get(this.STOP_ALL_JOB_URL, { observe: 'response' });\r\n  }\r\n\r\n  public getRunTime(cron: string): Observable<any> {\r\n    let params: HttpParams = new HttpParams();\r\n    params = params.set('cron', cron);\r\n    return this.httpClient.get(this.CRON_RUNTIME_URL, { params, observe: 'body' });\r\n  }\r\n\r\n  public create(job: Job): Observable<HttpResponse<any>> {\r\n    const copy = this.convert(job);\r\n    return this.httpClient.post(this.SCHEDULE_URL, copy, { observe: 'response' });\r\n    // .pipe(\r\n    //   map((res: any) => {\r\n    //     const jsonResponse = res.body;\r\n    //     this.convertItemFromServer(jsonResponse);\r\n    //     return jsonResponse;\r\n    //   })\r\n    // );\r\n  }\r\n\r\n  public find(id: string): Observable<Job> {\r\n    return this.httpClient.get(`${this.SCHEDULE_URL}/${id}`, { observe: 'response' }).pipe(\r\n      map((res: HttpResponse<any>) => {\r\n        const jsonResponse = res.body;\r\n        this.convertItemFromServer(res);\r\n        return jsonResponse;\r\n      })\r\n    );\r\n  }\r\n\r\n  public findByNameAndGroup(group: string, name: string): Observable<Ns2Response<Job>> {\r\n    return this.httpClient.get(`${this.SCHEDULE_URL}/${group}/${name}`, {observe: 'response'}).pipe(\r\n      map((res: HttpResponse<any>) => {\r\n        const jsonResponse = res.body;\r\n        this.convertItemFromServer(res);\r\n        return jsonResponse;\r\n      })\r\n    );\r\n  }\r\n\r\n  public update(job: Job): Observable<HttpResponse<any>> {\r\n    const copy = this.convert(job);\r\n    return this.httpClient.put(this.SCHEDULE_URL, copy, { observe: 'response' });\r\n    //   .pipe(\r\n    //   map((res: HttpResponse<any>) => {\r\n    //     const jsonUpdateResponse = res.body;\r\n    //     this.convertItemFromServer(jsonUpdateResponse);\r\n    //     return jsonUpdateResponse;\r\n    //   })\r\n    // );\r\n  }\r\n\r\n  public delete(id: string, name: string): Observable<HttpResponse<any>> {\r\n    return this.httpClient.delete(`${this.SCHEDULE_URL}/${id}/${name}`, { observe: 'response' });\r\n  }\r\n\r\n  public cronIsValid(cron: string): Observable<any> {\r\n    let params: HttpParams = new HttpParams();\r\n    params = params.set('cron', cron);\r\n    return this.httpClient.get(this.CRON_VALID_URL, { params, observe: 'body' });\r\n  }\r\n\r\n  private convertArrayResponse(res: HttpResponse<Job[]>): HttpResponse<Job[]> {\r\n    const jsonResponse: Job[] = res.body;\r\n    const body: Job[] = [];\r\n    for (let i = 0; i < jsonResponse.length; i++) {\r\n      body.push(this.convertItemFromServer(jsonResponse[i]));\r\n    }\r\n    return res.clone({ body });\r\n  }\r\n\r\n  private convertItemFromServer(entity: any): any {\r\n    return entity;\r\n  }\r\n\r\n  private convert(job: Job): Job {\r\n    const copy: Job = Object.assign({}, job);\r\n    copy.startDt = new Date(job.startDt.getTime() + Math.abs(new Date().getTimezoneOffset()) * 60 * 1000);\r\n    if (job.endDt) {\r\n      copy.endDt = new Date(job.endDt.getTime() + Math.abs(new Date().getTimezoneOffset()) * 60 * 1000);\r\n    }\r\n    return copy;\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}