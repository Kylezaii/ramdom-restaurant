{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ParamService = void 0;\nconst tslib_1 = require(\"tslib\");\nconst operators_1 = require(\"rxjs/operators\");\nconst request_util_1 = require(\"app/core/request/request-util\");\nconst app_constants_1 = require(\"../../../app.constants\");\nconst dayjs_1 = tslib_1.__importDefault(require(\"dayjs\"));\nconst input_constants_1 = require(\"app/config/input.constants\");\nconst i0 = tslib_1.__importStar(require(\"@angular/core\"));\nconst i1 = tslib_1.__importStar(require(\"@angular/common/http\"));\nclass ParamService {\n  constructor(http) {\n    this.http = http;\n    this.appListUrl = app_constants_1.SERVER_API_URL + 'api/applicationList';\n    this.urlForParameter = app_constants_1.SERVER_API_URL + 'api/paramadmin';\n  }\n  getAppList() {\n    return this.http.get(`${this.appListUrl}`, {\n      observe: 'response'\n    }).pipe((0, operators_1.map)(res => res.body));\n  }\n  create(param) {\n    const copy = this.convert(param);\n    return this.http.post(this.urlForParameter, copy, {\n      observe: 'response'\n    }).pipe((0, operators_1.map)(res => res.body));\n  }\n  update(param) {\n    const copy = this.convert(param);\n    return this.http.put(this.urlForParameter, copy, {\n      observe: 'response'\n    }).pipe((0, operators_1.map)(res => res.body));\n  }\n  delete(appId, paramKey) {\n    return this.http.delete(`${this.urlForParameter}/${appId}/${paramKey}`, {\n      observe: 'response'\n    });\n  }\n  find(appId, paramKey) {\n    return this.http.get(`${this.urlForParameter}/${appId}/${paramKey}`, {\n      observe: 'response'\n    }).pipe((0, operators_1.map)(res => {\n      const jsonResponse = res.body;\n      return this.convertFromServer(jsonResponse);\n    }));\n  }\n  query(req) {\n    const params = (0, request_util_1.createRequestOption)(req);\n    return this.http.get(this.urlForParameter, {\n      params,\n      observe: 'response'\n    }).pipe((0, operators_1.map)(res => this.convertArrayResponse(res)));\n  }\n  getParamTypes() {\n    return [{\n      codeId: 'S',\n      label: 'String'\n    }, {\n      codeId: 'L',\n      label: 'List'\n    }, {\n      codeId: 'M',\n      label: 'Map'\n    }];\n  }\n  newGuid() {\n    let guid = '';\n    for (let i = 1; i <= 32; i++) {\n      this.random = window.crypto.getRandomValues(new Uint8Array(1));\n      const n = Math.floor(this.random * 0.001 * 16.0).toString(16).toUpperCase();\n      guid += n;\n      if (i === 8 || i === 12 || i === 16 || i === 20) {\n        guid += '-';\n      }\n    }\n    return guid;\n  }\n  convertArrayResponse(res) {\n    const jsonResponse = res.body;\n    const body = [];\n    for (const entity of jsonResponse) {\n      body.push(entity);\n    }\n    return res.clone({\n      body\n    });\n  }\n  convert(param) {\n    return Object.assign({}, param, {\n      effectiveDate: param.effectiveDate ? (0, dayjs_1.default)(param.effectiveDate).format('DD/MM/YYYY') : undefined,\n      expireDate: param.expireDate ? (0, dayjs_1.default)(param.expireDate).format('DD/MM/YYYY') : undefined\n    });\n  }\n  convertFromServer(entity) {\n    const copy = Object.assign({}, entity);\n    copy.effectiveDate = copy.effectiveDate ? (0, dayjs_1.default)(copy.effectiveDate).format(input_constants_1.DATE_FORMAT) : undefined;\n    copy.expireDate = copy.expireDate ? (0, dayjs_1.default)(copy.expireDate).format(input_constants_1.DATE_FORMAT) : undefined;\n    return copy;\n  }\n}\nexports.ParamService = ParamService;\nParamService.ɵfac = function ParamService_Factory(t) {\n  return new (t || ParamService)(i0.ɵɵinject(i1.HttpClient));\n};\nParamService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ParamService,\n  factory: ParamService.ɵfac\n});","map":{"version":3,"mappings":"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","names":["ParamService","constructor","http","app_constants_1","getAppList","get","appListUrl","observe","pipe","res","body","create","param","copy","convert","post","urlForParameter","update","put","delete","appId","paramKey","find","jsonResponse","convertFromServer","query","req","params","convertArrayResponse","getParamTypes","codeId","label","newGuid","guid","i","random","window","crypto","getRandomValues","Uint8Array","n","Math","floor","toString","toUpperCase","entity","push","clone","Object","assign","effectiveDate","format","undefined","expireDate","input_constants_1","exports","factory"],"sourceRoot":"","sources":["C:\\Users\\D1347074\\Desktop\\projects 2\\nspayiiapp\\src\\main\\webapp\\app\\admin\\param-admin\\param\\param.service.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-unsafe-return */\r\nimport { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpParams, HttpResponse } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { ParamModel } from './param.model';\r\nimport { createRequestOption } from 'app/core/request/request-util';\r\nimport { SERVER_API_URL } from '../../../app.constants';\r\nimport dayjs from 'dayjs';\r\nimport { DATE_FORMAT } from 'app/config/input.constants';\r\n\r\n@Injectable()\r\nexport class ParamService {\r\n  private appListUrl = SERVER_API_URL + 'api/applicationList';\r\n  private urlForParameter = SERVER_API_URL + 'api/paramadmin';\r\n  private random: any;\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  getAppList(): Observable<any> {\r\n    return this.http.get(`${this.appListUrl}`, { observe: 'response' }).pipe(map((res: HttpResponse<any>) => res.body));\r\n  }\r\n\r\n  create(param: ParamModel): Observable<ParamModel> {\r\n    const copy = this.convert(param);\r\n    return this.http.post(this.urlForParameter, copy, { observe: 'response' }).pipe(map((res: HttpResponse<any>) => res.body));\r\n  }\r\n\r\n  update(param: ParamModel): Observable<ParamModel> {\r\n    const copy = this.convert(param);\r\n    return this.http.put(this.urlForParameter, copy, { observe: 'response' }).pipe(map((res: HttpResponse<any>) => res.body));\r\n  }\r\n\r\n  delete(appId: string, paramKey: string): Observable<HttpResponse<any>> {\r\n    return this.http.delete(`${this.urlForParameter}/${appId}/${paramKey}`, { observe: 'response' });\r\n  }\r\n\r\n  find(appId: string, paramKey: string): Observable<ParamModel> {\r\n    return this.http.get(`${this.urlForParameter}/${appId}/${paramKey}`, { observe: 'response' }).pipe(\r\n      map((res: HttpResponse<any>) => {\r\n        const jsonResponse = res.body;\r\n        return this.convertFromServer(jsonResponse);\r\n      })\r\n    );\r\n  }\r\n\r\n  query(req?: any): Observable<HttpResponse<any>> {\r\n    const params: HttpParams = createRequestOption(req);\r\n    return this.http\r\n      .get(this.urlForParameter, { params, observe: 'response' })\r\n      .pipe(map((res: HttpResponse<any>) => this.convertArrayResponse(res)));\r\n  }\r\n\r\n  getParamTypes(): any {\r\n    return [\r\n      { codeId: 'S', label: 'String' },\r\n      { codeId: 'L', label: 'List' },\r\n      { codeId: 'M', label: 'Map' },\r\n    ];\r\n  }\r\n\r\n  newGuid(): any {\r\n    let guid = '';\r\n    for (let i = 1; i <= 32; i++) {\r\n      this.random = window.crypto.getRandomValues(new Uint8Array(1));\r\n      const n = Math.floor(this.random * 0.001 * 16.0)\r\n        .toString(16)\r\n        .toUpperCase();\r\n      guid += n;\r\n      if (i === 8 || i === 12 || i === 16 || i === 20) {\r\n        guid += '-';\r\n      }\r\n    }\r\n    return guid;\r\n  }\r\n\r\n  private convertArrayResponse(res: HttpResponse<any[]>): HttpResponse<any[]> {\r\n    const jsonResponse: any[] = res.body as any;\r\n    const body: any[] = [];\r\n    for (const entity of jsonResponse) {\r\n      body.push(entity);\r\n    }\r\n    return res.clone({ body });\r\n  }\r\n\r\n  private convert(param: ParamModel): ParamModel {\r\n    return Object.assign({}, param, {\r\n      effectiveDate: param.effectiveDate ? dayjs(param.effectiveDate).format('DD/MM/YYYY') : undefined,\r\n      expireDate: param.expireDate ? dayjs(param.expireDate).format('DD/MM/YYYY') : undefined,\r\n    });\r\n  }\r\n\r\n  private convertFromServer(entity: any): any {\r\n    const copy: ParamModel = Object.assign({}, entity);\r\n    copy.effectiveDate = copy.effectiveDate ? dayjs(copy.effectiveDate).format(DATE_FORMAT) : undefined;\r\n    copy.expireDate = copy.expireDate ? dayjs(copy.expireDate).format(DATE_FORMAT) : undefined;\r\n    return copy;\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}