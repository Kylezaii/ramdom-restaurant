{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.FileUploadComponent = void 0;\nconst tslib_1 = require(\"tslib\");\nconst core_1 = require(\"@angular/core\");\nconst nspapp_constants_1 = require(\"app/shared/constants/nspapp.constants\");\nconst api_1 = require(\"primeng/api\");\nconst rxjs_1 = require(\"rxjs\");\nconst operators_1 = require(\"rxjs/operators\");\nconst angular_cacheable_1 = require(\"angular-cacheable\");\nconst forms_1 = require(\"@angular/forms\");\nconst fileupload2_directive_1 = require(\"app/shared/validator/fileupload2.directive\");\nconst buffer_1 = require(\"buffer\");\nconst http_1 = require(\"@angular/common/http\");\nconst i0 = tslib_1.__importStar(require(\"@angular/core\"));\nconst i1 = tslib_1.__importStar(require(\"primeng/api\"));\nconst i2 = tslib_1.__importStar(require(\"app/shared/service/file-upload.service\"));\nconst i3 = tslib_1.__importStar(require(\"app/layouts/service/customtoast.service\"));\nconst i4 = tslib_1.__importStar(require(\"app/core/util/date-utils.service\"));\nconst i5 = tslib_1.__importStar(require(\"@angular/forms\"));\nconst i6 = tslib_1.__importStar(require(\"@angular/common\"));\nconst i7 = tslib_1.__importStar(require(\"primeng/button\"));\nconst i8 = tslib_1.__importStar(require(\"primeng/fileupload\"));\nconst i9 = tslib_1.__importStar(require(\"primeng/progressbar\"));\nconst i10 = tslib_1.__importStar(require(\"primeng/messages\"));\nconst i11 = tslib_1.__importStar(require(\"primeng/divider\"));\nconst _c0 = [\"pfileUpload\"];\nconst _c1 = function () {\n  return {\n    \"margin-right\": \".5em\",\n    \"float\": \"right\"\n  };\n};\nfunction FileUploadComponent_ng_template_6_button_4_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r7 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"button\", 8);\n    i0.ɵɵlistener(\"click\", function FileUploadComponent_ng_template_6_button_4_Template_button_click_0_listener($event) {\n      i0.ɵɵrestoreView(_r7);\n      const ctx_r6 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r6.downloadCSVResult($event));\n    });\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext(2);\n    i0.ɵɵstyleMap(i0.ɵɵpureFunction0(3, _c1));\n    i0.ɵɵproperty(\"disabled\", !(ctx_r3.verifiedFiles.length > 0 && ctx_r3.selectedFilesObj.length == 0));\n  }\n}\nconst _c2 = function () {\n  return {\n    \"height\": \"15px\"\n  };\n};\nfunction FileUploadComponent_ng_template_6_p_progressBar_20_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"p-progressBar\", 9);\n  }\n  if (rf & 2) {\n    const ctx_r4 = i0.ɵɵnextContext(2);\n    i0.ɵɵstyleMap(i0.ɵɵpureFunction0(3, _c2));\n    i0.ɵɵproperty(\"value\", ctx_r4.getProgress());\n  }\n}\nconst _c3 = function () {\n  return {\n    \"background-color\": \"white\"\n  };\n};\nfunction FileUploadComponent_ng_template_6_span_25_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r9 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"span\", 10);\n    i0.ɵɵtext(1, \"\\n        \");\n    i0.ɵɵelementStart(2, \"p-messages\", 11);\n    i0.ɵɵlistener(\"valueChange\", function FileUploadComponent_ng_template_6_span_25_Template_p_messages_valueChange_2_listener($event) {\n      i0.ɵɵrestoreView(_r9);\n      const ctx_r8 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r8.errMsg = $event);\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(3, \"\\n      \");\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r5 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"ngStyle\", i0.ɵɵpureFunction0(5, _c3));\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"value\", ctx_r5.errMsg)(\"showTransitionOptions\", \"0ms\")(\"hideTransitionOptions\", \"0ms\")(\"closable\", false);\n  }\n}\nconst _c4 = function () {\n  return {\n    \"margin-right\": \".5em\"\n  };\n};\nfunction FileUploadComponent_ng_template_6_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r11 = i0.ɵɵgetCurrentView();\n    i0.ɵɵtext(0, \"\\n   \\n          \");\n    i0.ɵɵelementStart(1, \"button\", 4);\n    i0.ɵɵlistener(\"click\", function FileUploadComponent_ng_template_6_Template_button_click_1_listener($event) {\n      i0.ɵɵrestoreView(_r11);\n      const ctx_r10 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r10.onRemoveErrorFiles($event));\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(2, \"\\n          \");\n    i0.ɵɵtext(3, \"\\n          \");\n    i0.ɵɵtemplate(4, FileUploadComponent_ng_template_6_button_4_Template, 1, 4, \"button\", 5);\n    i0.ɵɵtext(5, \"\\n      \");\n    i0.ɵɵelementStart(6, \"div\");\n    i0.ɵɵtext(7, \"\\n        \");\n    i0.ɵɵelement(8, \"br\");\n    i0.ɵɵtext(9);\n    i0.ɵɵelement(10, \"br\");\n    i0.ɵɵtext(11);\n    i0.ɵɵelement(12, \"br\");\n    i0.ɵɵtext(13);\n    i0.ɵɵelement(14, \"br\");\n    i0.ɵɵtext(15);\n    i0.ɵɵelement(16, \"br\")(17, \"br\");\n    i0.ɵɵtext(18, \"\\n        \");\n    i0.ɵɵtext(19, \"\\n        \");\n    i0.ɵɵtemplate(20, FileUploadComponent_ng_template_6_p_progressBar_20_Template, 1, 4, \"p-progressBar\", 6);\n    i0.ɵɵtext(21, \"\\n\\n      \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(22, \"\\n      \");\n    i0.ɵɵelement(23, \"br\");\n    i0.ɵɵtext(24, \"\\n      \");\n    i0.ɵɵtemplate(25, FileUploadComponent_ng_template_6_span_25_Template, 4, 6, \"span\", 7);\n    i0.ɵɵtext(26, \"\\n    \");\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵstyleMap(i0.ɵɵpureFunction0(9, _c4));\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.showCSV);\n    i0.ɵɵadvance(5);\n    i0.ɵɵtextInterpolate1(\" Total Files Allowed: \", ctx_r1.getTotalFileMax(), \"\\n        \");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" Total Files:  \", ctx_r1.verifiedFiles.length + ctx_r1.selectedFilesObj.length, \" \\n        \");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" Success Files:  \", ctx_r1.getSuccessCount(), \"\\n        \");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" Error Files:  \", ctx_r1.getErrorCount(), \"\\n        \");\n    i0.ɵɵadvance(5);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.progress && ctx_r1.verifiedFiles.length + ctx_r1.selectedFilesObj.length > 0);\n    i0.ɵɵadvance(5);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.getFormValidationErrors());\n  }\n}\nconst _c5 = function () {\n  return {\n    \"color\": \"lightgrey\"\n  };\n};\nfunction FileUploadComponent_ng_template_8_ul_3_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r17 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \"\\n            \");\n    i0.ɵɵelementStart(2, \"div\", 15);\n    i0.ɵɵtext(3, \"\\n              \");\n    i0.ɵɵelementStart(4, \"div\", 16);\n    i0.ɵɵtext(5, \"\\n                \");\n    i0.ɵɵelementStart(6, \"span\", 10);\n    i0.ɵɵtext(7);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(8, \"\\n              \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(9, \"\\n              \");\n    i0.ɵɵelementStart(10, \"div\", 17);\n    i0.ɵɵtext(11);\n    i0.ɵɵpipe(12, \"number\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(13, \"\\n              \");\n    i0.ɵɵelementStart(14, \"div\", 18);\n    i0.ɵɵtext(15, \"\\n              \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(16, \"\\n              \");\n    i0.ɵɵelementStart(17, \"div\", 19);\n    i0.ɵɵtext(18, \"\\n                \");\n    i0.ɵɵelementStart(19, \"button\", 20);\n    i0.ɵɵlistener(\"click\", function FileUploadComponent_ng_template_8_ul_3_div_2_Template_button_click_19_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r17);\n      const fileObj_r15 = restoredCtx.$implicit;\n      const ctx_r16 = i0.ɵɵnextContext(3);\n      return i0.ɵɵresetView(ctx_r16.onRemove($event, fileObj_r15 == null ? null : fileObj_r15.uuid, fileObj_r15 == null ? null : fileObj_r15.index));\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(20, \"\\n              \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(21, \"\\n            \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(22, \"\\n          \");\n    i0.ɵɵelement(23, \"p-divider\");\n    i0.ɵɵtext(24, \"\\n        \");\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const fileObj_r15 = ctx.$implicit;\n    i0.ɵɵadvance(6);\n    i0.ɵɵproperty(\"ngStyle\", i0.ɵɵpureFunction0(6, _c5));\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\"\\n                  \", fileObj_r15.selectedFile.name, \"\\n                \");\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate1(\"\\n                \", i0.ɵɵpipeBind2(12, 3, fileObj_r15.selectedFile.size / 1024, \"1.2-2\"), \" KB\\n              \");\n  }\n}\nfunction FileUploadComponent_ng_template_8_ul_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"ul\");\n    i0.ɵɵtext(1, \"\\n          \");\n    i0.ɵɵtemplate(2, FileUploadComponent_ng_template_8_ul_3_div_2_Template, 25, 7, \"div\", 14);\n    i0.ɵɵtext(3, \"\\n      \");\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r12 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r12.selectedFilesObj);\n  }\n}\nfunction FileUploadComponent_ng_template_8_ul_5_div_2_span_16_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const file_r19 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(file_r19.err_msg);\n  }\n}\nfunction FileUploadComponent_ng_template_8_ul_5_div_2_ng_template_18_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtext(0, \"\\n                \");\n    i0.ɵɵelementStart(1, \"span\");\n    i0.ɵɵtext(2, \"Validated\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(3, \"\\n              \");\n  }\n}\nconst _c6 = function () {\n  return {\n    \"color\": \"red\"\n  };\n};\nfunction FileUploadComponent_ng_template_8_ul_5_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r25 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \"\\n          \");\n    i0.ɵɵelementStart(2, \"div\", 15);\n    i0.ɵɵtext(3, \"\\n            \");\n    i0.ɵɵelementStart(4, \"div\", 16);\n    i0.ɵɵtext(5, \"\\n              \");\n    i0.ɵɵelementStart(6, \"span\", 10);\n    i0.ɵɵtext(7);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(8, \"\\n            \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(9, \"\\n            \");\n    i0.ɵɵelementStart(10, \"div\", 17);\n    i0.ɵɵtext(11);\n    i0.ɵɵpipe(12, \"number\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(13, \"\\n            \");\n    i0.ɵɵelementStart(14, \"div\", 18);\n    i0.ɵɵtext(15, \"\\n              \");\n    i0.ɵɵtemplate(16, FileUploadComponent_ng_template_8_ul_5_div_2_span_16_Template, 2, 1, \"span\", 21);\n    i0.ɵɵtext(17, \"\\n              \");\n    i0.ɵɵtemplate(18, FileUploadComponent_ng_template_8_ul_5_div_2_ng_template_18_Template, 4, 0, \"ng-template\", null, 22, i0.ɵɵtemplateRefExtractor);\n    i0.ɵɵtext(20, \"\\n            \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(21, \"\\n\\n            \");\n    i0.ɵɵelementStart(22, \"div\", 19);\n    i0.ɵɵtext(23, \"\\n              \");\n    i0.ɵɵelementStart(24, \"button\", 23);\n    i0.ɵɵlistener(\"click\", function FileUploadComponent_ng_template_8_ul_5_div_2_Template_button_click_24_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r25);\n      const file_r19 = restoredCtx.$implicit;\n      const ctx_r24 = i0.ɵɵnextContext(3);\n      return i0.ɵɵresetView(ctx_r24.onRemove($event, file_r19 == null ? null : file_r19.meta_data == null ? null : file_r19.meta_data.encodedFileName, null));\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(25, \"\\n\\n            \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(26, \"\\n          \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(27, \"\\n          \");\n    i0.ɵɵelement(28, \"p-divider\");\n    i0.ɵɵtext(29, \"\\n        \");\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const file_r19 = ctx.$implicit;\n    const _r21 = i0.ɵɵreference(19);\n    i0.ɵɵadvance(6);\n    i0.ɵɵproperty(\"ngStyle\", file_r19.err_id !== undefined && i0.ɵɵpureFunction0(8, _c6));\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\"\\n                \", file_r19.meta_data.fileName, \"\\n              \");\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate1(\"\\n              \", i0.ɵɵpipeBind2(12, 5, file_r19.meta_data.fileSize / 1024, \"1.2-2\"), \" KB\\n            \");\n    i0.ɵɵadvance(5);\n    i0.ɵɵproperty(\"ngIf\", file_r19.err_msg !== undefined)(\"ngIfElse\", _r21);\n  }\n}\nfunction FileUploadComponent_ng_template_8_ul_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"ul\");\n    i0.ɵɵtext(1, \"\\n        \");\n    i0.ɵɵtemplate(2, FileUploadComponent_ng_template_8_ul_5_div_2_Template, 30, 9, \"div\", 14);\n    i0.ɵɵtext(3, \"\\n      \");\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r13 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r13.verifiedFiles);\n  }\n}\nfunction FileUploadComponent_ng_template_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtext(0, \"\\n    \");\n    i0.ɵɵelementStart(1, \"div\", 12);\n    i0.ɵɵtext(2, \"\\n      \");\n    i0.ɵɵtemplate(3, FileUploadComponent_ng_template_8_ul_3_Template, 4, 1, \"ul\", 13);\n    i0.ɵɵtext(4, \"\\n\\n      \");\n    i0.ɵɵtemplate(5, FileUploadComponent_ng_template_8_ul_5_Template, 4, 1, \"ul\", 13);\n    i0.ɵɵtext(6, \"\\n    \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(7, \"\\n  \");\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵstyleProp(\"height\", ctx_r2.contentHeight);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", ctx_r2.selectedFilesObj.length);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", ctx_r2.verifiedFiles.length);\n  }\n}\nclass FileUploadComponent {\n  constructor(messageService, fileUploadService, toastService, dateUtilsService, ngControl, validators) {\n    this.messageService = messageService;\n    this.fileUploadService = fileUploadService;\n    this.toastService = toastService;\n    this.dateUtilsService = dateUtilsService;\n    this.ngControl = ngControl;\n    this.validators = validators;\n    this.verifiedFiles = [];\n    this.selectedFiles = [];\n    this.baseFilesObj = [];\n    this.pendingFilesObj = [];\n    this.errCount = 0;\n    this.selectedFilesObj = [];\n    this.showCSV = false;\n    this.contentHeight = \"400px\";\n    this.fileFormat = nspapp_constants_1.NSPAppConstants.FILE_FORMAT;\n    this.isMultiple = true;\n    this.loading = false;\n    this.progress = false;\n    this.submitInd = this.verifiedFiles.length !== 0;\n    this.disableButton = false;\n    this.errMsg = [{\n      severity: 'error',\n      summary: 'Error',\n      detail: 'Message Content'\n    }];\n    this.hasErrors = false;\n    this.procInstIdList = [];\n    this.isVisible$ = new rxjs_1.BehaviorSubject(true);\n    this.txnIdListEvent = new core_1.EventEmitter();\n    this.closeEvent = new core_1.EventEmitter();\n    this.fileEventEvent = new core_1.EventEmitter();\n    this.defaultParam = {\n      fileLimit: nspapp_constants_1.NSPAppConstants.MAXIMUM_FILES,\n      maxMultiFileSize: nspapp_constants_1.NSPAppConstants.MAXIMUM_MULTI_FILE_SIZE,\n      maxSingleFileSize: nspapp_constants_1.NSPAppConstants.MAXIMUM_SINGLE_FILE_SIZE,\n      extension: nspapp_constants_1.NSPAppConstants.FILE_FORMAT\n    };\n    // clearCustomFileArrays(): void {\n    //   this.selectedFiles = [];\n    //   this.onChange(this.pFileUpload.files);\n    // }\n    // Control Value Accessor related methods\n    this.onChange = () => {\n      console.log(\"onChange\");\n    };\n    this.onTouch = () => {\n      console.log(\"onTouch\");\n    };\n    if (this.ngControl) {\n      this.ngControl.valueAccessor = this;\n      // console.log(\"on control\", this);\n    }\n\n    if (this.validators) {\n      console.log(\"the validators are \", this.validators);\n    }\n    this.subscription = new rxjs_1.Subscription();\n  }\n  ngOnInit() {\n    this.preloadDMSParams();\n    console.log(\"the files\", this.pFileUpload.files);\n    // this.fileLimit =  NSPAppConstants.MAXIMUM_FILES\n    // console.log(\"the outside validator\", this.ngControl.control?.validator({} as AbstractControl));\n  }\n\n  onRemove(event, rmUuid, index) {\n    this.baseFilesObj = this.baseFilesObj.filter(fo => fo.uuid !== rmUuid);\n    this.verifiedFiles = this.verifiedFiles.filter(fo => fo.meta_data?.encodedFileName !== rmUuid);\n    this.selectedFilesObj = this.selectedFilesObj.filter(fo => fo.uuid !== rmUuid);\n    this.pFileUpload.remove(event, index);\n    // console.log(\"post deleted\", this.ngControl.control);\n    this.ngControl.control.setValue(this.baseFilesObj.concat(this.selectedFilesObj).map(x => {\n      return x.selectedFile;\n    }));\n    if (!this.getFormValidationErrors()) {\n      this.fileUploadHandler('CLM', 'UC1');\n      this.baseFilesObj = this.baseFilesObj.concat(this.selectedFilesObj);\n    }\n    console.log(\"after verified\", this.verifiedFiles);\n  }\n  logProc(event) {\n    console.log('biga', this.procInstIdList);\n  }\n  onRemoveErrorFiles(event) {\n    console.log(\"removing error files\");\n    this.verifiedFiles = this.verifiedFiles.filter(fo => fo.err_id === undefined);\n    const successUUID = this.verifiedFiles.map(x => {\n      return String(x?.meta_data?.encodedFileName);\n    });\n    this.baseFilesObj = this.baseFilesObj.filter(fo => successUUID.includes(fo.uuid));\n  }\n  getFormValidationErrors() {\n    if (this.ngControl.control?.errors) {\n      this.errMsg = Object.values(this.ngControl.control?.errors).map(msg => ({\n        severity: 'error',\n        summary: 'Error',\n        detail: msg\n      }));\n    }\n    return this.ngControl.control?.errors != null;\n  }\n  //change this , call api to return filewrapperresponse then push to verifiedfiles\n  preloadFiles(txnIds) {\n    // Clear underlying files\n    if (txnIds.length > 0) {\n      this.fileUploadService.preload(txnIds).subscribe(res => {\n        console.log(res.body?.data?.file_upload_resp_list);\n        this.verifiedFiles = this.verifiedFiles.concat(res.body.data.file_upload_resp_list).sort(this.sortBySeverity());\n        const txnIdList = this.verifiedFiles.map(x => String(x.meta_data.id));\n        this.txnIdListEvent.emit(txnIdList);\n      }, error => {\n        this.toastService.error(error.error?.error_desc);\n      });\n    }\n  }\n  onSelect(event) {\n    this.progress = true;\n    console.log('onSelect() of NSPAY2.0 file-upload component', event.currentFiles);\n    this.selectedFilesObj = event.currentFiles.map((selectedFile, index) => {\n      return {\n        uuid: buffer_1.Buffer.from(selectedFile.name.replace(\" \", \"\").replace(\"-\", \"\")).toString('base64'),\n        selectedFile,\n        index\n      };\n    });\n    this.selectedFilesObj = this.selectedFilesObj.filter(fo => !this.baseFilesObj.map(x => {\n      return String(x.uuid);\n    }).includes(fo.uuid));\n    this.ngControl.control.setValue(this.baseFilesObj.concat(this.selectedFilesObj).map(x => {\n      return x.selectedFile;\n    }));\n    if (!this.getFormValidationErrors()) {\n      this.fileUploadHandler('CLM', 'UC1');\n      this.baseFilesObj = this.baseFilesObj.concat(this.selectedFilesObj);\n    }\n  }\n  onProgress(event) {\n    // this.pFileUpload.progress = event;\n    console.log(\"the progress\", event);\n  }\n  // onRemove(event: any): void {\n  //   console.log('removed files', event);\n  //   let filesToEmit: File[] = this.pFileUpload.files;\n  //   // Filters away the just-removed file and emit out the file list\n  //   filesToEmit = filesToEmit.filter(item => item !== event.file);\n  //   this.onChange(filesToEmit);\n  // }\n  onRemoveAll() {\n    console.log('removing all files', this.selectedFiles);\n    this.pFileUpload.clear();\n    this.selectedFiles = [];\n    this.onChange(this.pFileUpload.files);\n  }\n  //For cancellation\n  //rolls back files\n  onClose() {\n    // if(this.verifiedFiles.length>0){\n    console.log('cancelling for process', this.procInstIdList);\n    const closure = this.procInstIdList;\n    let params = new http_1.HttpParams();\n    this.procInstIdList.forEach(x => {\n      params = params.append('procInstIdList', x);\n    });\n    this.fileUploadService.cancelUpload(null, {\n      params\n    }).subscribe(resp => {\n      if (resp.ok) {\n        this.toastService.success(resp.body.success_message);\n      }\n    });\n    this.closeEvent.emit(closure);\n    // }\n  }\n  //reset/clear files for after sucess \n  clearAndReset() {\n    this.pFileUpload.files = [];\n    this.verifiedFiles = [];\n    this.baseFilesObj = [];\n    this.selectedFilesObj = [];\n    this.selectedFiles = [];\n    this.errCount = 0;\n    this.ngOnDestroy();\n  }\n  ngOnDestroy() {\n    this.ngControl.control.setValue([]);\n    console.log('file upload destroyed');\n  }\n  writeValue(obj) {\n    // this.pFileUpload.clear();\n    // this.selectedFiles = [];\n    // this.verifiedFiles = [];\n    // this.baseFilesObj = obj;\n  }\n  // Upon UI element value changes, this method gets triggered\n  registerOnChange(fn) {\n    this.onChange = fn;\n  }\n  // Upon touching the element, this method gets triggered\n  registerOnTouched(fn) {\n    // console.log('Function called: registerOnTouched');\n    this.onTouch = fn;\n  }\n  setDisabledState(isDisabled) {\n    console.log(\"disabledState\", isDisabled);\n  }\n  preloadDMSParams() {\n    this.fileUploadService.preloadDMSParam(null).subscribe(resp => {\n      if (resp.body.data) {\n        const preloadedParams = resp.body.data;\n        console.log('preloaded', preloadedParams);\n        this.defaultParam.maxMultiFileSize = preloadedParams.dms_multiple_file_max_size;\n        this.defaultParam.maxSingleFileSize = preloadedParams.dms_single_file_max_size;\n        this.defaultParam.fileLimit = preloadedParams.dms_max_number_files;\n        this.defaultParam.extension = preloadedParams.dms_single_file_extension;\n        const baseValidator = forms_1.Validators.compose([fileupload2_directive_1.FileUploadValidator2.maxFileLimit(this.defaultParam.fileLimit), fileupload2_directive_1.FileUploadValidator2.maxSingleFileSize(this.defaultParam.maxSingleFileSize), fileupload2_directive_1.FileUploadValidator2.allowableExtension(this.defaultParam.extension)]);\n        // const baseValidator: ValidatorFn[] = [FileUploadValidator2.maxFileLimit(this.defaultParam.fileLimit),\n        //   FileUploadValidator2.maxSingleFileSize(this.defaultParam.maxSingleFileSize)\n        // ];\n        const mergedValidator = forms_1.Validators.compose([baseValidator, this.ngControl.control.validator]);\n        this.ngControl.control.setValidators(mergedValidator);\n        this.ngControl.control.updateValueAndValidity();\n      }\n    });\n  }\n  downloadCSVResult(event) {\n    console.log(\"showing verified\", this.verifiedFiles);\n    const replacer = (key, value) => value === null || value === undefined ? 'valid' : String(value);\n    // const header = Object.keys(data[0]);\n    const header = [\"File Name\", \"Status\"];\n    // const csv = this.verifiedFiles.map(data => header.map(x=>JSON.stringify(data.meta_data.fileName, replacer)).join(','));\n    const csv = this.verifiedFiles.map(data => JSON.stringify(data.meta_data.fileName, replacer).concat(',').concat(JSON.stringify(data.err_id, replacer)));\n    csv.unshift(header.join(','));\n    csv.unshift(String(new Date()));\n    const csvArray = csv.join('\\r\\n');\n    const a = document.createElement('a');\n    const blob = new Blob([csvArray], {\n      type: 'text/csv'\n    });\n    const url = window.URL.createObjectURL(blob);\n    a.href = url;\n    a.download = 'myFile.csv';\n    a.click();\n    window.URL.revokeObjectURL(url);\n    a.remove();\n  }\n  getValidatorsOnControl() {\n    const validator = this.ngControl.control?.validator(this.ngControl.control);\n    console.log(\"the validator:\", validator);\n  }\n  get validator() {\n    const validator = this.form.get('control').validator(this.ngControl.control);\n    console.log(validator);\n    if (validator) {\n      return true;\n    } else return false;\n  }\n  /**\r\n   *\r\n   * @param module -> TODO: Update definition of param\r\n   * @param useCase -> TODO: Update definition of param\r\n   */\n  fileUploadHandler(module, useCase) {\n    setTimeout(() => {\n      const eventFiles = this.selectedFilesObj.map(x => {\n        return x.selectedFile;\n      });\n      console.log('uploading files:', eventFiles);\n      this.loading = true;\n      this.subscription.add();\n      if (this.selectedFilesObj.length > 0) {\n        this.fileUploadService.generateProcInst(null).pipe((0, operators_1.concatMap)(procIdResp => {\n          if (procIdResp && procIdResp.status === 200) {\n            this.procInstIdList.push(procIdResp.body.data);\n            if (!this.isMultiple) {\n              return this.fileUploadService.uploadSingle(eventFiles[0], procIdResp.body.data, module, useCase);\n            } else {\n              return this.fileUploadService.uploadMultiple2(this.selectedFilesObj, procIdResp.body.data, module, useCase);\n            }\n          } else {\n            throw new Error('Failed to generate Process Instance');\n          }\n        })).subscribe(resp => {\n          if (resp) {\n            if (!this.isMultiple) {\n              if (resp.status === 200) {\n                const txnIdList = [];\n                if (!resp.body.data.err_id) {\n                  this.verifiedFiles.push(resp.body.data.meta_data);\n                  this.toastService.success(resp.body.success_message);\n                  txnIdList.push(resp.body.data.meta_data.id);\n                  this.txnIdListEvent.emit(txnIdList);\n                } else {\n                  this.toastService.error(String(resp.body.data.err_id) + ': ' + String(resp.body.data.err_msg));\n                }\n                this.loading = false;\n              }\n            } else {\n              if (resp.status === 200) {\n                this.verifiedFiles = this.verifiedFiles.concat(resp.body.data.file_upload_resp_list).sort(this.sortBySeverity());\n                const txnIdList = this.verifiedFiles.map(x => String(x.meta_data.id));\n                console.log('verified list', this.verifiedFiles);\n                //clear selected files\n                this.selectedFilesObj = [];\n                this.pFileUpload.files = [];\n                this.pFileUpload.clear();\n                console.log(\"state of selected files\", this.selectedFilesObj);\n                this.txnIdListEvent.emit(txnIdList);\n                if (!resp.body.data.error_map || resp.body.data.error_map && Object.keys(resp.body.data.error_map).length === 0) {\n                  this.toastService.success(resp.body.success_message);\n                } else {\n                  // const errList: any = Object.entries(resp.body.data.error_map).map(([key, value]) => ({\n                  //   errId: key,\n                  //   value\n                  // }));\n                  // console.log('erroList is ', errList);\n                  // let errorMsg = '';\n                  // errList.forEach((x: any) => {\n                  //   errorMsg = errorMsg.concat(x.errId).concat(': ').concat(x.value).concat('</br>');\n                  // });\n                  // console.log('errMsg is ' + errorMsg);\n                  // this.toastService.error(errorMsg);\n                }\n                // txnIdList = resp.body.data.file_upload_resp_list.map(x=>{return x.meta_data.id});\n                this.loading = false;\n              }\n            }\n          }\n        }, error => {\n          console.log(\"error is \" + String(error));\n          this.loading = false;\n        });\n        // this.onRemoveAll();\n      } else this.loading = false;\n    }, 0);\n  }\n  sortBySeverity() {\n    return function (a, b) {\n      if (a.err_id === b.err_id) {\n        return 0;\n      } else if (a.err_id !== undefined) {\n        return -1;\n      } else if (b.err_id !== undefined) {\n        return 1;\n      } else {\n        return a.err_id < b.err_id ? -1 : 1;\n      }\n    };\n  }\n  getTotalFileMax() {\n    if (this.externalFileLimit) {\n      return this.externalFileLimit;\n    } else return this.defaultParam.fileLimit;\n  }\n  getErrorCount() {\n    return this.verifiedFiles.filter(fo => fo.err_id !== undefined).length + this.selectedFilesObj.length;\n  }\n  getSuccessCount() {\n    return this.verifiedFiles.filter(fo => fo.err_id === undefined).length;\n  }\n  getProgress() {\n    return Math.floor(this.verifiedFiles.length / (this.verifiedFiles.length + this.selectedFilesObj.length) * 100);\n  }\n  disableButtons(disable) {\n    this.disableButton = disable;\n  }\n}\nFileUploadComponent.ɵfac = function FileUploadComponent_Factory(t) {\n  return new (t || FileUploadComponent)(i0.ɵɵdirectiveInject(i1.MessageService), i0.ɵɵdirectiveInject(i2.FileUploadService), i0.ɵɵdirectiveInject(i3.CustomToastService), i0.ɵɵdirectiveInject(i4.DateUtilsService), i0.ɵɵdirectiveInject(i5.NgControl, 10), i0.ɵɵdirectiveInject(forms_1.NG_VALIDATORS, 10));\n};\nFileUploadComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: FileUploadComponent,\n  selectors: [[\"n2-file-upload\"]],\n  viewQuery: function FileUploadComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c0, 7);\n    }\n    if (rf & 2) {\n      let _t;\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.pFileUpload = _t.first);\n    }\n  },\n  inputs: {\n    externalFileLimit: \"externalFileLimit\",\n    showCSV: \"showCSV\",\n    contentHeight: \"contentHeight\"\n  },\n  outputs: {\n    txnIdListEvent: \"txnIdListEvent\",\n    closeEvent: \"closeEvent\",\n    fileEventEvent: \"fileEventEvent\"\n  },\n  features: [i0.ɵɵProvidersFeature([api_1.MessageService\n  // {\n  //   provide: NG_VALUE_ACCESSOR,\n  //   useExisting: forwardRef(() =>FileUploadComponent),\n  //   multi: true\n  // }\n  ])],\n  decls: 11,\n  vars: 5,\n  consts: [[\"name\", \"fileupload[]\", \"cancelLabel\", \"Remove All\", \"uploadLabel\", \"Verify File\", 3, \"multiple\", \"showUploadButton\", \"showCancelButton\", \"customUpload\", \"disabled\", \"onSelect\", \"onProgress\"], [\"pfileUpload\", \"\"], [\"pTemplate\", \"toolbar\"], [\"pTemplate\", \"content\"], [\"pButton\", \"\", \"label\", \"Remove Error files\", 3, \"click\"], [\"pButton\", \"\", \"label\", \"Download Result\", 3, \"disabled\", \"style\", \"click\", 4, \"ngIf\"], [3, \"value\", \"style\", 4, \"ngIf\"], [3, \"ngStyle\", 4, \"ngIf\"], [\"pButton\", \"\", \"label\", \"Download Result\", 3, \"disabled\", \"click\"], [3, \"value\"], [3, \"ngStyle\"], [3, \"value\", \"showTransitionOptions\", \"hideTransitionOptions\", \"closable\", \"valueChange\"], [2, \"overflow\", \"auto\", \"height\", \"400px\", \"max-width\", \"100%\", \"overflow-x\", \"hidden\"], [4, \"ngIf\"], [4, \"ngFor\", \"ngForOf\"], [1, \"field\", \"grid\"], [1, \"col-5\"], [1, \"col-2\"], [1, \"col-4\"], [1, \"col-1\"], [\"pButton\", \"\", \"pRipple\", \"\", \"type\", \"button\", \"icon\", \"pi pi-times\", 1, \"custom-fileupload-remove-button\", \"p-button-rounded\", \"p-button-danger\", \"p-button-text\", 3, \"click\"], [4, \"ngIf\", \"ngIfElse\"], [\"validated\", \"\"], [\"pButton\", \"\", \"pRipple\", \"\", \"type\", \"button\", \"icon\", \"pi pi-times\", 1, \"p-button-rounded\", \"p-button-danger\", \"p-button-text\", 3, \"click\"]],\n  template: function FileUploadComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtext(0, \"\\n\");\n      i0.ɵɵtext(1, \"\\n\");\n      i0.ɵɵtext(2, \"\\n\\n\\n\");\n      i0.ɵɵelementStart(3, \"p-fileUpload\", 0, 1);\n      i0.ɵɵlistener(\"onSelect\", function FileUploadComponent_Template_p_fileUpload_onSelect_3_listener($event) {\n        return ctx.onSelect($event);\n      })(\"onProgress\", function FileUploadComponent_Template_p_fileUpload_onProgress_3_listener($event) {\n        return ctx.onProgress($event);\n      });\n      i0.ɵɵtext(5, \"\\n    \");\n      i0.ɵɵtemplate(6, FileUploadComponent_ng_template_6_Template, 27, 10, \"ng-template\", 2);\n      i0.ɵɵtext(7, \"\\n\\n  \");\n      i0.ɵɵtemplate(8, FileUploadComponent_ng_template_8_Template, 8, 4, \"ng-template\", 3);\n      i0.ɵɵtext(9, \"\\n\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(10, \"\\n\\n\");\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"multiple\", ctx.isMultiple)(\"showUploadButton\", false)(\"showCancelButton\", false)(\"customUpload\", true)(\"disabled\", ctx.disableButton);\n    }\n  },\n  dependencies: [i6.NgForOf, i6.NgIf, i6.NgStyle, i1.PrimeTemplate, i7.ButtonDirective, i8.FileUpload, i9.ProgressBar, i10.Messages, i11.Divider, i6.DecimalPipe],\n  styles: [\".custom-fileupload-remove-button.p-button.p-button-rounded {\\n  width: 1.5rem;\\n}\\n\\n  .custom-fileupload-remove-button.p-button.p-button-icon-only.p-button-rounded {\\n  height: 1.5rem;\\n}\\n\\n  .p-button.p-button-sm .p-button-icon {\\n  border: 3px;\\n}\\n\\n  .p-button.p-button-sm .p-button-danger {\\n  font-size: 0.6rem;\\n}\\n\\n  .p-fileupload-files {\\n  display: none !important;\\n}\\n\\n  .p-fileupload-content .p-progressbar {\\n  display: none !important;\\n}\\n\\n.n2-file-upload-content[_ngcontent-%COMP%] {\\n  overflow: auto;\\n  height: 400px;\\n  max-width: 100%;\\n  overflow-x: hidden;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImZpbGUtdXBsb2FkLmNvbXBvbmVudC5zY3NzIiwiLi5cXC4uXFwuLlxcLi5cXC4uXFwuLlxcLi5cXC4uXFwuLlxccHJvamVjdHMlMjAyXFxuc3BheWlpYXBwXFxzcmNcXG1haW5cXHdlYmFwcFxcYXBwXFxzaGFyZWRcXGNvbXBvbmVudFxcZmlsZS11cGxvYWRcXGZpbGUtdXBsb2FkLmNvbXBvbmVudC5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBO0VBRUksYUFBQTtBQ0ZKOztBREtBO0VBQ0ksY0FBQTtBQ0ZKOztBREtBO0VBQ0ksV0FBQTtBQ0ZKOztBREtBO0VBQ0ksaUJBQUE7QUNGSjs7QURLQTtFQUNJLHdCQUFBO0FDRko7O0FES0E7RUFDSSx3QkFBQTtBQ0ZKOztBRFNBO0VBQ0ksY0FBQTtFQUNBLGFBQUE7RUFDQSxlQUFBO0VBQ0Esa0JBQUE7QUNOSiIsImZpbGUiOiJmaWxlLXVwbG9hZC5jb21wb25lbnQuc2NzcyIsInNvdXJjZXNDb250ZW50IjpbIlxyXG5cclxuOjpuZy1kZWVwIC5jdXN0b20tZmlsZXVwbG9hZC1yZW1vdmUtYnV0dG9uLnAtYnV0dG9uLnAtYnV0dG9uLXJvdW5kZWQge1xyXG5cclxuICAgIHdpZHRoOiAxLjVyZW07XHJcbn1cclxuXHJcbjo6bmctZGVlcCAuY3VzdG9tLWZpbGV1cGxvYWQtcmVtb3ZlLWJ1dHRvbi5wLWJ1dHRvbi5wLWJ1dHRvbi1pY29uLW9ubHkucC1idXR0b24tcm91bmRlZHtcclxuICAgIGhlaWdodDogMS41cmVtO1xyXG59XHJcblxyXG46Om5nLWRlZXAgLnAtYnV0dG9uLnAtYnV0dG9uLXNtIC5wLWJ1dHRvbi1pY29uIHtcclxuICAgIGJvcmRlcjogM3B4O1xyXG59XHJcblxyXG46Om5nLWRlZXAgLnAtYnV0dG9uLnAtYnV0dG9uLXNtIC5wLWJ1dHRvbi1kYW5nZXIge1xyXG4gICAgZm9udC1zaXplOiAwLjZyZW07XHJcbn1cclxuXHJcbjo6bmctZGVlcCAucC1maWxldXBsb2FkLWZpbGVze1xyXG4gICAgZGlzcGxheTogbm9uZSAhaW1wb3J0YW50O1xyXG59XHJcblxyXG46Om5nLWRlZXAgLnAtZmlsZXVwbG9hZC1jb250ZW50IC5wLXByb2dyZXNzYmFye1xyXG4gICAgZGlzcGxheTogbm9uZSAhaW1wb3J0YW50O1xyXG59XHJcblxyXG4vLyA6Om5nLWRlZXAgLnAtZmlsZXVwbG9hZC1jaG9vc2V7XHJcbi8vICAgICBkaXNwbGF5OiBub25lICFpbXBvcnRhbnQ7XHJcbi8vIH1cclxuXHJcbi5uMi1maWxlLXVwbG9hZC1jb250ZW50IHtcclxuICAgIG92ZXJmbG93OiBhdXRvOyBcclxuICAgIGhlaWdodDogNDAwcHg7IFxyXG4gICAgbWF4LXdpZHRoOiAxMDAlOyBcclxuICAgIG92ZXJmbG93LXg6IGhpZGRlblxyXG59IiwiOjpuZy1kZWVwIC5jdXN0b20tZmlsZXVwbG9hZC1yZW1vdmUtYnV0dG9uLnAtYnV0dG9uLnAtYnV0dG9uLXJvdW5kZWQge1xuICB3aWR0aDogMS41cmVtO1xufVxuXG46Om5nLWRlZXAgLmN1c3RvbS1maWxldXBsb2FkLXJlbW92ZS1idXR0b24ucC1idXR0b24ucC1idXR0b24taWNvbi1vbmx5LnAtYnV0dG9uLXJvdW5kZWQge1xuICBoZWlnaHQ6IDEuNXJlbTtcbn1cblxuOjpuZy1kZWVwIC5wLWJ1dHRvbi5wLWJ1dHRvbi1zbSAucC1idXR0b24taWNvbiB7XG4gIGJvcmRlcjogM3B4O1xufVxuXG46Om5nLWRlZXAgLnAtYnV0dG9uLnAtYnV0dG9uLXNtIC5wLWJ1dHRvbi1kYW5nZXIge1xuICBmb250LXNpemU6IDAuNnJlbTtcbn1cblxuOjpuZy1kZWVwIC5wLWZpbGV1cGxvYWQtZmlsZXMge1xuICBkaXNwbGF5OiBub25lICFpbXBvcnRhbnQ7XG59XG5cbjo6bmctZGVlcCAucC1maWxldXBsb2FkLWNvbnRlbnQgLnAtcHJvZ3Jlc3NiYXIge1xuICBkaXNwbGF5OiBub25lICFpbXBvcnRhbnQ7XG59XG5cbi5uMi1maWxlLXVwbG9hZC1jb250ZW50IHtcbiAgb3ZlcmZsb3c6IGF1dG87XG4gIGhlaWdodDogNDAwcHg7XG4gIG1heC13aWR0aDogMTAwJTtcbiAgb3ZlcmZsb3cteDogaGlkZGVuO1xufSJdfQ== */\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9tYWluL3dlYmFwcC9hcHAvc2hhcmVkL2NvbXBvbmVudC9maWxlLXVwbG9hZC9maWxlLXVwbG9hZC5jb21wb25lbnQuc2NzcyIsIndlYnBhY2s6Ly8uLy4uLy4uL3Byb2plY3RzJTIwMi9uc3BheWlpYXBwL3NyYy9tYWluL3dlYmFwcC9hcHAvc2hhcmVkL2NvbXBvbmVudC9maWxlLXVwbG9hZC9maWxlLXVwbG9hZC5jb21wb25lbnQuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQTtFQUVJLGFBQUE7QUNGSjs7QURLQTtFQUNJLGNBQUE7QUNGSjs7QURLQTtFQUNJLFdBQUE7QUNGSjs7QURLQTtFQUNJLGlCQUFBO0FDRko7O0FES0E7RUFDSSx3QkFBQTtBQ0ZKOztBREtBO0VBQ0ksd0JBQUE7QUNGSjs7QURTQTtFQUNJLGNBQUE7RUFDQSxhQUFBO0VBQ0EsZUFBQTtFQUNBLGtCQUFBO0FDTko7QURDQSxnZ0ZBQWdnRiIsInNvdXJjZXNDb250ZW50IjpbIlxyXG5cclxuOjpuZy1kZWVwIC5jdXN0b20tZmlsZXVwbG9hZC1yZW1vdmUtYnV0dG9uLnAtYnV0dG9uLnAtYnV0dG9uLXJvdW5kZWQge1xyXG5cclxuICAgIHdpZHRoOiAxLjVyZW07XHJcbn1cclxuXHJcbjo6bmctZGVlcCAuY3VzdG9tLWZpbGV1cGxvYWQtcmVtb3ZlLWJ1dHRvbi5wLWJ1dHRvbi5wLWJ1dHRvbi1pY29uLW9ubHkucC1idXR0b24tcm91bmRlZHtcclxuICAgIGhlaWdodDogMS41cmVtO1xyXG59XHJcblxyXG46Om5nLWRlZXAgLnAtYnV0dG9uLnAtYnV0dG9uLXNtIC5wLWJ1dHRvbi1pY29uIHtcclxuICAgIGJvcmRlcjogM3B4O1xyXG59XHJcblxyXG46Om5nLWRlZXAgLnAtYnV0dG9uLnAtYnV0dG9uLXNtIC5wLWJ1dHRvbi1kYW5nZXIge1xyXG4gICAgZm9udC1zaXplOiAwLjZyZW07XHJcbn1cclxuXHJcbjo6bmctZGVlcCAucC1maWxldXBsb2FkLWZpbGVze1xyXG4gICAgZGlzcGxheTogbm9uZSAhaW1wb3J0YW50O1xyXG59XHJcblxyXG46Om5nLWRlZXAgLnAtZmlsZXVwbG9hZC1jb250ZW50IC5wLXByb2dyZXNzYmFye1xyXG4gICAgZGlzcGxheTogbm9uZSAhaW1wb3J0YW50O1xyXG59XHJcblxyXG4vLyA6Om5nLWRlZXAgLnAtZmlsZXVwbG9hZC1jaG9vc2V7XHJcbi8vICAgICBkaXNwbGF5OiBub25lICFpbXBvcnRhbnQ7XHJcbi8vIH1cclxuXHJcbi5uMi1maWxlLXVwbG9hZC1jb250ZW50IHtcclxuICAgIG92ZXJmbG93OiBhdXRvOyBcclxuICAgIGhlaWdodDogNDAwcHg7IFxyXG4gICAgbWF4LXdpZHRoOiAxMDAlOyBcclxuICAgIG92ZXJmbG93LXg6IGhpZGRlblxyXG59IiwiOjpuZy1kZWVwIC5jdXN0b20tZmlsZXVwbG9hZC1yZW1vdmUtYnV0dG9uLnAtYnV0dG9uLnAtYnV0dG9uLXJvdW5kZWQge1xuICB3aWR0aDogMS41cmVtO1xufVxuXG46Om5nLWRlZXAgLmN1c3RvbS1maWxldXBsb2FkLXJlbW92ZS1idXR0b24ucC1idXR0b24ucC1idXR0b24taWNvbi1vbmx5LnAtYnV0dG9uLXJvdW5kZWQge1xuICBoZWlnaHQ6IDEuNXJlbTtcbn1cblxuOjpuZy1kZWVwIC5wLWJ1dHRvbi5wLWJ1dHRvbi1zbSAucC1idXR0b24taWNvbiB7XG4gIGJvcmRlcjogM3B4O1xufVxuXG46Om5nLWRlZXAgLnAtYnV0dG9uLnAtYnV0dG9uLXNtIC5wLWJ1dHRvbi1kYW5nZXIge1xuICBmb250LXNpemU6IDAuNnJlbTtcbn1cblxuOjpuZy1kZWVwIC5wLWZpbGV1cGxvYWQtZmlsZXMge1xuICBkaXNwbGF5OiBub25lICFpbXBvcnRhbnQ7XG59XG5cbjo6bmctZGVlcCAucC1maWxldXBsb2FkLWNvbnRlbnQgLnAtcHJvZ3Jlc3NiYXIge1xuICBkaXNwbGF5OiBub25lICFpbXBvcnRhbnQ7XG59XG5cbi5uMi1maWxlLXVwbG9hZC1jb250ZW50IHtcbiAgb3ZlcmZsb3c6IGF1dG87XG4gIGhlaWdodDogNDAwcHg7XG4gIG1heC13aWR0aDogMTAwJTtcbiAgb3ZlcmZsb3cteDogaGlkZGVuO1xufSJdLCJzb3VyY2VSb290IjoiIn0= */\"]\n});\ntslib_1.__decorate([(0, angular_cacheable_1.Cacheable)({\n  key: 'dms-param'\n})], FileUploadComponent.prototype, \"preloadDMSParams\", null);\nexports.FileUploadComponent = FileUploadComponent;","map":{"version":3,"mappings":"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","names":["i0","FileUploadComponent","constructor","messageService","fileUploadService","toastService","dateUtilsService","ngControl","validators","nspapp_constants_1","FILE_FORMAT","verifiedFiles","length","severity","summary","detail","rxjs_1","core_1","fileLimit","MAXIMUM_FILES","maxMultiFileSize","MAXIMUM_MULTI_FILE_SIZE","maxSingleFileSize","MAXIMUM_SINGLE_FILE_SIZE","extension","console","log","valueAccessor","subscription","ngOnInit","preloadDMSParams","pFileUpload","files","onRemove","event","rmUuid","index","baseFilesObj","filter","fo","uuid","meta_data","encodedFileName","selectedFilesObj","remove","control","setValue","concat","map","x","selectedFile","getFormValidationErrors","fileUploadHandler","logProc","procInstIdList","onRemoveErrorFiles","err_id","undefined","successUUID","String","includes","errors","errMsg","Object","values","msg","preloadFiles","txnIds","preload","subscribe","res","body","data","file_upload_resp_list","sort","sortBySeverity","txnIdList","id","txnIdListEvent","emit","error","error_desc","onSelect","progress","currentFiles","buffer_1","from","name","replace","toString","onProgress","onRemoveAll","selectedFiles","clear","onChange","onClose","closure","params","http_1","forEach","append","cancelUpload","resp","ok","success","success_message","closeEvent","clearAndReset","errCount","ngOnDestroy","writeValue","obj","registerOnChange","fn","registerOnTouched","onTouch","setDisabledState","isDisabled","preloadDMSParam","preloadedParams","defaultParam","dms_multiple_file_max_size","dms_single_file_max_size","dms_max_number_files","dms_single_file_extension","baseValidator","forms_1","compose","fileupload2_directive_1","maxFileLimit","allowableExtension","mergedValidator","validator","setValidators","updateValueAndValidity","downloadCSVResult","replacer","key","value","header","csv","JSON","stringify","fileName","unshift","join","Date","csvArray","a","document","createElement","blob","Blob","type","url","window","URL","createObjectURL","href","download","click","revokeObjectURL","getValidatorsOnControl","form","get","module","useCase","setTimeout","eventFiles","loading","add","generateProcInst","pipe","procIdResp","status","push","isMultiple","uploadSingle","uploadMultiple2","Error","err_msg","error_map","keys","b","getTotalFileMax","externalFileLimit","getErrorCount","getSuccessCount","getProgress","Math","floor","disableButtons","disable","disableButton","selectors","viewQuery","api_1","decls","vars","consts","template","ctx","tslib_1","exports"],"sourceRoot":"","sources":["C:\\Users\\D1347074\\Desktop\\projects 2\\nspayiiapp\\src\\main\\webapp\\app\\shared\\component\\file-upload\\file-upload.component.ts","C:\\Users\\D1347074\\Desktop\\projects 2\\nspayiiapp\\src\\main\\webapp\\app\\shared\\component\\file-upload\\file-upload.component.html"],"sourcesContent":["import {Component, EventEmitter, Inject, Input, OnDestroy, OnInit, Optional, Output, Self, ViewChild} from '@angular/core';\r\nimport {CustomToastService} from 'app/layouts/service/customtoast.service';\r\nimport {NSPAppConstants} from 'app/shared/constants/nspapp.constants';\r\nimport {FileUploadService} from 'app/shared/service/file-upload.service';\r\nimport {Message, MessageService} from 'primeng/api';\r\nimport {FileUpload} from 'primeng/fileupload';\r\nimport {BehaviorSubject, Subscription} from 'rxjs';\r\nimport {concatMap} from 'rxjs/operators';\r\nimport {Cacheable} from 'angular-cacheable';\r\nimport {AbstractControl, ControlValueAccessor, FormControl, NgControl, NG_VALIDATORS, Validator, ValidatorFn, Validators} from '@angular/forms';\r\nimport {FileUploadValidator2} from 'app/shared/validator/fileupload2.directive';\r\nimport { Buffer } from 'buffer';\r\nimport { HttpParams } from '@angular/common/http';\r\nimport { saveAs } from 'file-saver'\r\nimport { DateUtilsService } from 'app/core/util/date-utils.service';\r\n\r\n@Component({\r\n  selector: 'n2-file-upload',\r\n  templateUrl: './file-upload.component.html',\r\n  styleUrls: ['./file-upload.component.scss'],\r\n  providers: [\r\n    MessageService,\r\n    // {\r\n    //   provide: NG_VALUE_ACCESSOR,\r\n    //   useExisting: forwardRef(() =>FileUploadComponent),\r\n    //   multi: true\r\n    // }\r\n  ]\r\n})\r\nexport class FileUploadComponent implements ControlValueAccessor, OnInit, OnDestroy {\r\n\r\n  verifiedFiles: any[] = [];\r\n  selectedFiles: any[] = [];\r\n  baseFilesObj: any[] = [];\r\n  pendingFilesObj: any[] = [];\r\n  errCount = 0;\r\n\r\n  \r\n\r\n  selectedFilesObj: any[] = [];\r\n  // fileLimit: number = NSPAppConstants.MAXIMUM_FILES; // Override this in implemented components if value differs\r\n  // maxFileSize: number = NSPAppConstants.MAXIMUM_FILE_SIZE; //in bytes\r\n\r\n  fileLimit: number;\r\n  maxFileSize: number;\r\n\r\n  @Input() externalFileLimit: number;\r\n  @Input() showCSV = false;\r\n  @Input() contentHeight = \"400px\";\r\n\r\n  fileFormat: string = NSPAppConstants.FILE_FORMAT;\r\n  isMultiple = true;\r\n  loading = false;\r\n  progress = false;\r\n  submitInd = this.verifiedFiles.length !== 0;\r\n  disableButton = false;\r\n  // Validator\r\n  validatorFnList: ValidatorFn[];\r\n  form: FormControl;\r\n\r\n  @ViewChild('pfileUpload', {static: true})\r\n  public pFileUpload!: FileUpload;\r\n\r\n  errMsg: Message[] = [{severity: 'error', summary: 'Error', detail: 'Message Content'}];\r\n  hasErrors = false;\r\n\r\n  procInstIdList: any[] = [];\r\n\r\n  isVisible$ = new BehaviorSubject(true);\r\n\r\n\r\n  @Output() txnIdListEvent = new EventEmitter<any>();\r\n\r\n  @Output() closeEvent = new EventEmitter<any>();\r\n\r\n  @Output() fileEventEvent = new EventEmitter<any>();\r\n\r\n  public defaultParam: any = {\r\n    fileLimit: NSPAppConstants.MAXIMUM_FILES, // in units Override this if db fetches value or cache value\r\n    maxMultiFileSize: NSPAppConstants.MAXIMUM_MULTI_FILE_SIZE, // in MB Override this if db fetches value or cache value\r\n    maxSingleFileSize: NSPAppConstants.MAXIMUM_SINGLE_FILE_SIZE, // in MB Override this if db fetches value or cache value\r\n    extension: NSPAppConstants.FILE_FORMAT\r\n  }\r\n\r\n  private subscription: Subscription;\r\n\r\n\r\n\r\n\r\n  constructor(\r\n    private messageService: MessageService,\r\n    private fileUploadService: FileUploadService,\r\n    private toastService: CustomToastService,\r\n    private dateUtilsService: DateUtilsService,\r\n    @Optional() @Self() public ngControl: NgControl,\r\n    @Optional() @Self()  @Inject(NG_VALIDATORS) public validators: Array<Validator|ValidatorFn>\r\n  ) {\r\n    if (this.ngControl) {\r\n      this.ngControl.valueAccessor = this;\r\n      // console.log(\"on control\", this);\r\n    }\r\n\r\n    if(this.validators){\r\n      console.log(\"the validators are \", this.validators);\r\n\r\n    }\r\n    this.subscription = new Subscription();\r\n\r\n  }\r\n\r\n\r\n  ngOnInit(): void {\r\n    this.preloadDMSParams();\r\n    console.log(\"the files\", this.pFileUpload.files)\r\n    // this.fileLimit =  NSPAppConstants.MAXIMUM_FILES\r\n\r\n    // console.log(\"the outside validator\", this.ngControl.control?.validator({} as AbstractControl));\r\n  }\r\n\r\n  onRemove(event: Event, rmUuid: string, index: number){\r\n    this.baseFilesObj = this.baseFilesObj.filter((fo:any) => fo.uuid !== rmUuid);\r\n    this.verifiedFiles = this.verifiedFiles.filter((fo:any)=> fo.meta_data?.encodedFileName !== rmUuid);\r\n    this.selectedFilesObj = this.selectedFilesObj.filter((fo:any) => fo.uuid !== rmUuid);\r\n    this.pFileUpload.remove(event, index);\r\n\r\n    // console.log(\"post deleted\", this.ngControl.control);\r\n    this.ngControl.control.setValue(this.baseFilesObj.concat(this.selectedFilesObj).map(x=>{\r\n      return x.selectedFile as File;\r\n    }));\r\n    if(!this.getFormValidationErrors()){\r\n      this.fileUploadHandler('CLM', 'UC1');\r\n      this.baseFilesObj = this.baseFilesObj.concat(this.selectedFilesObj);\r\n    }\r\n    console.log(\"after verified\", this.verifiedFiles);\r\n  \r\n  }\r\n\r\n  logProc(event:Event){\r\n    console.log('biga',this.procInstIdList);\r\n  }\r\n\r\n  onRemoveErrorFiles(event: Event){\r\n    console.log(\"removing error files\");\r\n    this.verifiedFiles = this.verifiedFiles.filter((fo:any)=> fo.err_id ===undefined);\r\n    const successUUID: string[] = this.verifiedFiles.map(x=>{\r\n      return String(x?.meta_data?.encodedFileName);\r\n    })\r\n    this.baseFilesObj = this.baseFilesObj.filter((fo:any) => successUUID.includes(fo.uuid));\r\n  }\r\n\r\n  getFormValidationErrors(): boolean {\r\n    if (this.ngControl.control?.errors) {\r\n      this.errMsg = Object.values(this.ngControl.control?.errors).map(msg => ({\r\n        severity: 'error',\r\n        summary: 'Error',\r\n        detail: msg\r\n      }))\r\n    }\r\n    return this.ngControl.control?.errors != null;\r\n  }\r\n\r\n\r\n  //change this , call api to return filewrapperresponse then push to verifiedfiles\r\n  preloadFiles(txnIds: string[]): void {\r\n    // Clear underlying files\r\n    if(txnIds.length > 0) {\r\n      this.fileUploadService.preload(txnIds).subscribe(\r\n        res => {\r\n          console.log(res.body?.data?.file_upload_resp_list);\r\n\r\n          this.verifiedFiles = this.verifiedFiles.concat(res.body.data.file_upload_resp_list)\r\n            .sort(this.sortBySeverity()); \r\n          const txnIdList = this.verifiedFiles.map((x: any) => String(x.meta_data.id));\r\n          this.txnIdListEvent.emit(txnIdList);\r\n        \r\n        }, error => {\r\n          this.toastService.error(error.error?.error_desc)\r\n        }\r\n      );\r\n    }\r\n  }\r\n\r\n  onSelect(event: any): void {\r\n    this.progress = true;\r\n    console.log('onSelect() of NSPAY2.0 file-upload component', event.currentFiles);\r\n    this.selectedFilesObj = event.currentFiles.map((selectedFile:any, index:number)=>{\r\n      return {\r\n        uuid: Buffer.from(selectedFile.name.replace(\" \", \"\").replace(\"-\",\"\")).toString('base64'),\r\n        selectedFile,\r\n        index\r\n      }\r\n    });\r\n    \r\n    this.selectedFilesObj = this.selectedFilesObj.filter((fo:any) => !this.baseFilesObj.map((x:any)=>{\r\n      return String(x.uuid);\r\n    }).includes(fo.uuid));\r\n\r\n    this.ngControl.control.setValue(this.baseFilesObj.concat(this.selectedFilesObj).map(x=>{\r\n      return x.selectedFile as File;\r\n    }));\r\n\r\n\r\n    if(!this.getFormValidationErrors()){\r\n      this.fileUploadHandler('CLM', 'UC1');\r\n      this.baseFilesObj = this.baseFilesObj.concat(this.selectedFilesObj);\r\n    }\r\n    \r\n  }\r\n\r\n  onProgress(event: any): void {\r\n    // this.pFileUpload.progress = event;\r\n    console.log(\"the progress\", event);\r\n  }\r\n\r\n \r\n\r\n  // onRemove(event: any): void {\r\n  //   console.log('removed files', event);\r\n  //   let filesToEmit: File[] = this.pFileUpload.files;\r\n  //   // Filters away the just-removed file and emit out the file list\r\n  //   filesToEmit = filesToEmit.filter(item => item !== event.file);\r\n  //   this.onChange(filesToEmit);\r\n  // }\r\n\r\n  onRemoveAll(): void {\r\n    console.log('removing all files', this.selectedFiles);\r\n    this.pFileUpload.clear();\r\n    this.selectedFiles = [];\r\n    this.onChange(this.pFileUpload.files);\r\n  }\r\n\r\n  //For cancellation\r\n  //rolls back files\r\n  onClose(): void {\r\n\r\n    // if(this.verifiedFiles.length>0){\r\n      console.log('cancelling for process', this.procInstIdList);\r\n      const closure = this.procInstIdList;\r\n      let params = new HttpParams();\r\n      this.procInstIdList.forEach(x=>{\r\n        params = params.append('procInstIdList',x);\r\n      })\r\n      this.fileUploadService.cancelUpload(null, {params}).subscribe(resp => {\r\n        if(resp.ok){\r\n          this.toastService.success(resp.body.success_message);\r\n        }\r\n      });\r\n      this.closeEvent.emit(closure);\r\n    // }\r\n  \r\n  }\r\n\r\n  //reset/clear files for after sucess \r\n  clearAndReset():void {\r\n  \tthis.pFileUpload.files = [];\r\n    this.verifiedFiles = [];\r\n    this.baseFilesObj = [];\r\n    this.selectedFilesObj = [];\r\n    this.selectedFiles = [];\r\n    this.errCount = 0;\r\n    this.ngOnDestroy();\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.ngControl.control.setValue([]);\r\n    console.log('file upload destroyed');\r\n  }\r\n\r\n  // clearCustomFileArrays(): void {\r\n  //   this.selectedFiles = [];\r\n  //   this.onChange(this.pFileUpload.files);\r\n  // }\r\n\r\n  // Control Value Accessor related methods\r\n  onChange: any = () => {\r\n    console.log(\"onChange\");\r\n  };\r\n  onTouch: any = () => {\r\n    console.log(\"onTouch\");\r\n  };\r\n\r\n  writeValue(obj: any): void {\r\n    // this.pFileUpload.clear();\r\n    // this.selectedFiles = [];\r\n    // this.verifiedFiles = [];\r\n    // this.baseFilesObj = obj;\r\n  }\r\n\r\n  // Upon UI element value changes, this method gets triggered\r\n  registerOnChange(fn: any): void {\r\n    this.onChange = fn;\r\n  }\r\n\r\n  // Upon touching the element, this method gets triggered\r\n  registerOnTouched(fn: any): void {\r\n    // console.log('Function called: registerOnTouched');\r\n    this.onTouch = fn;\r\n  }\r\n\r\n  setDisabledState(isDisabled: boolean): void {\r\n    console.log(\"disabledState\", isDisabled);\r\n  }\r\n\r\n  @Cacheable({key: 'dms-param'})\r\n  preloadDMSParams(): void {\r\n    this.fileUploadService.preloadDMSParam(null).subscribe(resp => {\r\n      if (resp.body.data) {\r\n        const preloadedParams = resp.body.data;\r\n        console.log('preloaded', preloadedParams);\r\n        this.defaultParam.maxMultiFileSize = preloadedParams.dms_multiple_file_max_size;\r\n        this.defaultParam.maxSingleFileSize = preloadedParams.dms_single_file_max_size;\r\n        this.defaultParam.fileLimit = preloadedParams.dms_max_number_files;\r\n        this.defaultParam.extension = preloadedParams.dms_single_file_extension;\r\n\r\n        const baseValidator: ValidatorFn = Validators.compose([FileUploadValidator2.maxFileLimit(this.defaultParam.fileLimit),\r\n          FileUploadValidator2.maxSingleFileSize(this.defaultParam.maxSingleFileSize), FileUploadValidator2.allowableExtension(this.defaultParam.extension)\r\n        ]);\r\n        \r\n        // const baseValidator: ValidatorFn[] = [FileUploadValidator2.maxFileLimit(this.defaultParam.fileLimit),\r\n        //   FileUploadValidator2.maxSingleFileSize(this.defaultParam.maxSingleFileSize)\r\n        // ];\r\n\r\n        const mergedValidator: ValidatorFn = Validators.compose([\r\n          baseValidator, this.ngControl.control.validator]);\r\n        \r\n        this.ngControl.control.setValidators(mergedValidator);\r\n        this.ngControl.control.updateValueAndValidity();\r\n\r\n      }\r\n    });\r\n\r\n  }\r\n\r\n  downloadCSVResult(event:Event){\r\n    console.log(\"showing verified\", this.verifiedFiles);\r\n    const replacer = (key:any, value:any) => value === null || value === undefined? 'valid' : String(value); \r\n    // const header = Object.keys(data[0]);\r\n    const header = [\"File Name\", \"Status\"];\r\n    \r\n    // const csv = this.verifiedFiles.map(data => header.map(x=>JSON.stringify(data.meta_data.fileName, replacer)).join(','));\r\n    const csv = this.verifiedFiles.map(data => JSON.stringify(data.meta_data.fileName, replacer).concat(',').concat(JSON.stringify(data.err_id, replacer)));\r\n\r\n    csv.unshift(header.join(','));\r\n    csv.unshift(String(new Date()));\r\n\r\n    const csvArray = csv.join('\\r\\n');\r\n    const a = document.createElement('a');\r\n    const blob = new Blob([csvArray], { type: 'text/csv' });\r\n    const url = window.URL.createObjectURL(blob);\r\n  \r\n    a.href = url;\r\n    a.download = 'myFile.csv';\r\n    a.click();\r\n    window.URL.revokeObjectURL(url);\r\n    a.remove();\r\n  }\r\n\r\n  getValidatorsOnControl() {\r\n    const validator = this.ngControl.control?.validator(this.ngControl.control);\r\n    console.log(\"the validator:\",validator);\r\n  }\r\n\r\n  get validator() {\r\n    const validator = this.form.get('control').validator(this.ngControl.control);\r\n    console.log(validator);\r\n    if (validator) {\r\n      return true;\r\n    }else return false;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param module -> TODO: Update definition of param\r\n   * @param useCase -> TODO: Update definition of param\r\n   */\r\n  fileUploadHandler(module: string, useCase: string): void {\r\n    setTimeout(() => {\r\n    const eventFiles:File[] = this.selectedFilesObj.map((x:any)=>{\r\n      return x.selectedFile as File;\r\n    })\r\n    console.log('uploading files:', eventFiles);\r\n    this.loading = true;\r\n    this.subscription.add();\r\n\r\n    if(this.selectedFilesObj.length>0){\r\n      this.fileUploadService.generateProcInst(null).pipe(concatMap(procIdResp => {\r\n        if (procIdResp && procIdResp.status === 200) {\r\n          this.procInstIdList.push(procIdResp.body.data);\r\n          if (!this.isMultiple ) {\r\n            return this.fileUploadService.uploadSingle(eventFiles[0], procIdResp.body.data, module, useCase);\r\n          } else {\r\n            return this.fileUploadService.uploadMultiple2(this.selectedFilesObj, procIdResp.body.data, module, useCase);\r\n          }\r\n        } else {\r\n          throw new Error('Failed to generate Process Instance');\r\n        }\r\n      }\r\n    )).subscribe(resp => {\r\n        if (resp) {\r\n          if (!this.isMultiple) {\r\n            if (resp.status === 200) {\r\n              const txnIdList = [];\r\n              if (!resp.body.data.err_id) {\r\n                this.verifiedFiles.push(resp.body.data.meta_data);\r\n                this.toastService.success(resp.body.success_message);\r\n                txnIdList.push(resp.body.data.meta_data.id);\r\n                this.txnIdListEvent.emit(txnIdList);\r\n              } else {\r\n                this.toastService.error(String(resp.body.data.err_id) + ': ' + String(resp.body.data.err_msg));\r\n              }\r\n\r\n              this.loading = false;\r\n            }\r\n          } else {\r\n            if (resp.status === 200) {\r\n           \r\n              this.verifiedFiles = this.verifiedFiles.concat(resp.body.data.file_upload_resp_list)\r\n              .sort(this.sortBySeverity());   \r\n              \r\n              const txnIdList = this.verifiedFiles.map((x: any) => String(x.meta_data.id));\r\n              console.log('verified list', this.verifiedFiles);\r\n                  //clear selected files\r\n              this.selectedFilesObj = [];\r\n              this.pFileUpload.files = [];\r\n              this.pFileUpload.clear();\r\n              console.log(\"state of selected files\", this.selectedFilesObj);\r\n\r\n              this.txnIdListEvent.emit(txnIdList);\r\n\r\n              if (!resp.body.data.error_map || (resp.body.data.error_map && Object.keys(resp.body.data.error_map).length === 0)) {\r\n                this.toastService.success(resp.body.success_message);\r\n              } else {\r\n                \r\n                // const errList: any = Object.entries(resp.body.data.error_map).map(([key, value]) => ({\r\n                //   errId: key,\r\n                //   value\r\n                // }));\r\n                // console.log('erroList is ', errList);\r\n                // let errorMsg = '';\r\n                // errList.forEach((x: any) => {\r\n                //   errorMsg = errorMsg.concat(x.errId).concat(': ').concat(x.value).concat('</br>');\r\n                // });\r\n                // console.log('errMsg is ' + errorMsg);\r\n                // this.toastService.error(errorMsg);\r\n\r\n\r\n              }\r\n\r\n              // txnIdList = resp.body.data.file_upload_resp_list.map(x=>{return x.meta_data.id});\r\n              this.loading = false;\r\n\r\n            }\r\n          }\r\n        }\r\n      },\r\n      (error: any) => {\r\n        console.log(\"error is \" + String(error));\r\n        this.loading = false;\r\n\r\n      });\r\n\r\n      // this.onRemoveAll();\r\n    }else this.loading = false;\r\n  }, 0);\r\n\r\n  }\r\n\r\n  sortBySeverity() {\r\n    return function (a: any, b: any) {\r\n      if (a.err_id === b.err_id) {\r\n        return 0;\r\n      } else if (a.err_id !== undefined) {\r\n        return -1;\r\n      } else if (b.err_id !== undefined) {\r\n        return 1;\r\n      } else {\r\n        return a.err_id <b.err_id ? -1 : 1;\r\n      }\r\n    }\r\n  }\r\n\r\n  getTotalFileMax():number{\r\n    if(this.externalFileLimit){\r\n      return this.externalFileLimit;\r\n    }else return this.defaultParam.fileLimit as number;\r\n  }\r\n\r\n  getErrorCount(): number{\r\n    return this.verifiedFiles.filter((fo:any)=> fo.err_id!==undefined).length  + this.selectedFilesObj.length;\r\n  }\r\n  getSuccessCount(): number{\r\n    return this.verifiedFiles.filter((fo:any)=> fo.err_id===undefined).length;\r\n  }\r\n\r\n  getProgress(): number{\r\n    return Math.floor(this.verifiedFiles.length/(this.verifiedFiles.length + this.selectedFilesObj.length)*100)\r\n  }\r\n\r\n  disableButtons(disable: boolean): void {\r\n    this.disableButton = disable;\r\n  }\r\n\r\n\r\n  // unwrapPendingFileObj(obj: any[]): File[]{\r\n  //   // return String(obj?.selectedFile?.name);\r\n  //   return obj.map(x=>{\r\n  //     return x?.selectedFile as File\r\n  //   });\r\n  // }\r\n\r\n  // unwrapPendingFileObj(obj: any[]): string{\r\n  //   return String(obj?.selectedFile?.name);\r\n  //   return obj.map(x=>{\r\n  //     return x?.selectedFile as File\r\n  //   });\r\n  // }\r\n\r\n}\r\n\r\n\r\n\r\n","<!-- (onRemove)='onRemove($event)'\r\n(onClear)='clearCustomFileArrays()' -->\r\n<!-- [auto]=\"true\" -->\r\n<!-- (uploadHandler) = \"fileUploadHandler('CLM', 'UC1')\" -->\r\n\r\n\r\n<p-fileUpload name='fileupload[]'\r\n              [multiple]='isMultiple'\r\n              cancelLabel='Remove All'\r\n              uploadLabel='Verify File'\r\n              (onSelect)='onSelect($event)'\r\n              (onProgress)='onProgress($event)'\r\n              [showUploadButton]='false'\r\n              [showCancelButton]='false'\r\n              [customUpload]='true'\r\n              [disabled]=\"disableButton\"\r\n              #pfileUpload>\r\n    <ng-template pTemplate='toolbar'>\r\n   \r\n          <button pButton label=\"Remove Error files\" (click) = \"onRemoveErrorFiles($event)\" [style]=\"{'margin-right': '.5em'}\"></button>\r\n          <!-- <button pButton label=\"log\" (click) = \"logProc($event)\" [style]=\"{'margin-right': '.5em'}\"></button> -->\r\n          <button *ngIf=\"showCSV\" [disabled]=\"!(verifiedFiles.length>0 && selectedFilesObj.length==0)\"\r\n            pButton label=\"Download Result\" (click) = \"downloadCSVResult($event)\" [style]=\"{'margin-right': '.5em', 'float': 'right'}\"></button>\r\n      <div>\r\n        <br /> Total Files Allowed: {{ getTotalFileMax() }}\r\n        <br /> Total Files:  {{ verifiedFiles.length + selectedFilesObj.length }} \r\n        <br /> Success Files:  {{ getSuccessCount() }}\r\n        <br /> Error Files:  {{ getErrorCount() }}\r\n        <br><br>\r\n        <!-- <p-progressBar *ngIf='loading' mode='indeterminate' [style]=\"{'height': '6px'}\"></p-progressBar> -->\r\n        <p-progressBar *ngIf=\"progress && this.verifiedFiles.length + this.selectedFilesObj.length > 0\" [value]=\"getProgress()\" [style]=\"{'height': '15px'}\"></p-progressBar>\r\n\r\n      </div>\r\n      <br/>\r\n      <span *ngIf=\"this.getFormValidationErrors()\" [ngStyle]=\"{'background-color': 'white'}\">\r\n        <p-messages [(value)]=\"errMsg\"\r\n          [showTransitionOptions]=\"'0ms'\"\r\n          [hideTransitionOptions]=\"'0ms'\"\r\n          [closable]=\"false\"></p-messages>\r\n      </span>\r\n    </ng-template>\r\n\r\n  <ng-template pTemplate='content'>\r\n    <div style=\"overflow: auto; height: 400px; max-width: 100%; overflow-x: hidden\" [style.height]=\"contentHeight\">\r\n      <ul *ngIf='selectedFilesObj.length'>\r\n          <div *ngFor=\"let fileObj of selectedFilesObj;\">\r\n            <div class = \"field grid\">\r\n              <div class=\"col-5\">\r\n                <span [ngStyle]=\"{'color': 'lightgrey'}\">\r\n                  {{ fileObj.selectedFile.name }}\r\n                </span>\r\n              </div>\r\n              <div class=\"col-2\">\r\n                {{fileObj.selectedFile.size / 1024 | number : '1.2-2' }} KB\r\n              </div>\r\n              <div class=\"col-4\">\r\n              </div>\r\n              <div class= \"col-1\">\r\n                <button pButton pRipple type=\"button\" icon=\"pi pi-times\"  (click) = \"onRemove($event, fileObj?.uuid, fileObj?.index)\"\r\n                class=\"custom-fileupload-remove-button p-button-rounded p-button-danger p-button-text\"></button>\r\n              </div>\r\n            </div>\r\n          <p-divider></p-divider>\r\n        </div>\r\n      </ul>\r\n\r\n      <ul *ngIf='verifiedFiles.length'>\r\n        <div *ngFor=\"let file of verifiedFiles;\">\r\n          <div class = \"field grid\">\r\n            <div class=\"col-5\">\r\n              <span [ngStyle]=\"file.err_id !==undefined && {'color': 'red'}\">\r\n                {{file.meta_data.fileName}}\r\n              </span>\r\n            </div>\r\n            <div class=\"col-2\">\r\n              {{file.meta_data.fileSize / 1024 | number : '1.2-2' }} KB\r\n            </div>\r\n            <div class=\"col-4\">\r\n              <span *ngIf=\"file.err_msg!==undefined; else validated\">{{ file.err_msg }}</span>\r\n              <ng-template #validated>\r\n                <span>Validated</span>\r\n              </ng-template>\r\n            </div>\r\n\r\n            <div class= \"col-1\">\r\n              <button pButton pRipple type=\"button\" icon=\"pi pi-times\"(click) = \"onRemove($event, file?.meta_data?.encodedFileName, null)\"\r\n              class=\"p-button-rounded p-button-danger p-button-text\"></button>\r\n\r\n            </div>\r\n          </div>\r\n          <p-divider></p-divider>\r\n        </div>\r\n      </ul>\r\n    </div>\r\n  </ng-template>\r\n</p-fileUpload>\r\n\r\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}