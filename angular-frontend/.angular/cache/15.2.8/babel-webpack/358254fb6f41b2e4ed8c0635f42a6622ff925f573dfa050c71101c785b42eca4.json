{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.InstalmentService = void 0;\nconst tslib_1 = require(\"tslib\");\nconst i0 = tslib_1.__importStar(require(\"@angular/core\"));\nconst i1 = tslib_1.__importStar(require(\"@angular/common/http\"));\nconst i2 = tslib_1.__importStar(require(\"app/core/config/application-config.service\"));\nconst i3 = tslib_1.__importStar(require(\"app/shared/service/ns2-http.service\"));\nclass InstalmentService {\n  constructor(http, applicationConfigService, ns2Http) {\n    this.http = http;\n    this.applicationConfigService = applicationConfigService;\n    this.ns2Http = ns2Http;\n    this.resourceUrl = this.applicationConfigService.getEndpointFor('api/payment/instalment');\n  }\n  /* Retrieves all Instalments */\n  getAll(options) {\n    return this.ns2Http.get(this.resourceUrl, options);\n  }\n  /* Retrieves all the data related to the given Instalment ID */\n  getInstalment(instalmentId) {\n    // console.log('Executing function: getInstalment() with param value: ' + instalmentId);\n    const url = this.resourceUrl + '/' + instalmentId;\n    return this.http.get(url, {\n      observe: 'response'\n    });\n  }\n  /* Retrieves all Instalments related to the NSman based on given NRIC */\n  getByNSman(nsmanId, options) {\n    const url = this.resourceUrl + '/nsman/' + nsmanId;\n    console.log('Executing function: getInstalmentsByNSman() with param value: ' + nsmanId);\n    return this.ns2Http.get(url, options);\n  }\n  /* Retrieves existing draft Instalment Plan related to the NSman based on given NRIC */\n  getDraftInstalmentByNSman(nsmanId, options) {\n    const url = this.resourceUrl + '/nsman/' + nsmanId + \"/draft\";\n    console.log('Executing function: getDraftInstalmentByNSman() with param value: ' + nsmanId);\n    return this.ns2Http.get(url, options);\n  }\n  /* Retrieves all the data related to the given Instalment Plan ID */\n  getPendingInstalment(instalmentId) {\n    const url = `${this.resourceUrl}/approval/${instalmentId}`;\n    return this.ns2Http.get(url);\n  }\n  /* POST : Approve/reject instalment plan */\n  approve(instalmentId, request) {\n    const url = `${this.resourceUrl}/approval/${instalmentId}`;\n    return this.ns2Http.post(url, request);\n  }\n  /* Retrieves all the data related to the given Rejected Instalment Plan ID */\n  getRejectedInstalment(instalmentId) {\n    const url = `${this.resourceUrl}/rejected/${instalmentId}`;\n    return this.ns2Http.get(url);\n  }\n  /* Persist a draft of Instalment Plan to database */\n  saveDraftInstalmentPlan(draftInstalmentToSave) {\n    console.log('Executing function: saveDraftInstalmentPlan() with the following IInstalmentPlan instance', draftInstalmentToSave);\n    const url = this.resourceUrl + \"/save\";\n    return this.ns2Http.put(url, draftInstalmentToSave);\n  }\n  create(instalmentPlan) {\n    const url = `${this.resourceUrl}/create`;\n    return this.ns2Http.post(url, instalmentPlan);\n  }\n  /* Computes and generates the Instalment Plan given the following parameters, stored in a IInstalmentPlan instance:\r\n  *  Monthly Instalment amount, first month to start, interest rate,\r\n  *  Principal O/S, Interest O/S, Total O/S\r\n  * */\n  computePaymentPlan(instalmentToCompute) {\n    const url = this.resourceUrl + \"/compute\";\n    return this.ns2Http.post(url, instalmentToCompute);\n  }\n  /* PATCH: Update Instalment to PENDING_TERMINATION status */\n  terminate(instalmentArray) {\n    const url = this.resourceUrl + '/terminate';\n    return this.ns2Http.patch(url, instalmentArray);\n  }\n  getPendingTermination(instalmentId) {\n    const url = `${this.resourceUrl}/terminate/approval/${instalmentId}`;\n    return this.ns2Http.get(url);\n  }\n}\nexports.InstalmentService = InstalmentService;\nInstalmentService.ɵfac = function InstalmentService_Factory(t) {\n  return new (t || InstalmentService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.ApplicationConfigService), i0.ɵɵinject(i3.Ns2HttpService));\n};\nInstalmentService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: InstalmentService,\n  factory: InstalmentService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";;;;;;;;;;;AAQA,MAGaA,iBAAiB;EAG5BC,YACUC,IAAgB,EAChBC,wBAAkD,EAClDC,OAAuB;IAFvB,SAAI,GAAJF,IAAI;IACJ,6BAAwB,GAAxBC,wBAAwB;IACxB,YAAO,GAAPC,OAAO;IALV,gBAAW,GAAG,IAAI,CAACD,wBAAwB,CAACE,cAAc,CAAC,wBAAwB,CAAC;EAO3F;EAEA;EACOC,MAAM,CAACC,OAAa;IACzB,OAAO,IAAI,CAACH,OAAO,CAACI,GAAG,CAAC,IAAI,CAACC,WAAW,EAAEF,OAAO,CAAC;EACpD;EAEA;EACOG,aAAa,CAACC,YAAoB;IACvC;IACA,MAAMC,GAAG,GAAG,IAAI,CAACH,WAAW,GAAG,GAAG,GAAGE,YAAY;IACjD,OAAO,IAAI,CAACT,IAAI,CAACM,GAAG,CAAoBI,GAAG,EAAE;MAACC,OAAO,EAAE;IAAU,CAAC,CAAC;EACrE;EAEA;EACOC,UAAU,CAACC,OAAe,EAAER,OAAa;IAC9C,MAAMK,GAAG,GAAG,IAAI,CAACH,WAAW,GAAG,SAAS,GAAGM,OAAO;IAClDC,OAAO,CAACC,GAAG,CAAC,gEAAgE,GAAGF,OAAO,CAAC;IACvF,OAAO,IAAI,CAACX,OAAO,CAACI,GAAG,CAACI,GAAG,EAAEL,OAAO,CAAC;EACvC;EAEA;EACOW,yBAAyB,CAACH,OAAe,EAAER,OAAa;IAC7D,MAAMK,GAAG,GAAG,IAAI,CAACH,WAAW,GAAG,SAAS,GAAGM,OAAO,GAAG,QAAQ;IAC7DC,OAAO,CAACC,GAAG,CAAC,oEAAoE,GAAGF,OAAO,CAAC;IAC3F,OAAO,IAAI,CAACX,OAAO,CAACI,GAAG,CAACI,GAAG,EAAEL,OAAO,CAAC;EACvC;EAEA;EACOY,oBAAoB,CAACR,YAAoB;IAC9C,MAAMC,GAAG,GAAG,GAAG,IAAI,CAACH,WAAW,aAAaE,YAAY,EAAE;IAC1D,OAAO,IAAI,CAACP,OAAO,CAACI,GAAG,CAACI,GAAG,CAAC;EAC9B;EAEA;EACOQ,OAAO,CAACT,YAAoB,EAAEU,OAAY;IAC/C,MAAMT,GAAG,GAAG,GAAG,IAAI,CAACH,WAAW,aAAaE,YAAY,EAAE;IAC1D,OAAO,IAAI,CAACP,OAAO,CAACkB,IAAI,CAACV,GAAG,EAAES,OAAO,CAAC;EACxC;EAEA;EACOE,qBAAqB,CAACZ,YAAoB;IAC/C,MAAMC,GAAG,GAAG,GAAG,IAAI,CAACH,WAAW,aAAaE,YAAY,EAAE;IAC1D,OAAO,IAAI,CAACP,OAAO,CAACI,GAAG,CAACI,GAAG,CAAC;EAC9B;EAEA;EACOY,uBAAuB,CAACC,qBAAsC;IACnET,OAAO,CAACC,GAAG,CAAC,2FAA2F,EAAEQ,qBAAqB,CAAC;IAC/H,MAAMb,GAAG,GAAG,IAAI,CAACH,WAAW,GAAG,OAAO;IACtC,OAAO,IAAI,CAACL,OAAO,CAACsB,GAAG,CAACd,GAAG,EAAEa,qBAAqB,CAAC;EACrD;EAEOE,MAAM,CAACC,cAA+B;IAC3C,MAAMhB,GAAG,GAAG,GAAG,IAAI,CAACH,WAAW,SAAS;IACxC,OAAO,IAAI,CAACL,OAAO,CAACkB,IAAI,CAACV,GAAG,EAAEgB,cAAc,CAAC;EAC/C;EACA;;;;EAIOC,kBAAkB,CAACC,mBAAoC;IAC5D,MAAMlB,GAAG,GAAG,IAAI,CAACH,WAAW,GAAG,UAAU;IACzC,OAAO,IAAI,CAACL,OAAO,CAACkB,IAAI,CAACV,GAAG,EAAEkB,mBAAmB,CAAC;EACpD;EAEA;EACOC,SAAS,CAACC,eAAkC;IACjD,MAAMpB,GAAG,GAAG,IAAI,CAACH,WAAW,GAAG,YAAY;IAC3C,OAAO,IAAI,CAACL,OAAO,CAAC6B,KAAK,CAACrB,GAAG,EAAEoB,eAAe,CAAC;EACjD;EAEOE,qBAAqB,CAACvB,YAAoB;IAC/C,MAAMC,GAAG,GAAG,GAAG,IAAI,CAACH,WAAW,uBAAuBE,YAAY,EAAE;IACpE,OAAO,IAAI,CAACP,OAAO,CAACI,GAAG,CAACI,GAAG,CAAC;EAC9B;;AAtFFuB;;mBAGanC,iBAAiB;AAAA;;SAAjBA,iBAAiB;EAAAoC,SAAjBpC,iBAAiB;EAAAqC,YAFhB;AAAM","names":["InstalmentService","constructor","http","applicationConfigService","ns2Http","getEndpointFor","getAll","options","get","resourceUrl","getInstalment","instalmentId","url","observe","getByNSman","nsmanId","console","log","getDraftInstalmentByNSman","getPendingInstalment","approve","request","post","getRejectedInstalment","saveDraftInstalmentPlan","draftInstalmentToSave","put","create","instalmentPlan","computePaymentPlan","instalmentToCompute","terminate","instalmentArray","patch","getPendingTermination","exports","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\D1347074\\Desktop\\projects 2\\nspayiiapp\\src\\main\\webapp\\app\\payment\\instalment\\service\\instalment.service.ts"],"sourcesContent":["import {Injectable} from '@angular/core';\r\nimport {HttpClient} from '@angular/common/http';\r\nimport {ApplicationConfigService} from 'app/core/config/application-config.service';\r\nimport {IInstalmentRecord} from 'app/payment/instalment/model/instalment-record.model';\r\nimport {Observable} from 'rxjs';\r\nimport {Ns2HttpService} from 'app/shared/service/ns2-http.service';\r\nimport {IInstalmentPlan} from \"app/payment/instalment/model/instalment-plan.model\";\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class InstalmentService {\r\n  public resourceUrl = this.applicationConfigService.getEndpointFor('api/payment/instalment');\r\n\r\n  constructor(\r\n    private http: HttpClient,\r\n    private applicationConfigService: ApplicationConfigService,\r\n    private ns2Http: Ns2HttpService\r\n  ) {\r\n  }\r\n\r\n  /* Retrieves all Instalments */\r\n  public getAll(options?: any): Observable<any> {\r\n    return this.ns2Http.get(this.resourceUrl, options);\r\n  }\r\n\r\n  /* Retrieves all the data related to the given Instalment ID */\r\n  public getInstalment(instalmentId: string): Observable<any> {\r\n    // console.log('Executing function: getInstalment() with param value: ' + instalmentId);\r\n    const url = this.resourceUrl + '/' + instalmentId;\r\n    return this.http.get<IInstalmentRecord>(url, {observe: 'response'});\r\n  }\r\n\r\n  /* Retrieves all Instalments related to the NSman based on given NRIC */\r\n  public getByNSman(nsmanId: string, options?: any): Observable<any> {\r\n    const url = this.resourceUrl + '/nsman/' + nsmanId;\r\n    console.log('Executing function: getInstalmentsByNSman() with param value: ' + nsmanId);\r\n    return this.ns2Http.get(url, options);\r\n  }\r\n\r\n  /* Retrieves existing draft Instalment Plan related to the NSman based on given NRIC */\r\n  public getDraftInstalmentByNSman(nsmanId: string, options?: any): Observable<any> {\r\n    const url = this.resourceUrl + '/nsman/' + nsmanId + \"/draft\";\r\n    console.log('Executing function: getDraftInstalmentByNSman() with param value: ' + nsmanId);\r\n    return this.ns2Http.get(url, options);\r\n  }\r\n\r\n  /* Retrieves all the data related to the given Instalment Plan ID */\r\n  public getPendingInstalment(instalmentId: string): Observable<any> {\r\n    const url = `${this.resourceUrl}/approval/${instalmentId}`; \r\n    return this.ns2Http.get(url);\r\n  }\r\n\r\n  /* POST : Approve/reject instalment plan */\r\n  public approve(instalmentId: string, request: any): Observable<any> {\r\n    const url = `${this.resourceUrl}/approval/${instalmentId}`; \r\n    return this.ns2Http.post(url, request);\r\n  }\r\n    \r\n  /* Retrieves all the data related to the given Rejected Instalment Plan ID */\r\n  public getRejectedInstalment(instalmentId: string): Observable<any> {\r\n    const url = `${this.resourceUrl}/rejected/${instalmentId}`;\r\n    return this.ns2Http.get(url);\r\n  }\r\n\r\n  /* Persist a draft of Instalment Plan to database */\r\n  public saveDraftInstalmentPlan(draftInstalmentToSave: IInstalmentPlan): Observable<any> {\r\n    console.log('Executing function: saveDraftInstalmentPlan() with the following IInstalmentPlan instance', draftInstalmentToSave);\r\n    const url = this.resourceUrl + \"/save\";\r\n    return this.ns2Http.put(url, draftInstalmentToSave);\r\n  }\r\n\r\n  public create(instalmentPlan: IInstalmentPlan): Observable<any> {\r\n    const url = `${this.resourceUrl}/create`;\r\n    return this.ns2Http.post(url, instalmentPlan);\r\n  }\r\n  /* Computes and generates the Instalment Plan given the following parameters, stored in a IInstalmentPlan instance:\r\n  *  Monthly Instalment amount, first month to start, interest rate,\r\n  *  Principal O/S, Interest O/S, Total O/S\r\n  * */\r\n  public computePaymentPlan(instalmentToCompute: IInstalmentPlan): Observable<any> {\r\n    const url = this.resourceUrl + \"/compute\";\r\n    return this.ns2Http.post(url, instalmentToCompute);\r\n  }\r\n\r\n  /* PATCH: Update Instalment to PENDING_TERMINATION status */\r\n  public terminate(instalmentArray: IInstalmentPlan[]): Observable<any> {\r\n    const url = this.resourceUrl + '/terminate';\r\n    return this.ns2Http.patch(url, instalmentArray);\r\n  }\r\n\r\n  public getPendingTermination(instalmentId: string): Observable<any> {\r\n    const url = `${this.resourceUrl}/terminate/approval/${instalmentId}`; \r\n    return this.ns2Http.get(url);\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}