{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MipsUploadService = void 0;\nconst tslib_1 = require(\"tslib\");\nconst i0 = tslib_1.__importStar(require(\"@angular/core\"));\nconst i1 = tslib_1.__importStar(require(\"app/core/config/application-config.service\"));\nconst i2 = tslib_1.__importStar(require(\"app/shared/service/ns2-http.service\"));\nconst i3 = tslib_1.__importStar(require(\"@angular/common/http\"));\nclass MipsUploadService {\n  constructor(applicationConfigService, ns2Http, http) {\n    this.applicationConfigService = applicationConfigService;\n    this.ns2Http = ns2Http;\n    this.http = http;\n    this.resourceUrl = this.applicationConfigService.getEndpointFor('api/payment/overpayment/mips');\n  }\n  getAllHistory(options) {\n    const url = `${this.resourceUrl}/history`;\n    return this.ns2Http.get(url, options);\n  }\n  //MIPS\n  patch(id, fields) {\n    const url = `${this.resourceUrl}/${id}`;\n    return this.ns2Http.patch(url, fields);\n  }\n  get(id) {\n    const url = `${this.resourceUrl}/${id}`;\n    return this.ns2Http.get(url);\n  }\n  //MIPS FILE\n  upload(fileTxnId) {\n    const url = `${this.resourceUrl}/file`;\n    return this.ns2Http.postWithFormData(url, {\n      fileTxnId\n    });\n  }\n  getMipsFileRecord(id) {\n    const url = `${this.resourceUrl}/file/${id}`;\n    return this.ns2Http.get(url);\n  }\n  verifySource(id, data) {\n    const url = `${this.resourceUrl}/file/${id}/verify`;\n    return this.ns2Http.post(url, data);\n  }\n  approveMipsFileRecord(id, approve) {\n    const url = `${this.resourceUrl}/file/${id}/approval`;\n    return this.ns2Http.post(url, {\n      approve\n    });\n  }\n}\nexports.MipsUploadService = MipsUploadService;\nMipsUploadService.ɵfac = function MipsUploadService_Factory(t) {\n  return new (t || MipsUploadService)(i0.ɵɵinject(i1.ApplicationConfigService), i0.ɵɵinject(i2.Ns2HttpService), i0.ɵɵinject(i3.HttpClient));\n};\nMipsUploadService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: MipsUploadService,\n  factory: MipsUploadService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";;;;;;;;;;;AAQA,MAGaA,iBAAiB;EAG5BC,YACUC,wBAAkD,EAClDC,OAAuB,EACvBC,IAAgB;IAFhB,6BAAwB,GAAxBF,wBAAwB;IACxB,YAAO,GAAPC,OAAO;IACP,SAAI,GAAJC,IAAI;IALP,gBAAW,GAAG,IAAI,CAACF,wBAAwB,CAACG,cAAc,CAAC,8BAA8B,CAAC;EAMjG;EAEOC,aAAa,CAACC,OAAa;IAChC,MAAMC,GAAG,GAAG,GAAG,IAAI,CAACC,WAAW,UAAU;IACzC,OAAO,IAAI,CAACN,OAAO,CAACO,GAAG,CAACF,GAAG,EAAED,OAAO,CAAC;EACvC;EAEA;EACOI,KAAK,CAACC,EAAU,EAAEC,MAAW;IAClC,MAAML,GAAG,GAAG,GAAG,IAAI,CAACC,WAAW,IAAIG,EAAE,EAAE;IACvC,OAAO,IAAI,CAACT,OAAO,CAACQ,KAAK,CAACH,GAAG,EAAEK,MAAM,CAAC;EACxC;EAEOH,GAAG,CAACE,EAAU;IACnB,MAAMJ,GAAG,GAAG,GAAG,IAAI,CAACC,WAAW,IAAIG,EAAE,EAAE;IACvC,OAAO,IAAI,CAACT,OAAO,CAACO,GAAG,CAACF,GAAG,CAAC;EAC9B;EAEA;EACOM,MAAM,CAACC,SAAiB;IAC7B,MAAMP,GAAG,GAAG,GAAG,IAAI,CAACC,WAAW,OAAO;IACtC,OAAO,IAAI,CAACN,OAAO,CAACa,gBAAgB,CAACR,GAAG,EAAE;MAACO;IAAS,CAAC,CAAC;EACxD;EAEOE,iBAAiB,CAACL,EAAU;IACjC,MAAMJ,GAAG,GAAG,GAAG,IAAI,CAACC,WAAW,SAASG,EAAE,EAAE;IAC5C,OAAO,IAAI,CAACT,OAAO,CAACO,GAAG,CAACF,GAAG,CAAC;EAC9B;EAEOU,YAAY,CAACN,EAAU,EAAEO,IAAS;IACvC,MAAMX,GAAG,GAAG,GAAG,IAAI,CAACC,WAAW,SAASG,EAAE,SAAS;IACnD,OAAO,IAAI,CAACT,OAAO,CAACiB,IAAI,CAACZ,GAAG,EAAEW,IAAI,CAAC;EACrC;EAEOE,qBAAqB,CAACT,EAAU,EAAEU,OAAgB;IACvD,MAAMd,GAAG,GAAG,GAAG,IAAI,CAACC,WAAW,SAASG,EAAE,WAAW;IACrD,OAAO,IAAI,CAACT,OAAO,CAACiB,IAAI,CAACZ,GAAG,EAAE;MAACc;IAAO,CAAC,CAAC;EAC1C;;AA/CFC;;mBAGavB,iBAAiB;AAAA;;SAAjBA,iBAAiB;EAAAwB,SAAjBxB,iBAAiB;EAAAyB,YAFhB;AAAM","names":["MipsUploadService","constructor","applicationConfigService","ns2Http","http","getEndpointFor","getAllHistory","options","url","resourceUrl","get","patch","id","fields","upload","fileTxnId","postWithFormData","getMipsFileRecord","verifySource","data","post","approveMipsFileRecord","approve","exports","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\D1347074\\Desktop\\projects 2\\nspayiiapp\\src\\main\\webapp\\app\\payment\\overpayment\\service\\mips-upload.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { ApplicationConfigService } from 'app/core/config/application-config.service';\r\nimport { IMipsUploadHistory } from 'app/payment/overpayment/mips-upload-history/model/mips-upload-history.model';\r\nimport {Observable} from \"rxjs\";\r\nimport { Ns2HttpService } from 'app/shared/service/ns2-http.service';\r\nimport { String } from 'lodash';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class MipsUploadService {\r\n  public resourceUrl = this.applicationConfigService.getEndpointFor('api/payment/overpayment/mips');\r\n\r\n  constructor(\r\n    private applicationConfigService: ApplicationConfigService,\r\n    private ns2Http: Ns2HttpService,\r\n    private http: HttpClient) {\r\n  }\r\n\r\n  public getAllHistory(options?: any): Observable<any> {\r\n    const url = `${this.resourceUrl}/history`;\r\n    return this.ns2Http.get(url, options);\r\n  }\r\n\r\n  //MIPS\r\n  public patch(id: string, fields: any): Observable<any> {\r\n    const url = `${this.resourceUrl}/${id}`;\r\n    return this.ns2Http.patch(url, fields);\r\n  }\r\n\r\n  public get(id: string): Observable<any> {\r\n    const url = `${this.resourceUrl}/${id}`;\r\n    return this.ns2Http.get(url);\r\n  }\r\n\r\n  //MIPS FILE\r\n  public upload(fileTxnId: string): Observable<any> {\r\n    const url = `${this.resourceUrl}/file`;\r\n    return this.ns2Http.postWithFormData(url, {fileTxnId});\r\n  }\r\n\r\n  public getMipsFileRecord(id: string): Observable<any> {\r\n    const url = `${this.resourceUrl}/file/${id}`;\r\n    return this.ns2Http.get(url);\r\n  }\r\n\r\n  public verifySource(id: string, data: any): Observable<any> {\r\n    const url = `${this.resourceUrl}/file/${id}/verify`;\r\n    return this.ns2Http.post(url, data);\r\n  }\r\n\r\n  public approveMipsFileRecord(id: string, approve: boolean): Observable<any> {\r\n    const url = `${this.resourceUrl}/file/${id}/approval`;\r\n    return this.ns2Http.post(url, {approve});\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}