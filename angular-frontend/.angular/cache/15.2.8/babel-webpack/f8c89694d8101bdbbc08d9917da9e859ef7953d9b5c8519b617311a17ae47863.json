{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.IcUserPickerService = void 0;\nconst tslib_1 = require(\"tslib\");\nconst operators_1 = require(\"rxjs/operators\");\nconst i0 = tslib_1.__importStar(require(\"@angular/core\"));\nconst i1 = tslib_1.__importStar(require(\"@angular/common/http\"));\nclass IcUserPickerService {\n  constructor(http) {\n    this.http = http;\n    this.resourceUrlForGetUser = 'api/users';\n    this.resourceUrlForGetUserInfo = 'api/userInfo';\n  }\n  findByCondition(condition) {\n    return this.http.get(`${this.resourceUrlForGetUser}?condition=${condition}`).pipe((0, operators_1.map)(response => {\n      try {\n        return response;\n      } catch (error) {\n        console.error(error);\n        return null;\n      }\n    }));\n  }\n  findUserInfoBySubjectId(subjectId) {\n    return this.http.get(`${this.resourceUrlForGetUserInfo}/${subjectId}`).pipe((0, operators_1.map)(res => {\n      try {\n        return res;\n      } catch (error) {\n        console.error(error);\n        return null;\n      }\n    }));\n  }\n}\nexports.IcUserPickerService = IcUserPickerService;\nIcUserPickerService.ɵfac = function IcUserPickerService_Factory(t) {\n  return new (t || IcUserPickerService)(i0.ɵɵinject(i1.HttpClient));\n};\nIcUserPickerService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: IcUserPickerService,\n  factory: IcUserPickerService.ɵfac\n});","map":{"version":3,"mappings":";;;;;;;AAGA;;;AAEA,MACaA,mBAAmB;EAK9BC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAJhB,0BAAqB,GAAG,WAAW;IAEnC,8BAAyB,GAAG,cAAc;EAEX;EAEvCC,eAAe,CAACC,SAAiB;IAC/B,OAAO,IAAI,CAACF,IAAI,CAACG,GAAG,CAAC,GAAG,IAAI,CAACC,qBAAqB,cAAcF,SAAS,EAAE,CAAC,CAACG,IAAI,CAC/E,mBAAG,EAACC,QAAQ,IAAG;MACb,IAAI;QACF,OAAOA,QAAQ;OAChB,CAAC,OAAOC,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC;QACpB,OAAO,IAAI;;IAEf,CAAC,CAAC,CACH;EACH;EAEAE,uBAAuB,CAACC,SAAiB;IACvC,OAAO,IAAI,CAACV,IAAI,CAACG,GAAG,CAAC,GAAG,IAAI,CAACQ,yBAAyB,IAAID,SAAS,EAAE,CAAC,CAACL,IAAI,CACzE,mBAAG,EAACO,GAAG,IAAG;MACR,IAAI;QACF,OAAOA,GAAG;OACX,CAAC,OAAOL,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC;QACpB,OAAO,IAAI;;IAEf,CAAC,CAAC,CACH;EACH;;AAhCFM;;mBACaf,mBAAmB;AAAA;;SAAnBA,mBAAmB;EAAAgB,SAAnBhB,mBAAmB;AAAA","names":["IcUserPickerService","constructor","http","findByCondition","condition","get","resourceUrlForGetUser","pipe","response","error","console","findUserInfoBySubjectId","subjectId","resourceUrlForGetUserInfo","res","exports","factory"],"sourceRoot":"","sources":["C:\\Users\\D1347074\\Desktop\\projects 2\\nspayiiapp\\src\\main\\webapp\\app\\ng-connect\\user-picker\\ic-user-picker-service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { map } from 'rxjs/operators';\r\n\r\n@Injectable()\r\nexport class IcUserPickerService {\r\n  private resourceUrlForGetUser = 'api/users';\r\n\r\n  private resourceUrlForGetUserInfo = 'api/userInfo';\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  findByCondition(condition: string): Observable<any> {\r\n    return this.http.get(`${this.resourceUrlForGetUser}?condition=${condition}`).pipe(\r\n      map(response => {\r\n        try {\r\n          return response;\r\n        } catch (error) {\r\n          console.error(error);\r\n          return null;\r\n        }\r\n      })\r\n    );\r\n  }\r\n\r\n  findUserInfoBySubjectId(subjectId: string): Observable<any> {\r\n    return this.http.get(`${this.resourceUrlForGetUserInfo}/${subjectId}`).pipe(\r\n      map(res => {\r\n        try {\r\n          return res;\r\n        } catch (error) {\r\n          console.error(error);\r\n          return null;\r\n        }\r\n      })\r\n    );\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}