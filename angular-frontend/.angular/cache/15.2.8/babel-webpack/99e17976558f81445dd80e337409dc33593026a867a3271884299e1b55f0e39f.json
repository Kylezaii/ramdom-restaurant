{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AccessRightReviewService = void 0;\nconst tslib_1 = require(\"tslib\");\nconst i0 = tslib_1.__importStar(require(\"@angular/core\"));\nconst i1 = tslib_1.__importStar(require(\"app/shared/service/ns2-http.service\"));\nconst i2 = tslib_1.__importStar(require(\"app/core/config/application-config.service\"));\nconst i3 = tslib_1.__importStar(require(\"@angular/common/http\"));\nclass AccessRightReviewService {\n  constructor(ns2HttpService, applicationConfigService, http) {\n    this.ns2HttpService = ns2HttpService;\n    this.applicationConfigService = applicationConfigService;\n    this.http = http;\n    this.resourceUrl = this.applicationConfigService.getEndpointFor('api/acl');\n  }\n  getAllReviews(options) {\n    const url = `${this.resourceUrl}/reviews`;\n    return this.ns2HttpService.get(url, options);\n  }\n  getAllReviewsExport(options) {\n    const url = `${this.resourceUrl}/reviews/export`;\n    return this.ns2HttpService.get(url, options);\n  }\n  getAccountSnapshot(options, aclReviewId) {\n    const url = `${this.resourceUrl}/account_snapshot/?aclReviewId=${aclReviewId}`;\n    return this.ns2HttpService.get(url, options);\n  }\n  getAccountSnapshotExport(options, aclReviewId) {\n    const url = `${this.resourceUrl}/account_snapshot/export/?aclReviewId=${aclReviewId}`;\n    return this.ns2HttpService.get(url, options);\n  }\n  getReviewsList(options) {\n    return this.http.get(`./assets/mock/acl-overview/reviews.json`, options);\n  }\n  getViewAccountsReviewList(options) {\n    return this.http.get(`./assets/mock/acl-overview/view-accounts-review.json`, options);\n  }\n  putVerifyReview(reviewId) {\n    const url = `${this.resourceUrl}/review/verify/${reviewId}`;\n    return this.ns2HttpService.put(url);\n  }\n  putApproveReview(reviewId) {\n    const url = `${this.resourceUrl}/review/approve/${reviewId}`;\n    return this.ns2HttpService.put(url);\n  }\n  getUserOptionalRoles(subjectId) {\n    const url = `${this.resourceUrl}/opt_role_list/${subjectId}`;\n    return this.ns2HttpService.get(url);\n  }\n  getUserUnit(subjectId) {\n    const url = `${this.resourceUrl}/unit/${subjectId}`;\n    return this.ns2HttpService.get(url);\n  }\n  getReviewingUnit() {\n    const url = `${this.resourceUrl}/reviewing_unit`;\n    return this.ns2HttpService.get(url);\n  }\n  putReviewingUnit(reviewUnitList) {\n    const url = `${this.resourceUrl}/reviewing_unit/update`;\n    const body = reviewUnitList;\n    return this.ns2HttpService.put(url, body);\n  }\n  getAccountReviewers() {\n    const url = `${this.resourceUrl}/account_reviewers`;\n    return this.ns2HttpService.get(url);\n  }\n  getCurrentAccessList(options) {\n    const url = this.resourceUrl + '/current_access';\n    console.log(url);\n    return this.ns2HttpService.get(url, options);\n  }\n}\nexports.AccessRightReviewService = AccessRightReviewService;\nAccessRightReviewService.ɵfac = function AccessRightReviewService_Factory(t) {\n  return new (t || AccessRightReviewService)(i0.ɵɵinject(i1.Ns2HttpService), i0.ɵɵinject(i2.ApplicationConfigService), i0.ɵɵinject(i3.HttpClient));\n};\nAccessRightReviewService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AccessRightReviewService,\n  factory: AccessRightReviewService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["AccessRightReviewService","constructor","ns2HttpService","applicationConfigService","http","getEndpointFor","getAllReviews","options","url","resourceUrl","get","getAllReviewsExport","getAccountSnapshot","aclReviewId","getAccountSnapshotExport","getReviewsList","getViewAccountsReviewList","putVerifyReview","reviewId","put","putApproveReview","getUserOptionalRoles","subjectId","getUserUnit","getReviewingUnit","putReviewingUnit","reviewUnitList","body","getAccountReviewers","getCurrentAccessList","console","log","exports","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\D1347074\\Desktop\\projects 2\\nspayiiapp\\src\\main\\webapp\\app\\admin\\access-control\\overview\\service\\access-right-review.service.ts"],"sourcesContent":["import { Observable } from 'rxjs';\r\nimport { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpResponse } from '@angular/common/http';\r\nimport { Ns2HttpService } from 'app/shared/service/ns2-http.service';\r\nimport { ApplicationConfigService } from 'app/core/config/application-config.service';\r\nimport { IReviews, IReviewUnitSettings } from '../model/access-right-review.model';\r\n\r\nexport type EntityResponseType = HttpResponse<IReviews>;\r\nexport type EntityArrayResponseType = HttpResponse<IReviews[]>;\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class AccessRightReviewService{\r\n    public resourceUrl = this.applicationConfigService.getEndpointFor('api/acl');\r\n\r\n    constructor(\r\n        private ns2HttpService: Ns2HttpService,\r\n        private applicationConfigService: ApplicationConfigService,\r\n        protected http: HttpClient\r\n    ){}\r\n\r\n    public getAllReviews(options: any): Observable<any>{\r\n        const url =`${this.resourceUrl}/reviews`;\r\n        return this.ns2HttpService.get(url, options);\r\n    }\r\n\r\n    public getAllReviewsExport(options: any): Observable<any>{\r\n        const url =`${this.resourceUrl}/reviews/export`;\r\n        return this.ns2HttpService.get(url, options);\r\n    }\r\n\r\n    public getAccountSnapshot(options: any, aclReviewId: string): Observable<any>{\r\n        const url =`${this.resourceUrl}/account_snapshot/?aclReviewId=${aclReviewId}`;\r\n        return this.ns2HttpService.get(url, options);\r\n    }\r\n\r\n    public getAccountSnapshotExport(options: any,  aclReviewId: string): Observable<any>{\r\n        const url =`${this.resourceUrl}/account_snapshot/export/?aclReviewId=${aclReviewId}`;\r\n        return this.ns2HttpService.get(url, options);\r\n    }\r\n\r\n    public getReviewsList(options?: any): Observable<any>{\r\n        return this.http.get(`./assets/mock/acl-overview/reviews.json`,options);\r\n    }\r\n\r\n    public getViewAccountsReviewList(options?: any): Observable<any>{\r\n        return this.http.get(`./assets/mock/acl-overview/view-accounts-review.json`,options);\r\n    }\r\n\r\n    public putVerifyReview(reviewId: string): Observable<any>{\r\n        const url = `${this.resourceUrl}/review/verify/${reviewId}`;\r\n        return this.ns2HttpService.put(url)\r\n    }\r\n\r\n    public putApproveReview(reviewId: string): Observable<any>{\r\n        const url = `${this.resourceUrl}/review/approve/${reviewId}`;\r\n        return this.ns2HttpService.put(url)\r\n    }\r\n\r\n    public getUserOptionalRoles(subjectId:string): Observable<any>{\r\n        const url = `${this.resourceUrl}/opt_role_list/${subjectId}`;\r\n        return this.ns2HttpService.get(url)\r\n    }\r\n\r\n    public getUserUnit(subjectId:string): Observable<any>{\r\n        const url = `${this.resourceUrl}/unit/${subjectId}`;\r\n        return this.ns2HttpService.get(url)\r\n    }\r\n\r\n    public getReviewingUnit(): Observable<any>{\r\n        const url = `${this.resourceUrl}/reviewing_unit`;\r\n        return this.ns2HttpService.get(url)\r\n    }\r\n\r\n    public putReviewingUnit(reviewUnitList: IReviewUnitSettings[]): Observable<any>{\r\n        const url = `${this.resourceUrl}/reviewing_unit/update`;\r\n        const body = reviewUnitList\r\n        return this.ns2HttpService.put(url, body)\r\n    }\r\n\r\n    public getAccountReviewers(): Observable<any>{\r\n        const url = `${this.resourceUrl}/account_reviewers`;\r\n        return this.ns2HttpService.get(url)\r\n    }\r\n\r\n    public getCurrentAccessList(options?: any): Observable<any>{\r\n        const url = this.resourceUrl +'/current_access';\r\n        console.log(url);\r\n        return this.ns2HttpService.get(url,options);\r\n    }\r\n\r\n}"]},"metadata":{},"sourceType":"script","externalDependencies":[]}