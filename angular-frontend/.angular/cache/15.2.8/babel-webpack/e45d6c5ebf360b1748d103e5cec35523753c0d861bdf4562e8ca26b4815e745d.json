{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.UserTokenService = void 0;\nconst tslib_1 = require(\"tslib\");\nconst operators_1 = require(\"rxjs/operators\");\nconst request_util_1 = require(\"app/core/request/request-util\");\nconst app_constants_1 = require(\"app/app.constants\");\nconst i0 = tslib_1.__importStar(require(\"@angular/core\"));\nconst i1 = tslib_1.__importStar(require(\"@angular/common/http\"));\nclass UserTokenService {\n  constructor(http) {\n    this.http = http;\n    this.resourceUrl = app_constants_1.SERVER_API_URL + 'api/userToken';\n  }\n  find(id) {\n    return this.http.get(`${this.resourceUrl}/${id}`, {\n      observe: 'response'\n    }).pipe((0, operators_1.map)(res => {\n      const jsonResponse = res.body;\n      this.convertItemFromServer(jsonResponse);\n      return jsonResponse;\n    }));\n  }\n  query(req) {\n    const params = (0, request_util_1.createRequestOption)(req);\n    return this.http.get(this.resourceUrl, {\n      params,\n      observe: 'response'\n    }).pipe((0, operators_1.map)(res => this.convertArrayResponse(res)));\n  }\n  delete(id) {\n    return this.http.delete(`${this.resourceUrl}/${id}`, {\n      observe: 'response'\n    });\n  }\n  convertArrayResponse(res) {\n    const jsonResponse = res.body;\n    const body = [];\n    if (jsonResponse) {\n      for (let i = 0; i < jsonResponse.length; i++) {\n        body.push(this.convertItemFromServer(jsonResponse[i]));\n      }\n    }\n    return res.clone({\n      body\n    });\n  }\n  convertItemFromServer(entity) {\n    if (entity) {\n      entity.createdBy = entity.createdBy ? entity.createdBy.replace('PASSWORD/', '').replace('NCSAD/', '') : '';\n      entity.updatedBy = entity.updatedBy ? entity.updatedBy.replace('PASSWORD/', '').replace('NCSAD/', '') : '';\n    }\n    return entity;\n  }\n  convert(application) {\n    const copy = Object.assign({}, application);\n    return copy;\n  }\n}\nexports.UserTokenService = UserTokenService;\nUserTokenService.ɵfac = function UserTokenService_Factory(t) {\n  return new (t || UserTokenService)(i0.ɵɵinject(i1.HttpClient));\n};\nUserTokenService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: UserTokenService,\n  factory: UserTokenService.ɵfac\n});","map":{"version":3,"mappings":";;;;;;;AAIA;AAEA;AACA;;;AAEA,MACaA,gBAAgB;EAG3BC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAFhB,gBAAW,GAAGC,8BAAc,GAAG,eAAe;EAEf;EAEvCC,IAAI,CAACC,EAAU;IACb,OAAO,IAAI,CAACH,IAAI,CAACI,GAAG,CAAC,GAAG,IAAI,CAACC,WAAW,IAAIF,EAAE,EAAE,EAAE;MAAEG,OAAO,EAAE;IAAU,CAAE,CAAC,CAACC,IAAI,CAC7E,mBAAG,EAAEC,GAAsB,IAAI;MAC7B,MAAMC,YAAY,GAAGD,GAAG,CAACE,IAAI;MAC7B,IAAI,CAACC,qBAAqB,CAACF,YAAY,CAAC;MACxC,OAAOA,YAAY;IACrB,CAAC,CAAC,CACH;EACH;EAEAG,KAAK,CAACC,GAAS;IACb,MAAMC,MAAM,GAAe,sCAAmB,EAACD,GAAG,CAAC;IACnD,OAAO,IAAI,CAACb,IAAI,CACbI,GAAG,CAAC,IAAI,CAACC,WAAW,EAAE;MAAES,MAAM;MAAER,OAAO,EAAE;IAAU,CAAE,CAAC,CACtDC,IAAI,CAAC,mBAAG,EAAEC,GAAsB,IAAK,IAAI,CAACO,oBAAoB,CAACP,GAAG,CAAC,CAAC,CAAC;EAC1E;EAEAQ,MAAM,CAACb,EAAU;IACf,OAAO,IAAI,CAACH,IAAI,CAACgB,MAAM,CAAC,GAAG,IAAI,CAACX,WAAW,IAAIF,EAAE,EAAE,EAAE;MAAEG,OAAO,EAAE;IAAU,CAAE,CAAC;EAC/E;EAEQS,oBAAoB,CAACP,GAA8B;IACzD,MAAMC,YAAY,GAAuBD,GAAG,CAACE,IAAI;IACjD,MAAMA,IAAI,GAAgB,EAAE;IAC5B,IAAID,YAAY,EAAE;MAChB,KAAK,IAAIQ,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGR,YAAY,CAACS,MAAM,EAAED,CAAC,EAAE,EAAE;QAC5CP,IAAI,CAACS,IAAI,CAAC,IAAI,CAACR,qBAAqB,CAACF,YAAY,CAACQ,CAAC,CAAC,CAAC,CAAC;;;IAG1D,OAAOT,GAAG,CAACY,KAAK,CAAC;MAAEV;IAAI,CAAE,CAAC;EAC5B;EAEQC,qBAAqB,CAACU,MAAW;IACvC,IAAIA,MAAM,EAAE;MACVA,MAAM,CAACC,SAAS,GAAGD,MAAM,CAACC,SAAS,GAAGD,MAAM,CAACC,SAAS,CAACC,OAAO,CAAC,WAAW,EAAE,EAAE,CAAC,CAACA,OAAO,CAAC,QAAQ,EAAE,EAAE,CAAC,GAAG,EAAE;MAC1GF,MAAM,CAACG,SAAS,GAAGH,MAAM,CAACG,SAAS,GAAGH,MAAM,CAACG,SAAS,CAACD,OAAO,CAAC,WAAW,EAAE,EAAE,CAAC,CAACA,OAAO,CAAC,QAAQ,EAAE,EAAE,CAAC,GAAG,EAAE;;IAE5G,OAAOF,MAAM;EACf;EAEQI,OAAO,CAACC,WAAsB;IACpC,MAAMC,IAAI,GAAcC,MAAM,CAACC,MAAM,CAAC,EAAE,EAAEH,WAAW,CAAC;IACtD,OAAOC,IAAI;EACb;;AAjDFG;;mBACahC,gBAAgB;AAAA;;SAAhBA,gBAAgB;EAAAiC,SAAhBjC,gBAAgB;AAAA","names":["UserTokenService","constructor","http","app_constants_1","find","id","get","resourceUrl","observe","pipe","res","jsonResponse","body","convertItemFromServer","query","req","params","convertArrayResponse","delete","i","length","push","clone","entity","createdBy","replace","updatedBy","convert","application","copy","Object","assign","exports","factory"],"sourceRoot":"","sources":["C:\\Users\\D1347074\\Desktop\\projects 2\\nspayiiapp\\src\\main\\webapp\\app\\admin\\access-control\\login-control\\user-token.service.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-unsafe-return */\r\nimport { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpParams, HttpResponse } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { UserToken } from 'app/admin/access-control/login-control/user-token.model';\r\nimport { createRequestOption } from 'app/core/request/request-util';\r\nimport { SERVER_API_URL } from 'app/app.constants';\r\n\r\n@Injectable()\r\nexport class UserTokenService {\r\n  private resourceUrl = SERVER_API_URL + 'api/userToken';\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  find(id: number): Observable<UserToken> {\r\n    return this.http.get(`${this.resourceUrl}/${id}`, { observe: 'response' }).pipe(\r\n      map((res: HttpResponse<any>) => {\r\n        const jsonResponse = res.body;\r\n        this.convertItemFromServer(jsonResponse);\r\n        return jsonResponse;\r\n      })\r\n    );\r\n  }\r\n\r\n  query(req?: any): Observable<HttpResponse<UserToken[]>> {\r\n    const params: HttpParams = createRequestOption(req);\r\n    return this.http\r\n      .get(this.resourceUrl, { params, observe: 'response' })\r\n      .pipe(map((res: HttpResponse<any>) => this.convertArrayResponse(res)));\r\n  }\r\n\r\n  delete(id: number): Observable<HttpResponse<any>> {\r\n    return this.http.delete(`${this.resourceUrl}/${id}`, { observe: 'response' });\r\n  }\r\n\r\n  private convertArrayResponse(res: HttpResponse<UserToken[]>): HttpResponse<UserToken[]> {\r\n    const jsonResponse: UserToken[] | null = res.body;\r\n    const body: UserToken[] = [];\r\n    if (jsonResponse) {\r\n      for (let i = 0; i < jsonResponse.length; i++) {\r\n        body.push(this.convertItemFromServer(jsonResponse[i]));\r\n      }\r\n    }\r\n    return res.clone({ body });\r\n  }\r\n\r\n  private convertItemFromServer(entity: any): any {\r\n    if (entity) {\r\n      entity.createdBy = entity.createdBy ? entity.createdBy.replace('PASSWORD/', '').replace('NCSAD/', '') : '';\r\n      entity.updatedBy = entity.updatedBy ? entity.updatedBy.replace('PASSWORD/', '').replace('NCSAD/', '') : '';\r\n    }\r\n    return entity;\r\n  }\r\n\r\n  private convert(application: UserToken): UserToken {\r\n    const copy: UserToken = Object.assign({}, application);\r\n    return copy;\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}