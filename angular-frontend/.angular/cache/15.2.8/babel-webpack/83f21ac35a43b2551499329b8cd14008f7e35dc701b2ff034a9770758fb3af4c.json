{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.LetterService = void 0;\nconst tslib_1 = require(\"tslib\");\nconst i0 = tslib_1.__importStar(require(\"@angular/core\"));\nconst i1 = tslib_1.__importStar(require(\"app/shared/service/ns2-http.service\"));\nconst i2 = tslib_1.__importStar(require(\"app/core/config/application-config.service\"));\nclass LetterService {\n  constructor(ns2HttpService, applicationConfigService) {\n    this.ns2HttpService = ns2HttpService;\n    this.applicationConfigService = applicationConfigService;\n    this.resourceUrl = this.applicationConfigService.getEndpointFor('api/report-letter/letter');\n    //\n  }\n\n  getParams(options) {\n    const url = `${this.resourceUrl}/retrieve_rpt_param`;\n    return this.ns2HttpService.get(url, options);\n  }\n  getLetterSenders(options) {\n    const url = `${this.resourceUrl}/retrieve_letter_senders`;\n    return this.ns2HttpService.get(url, options);\n  }\n  getNsmanDetails(options) {\n    const url = `${this.resourceUrl}/retrieve_nsman_detail`;\n    return this.ns2HttpService.get(url, options);\n  }\n  getCompanyCODetails(options) {\n    const url = `${this.resourceUrl}/retrieve_co_detail`;\n    return this.ns2HttpService.get(url, options);\n  }\n  previewLetter(request, options) {\n    const url = `${this.resourceUrl}/preview_letter`;\n    console.log(\"request body\", request);\n    return this.ns2HttpService.post(url, request, options);\n  }\n  generateLetter(request, options) {\n    const url = `${this.resourceUrl}/generate_generic_letter_user`;\n    console.log(\"request body\", request);\n    return this.ns2HttpService.post(url, request, options);\n  }\n  getLetterHistory(options) {\n    const url = `${this.resourceUrl}/retrieve_letter_history`;\n    return this.ns2HttpService.get(url, options);\n  }\n  getLetterSummary(options) {\n    const url = `${this.resourceUrl}/retrieve_letter_summary`;\n    return this.ns2HttpService.get(url, options);\n  }\n  getAllLetterTypes(options) {\n    const url = `${this.resourceUrl}/retrieve_letter_type`;\n    return this.ns2HttpService.get(url, options);\n  }\n  getLettersByClaimType(options) {\n    const url = `${this.resourceUrl}/retrieve_claim_letter_type`;\n    return this.ns2HttpService.get(url, options);\n  }\n  getFavourites(options) {\n    const url = `${this.resourceUrl}/retrieve_letter_favourites`;\n    return this.ns2HttpService.get(url, options);\n  }\n  updateFavourites(request, options) {\n    const url = `${this.resourceUrl}/update_letter_favourites`;\n    console.log(\"request body\", request);\n    return this.ns2HttpService.post(url, request, options);\n  }\n  updateActionTaken(request, options) {\n    const url = `${this.resourceUrl}/update_letter_action`;\n    console.log(\"request body\", request);\n    return this.ns2HttpService.post(url, request, options);\n  }\n  getEmailCaseIds(letterJobInstId, options) {\n    const url = `${this.resourceUrl}/retrieve_email_caseid/${letterJobInstId}`;\n    return this.ns2HttpService.get(url, options);\n  }\n  retrieveLetterItems(options) {\n    const url = `${this.resourceUrl}/retrieve_letter_item`;\n    return this.ns2HttpService.get(url, options);\n  }\n}\nexports.LetterService = LetterService;\nLetterService.ɵfac = function LetterService_Factory(t) {\n  return new (t || LetterService)(i0.ɵɵinject(i1.Ns2HttpService), i0.ɵɵinject(i2.ApplicationConfigService));\n};\nLetterService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: LetterService,\n  factory: LetterService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["LetterService","constructor","ns2HttpService","applicationConfigService","getEndpointFor","getParams","options","url","resourceUrl","get","getLetterSenders","getNsmanDetails","getCompanyCODetails","previewLetter","request","console","log","post","generateLetter","getLetterHistory","getLetterSummary","getAllLetterTypes","getLettersByClaimType","getFavourites","updateFavourites","updateActionTaken","getEmailCaseIds","letterJobInstId","retrieveLetterItems","exports","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\D1347074\\Desktop\\projects 2\\nspayiiapp\\src\\main\\webapp\\app\\report-letter\\letter\\service\\letter.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { ApplicationConfigService } from 'app/core/config/application-config.service';\r\nimport { Ns2HttpService } from 'app/shared/service/ns2-http.service';\r\nimport { Observable } from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class LetterService {\r\n\r\n  public resourceUrl = this.applicationConfigService.getEndpointFor('api/report-letter/letter');\r\n\r\n\r\n  constructor(\r\n    private ns2HttpService: Ns2HttpService,\r\n    private applicationConfigService: ApplicationConfigService\r\n  ) {\r\n    //\r\n  }\r\n\r\n  public getParams(options: any): Observable<any>{\r\n    const url =`${this.resourceUrl}/retrieve_rpt_param`;\r\n    return this.ns2HttpService.get(url, options);\r\n  }\r\n\r\n  public getLetterSenders(options: any): Observable<any>{\r\n    const url =`${this.resourceUrl}/retrieve_letter_senders`;\r\n    return this.ns2HttpService.get(url, options);\r\n  }\r\n\r\n  public getNsmanDetails(options: any): Observable<any>{\r\n    const url =`${this.resourceUrl}/retrieve_nsman_detail`;\r\n    return this.ns2HttpService.get(url, options);\r\n  }\r\n\r\n  public getCompanyCODetails(options: any): Observable<any>{\r\n    const url =`${this.resourceUrl}/retrieve_co_detail`;\r\n    return this.ns2HttpService.get(url, options);\r\n  }\r\n\r\n  public previewLetter(request: any, options: any): Observable<any>{\r\n    const url = `${this.resourceUrl}/preview_letter`;\r\n    console.log(\"request body\", request);\r\n    return this.ns2HttpService.post(url, request, options);\r\n  }\r\n\r\n  public generateLetter(request: any, options: any): Observable<any>{\r\n    const url = `${this.resourceUrl}/generate_generic_letter_user`;\r\n    console.log(\"request body\", request);\r\n    return this.ns2HttpService.post(url, request, options);\r\n  }\r\n\r\n  public getLetterHistory(options: any): Observable<any>{\r\n    const url =`${this.resourceUrl}/retrieve_letter_history`;\r\n    return this.ns2HttpService.get(url, options);\r\n  }\r\n\r\n  public getLetterSummary(options: any): Observable<any>{\r\n    const url =`${this.resourceUrl}/retrieve_letter_summary`;\r\n    return this.ns2HttpService.get(url, options);\r\n  }\r\n\r\n  public getAllLetterTypes(options: any): Observable<any>{\r\n    const url =`${this.resourceUrl}/retrieve_letter_type`;\r\n    return this.ns2HttpService.get(url, options);\r\n  } \r\n\r\n  public getLettersByClaimType(options: any): Observable<any>{\r\n    const url =`${this.resourceUrl}/retrieve_claim_letter_type`;\r\n    return this.ns2HttpService.get(url, options);\r\n  } \r\n\r\n  public getFavourites(options: any): Observable<any>{\r\n    const url =`${this.resourceUrl}/retrieve_letter_favourites`;\r\n    return this.ns2HttpService.get(url, options);\r\n  }\r\n  \r\n  public updateFavourites(request: any, options: any): Observable<any>{\r\n    const url = `${this.resourceUrl}/update_letter_favourites`;\r\n    console.log(\"request body\", request);\r\n    return this.ns2HttpService.post(url, request, options);\r\n  }\r\n\r\n  public updateActionTaken(request: any, options: any): Observable<any>{\r\n    const url = `${this.resourceUrl}/update_letter_action`;\r\n    console.log(\"request body\", request);\r\n    return this.ns2HttpService.post(url, request, options);\r\n  }\r\n\r\n  public getEmailCaseIds(letterJobInstId: number, options: any): Observable<any>{\r\n    const url =`${this.resourceUrl}/retrieve_email_caseid/${letterJobInstId}`;      \r\n    return this.ns2HttpService.get(url, options);\r\n  }\r\n\r\n  public retrieveLetterItems(options: any): Observable<any>{\r\n    const url =`${this.resourceUrl}/retrieve_letter_item`;      \r\n    return this.ns2HttpService.get(url, options);\r\n  }\r\n\r\n  \r\n}\r\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}