{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.PasswordResetInitComponent = void 0;\nconst tslib_1 = require(\"tslib\");\nconst forms_1 = require(\"@angular/forms\");\nconst crypto_js_1 = require(\"crypto-js\");\nconst i0 = tslib_1.__importStar(require(\"@angular/core\"));\nconst i1 = tslib_1.__importStar(require(\"./password-reset-init.service\"));\nconst i2 = tslib_1.__importStar(require(\"app/core/auth/encrypt.service\"));\nconst i3 = tslib_1.__importStar(require(\"@angular/router\"));\nconst i4 = tslib_1.__importStar(require(\"@angular/forms\"));\nconst i5 = tslib_1.__importStar(require(\"@angular/common\"));\nconst i6 = tslib_1.__importStar(require(\"../../../shared/language/translate.directive\"));\nconst i7 = tslib_1.__importStar(require(\"../../password/password-strength-bar/password-strength-bar.component\"));\nconst i8 = tslib_1.__importStar(require(\"@ngx-translate/core\"));\nfunction PasswordResetInitComponent_div_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 8);\n    i0.ɵɵtext(1, \"\\n        \");\n    i0.ɵɵelement(2, \"h4\", 9);\n    i0.ɵɵtext(3, \"\\n        \");\n    i0.ɵɵelementStart(4, \"ul\", 10);\n    i0.ɵɵtext(5, \"\\n          \");\n    i0.ɵɵelement(6, \"li\", 11);\n    i0.ɵɵtext(7, \"\\n          \");\n    i0.ɵɵelement(8, \"li\", 12);\n    i0.ɵɵtext(9, \"\\n          \");\n    i0.ɵɵelement(10, \"li\", 13);\n    i0.ɵɵtext(11, \"\\n          \");\n    i0.ɵɵelement(12, \"li\", 14);\n    i0.ɵɵtext(13, \"\\n        \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(14, \"\\n      \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction PasswordResetInitComponent_p_11_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r5 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"p\", 15);\n    i0.ɵɵtext(1, \"\\n        \");\n    i0.ɵɵelementStart(2, \"span\", 16)(3, \"strong\");\n    i0.ɵɵtext(4, \"Your password has been reset.\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(5, \" Please \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(6, \"\\n        \");\n    i0.ɵɵelementStart(7, \"a\", 17);\n    i0.ɵɵlistener(\"click\", function PasswordResetInitComponent_p_11_Template_a_click_7_listener() {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r4 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r4.login());\n    });\n    i0.ɵɵtext(8, \"sign in\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(9, \".\\n      \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction PasswordResetInitComponent_div_13_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 18);\n    i0.ɵɵtext(1, \"\\n        \");\n    i0.ɵɵelementStart(2, \"p\");\n    i0.ɵɵtext(3, \"The password and its confirmation do not match!\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(4, \"\\n      \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction PasswordResetInitComponent_form_17_div_18_small_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"small\", 34);\n    i0.ɵɵtext(1, \"\\n              Your password is required.\\n            \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction PasswordResetInitComponent_form_17_div_18_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \"\\n            \");\n    i0.ɵɵtemplate(2, PasswordResetInitComponent_form_17_div_18_small_2_Template, 2, 0, \"small\", 33);\n    i0.ɵɵtext(3, \"\\n          \");\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r6 = i0.ɵɵnextContext(2);\n    let tmp_0_0;\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", (tmp_0_0 = ctx_r6.resetRequestForm.get(\"oldPassword\")) == null ? null : tmp_0_0.errors == null ? null : tmp_0_0.errors.required);\n  }\n}\nfunction PasswordResetInitComponent_form_17_div_29_small_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"small\", 39);\n    i0.ɵɵtext(1, \"\\n              Your password is required.\\n            \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction PasswordResetInitComponent_form_17_div_29_small_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"small\", 40);\n    i0.ɵɵtext(1, \"\\n              Your password is required to be at least 8 characters.\\n            \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction PasswordResetInitComponent_form_17_div_29_small_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"small\", 41);\n    i0.ɵɵtext(1, \"\\n              Your password cannot be longer than 50 characters.\\n            \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction PasswordResetInitComponent_form_17_div_29_small_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"small\", 42);\n    i0.ɵɵtext(1, \"\\n              Password not strong,should be Upper case/Lower case/Digits/Special Characters combination.\\n            \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction PasswordResetInitComponent_form_17_div_29_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \"\\n            \");\n    i0.ɵɵtemplate(2, PasswordResetInitComponent_form_17_div_29_small_2_Template, 2, 0, \"small\", 35);\n    i0.ɵɵtext(3, \"\\n\\n            \");\n    i0.ɵɵtemplate(4, PasswordResetInitComponent_form_17_div_29_small_4_Template, 2, 0, \"small\", 36);\n    i0.ɵɵtext(5, \"\\n\\n            \");\n    i0.ɵɵtemplate(6, PasswordResetInitComponent_form_17_div_29_small_6_Template, 2, 0, \"small\", 37);\n    i0.ɵɵtext(7, \"\\n\\n            \");\n    i0.ɵɵtemplate(8, PasswordResetInitComponent_form_17_div_29_small_8_Template, 2, 0, \"small\", 38);\n    i0.ɵɵtext(9, \"\\n          \");\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r7 = i0.ɵɵnextContext(2);\n    let tmp_0_0;\n    let tmp_1_0;\n    let tmp_2_0;\n    let tmp_3_0;\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", (tmp_0_0 = ctx_r7.resetRequestForm.get(\"newPassword\")) == null ? null : tmp_0_0.errors == null ? null : tmp_0_0.errors.required);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", (tmp_1_0 = ctx_r7.resetRequestForm.get(\"newPassword\")) == null ? null : tmp_1_0.errors == null ? null : tmp_1_0.errors.minlength);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", (tmp_2_0 = ctx_r7.resetRequestForm.get(\"newPassword\")) == null ? null : tmp_2_0.errors == null ? null : tmp_2_0.errors.maxlength);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", (tmp_3_0 = ctx_r7.resetRequestForm.get(\"newPassword\")) == null ? null : tmp_3_0.errors == null ? null : tmp_3_0.errors.pattern);\n  }\n}\nfunction PasswordResetInitComponent_form_17_div_42_small_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"small\", 46);\n    i0.ɵɵtext(1, \"\\n              Your confirmation password is required.\\n            \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction PasswordResetInitComponent_form_17_div_42_small_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"small\", 47);\n    i0.ɵɵtext(1, \"\\n              Your confirmation password is required to be at least 8 characters.\\n            \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction PasswordResetInitComponent_form_17_div_42_small_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"small\", 48);\n    i0.ɵɵtext(1, \"\\n              Your confirmation password cannot be longer than 50 characters.\\n            \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction PasswordResetInitComponent_form_17_div_42_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \"\\n            \");\n    i0.ɵɵtemplate(2, PasswordResetInitComponent_form_17_div_42_small_2_Template, 2, 0, \"small\", 43);\n    i0.ɵɵtext(3, \"\\n            \");\n    i0.ɵɵtemplate(4, PasswordResetInitComponent_form_17_div_42_small_4_Template, 2, 0, \"small\", 44);\n    i0.ɵɵtext(5, \"\\n            \");\n    i0.ɵɵtemplate(6, PasswordResetInitComponent_form_17_div_42_small_6_Template, 2, 0, \"small\", 45);\n    i0.ɵɵtext(7, \"\\n          \");\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r8 = i0.ɵɵnextContext(2);\n    let tmp_0_0;\n    let tmp_1_0;\n    let tmp_2_0;\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", (tmp_0_0 = ctx_r8.resetRequestForm.get(\"confirmPassword\")) == null ? null : tmp_0_0.errors == null ? null : tmp_0_0.errors.required);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", (tmp_1_0 = ctx_r8.resetRequestForm.get(\"newPassword2\")) == null ? null : tmp_1_0.errors == null ? null : tmp_1_0.errors.minlength);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", (tmp_2_0 = ctx_r8.resetRequestForm.get(\"newPassword2\")) == null ? null : tmp_2_0.errors == null ? null : tmp_2_0.errors.maxlength);\n  }\n}\nfunction PasswordResetInitComponent_form_17_div_45_div_8_small_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"small\", 53);\n    i0.ɵɵtext(1, \"\\n              Your password recall question is required to be at least 8 characters.\\n            \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction PasswordResetInitComponent_form_17_div_45_div_8_small_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"small\", 54);\n    i0.ɵɵtext(1, \"\\n              Your password recall question cannot be longer than 50 characters.\\n            \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction PasswordResetInitComponent_form_17_div_45_div_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \"\\n            \");\n    i0.ɵɵtemplate(2, PasswordResetInitComponent_form_17_div_45_div_8_small_2_Template, 2, 0, \"small\", 51);\n    i0.ɵɵtext(3, \"\\n\\n            \");\n    i0.ɵɵtemplate(4, PasswordResetInitComponent_form_17_div_45_div_8_small_4_Template, 2, 0, \"small\", 52);\n    i0.ɵɵtext(5, \"\\n          \");\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r19 = i0.ɵɵnextContext(3);\n    let tmp_0_0;\n    let tmp_1_0;\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", (tmp_0_0 = ctx_r19.resetRequestForm.get(\"recallQuestion\")) == null ? null : tmp_0_0.errors == null ? null : tmp_0_0.errors.minlength);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", (tmp_1_0 = ctx_r19.resetRequestForm.get(\"recallQuestion\")) == null ? null : tmp_1_0.errors == null ? null : tmp_1_0.errors.maxlength);\n  }\n}\nfunction PasswordResetInitComponent_form_17_div_45_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 20);\n    i0.ɵɵtext(1, \"\\n          \");\n    i0.ɵɵelementStart(2, \"label\", 49);\n    i0.ɵɵtext(3, \"Password Recovery Question\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(4, \"\\n          \");\n    i0.ɵɵelement(5, \"input\", 50);\n    i0.ɵɵpipe(6, \"translate\");\n    i0.ɵɵtext(7, \"\\n\\n          \");\n    i0.ɵɵtemplate(8, PasswordResetInitComponent_form_17_div_45_div_8_Template, 6, 2, \"div\", 25);\n    i0.ɵɵtext(9, \"\\n        \");\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r9 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(5);\n    i0.ɵɵpropertyInterpolate(\"placeholder\", i0.ɵɵpipeBind1(6, 2, \"password.form.pwdrecallquestion.placeholder\"));\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"ngIf\", ctx_r9.resetRequestForm.get(\"recallQuestion\").invalid && (ctx_r9.resetRequestForm.get(\"recallQuestion\").dirty || ctx_r9.resetRequestForm.get(\"recallQuestion\").touched));\n  }\n}\nfunction PasswordResetInitComponent_form_17_div_47_div_8_small_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"small\", 59);\n    i0.ɵɵtext(1, \"\\n              Your password recall answer is required to be at least 8 characters.\\n            \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction PasswordResetInitComponent_form_17_div_47_div_8_small_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"small\", 60);\n    i0.ɵɵtext(1, \"\\n              Your password recall answer cannot be longer than 50 characters.\\n            \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction PasswordResetInitComponent_form_17_div_47_div_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \"\\n            \");\n    i0.ɵɵtemplate(2, PasswordResetInitComponent_form_17_div_47_div_8_small_2_Template, 2, 0, \"small\", 57);\n    i0.ɵɵtext(3, \"\\n\\n            \");\n    i0.ɵɵtemplate(4, PasswordResetInitComponent_form_17_div_47_div_8_small_4_Template, 2, 0, \"small\", 58);\n    i0.ɵɵtext(5, \"\\n          \");\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r22 = i0.ɵɵnextContext(3);\n    let tmp_0_0;\n    let tmp_1_0;\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", (tmp_0_0 = ctx_r22.resetRequestForm.get(\"recallAnswer\")) == null ? null : tmp_0_0.errors == null ? null : tmp_0_0.errors.minlength);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", (tmp_1_0 = ctx_r22.resetRequestForm.get(\"recallQuestion\")) == null ? null : tmp_1_0.errors == null ? null : tmp_1_0.errors.maxlength);\n  }\n}\nfunction PasswordResetInitComponent_form_17_div_47_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 20);\n    i0.ɵɵtext(1, \"\\n          \");\n    i0.ɵɵelementStart(2, \"label\", 55);\n    i0.ɵɵtext(3, \"Answer\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(4, \"\\n          \");\n    i0.ɵɵelement(5, \"input\", 56);\n    i0.ɵɵpipe(6, \"translate\");\n    i0.ɵɵtext(7, \"\\n\\n          \");\n    i0.ɵɵtemplate(8, PasswordResetInitComponent_form_17_div_47_div_8_Template, 6, 2, \"div\", 25);\n    i0.ɵɵtext(9, \"\\n        \");\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r10 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(5);\n    i0.ɵɵpropertyInterpolate(\"placeholder\", i0.ɵɵpipeBind1(6, 2, \"password.form.pwdrecallanswer.placeholder\"));\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"ngIf\", ctx_r10.resetRequestForm.get(\"recallAnswer\").invalid && (ctx_r10.resetRequestForm.get(\"recallAnswer\").dirty || ctx_r10.resetRequestForm.get(\"recallAnswer\").touched));\n  }\n}\nfunction PasswordResetInitComponent_form_17_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r26 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"form\", 19);\n    i0.ɵɵlistener(\"ngSubmit\", function PasswordResetInitComponent_form_17_Template_form_ngSubmit_0_listener() {\n      i0.ɵɵrestoreView(_r26);\n      const ctx_r25 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r25.requestReset());\n    });\n    i0.ɵɵtext(1, \"\\n        \");\n    i0.ɵɵelementStart(2, \"div\", 20);\n    i0.ɵɵtext(3, \"\\n          \");\n    i0.ɵɵelementStart(4, \"label\", 21);\n    i0.ɵɵtext(5, \"User Name\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(6, \"\\n          \");\n    i0.ɵɵelement(7, \"input\", 22);\n    i0.ɵɵtext(8, \"\\n        \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(9, \"\\n\\n        \");\n    i0.ɵɵelementStart(10, \"div\", 20);\n    i0.ɵɵtext(11, \"\\n          \");\n    i0.ɵɵelementStart(12, \"label\", 23);\n    i0.ɵɵtext(13, \"Old password\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(14, \"\\n          \");\n    i0.ɵɵelement(15, \"input\", 24);\n    i0.ɵɵpipe(16, \"translate\");\n    i0.ɵɵtext(17, \"\\n          \");\n    i0.ɵɵtemplate(18, PasswordResetInitComponent_form_17_div_18_Template, 4, 1, \"div\", 25);\n    i0.ɵɵtext(19, \"\\n        \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(20, \"\\n\\n        \");\n    i0.ɵɵelementStart(21, \"div\", 20);\n    i0.ɵɵtext(22, \"\\n          \");\n    i0.ɵɵelementStart(23, \"label\", 26);\n    i0.ɵɵtext(24, \"New password\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(25, \"\\n          \");\n    i0.ɵɵelement(26, \"input\", 27);\n    i0.ɵɵpipe(27, \"translate\");\n    i0.ɵɵtext(28, \"\\n\\n          \");\n    i0.ɵɵtemplate(29, PasswordResetInitComponent_form_17_div_29_Template, 10, 4, \"div\", 25);\n    i0.ɵɵtext(30, \"\\n          \");\n    i0.ɵɵelement(31, \"ic-password-strength-bar\", 28);\n    i0.ɵɵtext(32, \"\\n        \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(33, \"\\n\\n        \");\n    i0.ɵɵelementStart(34, \"div\", 20);\n    i0.ɵɵtext(35, \"\\n          \");\n    i0.ɵɵelementStart(36, \"label\", 29);\n    i0.ɵɵtext(37, \"New password confirmation\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(38, \"\\n          \");\n    i0.ɵɵelement(39, \"input\", 30);\n    i0.ɵɵpipe(40, \"translate\");\n    i0.ɵɵtext(41, \"\\n\\n          \");\n    i0.ɵɵtemplate(42, PasswordResetInitComponent_form_17_div_42_Template, 8, 3, \"div\", 25);\n    i0.ɵɵtext(43, \"\\n        \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(44, \"\\n\\n        \");\n    i0.ɵɵtemplate(45, PasswordResetInitComponent_form_17_div_45_Template, 10, 4, \"div\", 31);\n    i0.ɵɵtext(46, \"\\n\\n        \");\n    i0.ɵɵtemplate(47, PasswordResetInitComponent_form_17_div_47_Template, 10, 4, \"div\", 31);\n    i0.ɵɵtext(48, \"\\n        \");\n    i0.ɵɵelementStart(49, \"button\", 32);\n    i0.ɵɵtext(50, \"\\n          Reset\\n        \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(51, \"\\n      \");\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"formGroup\", ctx_r3.resetRequestForm);\n    i0.ɵɵadvance(15);\n    i0.ɵɵpropertyInterpolate(\"placeholder\", i0.ɵɵpipeBind1(16, 11, \"password.form.oldpwd.placeholder\"));\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"ngIf\", ctx_r3.resetRequestForm.get(\"oldPassword\").invalid && (ctx_r3.resetRequestForm.get(\"oldPassword\").dirty || ctx_r3.resetRequestForm.get(\"oldPassword\").touched));\n    i0.ɵɵadvance(8);\n    i0.ɵɵpropertyInterpolate(\"placeholder\", i0.ɵɵpipeBind1(27, 13, \"password.form.newpwd.placeholder\"));\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"ngIf\", ctx_r3.resetRequestForm.get(\"newPassword\").invalid && (ctx_r3.resetRequestForm.get(\"newPassword\").dirty || ctx_r3.resetRequestForm.get(\"newPassword\").touched));\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"passwordToCheck\", ctx_r3.resetRequestForm.get(\"newPassword\").value);\n    i0.ɵɵadvance(8);\n    i0.ɵɵpropertyInterpolate(\"placeholder\", i0.ɵɵpipeBind1(40, 15, \"password.form.confirmpwd.placeholder\"));\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"ngIf\", ctx_r3.resetRequestForm.get(\"newPassword2\").invalid && (ctx_r3.resetRequestForm.get(\"newPassword2\").dirty || ctx_r3.resetRequestForm.get(\"newPassword2\").touched));\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"ngIf\", ctx_r3.isFirstLogin);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", ctx_r3.isFirstLogin);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"disabled\", ctx_r3.resetRequestForm.invalid);\n  }\n}\nclass PasswordResetInitComponent {\n  constructor(passwordResetInitService, encryptService, renderer, route, router, fb) {\n    this.passwordResetInitService = passwordResetInitService;\n    this.encryptService = encryptService;\n    this.renderer = renderer;\n    this.route = route;\n    this.router = router;\n    this.fb = fb;\n    this.resetRequestForm = this.fb.group({\n      username: [],\n      oldPassword: ['', [forms_1.Validators.required]],\n      newPassword: ['', [forms_1.Validators.required, forms_1.Validators.minLength(8), forms_1.Validators.maxLength(50), forms_1.Validators.pattern('(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[$@$!%*?&])[A-Za-z\\\\d$@$!%*?&].{8,}')]],\n      newPassword2: ['', [forms_1.Validators.required, forms_1.Validators.minLength(8), forms_1.Validators.maxLength(50)]],\n      recallQuestion: ['', [forms_1.Validators.minLength(8), forms_1.Validators.maxLength(50)]],\n      recallAnswer: ['', [forms_1.Validators.minLength(8), forms_1.Validators.maxLength(50)]]\n    });\n  }\n  ngOnInit() {\n    this.subscription = this.route.params.subscribe(params => {\n      this.resetRequestForm.patchValue({\n        username: params['username']\n      });\n      this.isFirstLogin = params['isFirstLogin'];\n    });\n  }\n  ngAfterViewInit() {\n    this.renderer.selectRootElement('#oldPwd').focus();\n  }\n  requestReset() {\n    this.error = null;\n    if (this.resetRequestForm.get(['newPassword']).value !== this.resetRequestForm.get(['newPassword2']).value) {\n      this.success = null;\n      this.doNotMatch = 'ERROR';\n    } else {\n      this.doNotMatch = null;\n      this.passwordResetInitService.save(this.encryptAccount()).subscribe(response => {\n        this.success = response.msg;\n      }, error => {\n        this.success = null;\n        const errorMsg = error.headers.get('error');\n        document.getElementById('pwdResetErrorMsg').innerHTML = errorMsg;\n        const alert = 'block';\n        document.getElementById('pwdResetErrorMsg').style.display = alert;\n      });\n    }\n  }\n  login() {\n    this.router.navigate(['']);\n  }\n  encryptAccount() {\n    const secretKey = crypto_js_1.lib.WordArray.random(8).toString();\n    const initialValue = crypto_js_1.lib.WordArray.random(8).toString();\n    return {\n      username: this.encryptService.encryptProfile(this.resetRequestForm.get(['username']).value, secretKey, initialValue),\n      oldPassword: this.encryptService.encryptProfile(this.resetRequestForm.get(['oldPassword']).value, secretKey, initialValue),\n      newPassword: this.encryptService.encryptProfile(this.resetRequestForm.get(['newPassword']).value, secretKey, initialValue),\n      newPassword2: this.encryptService.encryptProfile(this.resetRequestForm.get(['newPassword2']).value, secretKey, initialValue),\n      recallQuestion: this.encryptService.encryptProfile(this.resetRequestForm.get(['recallQuestion']).value, secretKey, initialValue),\n      recallAnswer: this.encryptService.encryptProfile(this.resetRequestForm.get(['recallAnswer']).value, secretKey, initialValue),\n      key: secretKey,\n      iv: initialValue\n    };\n  }\n}\nexports.PasswordResetInitComponent = PasswordResetInitComponent;\nPasswordResetInitComponent.ɵfac = function PasswordResetInitComponent_Factory(t) {\n  return new (t || PasswordResetInitComponent)(i0.ɵɵdirectiveInject(i1.PasswordResetInitService), i0.ɵɵdirectiveInject(i2.EncryptService), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i3.ActivatedRoute), i0.ɵɵdirectiveInject(i3.Router), i0.ɵɵdirectiveInject(i4.FormBuilder));\n};\nPasswordResetInitComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: PasswordResetInitComponent,\n  selectors: [[\"ic-password-reset-init\"]],\n  decls: 22,\n  vars: 4,\n  consts: [[1, \"row\"], [1, \"col-md-8\", \"offset-md-2\"], [\"icTranslate\", \"reset.request.title\"], [\"class\", \"alert alert-warning\", 4, \"ngIf\"], [\"class\", \"alert alert-success\", 4, \"ngIf\"], [\"class\", \"alert alert-danger\", \"icTranslate\", \"global.messages.error.dontmatch\", 4, \"ngIf\"], [\"id\", \"pwdResetErrorMsg\", 1, \"alert-dismissible\", \"alert-danger\", \"alert\", 2, \"display\", \"none\"], [\"name\", \"form\", \"role\", \"form\", \"method\", \"POST\", 3, \"formGroup\", \"ngSubmit\", 4, \"ngIf\"], [1, \"alert\", \"alert-warning\"], [\"icTranslate\", \"reset.request.reason.desc\"], [1, \"list-group\"], [\"icTranslate\", \"reset.request.reason.first\", 1, \"list-group-item\", \"list-group-item-warning\", 2, \"border\", \"none !important\"], [\"icTranslate\", \"reset.request.reason.second\", 1, \"list-group-item\", \"list-group-item-warning\", 2, \"border\", \"none !important\"], [\"icTranslate\", \"reset.request.reason.third\", 1, \"list-group-item\", \"list-group-item-warning\", 2, \"border\", \"none !important\"], [\"icTranslate\", \"reset.request.reason.fourth\", 1, \"list-group-item\", \"list-group-item-warning\", 2, \"border\", \"none !important\"], [1, \"alert\", \"alert-success\"], [\"icTranslate\", \"reset.finish.messages.success\"], [\"icTranslate\", \"global.messages.info.authenticated.link\", 1, \"alert-link\", 3, \"click\"], [\"icTranslate\", \"global.messages.error.dontmatch\", 1, \"alert\", \"alert-danger\"], [\"name\", \"form\", \"role\", \"form\", \"method\", \"POST\", 3, \"formGroup\", \"ngSubmit\"], [1, \"rounded-pill\"], [\"icTranslate\", \"reset.request.form.username\", 1, \"form-control-label\"], [\"type\", \"text\", \"id\", \"field_username\", \"name\", \"username\", \"formControlName\", \"username\", \"readonly\", \"\", 1, \"form-control\"], [\"icTranslate\", \"password.form.oldpwd\", 1, \"form-control-label\"], [\"type\", \"password\", \"id\", \"oldPwd\", \"name\", \"oldPwd\", \"formControlName\", \"oldPassword\", \"autocomplete\", \"off\", 1, \"form-control\", 3, \"placeholder\"], [4, \"ngIf\"], [\"for\", \"newPassword\", \"icTranslate\", \"password.form.newpwd.label\", 1, \"form-control-label\"], [\"type\", \"password\", \"id\", \"newPwd\", \"name\", \"newPwd\", \"formControlName\", \"newPassword\", \"autocomplete\", \"off\", 1, \"form-control\", 3, \"placeholder\"], [3, \"passwordToCheck\"], [\"icTranslate\", \"password.form.confirmpwd.label\", 1, \"form-control-label\"], [\"type\", \"password\", \"id\", \"confirmPassword\", \"name\", \"confirmPassword\", \"formControlName\", \"newPassword2\", \"autocomplete\", \"off\", 1, \"form-control\", 3, \"placeholder\"], [\"class\", \"rounded-pill\", 4, \"ngIf\"], [\"type\", \"submit\", \"icTranslate\", \"reset.request.form.button\", 1, \"btn\", \"btn-primary\", 3, \"disabled\"], [\"class\", \"form-text text-danger\", \"icTranslate\", \"password.messages.validate.oldpwd.required\", 4, \"ngIf\"], [\"icTranslate\", \"password.messages.validate.oldpwd.required\", 1, \"form-text\", \"text-danger\"], [\"class\", \"form-text text-danger\", \"icTranslate\", \"password.messages.validate.newpwd.required\", 4, \"ngIf\"], [\"class\", \"form-text text-danger\", \"icTranslate\", \"password.messages.validate.newpassword.minlength\", 4, \"ngIf\"], [\"class\", \"form-text text-danger\", \"icTranslate\", \"password.messages.validate.newpwd.maxlength\", 4, \"ngIf\"], [\"class\", \"form-text text-danger\", \"icTranslate\", \"password.messages.validate.newpwd.pattern\", 4, \"ngIf\"], [\"icTranslate\", \"password.messages.validate.newpwd.required\", 1, \"form-text\", \"text-danger\"], [\"icTranslate\", \"password.messages.validate.newpassword.minlength\", 1, \"form-text\", \"text-danger\"], [\"icTranslate\", \"password.messages.validate.newpwd.maxlength\", 1, \"form-text\", \"text-danger\"], [\"icTranslate\", \"password.messages.validate.newpwd.pattern\", 1, \"form-text\", \"text-danger\"], [\"class\", \"form-text text-danger\", \"icTranslate\", \"password.messages.validate.confirmpwd.required\", 4, \"ngIf\"], [\"class\", \"form-text text-danger\", \"icTranslate\", \"password.messages.validate.confirmpwd.minlength\", 4, \"ngIf\"], [\"class\", \"form-text text-danger\", \"icTranslate\", \"password.messages.validate.confirmpwd.maxlength\", 4, \"ngIf\"], [\"icTranslate\", \"password.messages.validate.confirmpwd.required\", 1, \"form-text\", \"text-danger\"], [\"icTranslate\", \"password.messages.validate.confirmpwd.minlength\", 1, \"form-text\", \"text-danger\"], [\"icTranslate\", \"password.messages.validate.confirmpwd.maxlength\", 1, \"form-text\", \"text-danger\"], [\"icTranslate\", \"password.form.pwdrecallquestion\", 1, \"form-control-label\"], [\"type\", \"text\", \"id\", \"recallQuestion\", \"name\", \"recallQuestion\", \"formControlName\", \"recallQuestion\", 1, \"form-control\", 3, \"placeholder\"], [\"class\", \"form-text text-danger\", \"icTranslate\", \"password.messages.validate.pwdrecallquestion.minlength\", 4, \"ngIf\"], [\"class\", \"form-text text-danger\", \"icTranslate\", \"password.messages.validate.pwdrecallquestion.maxlength\", 4, \"ngIf\"], [\"icTranslate\", \"password.messages.validate.pwdrecallquestion.minlength\", 1, \"form-text\", \"text-danger\"], [\"icTranslate\", \"password.messages.validate.pwdrecallquestion.maxlength\", 1, \"form-text\", \"text-danger\"], [\"icTranslate\", \"password.form.pwdrecallanswer\", 1, \"form-control-label\"], [\"type\", \"text\", \"id\", \"recallAnswer\", \"name\", \"recallAnswer\", \"formControlName\", \"recallAnswer\", 1, \"form-control\", 3, \"placeholder\"], [\"class\", \"form-text text-danger\", \"icTranslate\", \"password.messages.validate.pwdrecallanswer.minlength\", 4, \"ngIf\"], [\"class\", \"form-text text-danger\", \"icTranslate\", \"password.messages.validate.pwdrecallanswer.maxlength\", 4, \"ngIf\"], [\"icTranslate\", \"password.messages.validate.pwdrecallanswer.minlength\", 1, \"form-text\", \"text-danger\"], [\"icTranslate\", \"password.messages.validate.pwdrecallanswer.maxlength\", 1, \"form-text\", \"text-danger\"]],\n  template: function PasswordResetInitComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\");\n      i0.ɵɵtext(1, \"\\n  \");\n      i0.ɵɵelementStart(2, \"div\", 0);\n      i0.ɵɵtext(3, \"\\n    \");\n      i0.ɵɵelementStart(4, \"div\", 1);\n      i0.ɵɵtext(5, \"\\n      \");\n      i0.ɵɵelementStart(6, \"h1\", 2);\n      i0.ɵɵtext(7, \"Change your password\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(8, \"\\n\\n      \");\n      i0.ɵɵtemplate(9, PasswordResetInitComponent_div_9_Template, 15, 0, \"div\", 3);\n      i0.ɵɵtext(10, \"\\n\\n      \");\n      i0.ɵɵtemplate(11, PasswordResetInitComponent_p_11_Template, 10, 0, \"p\", 4);\n      i0.ɵɵtext(12, \"\\n\\n      \");\n      i0.ɵɵtemplate(13, PasswordResetInitComponent_div_13_Template, 5, 0, \"div\", 5);\n      i0.ɵɵtext(14, \"\\n\\n      \");\n      i0.ɵɵelement(15, \"p\", 6);\n      i0.ɵɵtext(16, \"\\n\\n      \");\n      i0.ɵɵtemplate(17, PasswordResetInitComponent_form_17_Template, 52, 17, \"form\", 7);\n      i0.ɵɵtext(18, \"\\n    \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(19, \"\\n  \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(20, \"\\n\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(21, \"\\n\");\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(9);\n      i0.ɵɵproperty(\"ngIf\", !ctx.success && ctx.isFirstLogin);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngIf\", ctx.success);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngIf\", ctx.doNotMatch);\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"ngIf\", !ctx.success);\n    }\n  },\n  dependencies: [i4.ɵNgNoValidate, i4.DefaultValueAccessor, i4.NgControlStatus, i4.NgControlStatusGroup, i5.NgIf, i4.FormGroupDirective, i4.FormControlName, i6.TranslateDirective, i7.PasswordStrengthBarComponent, i8.TranslatePipe],\n  encapsulation: 2\n});","map":{"version":3,"mappings":"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","names":["i0","PasswordResetInitComponent","constructor","passwordResetInitService","encryptService","renderer","route","router","fb","group","username","oldPassword","forms_1","required","newPassword","minLength","maxLength","pattern","newPassword2","recallQuestion","recallAnswer","ngOnInit","subscription","params","subscribe","resetRequestForm","patchValue","isFirstLogin","ngAfterViewInit","selectRootElement","focus","requestReset","error","get","value","success","doNotMatch","save","encryptAccount","response","msg","errorMsg","headers","document","getElementById","innerHTML","alert","style","display","login","navigate","secretKey","crypto_js_1","WordArray","random","toString","initialValue","encryptProfile","key","iv","exports","selectors","decls","vars","consts","template"],"sourceRoot":"","sources":["C:\\Users\\D1347074\\Desktop\\projects 2\\nspayiiapp\\src\\main\\webapp\\app\\account\\password-reset\\init\\password-reset-init.component.ts","C:\\Users\\D1347074\\Desktop\\projects 2\\nspayiiapp\\src\\main\\webapp\\app\\account\\password-reset\\init\\password-reset-init.component.html"],"sourcesContent":["import { Component, OnInit, AfterViewInit, Renderer2 } from '@angular/core';\r\nimport { PasswordResetInitService } from './password-reset-init.service';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { FormBuilder, Validators } from '@angular/forms';\r\nimport { Subscription } from 'rxjs';\r\nimport { NgbModalRef } from '@ng-bootstrap/ng-bootstrap';\r\nimport { EncryptService } from 'app/core/auth/encrypt.service';\r\nimport { lib } from 'crypto-js';\r\n\r\n@Component({\r\n  selector: 'ic-password-reset-init',\r\n  templateUrl: './password-reset-init.component.html',\r\n})\r\nexport class PasswordResetInitComponent implements OnInit, AfterViewInit {\r\n  isFirstLogin?: boolean;\r\n  doNotMatch?: string;\r\n  error?: string;\r\n  errorEmailNotExists?: string;\r\n  success?: string;\r\n  modalRef?: NgbModalRef;\r\n  resetRequestForm = this.fb.group({\r\n    username: [],\r\n    oldPassword: ['', [Validators.required]],\r\n    newPassword: [\r\n      '',\r\n      [\r\n        Validators.required,\r\n        Validators.minLength(8),\r\n        Validators.maxLength(50),\r\n        Validators.pattern('(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[$@$!%*?&])[A-Za-z\\\\d$@$!%*?&].{8,}'),\r\n      ],\r\n    ],\r\n    newPassword2: ['', [Validators.required, Validators.minLength(8), Validators.maxLength(50)]],\r\n    recallQuestion: ['', [Validators.minLength(8), Validators.maxLength(50)]],\r\n    recallAnswer: ['', [Validators.minLength(8), Validators.maxLength(50)]],\r\n  });\r\n  private subscription?: Subscription;\r\n\r\n  constructor(\r\n    private passwordResetInitService: PasswordResetInitService,\r\n    private encryptService: EncryptService,\r\n    private renderer: Renderer2,\r\n    private route: ActivatedRoute,\r\n    private router: Router,\r\n    private fb: FormBuilder\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    this.subscription = this.route.params.subscribe(params => {\r\n      this.resetRequestForm.patchValue({ username: params['username'] });\r\n      this.isFirstLogin = params['isFirstLogin'];\r\n    });\r\n  }\r\n\r\n  ngAfterViewInit(): void {\r\n    this.renderer.selectRootElement('#oldPwd').focus();\r\n  }\r\n\r\n  requestReset(): void {\r\n    this.error = null as any;\r\n    if (this.resetRequestForm.get(['newPassword'])!.value !== this.resetRequestForm.get(['newPassword2'])!.value) {\r\n      this.success = null as any;\r\n      this.doNotMatch = 'ERROR';\r\n    } else {\r\n      this.doNotMatch = null as any;\r\n\r\n      this.passwordResetInitService.save(this.encryptAccount()).subscribe(\r\n        response => {\r\n          this.success = response.msg;\r\n        },\r\n        error => {\r\n          this.success = null as any;\r\n          const errorMsg = error.headers.get('error');\r\n          document.getElementById('pwdResetErrorMsg')!.innerHTML = errorMsg;\r\n          const alert = 'block';\r\n          document.getElementById('pwdResetErrorMsg')!.style.display = alert;\r\n        }\r\n      );\r\n    }\r\n  }\r\n\r\n  login(): void {\r\n    this.router.navigate(['']);\r\n  }\r\n\r\n  private encryptAccount(): any {\r\n    const secretKey = lib.WordArray.random(8).toString();\r\n    const initialValue = lib.WordArray.random(8).toString();\r\n\r\n    return {\r\n      username: this.encryptService.encryptProfile(this.resetRequestForm.get(['username'])!.value, secretKey, initialValue),\r\n      oldPassword: this.encryptService.encryptProfile(this.resetRequestForm.get(['oldPassword'])!.value, secretKey, initialValue),\r\n      newPassword: this.encryptService.encryptProfile(this.resetRequestForm.get(['newPassword'])!.value, secretKey, initialValue),\r\n      newPassword2: this.encryptService.encryptProfile(this.resetRequestForm.get(['newPassword2'])!.value, secretKey, initialValue),\r\n      recallQuestion: this.encryptService.encryptProfile(this.resetRequestForm.get(['recallQuestion'])!.value, secretKey, initialValue),\r\n      recallAnswer: this.encryptService.encryptProfile(this.resetRequestForm.get(['recallAnswer'])!.value, secretKey, initialValue),\r\n      key: secretKey,\r\n      iv: initialValue,\r\n    };\r\n  }\r\n}\r\n","<div>\r\n  <div class=\"row\">\r\n    <div class=\"col-md-8 offset-md-2\">\r\n      <h1 icTranslate=\"reset.request.title\">Change your password</h1>\r\n\r\n      <div class=\"alert alert-warning\" *ngIf=\"!success && isFirstLogin\">\r\n        <h4 icTranslate=\"reset.request.reason.desc\"></h4>\r\n        <ul class=\"list-group\">\r\n          <li class=\"list-group-item list-group-item-warning\" icTranslate=\"reset.request.reason.first\" style=\"border: none !important\"></li>\r\n          <li\r\n            class=\"list-group-item list-group-item-warning\"\r\n            icTranslate=\"reset.request.reason.second\"\r\n            style=\"border: none !important\"\r\n          ></li>\r\n          <li class=\"list-group-item list-group-item-warning\" icTranslate=\"reset.request.reason.third\" style=\"border: none !important\"></li>\r\n          <li\r\n            class=\"list-group-item list-group-item-warning\"\r\n            icTranslate=\"reset.request.reason.fourth\"\r\n            style=\"border: none !important\"\r\n          ></li>\r\n        </ul>\r\n      </div>\r\n\r\n      <p class=\"alert alert-success\" *ngIf=\"success\">\r\n        <span icTranslate=\"reset.finish.messages.success\"><strong>Your password has been reset.</strong> Please </span>\r\n        <a class=\"alert-link\" (click)=\"login()\" icTranslate=\"global.messages.info.authenticated.link\">sign in</a>.\r\n      </p>\r\n\r\n      <div class=\"alert alert-danger\" *ngIf=\"doNotMatch\" icTranslate=\"global.messages.error.dontmatch\">\r\n        <p>The password and its confirmation do not match!</p>\r\n      </div>\r\n\r\n      <p style=\"display: none\" id=\"pwdResetErrorMsg\" class=\"alert-dismissible alert-danger alert\"></p>\r\n\r\n      <form *ngIf=\"!success\" name=\"form\" role=\"form\" method=\"POST\" (ngSubmit)=\"requestReset()\" [formGroup]=\"resetRequestForm\">\r\n        <div class=\"rounded-pill\">\r\n          <label class=\"form-control-label\" icTranslate=\"reset.request.form.username\">User Name</label>\r\n          <input type=\"text\" class=\"form-control\" id=\"field_username\" name=\"username\" formControlName=\"username\" readonly />\r\n        </div>\r\n\r\n        <div class=\"rounded-pill\">\r\n          <label class=\"form-control-label\" icTranslate=\"password.form.oldpwd\">Old password</label>\r\n          <input\r\n            type=\"password\"\r\n            class=\"form-control\"\r\n            id=\"oldPwd\"\r\n            name=\"oldPwd\"\r\n            placeholder=\"{{ 'password.form.oldpwd.placeholder' | translate }}\"\r\n            formControlName=\"oldPassword\"\r\n            autocomplete=\"off\"\r\n          />\r\n          <div\r\n            *ngIf=\"\r\n              resetRequestForm.get('oldPassword')!.invalid &&\r\n              (resetRequestForm.get('oldPassword')!.dirty || resetRequestForm.get('oldPassword')!.touched)\r\n            \"\r\n          >\r\n            <small\r\n              class=\"form-text text-danger\"\r\n              *ngIf=\"resetRequestForm.get('oldPassword')?.errors?.required\"\r\n              icTranslate=\"password.messages.validate.oldpwd.required\"\r\n            >\r\n              Your password is required.\r\n            </small>\r\n          </div>\r\n        </div>\r\n\r\n        <div class=\"rounded-pill\">\r\n          <label class=\"form-control-label\" for=\"newPassword\" icTranslate=\"password.form.newpwd.label\">New password</label>\r\n          <input\r\n            type=\"password\"\r\n            class=\"form-control\"\r\n            id=\"newPwd\"\r\n            name=\"newPwd\"\r\n            placeholder=\"{{ 'password.form.newpwd.placeholder' | translate }}\"\r\n            formControlName=\"newPassword\"\r\n            autocomplete=\"off\"\r\n          />\r\n\r\n          <div\r\n            *ngIf=\"\r\n              resetRequestForm.get('newPassword')!.invalid &&\r\n              (resetRequestForm.get('newPassword')!.dirty || resetRequestForm.get('newPassword')!.touched)\r\n            \"\r\n          >\r\n            <small\r\n              class=\"form-text text-danger\"\r\n              *ngIf=\"resetRequestForm.get('newPassword')?.errors?.required\"\r\n              icTranslate=\"password.messages.validate.newpwd.required\"\r\n            >\r\n              Your password is required.\r\n            </small>\r\n\r\n            <small\r\n              class=\"form-text text-danger\"\r\n              *ngIf=\"resetRequestForm.get('newPassword')?.errors?.minlength\"\r\n              icTranslate=\"password.messages.validate.newpassword.minlength\"\r\n            >\r\n              Your password is required to be at least 8 characters.\r\n            </small>\r\n\r\n            <small\r\n              class=\"form-text text-danger\"\r\n              *ngIf=\"resetRequestForm.get('newPassword')?.errors?.maxlength\"\r\n              icTranslate=\"password.messages.validate.newpwd.maxlength\"\r\n            >\r\n              Your password cannot be longer than 50 characters.\r\n            </small>\r\n\r\n            <small\r\n              class=\"form-text text-danger\"\r\n              *ngIf=\"resetRequestForm.get('newPassword')?.errors?.pattern\"\r\n              icTranslate=\"password.messages.validate.newpwd.pattern\"\r\n            >\r\n              Password not strong,should be Upper case/Lower case/Digits/Special Characters combination.\r\n            </small>\r\n          </div>\r\n          <ic-password-strength-bar [passwordToCheck]=\"resetRequestForm.get('newPassword')!.value\"></ic-password-strength-bar>\r\n        </div>\r\n\r\n        <div class=\"rounded-pill\">\r\n          <label class=\"form-control-label\" icTranslate=\"password.form.confirmpwd.label\">New password confirmation</label>\r\n          <input\r\n            type=\"password\"\r\n            class=\"form-control\"\r\n            id=\"confirmPassword\"\r\n            name=\"confirmPassword\"\r\n            placeholder=\"{{ 'password.form.confirmpwd.placeholder' | translate }}\"\r\n            formControlName=\"newPassword2\"\r\n            autocomplete=\"off\"\r\n          />\r\n\r\n          <div\r\n            *ngIf=\"\r\n              resetRequestForm.get('newPassword2')!.invalid &&\r\n              (resetRequestForm.get('newPassword2')!.dirty || resetRequestForm.get('newPassword2')!.touched)\r\n            \"\r\n          >\r\n            <small\r\n              class=\"form-text text-danger\"\r\n              *ngIf=\"resetRequestForm.get('confirmPassword')?.errors?.required\"\r\n              icTranslate=\"password.messages.validate.confirmpwd.required\"\r\n            >\r\n              Your confirmation password is required.\r\n            </small>\r\n            <small\r\n              class=\"form-text text-danger\"\r\n              *ngIf=\"resetRequestForm.get('newPassword2')?.errors?.minlength\"\r\n              icTranslate=\"password.messages.validate.confirmpwd.minlength\"\r\n            >\r\n              Your confirmation password is required to be at least 8 characters.\r\n            </small>\r\n            <small\r\n              class=\"form-text text-danger\"\r\n              *ngIf=\"resetRequestForm.get('newPassword2')?.errors?.maxlength\"\r\n              icTranslate=\"password.messages.validate.confirmpwd.maxlength\"\r\n            >\r\n              Your confirmation password cannot be longer than 50 characters.\r\n            </small>\r\n          </div>\r\n        </div>\r\n\r\n        <div class=\"rounded-pill\" *ngIf=\"isFirstLogin\">\r\n          <label class=\"form-control-label\" icTranslate=\"password.form.pwdrecallquestion\">Password Recovery Question</label>\r\n          <input\r\n            type=\"text\"\r\n            class=\"form-control\"\r\n            id=\"recallQuestion\"\r\n            name=\"recallQuestion\"\r\n            placeholder=\"{{ 'password.form.pwdrecallquestion.placeholder' | translate }}\"\r\n            formControlName=\"recallQuestion\"\r\n          />\r\n\r\n          <div\r\n            *ngIf=\"\r\n              resetRequestForm.get('recallQuestion')!.invalid &&\r\n              (resetRequestForm.get('recallQuestion')!.dirty || resetRequestForm.get('recallQuestion')!.touched)\r\n            \"\r\n          >\r\n            <small\r\n              class=\"form-text text-danger\"\r\n              *ngIf=\"resetRequestForm.get('recallQuestion')?.errors?.minlength\"\r\n              icTranslate=\"password.messages.validate.pwdrecallquestion.minlength\"\r\n            >\r\n              Your password recall question is required to be at least 8 characters.\r\n            </small>\r\n\r\n            <small\r\n              class=\"form-text text-danger\"\r\n              *ngIf=\"resetRequestForm.get('recallQuestion')?.errors?.maxlength\"\r\n              icTranslate=\"password.messages.validate.pwdrecallquestion.maxlength\"\r\n            >\r\n              Your password recall question cannot be longer than 50 characters.\r\n            </small>\r\n          </div>\r\n        </div>\r\n\r\n        <div class=\"rounded-pill\" *ngIf=\"isFirstLogin\">\r\n          <label class=\"form-control-label\" icTranslate=\"password.form.pwdrecallanswer\">Answer</label>\r\n          <input\r\n            type=\"text\"\r\n            class=\"form-control\"\r\n            id=\"recallAnswer\"\r\n            name=\"recallAnswer\"\r\n            placeholder=\"{{ 'password.form.pwdrecallanswer.placeholder' | translate }}\"\r\n            formControlName=\"recallAnswer\"\r\n          />\r\n\r\n          <div\r\n            *ngIf=\"\r\n              resetRequestForm.get('recallAnswer')!.invalid &&\r\n              (resetRequestForm.get('recallAnswer')!.dirty || resetRequestForm.get('recallAnswer')!.touched)\r\n            \"\r\n          >\r\n            <small\r\n              class=\"form-text text-danger\"\r\n              *ngIf=\"resetRequestForm.get('recallAnswer')?.errors?.minlength\"\r\n              icTranslate=\"password.messages.validate.pwdrecallanswer.minlength\"\r\n            >\r\n              Your password recall answer is required to be at least 8 characters.\r\n            </small>\r\n\r\n            <small\r\n              class=\"form-text text-danger\"\r\n              *ngIf=\"resetRequestForm.get('recallQuestion')?.errors?.maxlength\"\r\n              icTranslate=\"password.messages.validate.pwdrecallanswer.maxlength\"\r\n            >\r\n              Your password recall answer cannot be longer than 50 characters.\r\n            </small>\r\n          </div>\r\n        </div>\r\n        <button type=\"submit\" [disabled]=\"resetRequestForm.invalid\" class=\"btn btn-primary\" icTranslate=\"reset.request.form.button\">\r\n          Reset\r\n        </button>\r\n      </form>\r\n    </div>\r\n  </div>\r\n</div>\r\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}