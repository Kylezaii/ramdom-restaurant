{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.NotificationInterceptor = void 0;\nconst tslib_1 = require(\"tslib\");\nconst http_1 = require(\"@angular/common/http\");\nconst operators_1 = require(\"rxjs/operators\");\nconst i0 = tslib_1.__importStar(require(\"@angular/core\"));\nconst i1 = tslib_1.__importStar(require(\"app/core/util/alert.service\"));\nclass NotificationInterceptor {\n  constructor(alertService) {\n    this.alertService = alertService;\n  }\n  intercept(request, next) {\n    return next.handle(request).pipe((0, operators_1.tap)(event => {\n      if (event instanceof http_1.HttpResponse) {\n        let alert = null;\n        let alertParams = null;\n        for (const headerKey of event.headers.keys()) {\n          if (headerKey.toLowerCase().endsWith('app-alert')) {\n            alert = event.headers.get(headerKey);\n          } else if (headerKey.toLowerCase().endsWith('app-params')) {\n            alertParams = decodeURIComponent(event.headers.get(headerKey).replace(/\\+/g, ' '));\n          }\n        }\n        if (alert) {\n          this.alertService.addAlert({\n            type: 'success',\n            translationKey: alert,\n            translationParams: {\n              param: alertParams\n            }\n          });\n        }\n      }\n    }));\n  }\n}\nexports.NotificationInterceptor = NotificationInterceptor;\nNotificationInterceptor.ɵfac = function NotificationInterceptor_Factory(t) {\n  return new (t || NotificationInterceptor)(i0.ɵɵinject(i1.AlertService));\n};\nNotificationInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: NotificationInterceptor,\n  factory: NotificationInterceptor.ɵfac\n});","map":{"version":3,"mappings":";;;;;;;AAAA;AAGA;;;AAIA,MACaA,uBAAuB;EAClCC,YAAoBC,YAA0B;IAA1B,iBAAY,GAAZA,YAAY;EAAiB;EAEjDC,SAAS,CAACC,OAAyB,EAAEC,IAAiB;IACpD,OAAOA,IAAI,CAACC,MAAM,CAACF,OAAO,CAAC,CAACG,IAAI,CAC9B,mBAAG,EAAEC,KAAqB,IAAI;MAC5B,IAAIA,KAAK,YAAYC,mBAAY,EAAE;QACjC,IAAIC,KAAK,GAAkB,IAAI;QAC/B,IAAIC,WAAW,GAAkB,IAAI;QAErC,KAAK,MAAMC,SAAS,IAAIJ,KAAK,CAACK,OAAO,CAACC,IAAI,EAAE,EAAE;UAC5C,IAAIF,SAAS,CAACG,WAAW,EAAE,CAACC,QAAQ,CAAC,WAAW,CAAC,EAAE;YACjDN,KAAK,GAAGF,KAAK,CAACK,OAAO,CAACI,GAAG,CAACL,SAAS,CAAC;WACrC,MAAM,IAAIA,SAAS,CAACG,WAAW,EAAE,CAACC,QAAQ,CAAC,YAAY,CAAC,EAAE;YACzDL,WAAW,GAAGO,kBAAkB,CAACV,KAAK,CAACK,OAAO,CAACI,GAAG,CAACL,SAAS,CAAE,CAACO,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;;;QAIvF,IAAIT,KAAK,EAAE;UACT,IAAI,CAACR,YAAY,CAACkB,QAAQ,CAAC;YACzBC,IAAI,EAAE,SAAS;YACfC,cAAc,EAAEZ,KAAK;YACrBa,iBAAiB,EAAE;cAAEC,KAAK,EAAEb;YAAW;WACxC,CAAC;;;IAGR,CAAC,CAAC,CACH;EACH;;AA7BFc;;mBACazB,uBAAuB;AAAA;;SAAvBA,uBAAuB;EAAA0B,SAAvB1B,uBAAuB;AAAA","names":["NotificationInterceptor","constructor","alertService","intercept","request","next","handle","pipe","event","http_1","alert","alertParams","headerKey","headers","keys","toLowerCase","endsWith","get","decodeURIComponent","replace","addAlert","type","translationKey","translationParams","param","exports","factory"],"sourceRoot":"","sources":["C:\\Users\\D1347074\\Desktop\\projects 2\\nspayiiapp\\src\\main\\webapp\\app\\core\\interceptor\\notification.interceptor.ts"],"sourcesContent":["import { HttpInterceptor, HttpRequest, HttpResponse, HttpHandler, HttpEvent } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { tap } from 'rxjs/operators';\r\n\r\nimport { AlertService } from 'app/core/util/alert.service';\r\n\r\n@Injectable()\r\nexport class NotificationInterceptor implements HttpInterceptor {\r\n  constructor(private alertService: AlertService) {}\r\n\r\n  intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n    return next.handle(request).pipe(\r\n      tap((event: HttpEvent<any>) => {\r\n        if (event instanceof HttpResponse) {\r\n          let alert: string | null = null;\r\n          let alertParams: string | null = null;\r\n\r\n          for (const headerKey of event.headers.keys()) {\r\n            if (headerKey.toLowerCase().endsWith('app-alert')) {\r\n              alert = event.headers.get(headerKey);\r\n            } else if (headerKey.toLowerCase().endsWith('app-params')) {\r\n              alertParams = decodeURIComponent(event.headers.get(headerKey)!.replace(/\\+/g, ' '));\r\n            }\r\n          }\r\n\r\n          if (alert) {\r\n            this.alertService.addAlert({\r\n              type: 'success',\r\n              translationKey: alert,\r\n              translationParams: { param: alertParams },\r\n            });\r\n          }\r\n        }\r\n      })\r\n    );\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}