{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CodeTypeService = void 0;\nconst tslib_1 = require(\"tslib\");\nconst operators_1 = require(\"rxjs/operators\");\nconst request_util_1 = require(\"app/core/request/request-util\");\nconst app_constants_1 = require(\"../../../app.constants\");\nconst i0 = tslib_1.__importStar(require(\"@angular/core\"));\nconst i1 = tslib_1.__importStar(require(\"@angular/common/http\"));\nclass CodeTypeService {\n  constructor(http) {\n    this.http = http;\n    this.codeTypeUrl = app_constants_1.SERVER_API_URL + 'api/codeAdmin/codeType';\n    this.appListUrl = app_constants_1.SERVER_API_URL + 'api/codeAdmin/appList';\n  }\n  getAppList() {\n    return this.http.get(`${this.appListUrl}`, {\n      observe: 'response'\n    }).pipe((0, operators_1.map)(res => this.convertApplicationArrayResponse(res)));\n  }\n  create(codeType) {\n    const copy = this.convert(codeType);\n    return this.http.post(this.codeTypeUrl, copy).pipe((0, operators_1.map)(res => {\n      const jsonResponse = res.body;\n      this.convertItemFromServer(jsonResponse);\n      return jsonResponse;\n    }));\n  }\n  update(codeType) {\n    const copy = this.convert(codeType);\n    return this.http.put(this.codeTypeUrl, copy, {\n      observe: 'response'\n    }).pipe((0, operators_1.map)(response => {\n      const jsonUpdateResponse = response.body;\n      this.convertItemFromServer(jsonUpdateResponse);\n      return jsonUpdateResponse;\n    }));\n  }\n  find(id) {\n    return this.http.get(`${this.codeTypeUrl}/${id}`, {\n      observe: 'response'\n    }).pipe((0, operators_1.map)(resp => {\n      const jsonFindResponse = resp.body;\n      this.convertItemFromServer(jsonFindResponse);\n      return jsonFindResponse;\n    }));\n  }\n  query(req) {\n    const params = (0, request_util_1.createRequestOption)(req);\n    return this.http.get(`${this.codeTypeUrl}`, {\n      params,\n      observe: 'response'\n    }).pipe((0, operators_1.map)(res => this.convertArrayResponse(res)));\n  }\n  delete(id) {\n    return this.http.delete(`${this.codeTypeUrl}/${id}`, {\n      observe: 'response'\n    });\n  }\n  convertApplicationArrayResponse(res) {\n    const jsonResponse = res.body;\n    const body = [];\n    for (let i = 0; i < jsonResponse.length; i++) {\n      body.push(this.convertItemFromServer(jsonResponse[i]));\n    }\n    return res.clone({\n      body\n    });\n  }\n  convertArrayResponse(res) {\n    const jsonResponse = res.body;\n    const body = [];\n    for (let i = 0; i < jsonResponse.length; i++) {\n      body.push(this.convertItemFromServer(jsonResponse[i]));\n    }\n    return res.clone({\n      body\n    });\n  }\n  convertItemFromServer(entity) {\n    return entity;\n  }\n  convert(codeType) {\n    const copy = Object.assign({}, codeType);\n    return copy;\n  }\n}\nexports.CodeTypeService = CodeTypeService;\nCodeTypeService.ɵfac = function CodeTypeService_Factory(t) {\n  return new (t || CodeTypeService)(i0.ɵɵinject(i1.HttpClient));\n};\nCodeTypeService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: CodeTypeService,\n  factory: CodeTypeService.ɵfac\n});","map":{"version":3,"mappings":"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","names":["CodeTypeService","constructor","http","app_constants_1","getAppList","get","appListUrl","observe","pipe","res","convertApplicationArrayResponse","create","codeType","copy","convert","post","codeTypeUrl","jsonResponse","body","convertItemFromServer","update","put","response","jsonUpdateResponse","find","id","resp","jsonFindResponse","query","req","params","convertArrayResponse","delete","i","length","push","clone","entity","Object","assign","exports","factory"],"sourceRoot":"","sources":["C:\\Users\\D1347074\\Desktop\\projects 2\\nspayiiapp\\src\\main\\webapp\\app\\admin\\code-admin\\code-type\\code-type.service.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-unsafe-return */\r\nimport { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpParams, HttpResponse } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { CodeType } from './code-type.model';\r\nimport { createRequestOption } from 'app/core/request/request-util';\r\nimport { SERVER_API_URL } from '../../../app.constants';\r\n\r\n@Injectable()\r\nexport class CodeTypeService {\r\n  private codeTypeUrl = SERVER_API_URL + 'api/codeAdmin/codeType';\r\n  private appListUrl = SERVER_API_URL + 'api/codeAdmin/appList';\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  getAppList(): Observable<HttpResponse<any[]>> {\r\n    return this.http\r\n      .get(`${this.appListUrl}`, { observe: 'response' })\r\n      .pipe(map((res: HttpResponse<any>) => this.convertApplicationArrayResponse(res)));\r\n  }\r\n\r\n  create(codeType: CodeType): Observable<CodeType> {\r\n    const copy = this.convert(codeType);\r\n    return this.http.post(this.codeTypeUrl, copy).pipe(\r\n      map((res: any) => {\r\n        const jsonResponse = res.body;\r\n        this.convertItemFromServer(jsonResponse);\r\n        return jsonResponse;\r\n      })\r\n    );\r\n  }\r\n\r\n  update(codeType: CodeType): Observable<CodeType> {\r\n    const copy = this.convert(codeType);\r\n    return this.http.put(this.codeTypeUrl, copy, { observe: 'response' }).pipe(\r\n      map((response: HttpResponse<any>) => {\r\n        const jsonUpdateResponse = response.body;\r\n        this.convertItemFromServer(jsonUpdateResponse);\r\n        return jsonUpdateResponse;\r\n      })\r\n    );\r\n  }\r\n\r\n  find(id: string): Observable<CodeType> {\r\n    return this.http.get(`${this.codeTypeUrl}/${id}`, { observe: 'response' }).pipe(\r\n      map((resp: HttpResponse<any>) => {\r\n        const jsonFindResponse = resp.body;\r\n        this.convertItemFromServer(jsonFindResponse);\r\n        return jsonFindResponse;\r\n      })\r\n    );\r\n  }\r\n\r\n  query(req?: any): Observable<HttpResponse<CodeType[]>> {\r\n    const params: HttpParams = createRequestOption(req);\r\n    return this.http\r\n      .get(`${this.codeTypeUrl}`, { params, observe: 'response' })\r\n      .pipe(map((res: HttpResponse<any>) => this.convertArrayResponse(res)));\r\n  }\r\n\r\n  delete(id: string): Observable<HttpResponse<any>> {\r\n    return this.http.delete(`${this.codeTypeUrl}/${id}`, { observe: 'response' });\r\n  }\r\n\r\n  private convertApplicationArrayResponse(res: HttpResponse<CodeType[]>): HttpResponse<CodeType[]> {\r\n    const jsonResponse: any[] = res.body as any;\r\n    const body: any[] = [];\r\n    for (let i = 0; i < jsonResponse.length; i++) {\r\n      body.push(this.convertItemFromServer(jsonResponse[i]));\r\n    }\r\n    return res.clone({ body });\r\n  }\r\n\r\n  private convertArrayResponse(res: HttpResponse<CodeType[]>): HttpResponse<CodeType[]> {\r\n    const jsonResponse: CodeType[] = res.body as any;\r\n    const body: CodeType[] = [];\r\n    for (let i = 0; i < jsonResponse.length; i++) {\r\n      body.push(this.convertItemFromServer(jsonResponse[i]));\r\n    }\r\n    return res.clone({ body });\r\n  }\r\n\r\n  private convertItemFromServer(entity: any): any {\r\n    return entity;\r\n  }\r\n\r\n  private convert(codeType: CodeType): CodeType {\r\n    const copy: CodeType = Object.assign({}, codeType);\r\n    return copy;\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}