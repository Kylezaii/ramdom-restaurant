{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.FunctionPopupService = void 0;\nconst tslib_1 = require(\"tslib\");\nconst resource_model_1 = require(\"../resource/resource.model\");\nconst i0 = tslib_1.__importStar(require(\"@angular/core\"));\nconst i1 = tslib_1.__importStar(require(\"@ng-bootstrap/ng-bootstrap\"));\nconst i2 = tslib_1.__importStar(require(\"@angular/router\"));\nconst i3 = tslib_1.__importStar(require(\"./function.service\"));\nclass FunctionPopupService {\n  constructor(modalService, router, functionService) {\n    this.modalService = modalService;\n    this.router = router;\n    this.functionService = functionService;\n    this.ngbModalRef = null;\n  }\n  open(component, id) {\n    return new Promise(resolve => {\n      if (this.ngbModalRef) {\n        resolve(this.ngbModalRef);\n      }\n      if (id) {\n        this.functionService.find(id).subscribe(func => {\n          this.ngbModalRef = this.functionModalRef(component, func);\n          resolve(this.ngbModalRef);\n        });\n      } else {\n        // setTimeout used as a workaround for getting ExpressionChangedAfterItHasBeenCheckedError\n        setTimeout(() => {\n          this.ngbModalRef = this.functionModalRef(component, new resource_model_1.Resource());\n          resolve(this.ngbModalRef);\n        }, 0);\n      }\n    });\n  }\n  functionModalRef(component, func) {\n    const modalRef = this.modalService.open(component, {\n      size: 'lg',\n      backdrop: 'static'\n    });\n    modalRef.componentInstance.func = func;\n    modalRef.result.then(() => {\n      this.router.navigate([{\n        outlets: {\n          popup: null\n        }\n      }], {\n        replaceUrl: true\n      });\n      this.ngbModalRef = null;\n    }, () => {\n      this.router.navigate([{\n        outlets: {\n          popup: null\n        }\n      }], {\n        replaceUrl: true\n      });\n      this.ngbModalRef = null;\n    });\n    return modalRef;\n  }\n}\nexports.FunctionPopupService = FunctionPopupService;\nFunctionPopupService.ɵfac = function FunctionPopupService_Factory(t) {\n  return new (t || FunctionPopupService)(i0.ɵɵinject(i1.NgbModal), i0.ɵɵinject(i2.Router), i0.ɵɵinject(i3.FunctionService));\n};\nFunctionPopupService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: FunctionPopupService,\n  factory: FunctionPopupService.ɵfac\n});","map":{"version":3,"mappings":";;;;;;;AAGA;;;;;AAGA,MACaA,oBAAoB;EAG/BC,YAAoBC,YAAsB,EAAUC,MAAc,EAAUC,eAAgC;IAAxF,iBAAY,GAAZF,YAAY;IAAoB,WAAM,GAANC,MAAM;IAAkB,oBAAe,GAAfC,eAAe;IACzF,IAAI,CAACC,WAAW,GAAG,IAAI;EACzB;EAEAC,IAAI,CAACC,SAAoB,EAAEC,EAAiB;IAC1C,OAAO,IAAIC,OAAO,CAAcC,OAAO,IAAG;MACxC,IAAI,IAAI,CAACL,WAAW,EAAE;QACpBK,OAAO,CAAC,IAAI,CAACL,WAAW,CAAC;;MAE3B,IAAIG,EAAE,EAAE;QACN,IAAI,CAACJ,eAAe,CAACO,IAAI,CAACH,EAAE,CAAC,CAACI,SAAS,CAACC,IAAI,IAAG;UAC7C,IAAI,CAACR,WAAW,GAAG,IAAI,CAACS,gBAAgB,CAACP,SAAS,EAAEM,IAAI,CAAC;UACzDH,OAAO,CAAC,IAAI,CAACL,WAAW,CAAC;QAC3B,CAAC,CAAC;OACH,MAAM;QACL;QACAU,UAAU,CAAC,MAAK;UACd,IAAI,CAACV,WAAW,GAAG,IAAI,CAACS,gBAAgB,CAACP,SAAS,EAAE,IAAIS,yBAAQ,EAAE,CAAC;UACnEN,OAAO,CAAC,IAAI,CAACL,WAAW,CAAC;QAC3B,CAAC,EAAE,CAAC,CAAC;;IAET,CAAC,CAAC;EACJ;EAEAS,gBAAgB,CAACP,SAAoB,EAAEM,IAAc;IACnD,MAAMI,QAAQ,GAAG,IAAI,CAACf,YAAY,CAACI,IAAI,CAACC,SAAS,EAAE;MAAEW,IAAI,EAAE,IAAI;MAAEC,QAAQ,EAAE;IAAQ,CAAE,CAAC;IACtFF,QAAQ,CAACG,iBAAiB,CAACP,IAAI,GAAGA,IAAI;IACtCI,QAAQ,CAACI,MAAM,CAACC,IAAI,CAClB,MAAK;MACH,IAAI,CAACnB,MAAM,CAACoB,QAAQ,CAAC,CAAC;QAAEC,OAAO,EAAE;UAAEC,KAAK,EAAE;QAAI;MAAE,CAAE,CAAC,EAAE;QAAEC,UAAU,EAAE;MAAI,CAAE,CAAC;MAC1E,IAAI,CAACrB,WAAW,GAAG,IAAI;IACzB,CAAC,EACD,MAAK;MACH,IAAI,CAACF,MAAM,CAACoB,QAAQ,CAAC,CAAC;QAAEC,OAAO,EAAE;UAAEC,KAAK,EAAE;QAAI;MAAE,CAAE,CAAC,EAAE;QAAEC,UAAU,EAAE;MAAI,CAAE,CAAC;MAC1E,IAAI,CAACrB,WAAW,GAAG,IAAI;IACzB,CAAC,CACF;IACD,OAAOY,QAAQ;EACjB;;AA1CFU;;mBACa3B,oBAAoB;AAAA;;SAApBA,oBAAoB;EAAA4B,SAApB5B,oBAAoB;AAAA","names":["FunctionPopupService","constructor","modalService","router","functionService","ngbModalRef","open","component","id","Promise","resolve","find","subscribe","func","functionModalRef","setTimeout","resource_model_1","modalRef","size","backdrop","componentInstance","result","then","navigate","outlets","popup","replaceUrl","exports","factory"],"sourceRoot":"","sources":["C:\\Users\\D1347074\\Desktop\\projects 2\\nspayiiapp\\src\\main\\webapp\\app\\admin\\access-control\\function\\function-popup.service.ts"],"sourcesContent":["import { Injectable, Component } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { NgbModal, NgbModalRef } from '@ng-bootstrap/ng-bootstrap';\r\nimport { Resource } from '../resource/resource.model';\r\nimport { FunctionService } from './function.service';\r\n\r\n@Injectable()\r\nexport class FunctionPopupService {\r\n  private ngbModalRef: NgbModalRef | null;\r\n\r\n  constructor(private modalService: NgbModal, private router: Router, private functionService: FunctionService) {\r\n    this.ngbModalRef = null;\r\n  }\r\n\r\n  open(component: Component, id?: number | any): Promise<NgbModalRef> {\r\n    return new Promise<NgbModalRef>(resolve => {\r\n      if (this.ngbModalRef) {\r\n        resolve(this.ngbModalRef);\r\n      }\r\n      if (id) {\r\n        this.functionService.find(id).subscribe(func => {\r\n          this.ngbModalRef = this.functionModalRef(component, func);\r\n          resolve(this.ngbModalRef);\r\n        });\r\n      } else {\r\n        // setTimeout used as a workaround for getting ExpressionChangedAfterItHasBeenCheckedError\r\n        setTimeout(() => {\r\n          this.ngbModalRef = this.functionModalRef(component, new Resource());\r\n          resolve(this.ngbModalRef);\r\n        }, 0);\r\n      }\r\n    });\r\n  }\r\n\r\n  functionModalRef(component: Component, func: Resource): NgbModalRef {\r\n    const modalRef = this.modalService.open(component, { size: 'lg', backdrop: 'static' });\r\n    modalRef.componentInstance.func = func;\r\n    modalRef.result.then(\r\n      () => {\r\n        this.router.navigate([{ outlets: { popup: null } }], { replaceUrl: true });\r\n        this.ngbModalRef = null;\r\n      },\r\n      () => {\r\n        this.router.navigate([{ outlets: { popup: null } }], { replaceUrl: true });\r\n        this.ngbModalRef = null;\r\n      }\r\n    );\r\n    return modalRef;\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}