{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.BankfileService = void 0;\nconst tslib_1 = require(\"tslib\");\nconst i0 = tslib_1.__importStar(require(\"@angular/core\"));\nconst i1 = tslib_1.__importStar(require(\"@angular/common/http\"));\nconst i2 = tslib_1.__importStar(require(\"app/core/config/application-config.service\"));\nconst i3 = tslib_1.__importStar(require(\"app/shared/service/ns2-http.service\"));\nclass BankfileService {\n  constructor(http, applicationConfigService, ns2Http) {\n    this.http = http;\n    this.applicationConfigService = applicationConfigService;\n    this.ns2Http = ns2Http;\n    this.resourceUrl = this.applicationConfigService.getEndpointFor('api/payment/bank-file');\n  }\n  get(options) {\n    return this.ns2Http.get(this.resourceUrl, options);\n  }\n  generate(job, options) {\n    const url = `${this.resourceUrl}/generate`;\n    const copy = this.convert(job);\n    return this.ns2Http.post(url, copy, options);\n  }\n  download(id, options) {\n    const url = `${this.resourceUrl}/${id}/payment-file`;\n    return this.ns2Http.post(url, null, options);\n  }\n  upload(id, fileTxnId) {\n    const url = `${this.resourceUrl}/${id}/return-file`;\n    return this.ns2Http.post(url, {\n      fileTxnId\n    });\n  }\n  convert(job) {\n    const copy = Object.assign({}, job);\n    copy.startDt = new Date(job.startDt.getTime() + Math.abs(new Date().getTimezoneOffset()) * 60 * 1000);\n    if (job.endDt) {\n      copy.endDt = new Date(job.endDt.getTime() + Math.abs(new Date().getTimezoneOffset()) * 60 * 1000);\n    }\n    return copy;\n  }\n}\nexports.BankfileService = BankfileService;\nBankfileService.ɵfac = function BankfileService_Factory(t) {\n  return new (t || BankfileService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.ApplicationConfigService), i0.ɵɵinject(i3.Ns2HttpService));\n};\nBankfileService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: BankfileService,\n  factory: BankfileService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";;;;;;;;;;;AAOA,MAGaA,eAAe;EAG1BC,YACUC,IAAgB,EAChBC,wBAAkD,EAClDC,OAAuB;IAFvB,SAAI,GAAJF,IAAI;IACJ,6BAAwB,GAAxBC,wBAAwB;IACxB,YAAO,GAAPC,OAAO;IALV,gBAAW,GAAG,IAAI,CAACD,wBAAwB,CAACE,cAAc,CAAC,uBAAuB,CAAC;EAMtF;EAEGC,GAAG,CAACC,OAAa;IACtB,OAAO,IAAI,CAACH,OAAO,CAACE,GAAG,CAAC,IAAI,CAACE,WAAW,EAAED,OAAO,CAAC;EACpD;EAEOE,QAAQ,CAACC,GAAQ,EAAEH,OAAa;IACrC,MAAMI,GAAG,GAAG,GAAG,IAAI,CAACH,WAAW,WAAW;IAC1C,MAAMI,IAAI,GAAG,IAAI,CAACC,OAAO,CAACH,GAAG,CAAC;IAC9B,OAAO,IAAI,CAACN,OAAO,CAACU,IAAI,CAACH,GAAG,EAAEC,IAAI,EAAEL,OAAO,CAAC;EAC9C;EAEOQ,QAAQ,CAACC,EAAU,EAAET,OAAa;IACvC,MAAMI,GAAG,GAAG,GAAG,IAAI,CAACH,WAAW,IAAIQ,EAAE,eAAe;IACpD,OAAO,IAAI,CAACZ,OAAO,CAACU,IAAI,CAACH,GAAG,EAAE,IAAI,EAAEJ,OAAO,CAAC;EAC9C;EAEOU,MAAM,CAACD,EAAU,EAAEE,SAAiB;IACzC,MAAMP,GAAG,GAAG,GAAG,IAAI,CAACH,WAAW,IAAIQ,EAAE,cAAc;IACnD,OAAO,IAAI,CAACZ,OAAO,CAACU,IAAI,CAACH,GAAG,EAAE;MAAEO;IAAS,CAAE,CAAC;EAC9C;EAEQL,OAAO,CAACH,GAAQ;IACtB,MAAME,IAAI,GAAQO,MAAM,CAACC,MAAM,CAAC,EAAE,EAAEV,GAAG,CAAC;IACxCE,IAAI,CAACS,OAAO,GAAG,IAAIC,IAAI,CAACZ,GAAG,CAACW,OAAO,CAACE,OAAO,EAAE,GAAGC,IAAI,CAACC,GAAG,CAAC,IAAIH,IAAI,EAAE,CAACI,iBAAiB,EAAE,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC;IACrG,IAAIhB,GAAG,CAACiB,KAAK,EAAE;MACbf,IAAI,CAACe,KAAK,GAAG,IAAIL,IAAI,CAACZ,GAAG,CAACiB,KAAK,CAACJ,OAAO,EAAE,GAAGC,IAAI,CAACC,GAAG,CAAC,IAAIH,IAAI,EAAE,CAACI,iBAAiB,EAAE,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC;;IAEnG,OAAOd,IAAI;EACb;;AAvCFgB;;mBAGa5B,eAAe;AAAA;;SAAfA,eAAe;EAAA6B,SAAf7B,eAAe;EAAA8B,YAFd;AAAM","names":["BankfileService","constructor","http","applicationConfigService","ns2Http","getEndpointFor","get","options","resourceUrl","generate","job","url","copy","convert","post","download","id","upload","fileTxnId","Object","assign","startDt","Date","getTime","Math","abs","getTimezoneOffset","endDt","exports","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\D1347074\\Desktop\\projects 2\\nspayiiapp\\src\\main\\webapp\\app\\payment\\bankfile-stop-payment\\bankfile\\service\\bankfile.service.ts"],"sourcesContent":["import {Injectable} from '@angular/core';\r\nimport {HttpClient} from '@angular/common/http';\r\nimport {ApplicationConfigService} from 'app/core/config/application-config.service';\r\nimport {Observable} from \"rxjs\";\r\nimport {Ns2HttpService} from 'app/shared/service/ns2-http.service';\r\nimport {Job} from \"app/admin/schedule/schedule.model\";\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class BankfileService {\r\n  public resourceUrl = this.applicationConfigService.getEndpointFor('api/payment/bank-file');\r\n\r\n  constructor(\r\n    private http: HttpClient,\r\n    private applicationConfigService: ApplicationConfigService,\r\n    private ns2Http: Ns2HttpService\r\n  ) { }\r\n\r\n  public get(options?: any): Observable<any> {\r\n    return this.ns2Http.get(this.resourceUrl, options);\r\n  }\r\n\r\n  public generate(job: Job, options?: any): Observable<any> {\r\n    const url = `${this.resourceUrl}/generate`;\r\n    const copy = this.convert(job);\r\n    return this.ns2Http.post(url, copy, options);\r\n  }\r\n\r\n  public download(id: string, options?: any): Observable<any> {\r\n    const url = `${this.resourceUrl}/${id}/payment-file`;\r\n    return this.ns2Http.post(url, null, options);\r\n  }\r\n\r\n  public upload(id: string, fileTxnId: string): Observable<any> {\r\n    const url = `${this.resourceUrl}/${id}/return-file`;\r\n    return this.ns2Http.post(url, { fileTxnId });\r\n  }\r\n\r\n  private convert(job: Job): Job {\r\n    const copy: Job = Object.assign({}, job);\r\n    copy.startDt = new Date(job.startDt.getTime() + Math.abs(new Date().getTimezoneOffset()) * 60 * 1000);\r\n    if (job.endDt) {\r\n      copy.endDt = new Date(job.endDt.getTime() + Math.abs(new Date().getTimezoneOffset()) * 60 * 1000);\r\n    }\r\n    return copy;\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}