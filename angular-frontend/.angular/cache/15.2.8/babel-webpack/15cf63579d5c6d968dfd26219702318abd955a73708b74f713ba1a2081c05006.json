{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CreateNewLetterComponent = void 0;\nconst tslib_1 = require(\"tslib\");\nconst forms_1 = require(\"@angular/forms\");\nconst rxjs_1 = require(\"rxjs\");\nconst http_1 = require(\"@angular/common/http\");\nconst i0 = tslib_1.__importStar(require(\"@angular/core\"));\nconst i1 = tslib_1.__importStar(require(\"@angular/router\"));\nconst i2 = tslib_1.__importStar(require(\"@angular/forms\"));\nconst i3 = tslib_1.__importStar(require(\"app/claim/service/claim.service\"));\nconst i4 = tslib_1.__importStar(require(\"app/layouts/service/customtoast.service\"));\nconst i5 = tslib_1.__importStar(require(\"app/core/auth/account.service\"));\nconst i6 = tslib_1.__importStar(require(\"ngx-webstorage\"));\nconst i7 = tslib_1.__importStar(require(\"app/core/auth/state-storage.service\"));\nconst i8 = tslib_1.__importStar(require(\"../../service/pop-up.service\"));\nconst i9 = tslib_1.__importStar(require(\"@angular/platform-browser\"));\nconst i10 = tslib_1.__importStar(require(\"app/shared/confirm/nsp-confirm.service\"));\nconst i11 = tslib_1.__importStar(require(\"@angular/common\"));\nconst i12 = tslib_1.__importStar(require(\"primeng/api\"));\nconst i13 = tslib_1.__importStar(require(\"primeng/button\"));\nconst i14 = tslib_1.__importStar(require(\"primeng/checkbox\"));\nconst i15 = tslib_1.__importStar(require(\"primeng/table\"));\nconst i16 = tslib_1.__importStar(require(\"primeng/dropdown\"));\nconst i17 = tslib_1.__importStar(require(\"primeng/dialog\"));\nconst i18 = tslib_1.__importStar(require(\"primeng/confirmpopup\"));\nconst i19 = tslib_1.__importStar(require(\"primeng/multiselect\"));\nconst i20 = tslib_1.__importStar(require(\"../../../../shared/pipe/default-string.pipe\"));\nconst _c0 = [\"dataTable\"];\nfunction CreateNewLetterComponent_span_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\")(1, \"h5\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate2(\"\", ctx_r0.existingLetterFormObj.mainClaim == null ? null : ctx_r0.existingLetterFormObj.mainClaim.caseId, \" \", ctx_r0.existingLetterFormObj.letterTypeTitle, \" \");\n  }\n}\nfunction CreateNewLetterComponent_ng_template_10_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtext(0, \"\\n                \");\n    i0.ɵɵelementStart(1, \"h5\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(3, \"\\n            \");\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate2(\"\", ctx_r2.currentParams == null ? null : ctx_r2.currentParams.caseId, \" \", ctx_r2.currentParams == null ? null : ctx_r2.currentParams.letterTypeTitle, \" \");\n  }\n}\nfunction CreateNewLetterComponent_div_17_p_multiSelect_5_ng_template_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtext(0, \"\\n                \");\n    i0.ɵɵelementStart(1, \"div\");\n    i0.ɵɵtext(2, \"\\n                    \");\n    i0.ɵɵelementStart(3, \"div\");\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(5, \"\\n                \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(6, \"\\n            \");\n  }\n  if (rf & 2) {\n    const claim_r22 = ctx.$implicit;\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate(claim_r22.display);\n  }\n}\nconst _c1 = function () {\n  return {\n    \"width\": \"100%\"\n  };\n};\nfunction CreateNewLetterComponent_div_17_p_multiSelect_5_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r24 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"p-multiSelect\", 33);\n    i0.ɵɵlistener(\"onPanelHide\", function CreateNewLetterComponent_div_17_p_multiSelect_5_Template_p_multiSelect_onPanelHide_0_listener() {\n      i0.ɵɵrestoreView(_r24);\n      const ctx_r23 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r23.reconMultiSelect());\n    });\n    i0.ɵɵtext(1, \"\\n            \");\n    i0.ɵɵtemplate(2, CreateNewLetterComponent_div_17_p_multiSelect_5_ng_template_2_Template, 7, 1, \"ng-template\", 34);\n    i0.ɵɵtext(3, \"\\n            \");\n    i0.ɵɵtext(4, \"\\n\\n        \");\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r18 = i0.ɵɵnextContext(2);\n    i0.ɵɵstyleMap(i0.ɵɵpureFunction0(4, _c1));\n    i0.ɵɵproperty(\"options\", ctx_r18.createNewLetterForm.get(\"additionalCaseIdData\").value)(\"group\", true);\n  }\n}\nfunction CreateNewLetterComponent_div_17_ng_template_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtext(0, \"\\n            \");\n    i0.ɵɵelementStart(1, \"span\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(3, \"\\n        \");\n  }\n  if (rf & 2) {\n    const ctx_r20 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"\\n                \", ctx_r20.getLabelAdditionalCaseId(), \"\\n            \");\n  }\n}\nfunction CreateNewLetterComponent_div_17_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 29);\n    i0.ɵɵtext(1, \"\\n            \");\n    i0.ɵɵelementStart(2, \"label\", 30);\n    i0.ɵɵtext(3, \"Additional Case ID:\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(4, \"\\n            \");\n    i0.ɵɵtemplate(5, CreateNewLetterComponent_div_17_p_multiSelect_5_Template, 5, 5, \"p-multiSelect\", 31);\n    i0.ɵɵtext(6, \"\\n        \");\n    i0.ɵɵtemplate(7, CreateNewLetterComponent_div_17_ng_template_7_Template, 4, 1, \"ng-template\", null, 32, i0.ɵɵtemplateRefExtractor);\n    i0.ɵɵtext(9, \"\\n        \");\n    i0.ɵɵtext(10, \"\\n        \");\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const _r19 = i0.ɵɵreference(8);\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(5);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r3.existingLetterFormObj || ctx_r3.existingLetterFormObj && ctx_r3.existingLetterFormObj.submittedDt === 0)(\"ngIfElse\", _r19);\n  }\n}\nfunction CreateNewLetterComponent_div_21_div_4_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r29 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 37);\n    i0.ɵɵtext(1, \"\\n                    \");\n    i0.ɵɵelementStart(2, \"p-checkbox\", 38);\n    i0.ɵɵlistener(\"onChange\", function CreateNewLetterComponent_div_21_div_4_Template_p_checkbox_onChange_2_listener() {\n      i0.ɵɵrestoreView(_r29);\n      const ctx_r28 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r28.getAdditionalClaimId());\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(3, \"\\n                    \");\n    i0.ɵɵelementStart(4, \"label\");\n    i0.ɵɵtext(5);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(6, \"\\n                 \");\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const i_r27 = ctx.index;\n    const ctx_r25 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"formGroupName\", i_r27);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"formControl\", ctx_r25.getInnerFormControl(ctx_r25.claimOptionArr, i_r27))(\"binary\", true);\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate1(\"\", ctx_r25.claimOptionData[i_r27].name, \"\\u00A0\");\n  }\n}\nfunction CreateNewLetterComponent_div_21_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 29);\n    i0.ɵɵtext(1, \"\\n            \");\n    i0.ɵɵelementStart(2, \"div\", 35);\n    i0.ɵɵtext(3, \"\\n                \");\n    i0.ɵɵtemplate(4, CreateNewLetterComponent_div_21_div_4_Template, 7, 4, \"div\", 36);\n    i0.ɵɵtext(5, \"\\n            \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(6, \"\\n            \");\n    i0.ɵɵtext(7, \"\\n        \");\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r4 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r4.claimOptionArr == null ? null : ctx_r4.claimOptionArr.controls);\n  }\n}\nfunction CreateNewLetterComponent_div_23_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \"\\n            \");\n    i0.ɵɵelementStart(2, \"span\");\n    i0.ɵɵelement(3, \"i\", 39);\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(5, \"\\n            \");\n    i0.ɵɵelement(6, \"br\");\n    i0.ɵɵtext(7, \"\\n        \");\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r5 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate1(\"\\u00A0Claims belonging to other Verifiers:\\u00A0 \", ctx_r5.listOfAdditionalCaseIdsWOtherVerifiers, \"\\n            \");\n  }\n}\nfunction CreateNewLetterComponent_ng_template_30_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtext(0, \"\\n                    \");\n    i0.ɵɵelementStart(1, \"tr\");\n    i0.ɵɵtext(2, \"\\n                        \");\n    i0.ɵɵelementStart(3, \"th\", 40);\n    i0.ɵɵtext(4, \"Claims\\n                        \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(5, \"\\n                        \");\n    i0.ɵɵelementStart(6, \"th\", 41);\n    i0.ɵɵtext(7, \"Item\\n                        \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(8, \"\\n                        \");\n    i0.ɵɵelementStart(9, \"th\", 42);\n    i0.ɵɵtext(10, \"Category\\n                        \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(11, \"\\n                    \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(12, \"\\n                \");\n  }\n}\nfunction CreateNewLetterComponent_ng_template_32_li_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"li\");\n    i0.ɵɵtext(1);\n    i0.ɵɵpipe(2, \"defaultString\");\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const detail_r36 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\"\\n                                \", i0.ɵɵpipeBind1(2, 1, detail_r36), \"\\n                            \");\n  }\n}\nconst _c2 = function () {\n  return {\n    \"width\": \"90%\"\n  };\n};\nfunction CreateNewLetterComponent_ng_template_32_li_19_div_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 53);\n    i0.ɵɵtext(1, \"\\n\\n                                        \");\n    i0.ɵɵelementStart(2, \"p-dropdown\", 54);\n    i0.ɵɵtext(3, \"\\n                                        \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(4, \"\\n\\n                                        \\u00A0\\n                                    \");\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctrl_r37 = i0.ɵɵnextContext().$implicit;\n    const ctx_r39 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(2);\n    i0.ɵɵstyleMap(i0.ɵɵpureFunction0(5, _c2));\n    i0.ɵɵproperty(\"options\", ctx_r39.itemCategoryList)(\"autoDisplayFirst\", false)(\"formControl\", ctx_r39.getInnerFACtrl(ctrl_r37, \"category\"));\n  }\n}\nfunction CreateNewLetterComponent_ng_template_32_li_19_div_6_button_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r50 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"button\", 58);\n    i0.ɵɵlistener(\"click\", function CreateNewLetterComponent_ng_template_32_li_19_div_6_button_2_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r50);\n      const ctx_r51 = i0.ɵɵnextContext(2);\n      const ctrl_r37 = ctx_r51.$implicit;\n      const i_r38 = ctx_r51.index;\n      const data_r31 = i0.ɵɵnextContext().$implicit;\n      const ctx_r48 = i0.ɵɵnextContext();\n      let tmp_b_0;\n      return i0.ɵɵresetView(ctx_r48.navigateChecklistItem(data_r31.value.claimDetail, data_r31.value.claimIdClaimItemMap, data_r31.value.itemName, ctx_r48.getInnerFACtrl(ctrl_r37, \"category\").value, (tmp_b_0 = ctx_r48.getInnerFACtrl(ctrl_r37, \"model\")) == null ? null : tmp_b_0.value, null, i_r38));\n    });\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctrl_r37 = i0.ɵɵnextContext(2).$implicit;\n    i0.ɵɵproperty(\"disabled\", ctrl_r37.invalid);\n  }\n}\nfunction CreateNewLetterComponent_ng_template_32_li_19_div_6_ng_template_4_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r55 = i0.ɵɵgetCurrentView();\n    i0.ɵɵtext(0, \"\\n                                            \");\n    i0.ɵɵelementStart(1, \"button\", 59);\n    i0.ɵɵlistener(\"click\", function CreateNewLetterComponent_ng_template_32_li_19_div_6_ng_template_4_Template_button_click_1_listener() {\n      i0.ɵɵrestoreView(_r55);\n      const i_r38 = i0.ɵɵnextContext(2).index;\n      const data_r31 = i0.ɵɵnextContext().$implicit;\n      const ctx_r53 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r53.onRemoveCategory(data_r31 == null ? null : data_r31.get(\"itemCategory\"), i_r38));\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(2, \"\\n                                        \");\n  }\n}\nfunction CreateNewLetterComponent_ng_template_32_li_19_div_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 55);\n    i0.ɵɵtext(1, \"\\n                                        \");\n    i0.ɵɵtemplate(2, CreateNewLetterComponent_ng_template_32_li_19_div_6_button_2_Template, 1, 1, \"button\", 56);\n    i0.ɵɵtext(3, \"\\n                                        \");\n    i0.ɵɵtemplate(4, CreateNewLetterComponent_ng_template_32_li_19_div_6_ng_template_4_Template, 3, 0, \"ng-template\", null, 57, i0.ɵɵtemplateRefExtractor);\n    i0.ɵɵtext(6, \"\\n                                    \");\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const _r46 = i0.ɵɵreference(5);\n    const ctrl_r37 = i0.ɵɵnextContext().$implicit;\n    const ctx_r40 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r40.getInnerFACtrl(ctrl_r37, \"catConfirmed\").value)(\"ngIfElse\", _r46);\n  }\n}\nfunction CreateNewLetterComponent_ng_template_32_li_19_ng_template_8_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r60 = i0.ɵɵgetCurrentView();\n    i0.ɵɵtext(0, \"\\n                                        \");\n    i0.ɵɵelementStart(1, \"div\", 60);\n    i0.ɵɵtext(2, \"\\n                                            \");\n    i0.ɵɵelementStart(3, \"a\", 61);\n    i0.ɵɵlistener(\"click\", function CreateNewLetterComponent_ng_template_32_li_19_ng_template_8_Template_a_click_3_listener() {\n      i0.ɵɵrestoreView(_r60);\n      const ctx_r61 = i0.ɵɵnextContext();\n      const ctrl_r37 = ctx_r61.$implicit;\n      const i_r38 = ctx_r61.index;\n      const data_r31 = i0.ɵɵnextContext().$implicit;\n      const ctx_r58 = i0.ɵɵnextContext();\n      let tmp_b_0;\n      return i0.ɵɵresetView(ctx_r58.navigateChecklistItem(data_r31.value.claimDetail, data_r31.value.claimIdClaimItemMap, data_r31.value.itemName, (tmp_b_0 = ctx_r58.getInnerFACtrl(ctrl_r37, \"category\")) == null ? null : tmp_b_0.value, (tmp_b_0 = ctx_r58.getInnerFACtrl(ctrl_r37, \"model\")) == null ? null : tmp_b_0.value, (tmp_b_0 = ctx_r58.getInnerFACtrl(ctrl_r37, \"resolvedModel\")) == null ? null : tmp_b_0.value, i_r38));\n    });\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(5, \"\\n                                        \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(6, \"\\n                                    \");\n  }\n  if (rf & 2) {\n    const ctrl_r37 = i0.ɵɵnextContext().$implicit;\n    const ctx_r42 = i0.ɵɵnextContext(2);\n    let tmp_0_0;\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate((tmp_0_0 = ctx_r42.getInnerFACtrl(ctrl_r37, \"category\")) == null ? null : tmp_0_0.value == null ? null : tmp_0_0.value.label);\n  }\n}\nfunction CreateNewLetterComponent_ng_template_32_li_19_hr_12_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"hr\");\n  }\n}\nfunction CreateNewLetterComponent_ng_template_32_li_19_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"li\");\n    i0.ɵɵtext(1, \"\\n                                \");\n    i0.ɵɵelementStart(2, \"div\", 49);\n    i0.ɵɵtext(3, \"\\n                                    \");\n    i0.ɵɵtemplate(4, CreateNewLetterComponent_ng_template_32_li_19_div_4_Template, 5, 6, \"div\", 50);\n    i0.ɵɵtext(5, \"\\n                                    \");\n    i0.ɵɵtemplate(6, CreateNewLetterComponent_ng_template_32_li_19_div_6_Template, 7, 2, \"div\", 51);\n    i0.ɵɵtext(7, \"\\n                                    \");\n    i0.ɵɵtemplate(8, CreateNewLetterComponent_ng_template_32_li_19_ng_template_8_Template, 7, 1, \"ng-template\", null, 52, i0.ɵɵtemplateRefExtractor);\n    i0.ɵɵtext(10, \"\\n                                \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(11, \"\\n                                \");\n    i0.ɵɵtemplate(12, CreateNewLetterComponent_ng_template_32_li_19_hr_12_Template, 1, 0, \"hr\", 7);\n    i0.ɵɵtext(13, \"\\n                            \");\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctrl_r37 = ctx.$implicit;\n    const i_r38 = ctx.index;\n    const _r41 = i0.ɵɵreference(9);\n    const data_r31 = i0.ɵɵnextContext().$implicit;\n    const ctx_r35 = i0.ɵɵnextContext();\n    let tmp_3_0;\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r35.getInnerFACtrl(ctrl_r37, \"catConfirmed\").value)(\"ngIfElse\", _r41);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r35.existingLetterFormObj || ctx_r35.existingLetterFormObj && ctx_r35.existingLetterFormObj.submittedDt === 0);\n    i0.ɵɵadvance(6);\n    i0.ɵɵproperty(\"ngIf\", i_r38 + 1 < (data_r31 == null ? null : (tmp_3_0 = data_r31.get(\"itemCategory\")) == null ? null : tmp_3_0.controls.length));\n  }\n}\nconst _c3 = function () {\n  return {\n    \"list-style-type\": \"none\",\n    \"width\": \"100%\"\n  };\n};\nfunction CreateNewLetterComponent_ng_template_32_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtext(0, \"\\n                    \");\n    i0.ɵɵelementStart(1, \"tr\", 43);\n    i0.ɵɵtext(2, \"\\n                        \");\n    i0.ɵɵelementStart(3, \"td\", 44);\n    i0.ɵɵtext(4, \"\\n                        \");\n    i0.ɵɵelementStart(5, \"ul\", 45);\n    i0.ɵɵtext(6, \"\\n                            \");\n    i0.ɵɵtemplate(7, CreateNewLetterComponent_ng_template_32_li_7_Template, 3, 3, \"li\", 46);\n    i0.ɵɵtext(8, \"\\n                        \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(9, \"\\n                        \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(10, \"\\n                        \");\n    i0.ɵɵelementStart(11, \"td\", 47);\n    i0.ɵɵtext(12);\n    i0.ɵɵpipe(13, \"defaultString\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(14, \"\\n                        \");\n    i0.ɵɵelementStart(15, \"td\", 48);\n    i0.ɵɵtext(16, \"\\n                            \");\n    i0.ɵɵelementStart(17, \"ul\");\n    i0.ɵɵtext(18, \"\\n\\n                            \");\n    i0.ɵɵtemplate(19, CreateNewLetterComponent_ng_template_32_li_19_Template, 14, 4, \"li\", 46);\n    i0.ɵɵtext(20, \"\\n                            \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(21, \"\\n\\n                            \");\n    i0.ɵɵtext(22, \"\\n                        \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(23, \"\\n                    \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(24, \"\\n                \");\n  }\n  if (rf & 2) {\n    const data_r31 = ctx.$implicit;\n    const rowIndex_r32 = ctx.rowIndex;\n    let tmp_4_0;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"formGroupName\", rowIndex_r32);\n    i0.ɵɵadvance(6);\n    i0.ɵɵproperty(\"ngForOf\", data_r31.value.claimDetail);\n    i0.ɵɵadvance(5);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(13, 6, data_r31.value.itemName));\n    i0.ɵɵadvance(5);\n    i0.ɵɵstyleMap(i0.ɵɵpureFunction0(8, _c3));\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngForOf\", data_r31 == null ? null : (tmp_4_0 = data_r31.get(\"itemCategory\")) == null ? null : tmp_4_0.controls);\n  }\n}\nfunction CreateNewLetterComponent_ng_template_34_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtext(0, \"\\n                    \");\n    i0.ɵɵelementStart(1, \"tr\");\n    i0.ɵɵtext(2, \"\\n                        \");\n    i0.ɵɵelementStart(3, \"td\", 62);\n    i0.ɵɵtext(4, \"No records found.\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(5, \"\\n                    \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(6, \"\\n                \");\n  }\n}\nfunction CreateNewLetterComponent_button_52_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r65 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"button\", 63);\n    i0.ɵɵlistener(\"click\", function CreateNewLetterComponent_button_52_Template_button_click_0_listener($event) {\n      i0.ɵɵrestoreView(_r65);\n      const ctx_r64 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r64.openDialog($event, \"confirmDelete\"));\n    });\n    i0.ɵɵtext(1, \"\\n            \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction CreateNewLetterComponent_button_54_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r67 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"button\", 64);\n    i0.ɵɵlistener(\"click\", function CreateNewLetterComponent_button_54_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r67);\n      const ctx_r66 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r66.onSave());\n    });\n    i0.ɵɵtext(1, \"\\n            \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction CreateNewLetterComponent_button_59_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r69 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"button\", 65);\n    i0.ɵɵlistener(\"click\", function CreateNewLetterComponent_button_59_Template_button_click_0_listener($event) {\n      i0.ɵɵrestoreView(_r69);\n      const ctx_r68 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r68.openDialog($event, \"confirmUpdate\"));\n    });\n    i0.ɵɵtext(1, \"\\n            \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction CreateNewLetterComponent_button_61_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r71 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"button\", 66);\n    i0.ɵɵlistener(\"click\", function CreateNewLetterComponent_button_61_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r71);\n      const ctx_r70 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r70.onSubmit());\n    });\n    i0.ɵɵtext(1, \"\\n            \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction CreateNewLetterComponent_div_68_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 67);\n    i0.ɵɵtext(1, \"\\n        \");\n    i0.ɵɵelement(2, \"object\", 68);\n    i0.ɵɵtext(3, \"\\n    \");\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r14 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵattribute(\"data\", ctx_r14.previewLetterUrl, i0.ɵɵsanitizeResourceUrl);\n  }\n}\nconst _c4 = function () {\n  return {\n    \"margin-left\": \".5em\",\n    \"margin-bottom\": \".5em\"\n  };\n};\nfunction CreateNewLetterComponent_ng_template_70_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r73 = i0.ɵɵgetCurrentView();\n    i0.ɵɵtext(0, \"\\n        \");\n    i0.ɵɵelementStart(1, \"button\", 69);\n    i0.ɵɵlistener(\"click\", function CreateNewLetterComponent_ng_template_70_Template_button_click_1_listener() {\n      i0.ɵɵrestoreView(_r73);\n      const ctx_r72 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r72.displayPreviewLetterDialog.display = false);\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(2, \"\\n    \");\n  }\n  if (rf & 2) {\n    i0.ɵɵadvance(1);\n    i0.ɵɵstyleMap(i0.ɵɵpureFunction0(2, _c4));\n  }\n}\nfunction CreateNewLetterComponent_div_75_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 67);\n    i0.ɵɵtext(1, \"\\n        \");\n    i0.ɵɵelement(2, \"object\", 68);\n    i0.ɵɵtext(3, \"\\n    \");\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r16 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵattribute(\"data\", ctx_r16.generatedLetterUrl, i0.ɵɵsanitizeResourceUrl);\n  }\n}\nfunction CreateNewLetterComponent_ng_template_77_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r75 = i0.ɵɵgetCurrentView();\n    i0.ɵɵtext(0, \"\\n        \");\n    i0.ɵɵelementStart(1, \"button\", 69);\n    i0.ɵɵlistener(\"click\", function CreateNewLetterComponent_ng_template_77_Template_button_click_1_listener() {\n      i0.ɵɵrestoreView(_r75);\n      const ctx_r74 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r74.displayGeneratedLetterDialog.display = false);\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(2, \"\\n    \");\n  }\n  if (rf & 2) {\n    i0.ɵɵadvance(1);\n    i0.ɵɵstyleMap(i0.ɵɵpureFunction0(2, _c4));\n  }\n}\nconst _c5 = function () {\n  return {\n    \"margin-bottom\": \"1em\"\n  };\n};\nconst _c6 = function () {\n  return {\n    width: \"60vw\",\n    height: \"100%\"\n  };\n};\nclass CreateNewLetterComponent {\n  constructor(route, router, formBuilder, claimService, toastService, account, $localStorage, stateStorageService, popUpService, domSanitizer, nspConfirmService, _location) {\n    this.route = route;\n    this.router = router;\n    this.formBuilder = formBuilder;\n    this.claimService = claimService;\n    this.toastService = toastService;\n    this.account = account;\n    this.$localStorage = $localStorage;\n    this.stateStorageService = stateStorageService;\n    this.popUpService = popUpService;\n    this.domSanitizer = domSanitizer;\n    this.nspConfirmService = nspConfirmService;\n    this._location = _location;\n    this.currentParams = {\n      letterFormId: '',\n      caseId: '',\n      claimId: '',\n      claimType: '',\n      letterTypeCode: '',\n      letterTypeTitle: '',\n      nric: '',\n      itemType: '',\n      itemName: '',\n      claimItemId: '',\n      latestStatus: '',\n      latestStatusDesc: '',\n      latestStatusCode: '',\n      trgStartDte: '',\n      trgEndDte: '',\n      csn: ''\n    };\n    this.itemCategoryList = [];\n    this.saveLetterItemDto = {}; // main persisting request\n    this.displayPreviewLetterDialog = {\n      display: false\n    };\n    this.displayGeneratedLetterDialog = {\n      display: false\n    };\n    this.CLAIM_TYPE_SELF_EMP = 'S';\n    this.CLAIM_TYPE_EMP = 'E';\n    this.claimOptionData = [{\n      name: 'ITX PROV',\n      key: 'ITX_PROV',\n      claimOption: '2',\n      fullName: 'INCOME TAX'\n    }, {\n      name: 'ITX ADJ',\n      key: 'ITX_ADJ',\n      claimOption: '2',\n      fullName: 'INCOME TAX ADJUSTMENT'\n    }, {\n      name: 'AVE',\n      key: 'AVE',\n      claimOption: '1',\n      fullName: null\n    }, {\n      name: 'REP',\n      key: 'REP',\n      claimOption: '3',\n      fullName: null\n    }];\n    this.hasChanged = false;\n    // additionalCaseIdData: any[] = [];\n    this.createNewLetterForm = this.formBuilder.group({\n      additionalCaseIdData: new forms_1.FormControl([], null),\n      claimOptionArr: new forms_1.FormArray([]),\n      additionalCaseIdArr: new forms_1.FormControl([], null),\n      claimItemArr: new forms_1.FormArray([]),\n      itemNameMap: new forms_1.FormControl(new Map(), null),\n      claimItemObjList: new forms_1.FormControl([])\n    });\n    this.selectedCategoryList = [];\n    this.ITEM_NAME_INCOME_TAX = \"INCOME TAX\";\n    this.ITEM_NAME_INCOME_TAX_ADJUSTMENT = \"INCOME TAX ADJUSTMENT\";\n    this.account.identity().subscribe(accountToCopy => {\n      console.log(\"the current user\", accountToCopy);\n      this.currentAccount = this.copyAccount(accountToCopy);\n    });\n    console.log(\"test\");\n  }\n  static initCategory(formBuilder) {\n    return formBuilder.group({\n      category: new forms_1.FormControl(null, forms_1.Validators.required),\n      catConfirmed: new forms_1.FormControl(false, null),\n      model: new forms_1.FormControl(null)\n    });\n  }\n  copyAccount(account) {\n    return {\n      subjectId: account.subjectId,\n      email: account.email,\n      firstName: account.firstName,\n      lastName: account.lastName,\n      login: account.username,\n      authorities: account.authorities,\n      groups: account.groups\n    };\n  }\n  getClaimOptionName(key) {\n    return String(this.claimOptionData.find(x => x.key === key)?.name || \"\");\n  }\n  get claimOptionArr() {\n    return this.createNewLetterForm?.get('claimOptionArr');\n  }\n  get claimItemArr() {\n    return this.createNewLetterForm?.get('claimItemArr');\n  }\n  populateParams(params) {\n    if (params.letterFormId) {\n      this.currentParams.letterFormId = params.letterFormId;\n    }\n    if (params.caseId) {\n      this.currentParams.caseId = params.caseId;\n    }\n    if (params.claimId) {\n      this.currentParams.claimId = params.claimId;\n    }\n    if (params.claimType) {\n      this.currentParams.claimType = params.claimType;\n    }\n    if (params.letterTypeCode) {\n      this.currentParams.letterTypeCode = params.letterTypeCode;\n    }\n    if (params.letterTypeTitle) {\n      this.currentParams.letterTypeTitle = params.letterTypeTitle;\n    }\n    if (params.nric) {\n      this.currentParams.nric = params.nric;\n    }\n    if (params.itemType) {\n      this.currentParams.itemType = params.itemType;\n    }\n    if (params.claimItemId) {\n      this.currentParams.claimItemId = params.claimItemId;\n    }\n    if (params.latestStatus) {\n      this.currentParams.latestStatus = params.latestStatus;\n    }\n    if (params.latestStatusDesc) {\n      this.currentParams.latestStatusDesc = params.latestStatusDesc;\n    }\n    if (params.latestStatusCode) {\n      this.currentParams.latestStatusCode = params.latestStatusCode;\n    }\n    if (params.trgStartDte) {\n      this.currentParams.trgStartDte = params.trgStartDte;\n    }\n    if (params.trgEndDte) {\n      this.currentParams.trgEndDte = params.trgEndDte;\n    }\n    if (params.csn) {\n      this.currentParams.csn = params.csn;\n    }\n    if (params.verifier) {\n      this.currentParams.verifier = params.verifier;\n    }\n    if (params.verifierInit) {\n      this.currentParams.verifierInit = params.verifierInit;\n    }\n  }\n  getClaimOption() {\n    let rslt = [];\n    const claimOptIndexArr = this.claimOptionArr.controls.flatMap((fc, i) => fc.value ? i : []);\n    rslt = this.claimOptionData.filter((x, i) => claimOptIndexArr.includes(i));\n    console.log(\"the claim opt result\", rslt);\n    return rslt;\n  }\n  ngOnInit() {\n    console.log(\"initializing create new letter\");\n    this.retrieveClaimLetterDetails();\n  }\n  retrieveClaimLetterDetails() {\n    this.createNewLetterForm.get('claimItemObjList').setValue(JSON.parse(this.route.snapshot.paramMap.get(\"claimItemObjList\")));\n    this.route.queryParams.subscribe(params => {\n      this.params = params;\n      this.populateParams(params);\n      this.getItemCategory(this.currentParams.letterTypeCode);\n      console.log(\"isha\", params);\n      if (this.popUpService.select('create-new-letter-form')) {\n        const fg = this.popUpService.select('create-new-letter-form');\n        this.createNewLetterForm = fg;\n        if (this.popUpService.select('existingLetterFormObj')) {\n          this.existingLetterFormObj = this.popUpService.select('existingLetterFormObj');\n        }\n      } else {\n        this.claimOptionData.forEach(x => {\n          this.claimOptionArr.push(new forms_1.FormControl(false, null));\n        });\n        if (this.currentParams.letterFormId) {\n          //prepopulate the table and preselect the additional case ids and set the itemNameMap\n          console.log(\"forming existing letterForm\");\n          this.prepopulateByExistingLetterForm(this.currentParams.letterFormId, this.createNewLetterForm);\n        } else {\n          console.log(\"init create new letter\");\n          this.getAdditionalClaimId();\n          //this.params.itemType refers to the main itemType\n          //this.params.itemName refers to the main itemName\n          this.initClaimOpt(this.currentParams.itemType, this.currentParams.itemName, null);\n        }\n      }\n    });\n  }\n  getLabelAdditionalCaseId() {\n    const arr = this.createNewLetterForm.get('additionalCaseIdArr').value;\n    if (arr.length > 0) {\n      return arr.map(x => {\n        return String(x.display);\n      }).join(\", \");\n    } else return \"\";\n  }\n  valueChangeSubscribe(createNewLetterForm) {\n    const initialValue = createNewLetterForm.value;\n    this.createNewLetterForm.get('additionalCaseIdArr').valueChanges.subscribe(() => {\n      console.log(\"luka\", this.createNewLetterForm.get('additionalCaseIdArr'));\n      this.initClaimItemTable(createNewLetterForm);\n      this.listOfAdditionalCaseIdsWOtherVerifiers = this.getListOfAdditionalCaseIdsWOtherVerifiers();\n    });\n    createNewLetterForm.valueChanges.subscribe(() => {\n      this.hasChanged = Object.keys(initialValue).some(key => createNewLetterForm.value[key] !== initialValue[key]);\n      const selectedCategoryList = [];\n      this.claimItemArr.controls.forEach(x => {\n        x.get('itemCategory').controls.forEach(y => {\n          if (y.get('category').value?.value) {\n            selectedCategoryList.push(y.get('category').value?.value);\n          }\n        });\n      });\n      this.selectedCategoryList = selectedCategoryList;\n      this.popUpService.setState({\n        'create-new-letter-form': createNewLetterForm\n      });\n    });\n    this.popUpService.setState({\n      'create-new-letter-form': createNewLetterForm\n    });\n  }\n  //supply claimOpt first, otherwise logic by itemType and itemName\n  initClaimOpt(itemType, itemName, claimOpt) {\n    let index;\n    if (claimOpt) {\n      this.defaultClaimOpt = this.claimOptionData.find(x => x.key === claimOpt)?.name;\n      this.getInnerFormControl(this.claimOptionArr, this.claimOptionData.findIndex(x => x.key === claimOpt)).setValue(true);\n    } else {\n      switch (itemType) {\n        case 'ITX':\n          {\n            if (itemName === \"INCOME TAX\") {\n              this.getInnerFormControl(this.claimOptionArr, 0).setValue(true);\n              index = 0;\n            } else if (itemName === this.ITEM_NAME_INCOME_TAX_ADJUSTMENT) {\n              this.getInnerFormControl(this.claimOptionArr, 1).setValue(true);\n              index = 1;\n            }\n            break;\n          }\n        case 'AVE':\n          {\n            this.getInnerFormControl(this.claimOptionArr, 2).setValue(true);\n            index = 2;\n            break;\n          }\n        case 'REP':\n          {\n            this.getInnerFormControl(this.claimOptionArr, 3).setValue(true);\n            index = 3;\n            break;\n          }\n      }\n    }\n    this.defaultClaimOpt = this.claimOptionData[index]?.name;\n    // return String(this.claimOptionData[index]?.name);\n  }\n\n  getDetail(caseId) {\n    return \"x\";\n  }\n  getAdditionalClaimId() {\n    // this.createNewletterForm.get('additionalCaseIdArr').setValue([]);\n    let request;\n    if (this.currentParams.claimType === this.CLAIM_TYPE_SELF_EMP) {\n      request = {\n        nric: this.currentParams.nric,\n        claimType: this.currentParams.claimType,\n        caseId: this.currentParams.caseId\n      };\n      const claimOptionObjArr = this.getClaimOption();\n      request['claimOpt'] = claimOptionObjArr.map(z => {\n        return String(z.claimOption);\n      });\n      request['itemNameList'] = claimOptionObjArr.filter(x => x.fullName !== undefined && x.fullName !== null).map(z => {\n        return String(z.fullName);\n      });\n    } else if (this.currentParams.claimType === this.CLAIM_TYPE_EMP) {\n      console.log(\"do something, \", this.currentParams.csn);\n      request = {\n        nric: this.currentParams.nric,\n        claimType: this.currentParams.claimType,\n        caseId: this.currentParams.caseId,\n        csn: this.currentParams.csn\n      };\n    }\n    this.claimService.retrieveAdditionalClaimIds(request, null).subscribe(resp => {\n      if (resp.status === 200 && resp.body.data) {\n        const additionalCaseIdData = resp.body.data.map(x => {\n          return {\n            display: x.caseId.concat(\" \").concat(this.getClaimOptionName(x.claimOpt)).concat(\" (\").concat(x.latestStatusDesc).concat(\")\"),\n            claimId: x.claimId,\n            caseId: x.caseId,\n            nric: x.nric,\n            claimOpt: x.claimOpt,\n            latestStatus: x.latestStatus,\n            latestStatusCode: x.latestStatusCode,\n            latestStatusDesc: x.latestStatusDesc,\n            csn: x.csn,\n            verifier: x.verifier,\n            verifierInit: x.verifierInit,\n            itemList: x.itemList,\n            trgStartDte: x.trgStartDte,\n            trgEndDte: x.trgEndDte\n          };\n        });\n        const groupedSelect = [{\n          display: \"Please select\",\n          value: \"unselected\",\n          items: additionalCaseIdData.filter(x => !this.createNewLetterForm.get('additionalCaseIdArr').value.map(e => {\n            return String(e.claimId);\n          }).includes(x.claimId))\n        }];\n        this.createNewLetterForm.get('additionalCaseIdData').setValue(groupedSelect);\n        this.reconMultiSelect();\n        this.initClaimItemTable(this.createNewLetterForm);\n        this.listOfAdditionalCaseIdsWOtherVerifiers = this.getListOfAdditionalCaseIdsWOtherVerifiers();\n        this.valueChangeSubscribe(this.createNewLetterForm);\n      }\n    }, error => {\n      console.log(\"error is\" + String(error?.error?.error_desc));\n      this.toastService.error(String(error?.error?.error_desc));\n    });\n  }\n  initClaimItemTable(createNewLetterForm) {\n    const itemNameMap = new Map();\n    if (this.existingLetterFormObj) {\n      console.log(\"momo\", this.existingLetterFormObj?.mainClaim?.itemList);\n      this.existingLetterFormObj?.mainClaim?.itemList.forEach(x => {\n        itemNameMap.set(x.itemName, {\n          claimIdClaimItemMap: new Array({\n            claimId: this.existingLetterFormObj.mainClaim.claimId,\n            claimItemId: x.claimItemId,\n            caseId: this.existingLetterFormObj.mainClaim.caseId\n          }),\n          claimDetail: new Array(this.existingLetterFormObj.mainClaim.caseId.concat(\" \").concat(this.existingLetterFormObj.mainClaim.claimOpt).concat(\" (\").concat(x.latestItemStatusDesc).concat(\")\")),\n          itemCategory: []\n        });\n      });\n      console.log(\"reacha\", itemNameMap);\n    } else if (this.currentParams.caseId && this.currentParams.claimId) {\n      createNewLetterForm.get('claimItemObjList').value?.forEach(x => {\n        itemNameMap.set(x.itemName, {\n          claimIdClaimItemMap: new Array({\n            claimId: this.currentParams.claimId,\n            claimItemId: x.claimItemId,\n            caseId: this.currentParams.caseId\n          }),\n          claimDetail: new Array(this.currentParams.caseId.concat(\" \").concat(this.getClaimOptionName(this.defaultClaimOpt)).concat(\" (\").concat(x.latestItemStatusDesc).concat(\")\")),\n          itemCategory: []\n        });\n      });\n    }\n    createNewLetterForm.get('itemNameMap').setValue(itemNameMap);\n    this.constructClaimItemTable(createNewLetterForm);\n  }\n  prepopulateByExistingLetterForm(letterFormId, createNewLetterForm) {\n    console.log(\"mapping dto to formgroup\");\n    let params = new http_1.HttpParams();\n    params = params.append(\"letterFormId\", letterFormId);\n    this.claimService.retrieveLetterFormDetails({\n      params\n    }).pipe((0, rxjs_1.map)(resp => {\n      let letterFormDetailResp;\n      if (resp.body.data) {\n        letterFormDetailResp = resp.body.data;\n      }\n      //init claim opt by first in item in array -> main claim item\n      const mainClaim = letterFormDetailResp.claimList[0];\n      const mainClaimItemClaimOpt = mainClaim?.claimOpt;\n      this.initClaimOpt(null, null, mainClaimItemClaimOpt);\n      return {\n        letterFormDetailResp,\n        mainClaim\n      };\n    }), (0, rxjs_1.switchMap)(obj => {\n      let itemCategoryList;\n      return this.claimService.retrieveItemCategory(obj.letterFormDetailResp.letterTypeCode, null).pipe((0, rxjs_1.map)(resp => {\n        if (resp.status === 200 && resp.body.data) {\n          itemCategoryList = resp.body.data;\n        }\n        return {\n          itemCategoryList: resp.body.data,\n          letterFormDetailResp: obj.letterFormDetailResp,\n          mainClaim: obj.mainClaim\n        };\n      }));\n    }), (0, rxjs_1.switchMap)(obj => {\n      let request;\n      if (this.currentParams.claimType === this.CLAIM_TYPE_SELF_EMP) {\n        request = {\n          nric: this.currentParams.nric,\n          claimType: this.currentParams.claimType,\n          caseId: this.currentParams.caseId\n        };\n        const claimOptionObjArr = this.getClaimOption();\n        request['claimOpt'] = claimOptionObjArr.map(z => {\n          return String(z.claimOption);\n        });\n        request['itemNameList'] = claimOptionObjArr.filter(x => x.fullName !== undefined && x.fullName !== null).map(z => {\n          return String(z.fullName);\n        });\n      } else if (this.currentParams.claimType === this.CLAIM_TYPE_EMP) {\n        console.log(\"do something, \", this.currentParams.csn);\n        request = {\n          nric: this.currentParams.nric,\n          claimType: this.currentParams.claimType,\n          caseId: this.currentParams.caseId,\n          csn: this.currentParams.csn\n        };\n      }\n      //presets the claim option arr before retrieveadditionalclaimid is called\n      return this.claimService.retrieveAdditionalClaimIds(request, null).pipe((0, rxjs_1.map)(resp => {\n        let additionalCaseIdData;\n        if (resp.body.data) {\n          additionalCaseIdData = resp.body.data.map(x => {\n            return {\n              display: x.caseId.concat(\" \").concat(this.getClaimOptionName(x.claimOpt)).concat(\" (\").concat(x.latestStatusDesc).concat(\")\"),\n              claimId: x.claimId,\n              caseId: x.caseId,\n              nric: x.nric,\n              claimOpt: x.claimOpt,\n              latestStatus: x.latestStatus,\n              latestStatusCode: x.latestStatusCode,\n              latestStatusDesc: x.latestStatusDesc,\n              csn: x.csn,\n              verifier: x.verifier,\n              itemList: x.itemList\n            };\n          });\n        }\n        return {\n          additionalCaseIdData,\n          letterFormDetailResp: obj.letterFormDetailResp,\n          mainClaim: obj.mainClaim,\n          itemCategoryList: obj.itemCategoryList\n        };\n      }));\n    })).subscribe(consolResp => {\n      if (consolResp) {\n        const selectedClaimIds = consolResp.letterFormDetailResp.claimList.map(x => {\n          return String(x.claimId);\n        });\n        this.existingLetterFormObj = consolResp.letterFormDetailResp;\n        const groupedSelect = [{\n          display: \"Please select\",\n          value: \"unselected\",\n          items: consolResp.additionalCaseIdData\n          // items: (consolResp.additionalCaseIdData as any[]).filter(x=> !((this.createNewLetterForm.get('additionalCaseIdArr').value as any[]).map(e=>{return String(e.claimId)})).includes(x.claimId))\n        }];\n\n        createNewLetterForm.get('additionalCaseIdData').setValue(groupedSelect);\n        const selectedArr = (createNewLetterForm.get('additionalCaseIdData').value.find(x => x.value === \"unselected\")?.items).filter(el => {\n          return selectedClaimIds.includes(el.claimId);\n        });\n        createNewLetterForm.get('additionalCaseIdArr').setValue(selectedArr);\n        this.reconMultiSelect();\n        this.existingLetterFormObj['mainClaim'] = consolResp.mainClaim;\n        this.itemCategoryList = consolResp.itemCategoryList.filter(el => {\n          return !this.selectedCategoryList.includes(el.value);\n        });\n        this.initClaimItemTable(createNewLetterForm);\n        //replace existing params after retrieving by letter form id\n        this.listOfAdditionalCaseIdsWOtherVerifiers = this.getListOfAdditionalCaseIdsWOtherVerifiers();\n        this.valueChangeSubscribe(createNewLetterForm);\n        this.popUpService.setState({\n          'existingLetterFormObj': this.existingLetterFormObj\n        });\n        this.populateParams(this.existingLetterFormObj);\n      }\n    });\n  }\n  constructClaimItemTable(createNewLetterForm) {\n    const additionalCaseIdArr = createNewLetterForm.get('additionalCaseIdArr').value;\n    const itemNameMap = createNewLetterForm.get('itemNameMap').value;\n    console.log(\"beforethe\", itemNameMap);\n    additionalCaseIdArr?.forEach(x => {\n      x.itemList.forEach(y => {\n        if (!itemNameMap.has(y.itemName)) {\n          itemNameMap.set(y.itemName, {\n            claimIdClaimItemMap: new Array({\n              claimId: y.claimId,\n              claimItemId: y.claimItemId,\n              caseId: y.caseId\n            }),\n            claimDetail: new Array(y.caseId.concat(\" \").concat(this.getClaimOptionName(y.claimOpt)).concat(\" (\").concat(y.latestItemStatusDesc).concat(\")\"))\n          });\n          console.log(\"no key\");\n          // }\n        } else {\n          const itemDetail = itemNameMap.get(y.itemName);\n          if (!itemDetail.claimDetail.includes(y.caseId.concat(\" \").concat(this.getClaimOptionName(y.claimOpt)).concat(\" (\").concat(y.latestItemStatusDesc).concat(\")\"))) {\n            itemDetail.claimDetail.push(y.caseId.concat(\" \").concat(this.getClaimOptionName(y.claimOpt)).concat(\" (\").concat(y.latestItemStatusDesc).concat(\")\"));\n            itemDetail.claimIdClaimItemMap.push({\n              claimId: y.claimId,\n              claimItemId: y.claimItemId,\n              caseId: y.caseId\n            });\n            itemNameMap.set(y.itemName, itemDetail);\n          }\n        }\n      });\n    });\n    //intercept with adding formly value\n    //combine resolvedItemNameMap here\n    if (this.existingLetterFormObj) {\n      const resolvedItemNameMap = new Map(Object.entries(this.existingLetterFormObj.resolvedItemNameMap));\n      for (const [k, v] of Object.entries(this.existingLetterFormObj.itemNameMap)) {\n        const itemDetail = itemNameMap.get(k);\n        const resolvedCategoryMap = new Map(Object.entries(resolvedItemNameMap.get(k)));\n        console.log(\"milo\", itemDetail);\n        for (const [innerK, innerV] of Object.entries(v)) {\n          const resolvedModel = resolvedCategoryMap.get(innerK);\n          console.log(\"inner solved\", resolvedModel);\n          itemDetail?.itemCategory?.push({\n            category: innerK,\n            model: innerV,\n            resolvedModel\n          });\n          console.log(\"tata\", itemDetail);\n        }\n        ;\n        itemNameMap.set(k, itemDetail);\n      }\n    }\n    createNewLetterForm.get('itemNameMap').setValue(itemNameMap);\n    this.claimItemArr.clear();\n    this.resetDataTable();\n    // if letter form has not been submitted (regardless newly created or saved existing)\n    if (this.existingLetterFormObj && this.existingLetterFormObj.submittedDt === 0 || !this.existingLetterFormObj) {\n      createNewLetterForm.get('itemNameMap').value.forEach((value, key) => {\n        console.log(value, key);\n        this.claimItemArr.push(this.addRow({\n          itemDetail: value,\n          itemName: key\n        }));\n      });\n      this.constructOverallRow();\n    } else {\n      //if letter form has been submitted, filter by items that were set before with checklist items\n      if (this.existingLetterFormObj) {\n        //filter by itemname existing in the resolveditemnamemap\n        const existingItemNameMap = this.existingLetterFormObj.resolvedItemNameMap;\n        const itemNameKeys = Object.keys(existingItemNameMap);\n        itemNameKeys.forEach(key => {\n          const value = createNewLetterForm.get('itemNameMap').value.get(key);\n          console.log(\"raka\", value);\n          this.claimItemArr.push(this.addSubmittedRow({\n            itemDetail: value,\n            itemName: key\n          }));\n        });\n      }\n    }\n  }\n  addRow(data) {\n    const formObj = {\n      claimDetail: new forms_1.FormControl(data.itemDetail?.claimDetail, null),\n      itemName: new forms_1.FormControl(data.itemName, null),\n      itemCategory: new forms_1.FormArray([]),\n      claimIdClaimItemMap: new forms_1.FormControl(data.itemDetail?.claimIdClaimItemMap, null)\n    };\n    if (data.itemDetail.itemCategory && data.itemDetail.itemCategory.length > 0) {\n      data.itemDetail.itemCategory.forEach(x => {\n        formObj.itemCategory.push(this.formBuilder.group({\n          category: new forms_1.FormControl(this.getItemCategoryObj(x.category), forms_1.Validators.required),\n          catConfirmed: new forms_1.FormControl(true, null),\n          model: new forms_1.FormControl(x.model) //for storing checklist model\n        }));\n      });\n    }\n    //appends new empty category row regardless\n    formObj.itemCategory.push(CreateNewLetterComponent.initCategory(this.formBuilder));\n    return this.formBuilder.group(formObj);\n  }\n  addSubmittedRow(data) {\n    console.log(\"im here\", data);\n    const formObj = {\n      claimDetail: new forms_1.FormControl(data.itemDetail?.claimDetail, null),\n      itemName: new forms_1.FormControl(data.itemName, null),\n      itemCategory: new forms_1.FormArray([]),\n      claimIdClaimItemMap: new forms_1.FormControl(data.itemDetail?.claimIdClaimItemMap, null)\n    };\n    if (data.itemDetail?.itemCategory && data.itemDetail?.itemCategory.length > 0) {\n      (data.itemDetail?.itemCategory).forEach(x => {\n        formObj.itemCategory.push(this.formBuilder.group({\n          category: new forms_1.FormControl(this.getItemCategoryObj(x.category), forms_1.Validators.required),\n          catConfirmed: new forms_1.FormControl(true, null),\n          model: new forms_1.FormControl(x.model),\n          resolvedModel: new forms_1.FormControl(x.resolvedModel)\n        }));\n      });\n    }\n    return this.formBuilder.group(formObj);\n  }\n  //shifts all selected chips and appends to additional case id filter\n  reconMultiSelect() {\n    const selectedAdditionalCaseId = this.createNewLetterForm.get('additionalCaseIdArr').value;\n    if (selectedAdditionalCaseId.length > 0) {\n      const base = this.createNewLetterForm.get('additionalCaseIdData').value;\n      const filteredBase = base.find(x => x.value === \"unselected\").items.filter(x => !selectedAdditionalCaseId.includes(x));\n      base.find(x => x.value === \"unselected\").items = filteredBase;\n      if (base.find(x => x.value === \"selected\")) {\n        base.find(x => x.value === \"selected\").items = selectedAdditionalCaseId;\n      } else {\n        base.push({\n          display: 'Selected',\n          value: 'selected',\n          items: selectedAdditionalCaseId\n        });\n      }\n    }\n  }\n  resetDataTable() {\n    this.table.reset();\n  }\n  constructOverallRow() {\n    let overallArr = [];\n    this.createNewLetterForm.get('itemNameMap').value.forEach((value, key) => {\n      overallArr = overallArr?.concat(value.claimDetail);\n    });\n    this.claimItemArr.push(this.addRow({\n      itemDetail: {\n        claimDetail: overallArr\n        // catConfirmed:new FormControl(false, null)\n      },\n\n      itemName: \"Overall\"\n    }));\n  }\n  getItemCategory(letterTypeCode) {\n    this.claimService.retrieveItemCategory(letterTypeCode, null).subscribe(resp => {\n      if (resp.status === 200 && resp.body.data) {\n        this.itemCategoryList = resp.body.data;\n        this.itemCategoryList = resp.body.data.filter(el => {\n          return !this.selectedCategoryList.includes(el.value);\n        });\n      }\n    }, error => {\n      console.log(\"error is\" + String(error?.error?.error_desc));\n      this.toastService.error(String(error?.error?.error_desc));\n    });\n  }\n  getItemCategoryObj(categoryCd) {\n    return this.itemCategoryList.find(x => x.value === categoryCd);\n  }\n  mapCreateNewLetterFormGroupToDto() {\n    console.log(\"mapping formgroup to dto\", this.createNewLetterForm);\n    // this.saveLetterItemDto.letterItemDtoList = [];\n    const claimObjList = [];\n    const caseIdListStr = [];\n    // const claimIdListStr: string[] = [];\n    const varMap = new Map();\n    const categoryList = [];\n    //map by claimitemid to each claim\n    const claimItemArr = this.createNewLetterForm.get('claimItemArr');\n    claimItemArr.controls.forEach(ctrl => {\n      const claimIdClaimItemMapList = ctrl.get('claimIdClaimItemMap').value;\n      claimIdClaimItemMapList?.forEach(claimIdClaimItemMap => {\n        caseIdListStr.push(claimIdClaimItemMap.caseId);\n        // claimIdListStr.push(claimIdClaimItemMap.claimId);\n        claimObjList.push({\n          caseId: claimIdClaimItemMap.caseId,\n          claimId: claimIdClaimItemMap.claimId,\n          claimItemList: []\n        });\n      });\n      const itemCategoryArr = ctrl.get('itemCategory').controls.filter(x => x.get('catConfirmed').value === true);\n      itemCategoryArr.forEach(x => {\n        categoryList?.push(this.reconModel(x.get('category').value.value, ctrl.get('itemName').value, x.get('model').value));\n      });\n    });\n    varMap.set(\"caseIdList_Str\", caseIdListStr.join(\",\"));\n    this.saveLetterItemDto = {\n      letterType: this.currentParams.letterTypeCode,\n      nric: this.params.nric,\n      varMap: Object.fromEntries(varMap),\n      categoryList,\n      claimObjList,\n      letterFormId: this.currentParams.letterFormId //Optional, will be undefined for new letterform creation\n    };\n  }\n\n  reconModel(category, itemName, model) {\n    const output = {};\n    output['category'] = category;\n    output['message'] = model;\n    output['itemName'] = itemName;\n    return JSON.stringify(output);\n  }\n  tester() {\n    // console.log(\"the item form array\", this.itemDetailsSection.otherSEItemArr);\n    console.log(\"the menu rata\", this.existingLetterFormObj);\n    console.log(\"hi\", this.getClaimOption());\n    console.log(\"miga\", this.createNewLetterForm.get('additionalCaseIdArr'));\n    console.log(\"yello\", this.claimItemArr.controls[0].get('category'));\n    console.log(\"milata\", this.createNewLetterForm);\n    console.log(\"viga\", this.existingLetterFormObj);\n    this.getListOfAdditionalCaseIdsWOtherVerifiers();\n  }\n  getInnerFormControl(fa, index) {\n    return fa?.controls[index];\n  }\n  getInnerFACtrl(ctrl, controlName) {\n    return ctrl.get(controlName);\n  }\n  onRedirectViewLetter() {\n    if (this.existingLetterFormObj && this.existingLetterFormObj.genDt !== 0) {\n      //if letter form has been generated, on click view letter, retrieve generated letter\n      this.viewGeneratedLetter(this.currentParams.letterFormId);\n    } else {\n      this.previewLetter();\n    }\n  }\n  previewLetter() {\n    console.log(\"viewing letter\");\n    let params = new http_1.HttpParams();\n    params = params.append('letterFormId', this.currentParams.letterFormId);\n    this.claimService.previewClaimLetter(null, {\n      params,\n      responseType: 'blob'\n    }).subscribe(resp => {\n      if (resp && resp.status === 200) {\n        console.log(\"preview letter blob generated and returned successfully\");\n        const data = resp;\n        this.displayPreviewLetter(data);\n      }\n    }, error => {\n      console.log(\"error is\" + String(error?.error?.error_desc));\n      this.toastService.error(\"Failed to connect to Letter Generator, please try again. If the error persists, please contact the NSPAY Helpdesk\");\n    });\n  }\n  displayPreviewLetter(data) {\n    const blob = new Blob([data.body], {\n      type: data.headers.get('content-type')\n    });\n    this.previewLetterUrl = this.domSanitizer.bypassSecurityTrustResourceUrl(URL.createObjectURL(blob) + '#toolbar=0');\n    this.displayPreviewLetterDialog.display = true;\n  }\n  viewGeneratedLetter(letterFormId) {\n    console.log(\"viewing letter\");\n    let params = new http_1.HttpParams();\n    params = params.append('letterFormId', letterFormId);\n    this.claimService.viewGeneratedClaimLetter(null, {\n      params,\n      responseType: 'blob'\n    }).subscribe(resp => {\n      if (resp && resp.status === 200) {\n        console.log(\"generated letter blob generated and returned successfully\");\n        const data = resp;\n        this.displayGeneratedLetter(data);\n      }\n    }, error => {\n      console.log(\"error is\" + String(error?.error?.error_desc));\n      this.toastService.error(\"Failed to connect to Letter Generator, please try again. If the error persists, please contact the NSPAY Helpdesk\");\n    });\n  }\n  displayGeneratedLetter(data) {\n    const blob = new Blob([data.body], {\n      type: data.headers.get('content-type')\n    });\n    this.generatedLetterUrl = this.domSanitizer.bypassSecurityTrustResourceUrl(URL.createObjectURL(blob) + '#toolbar=0');\n    this.displayGeneratedLetterDialog.display = true;\n  }\n  onCancel() {\n    //route back to claim letter window\n    console.log(\"cancel\");\n    this.navigateClaimLetter();\n  }\n  onSave() {\n    console.log(\"saving current state of letter form\");\n    this.mapCreateNewLetterFormGroupToDto();\n    console.log(\"the letter form\", this.saveLetterItemDto);\n    this.claimService.saveClaimLetter(this.saveLetterItemDto, null).subscribe(resp => {\n      if (resp.status === 200 && resp.body.data) {\n        this.toastService.success(String(resp.body.success_message));\n        this.navigateCreateNewLetter(resp.body.data);\n      }\n    }, error => {\n      console.log(\"error is\" + String(error?.error?.error_desc));\n      this.toastService.error(String(error?.error?.error_desc));\n    });\n  }\n  onSubmit() {\n    console.log(\"the mega\", this.createNewLetterForm);\n    console.log(\"the current\", this.existingLetterFormObj);\n    this.navigateSubmitLetterStatus();\n  }\n  onUpdate() {\n    console.log(\"updating\");\n  }\n  onRemoveCategory(fa, index) {\n    fa.removeAt(index);\n    fa.updateValueAndValidity();\n  }\n  navigateChecklistItem(claimDetailList, claimIdClaimItemMap, itemName, itemCategory, model, resolvedModel, categoryIndex) {\n    console.log(\"poppy\", this.existingLetterFormObj);\n    this.router.navigate(['claim/pop-up/checklist-item', {\n      claimDetailList: JSON.stringify(claimDetailList),\n      itemCategory: JSON.stringify(itemCategory),\n      resolvedModel: JSON.stringify(resolvedModel),\n      model: JSON.stringify(model),\n      claimIdClaimItemMap: JSON.stringify(claimIdClaimItemMap)\n    }], {\n      queryParams: {\n        caseId: this.currentParams.caseId,\n        claimType: this.currentParams.claimType,\n        letterTypeCode: this.existingLetterFormObj ? this.existingLetterFormObj.letterTypeCode : this.currentParams.letterTypeCode,\n        letterTypeTitle: this.existingLetterFormObj ? this.existingLetterFormObj.letterTypeTitle : this.currentParams.letterTypeTitle,\n        itemName,\n        categoryIndex,\n        nric: this.currentParams.nric,\n        claimItemId: this.currentParams.claimItemId,\n        latestStatusCode: this.currentParams.latestStatusCode,\n        latestStatus: this.currentParams.latestStatus,\n        latestStatusDesc: this.currentParams.latestStatusDesc,\n        trgStartDte: this.currentParams.trgStartDte,\n        trgEndDte: this.currentParams.trgEndDte,\n        submitted: this.existingLetterFormObj && this.existingLetterFormObj.submittedDt !== 0,\n        verifier: this.currentParams.verifier,\n        verifierInit: this.currentParams.verifierInit\n      }\n    });\n  }\n  navigateCreateNewLetter(letterFormId) {\n    this.router.navigate(['claim/pop-up/create-new-letter'], {\n      queryParams: {\n        letterFormId,\n        caseId: this.currentParams.caseId,\n        claimId: this.currentParams.claimId,\n        claimType: this.currentParams.claimType,\n        letterTypeCode: this.currentParams.letterTypeCode,\n        letterTypeTitle: this.currentParams.letterTypeTitle,\n        nric: this.currentParams.nric,\n        itemType: this.currentParams.itemType,\n        itemName: this.currentParams.itemName,\n        claimItemId: this.currentParams.claimItemId,\n        latestStatusCode: this.currentParams.latestStatusCode,\n        latestStatus: this.currentParams.latestStatus,\n        latestStatusDesc: this.currentParams.latestStatusDesc,\n        trgStartDte: this.currentParams.trgStartDte,\n        trgEndDte: this.currentParams.trgEndDte,\n        verifier: this.currentParams.verifier,\n        verifierInit: this.currentParams.verifierInit\n      }\n    }).then(() => {\n      window.location.reload();\n    });\n  }\n  navigateClaimLetter() {\n    const route = JSON.parse(window.localStorage.getItem('claim-letter-route'));\n    const queryParams = route.queryParams;\n    this.router.navigate(['claim/pop-up/claim-letter', route.snapshotParams], {\n      queryParams\n    });\n  }\n  //this  is prior submissions\n  //if there is no letterForm Id provided, it will be directly saved with a new letterForm Id,\n  //otherwise it is submitted with an existing letterFormId\n  navigateSubmitLetterStatus() {\n    if (this.currentParams.letterTypeCode === 'S06' || this.currentParams.letterTypeCode === 'S10' || this.currentParams.letterTypeCode === 'S14' || this.currentParams.letterTypeCode === 'E04' || this.currentParams.letterTypeCode === 'E09') {\n      //for SE \n      // 20.\tSystem checks that Letter is a Request for Document or Request of Document for Adjustment Letter\n      //then route to Submit Letter Status window\n      //following route  transforms info to per claim basis\n      // const routingObjDto:RouteSubmitLetterStatusDto[] = [];\n      //       At Step 20 of Basic Flow\n      // 20.2.1. System detects that Letter is a Rejection Letter  - s14\n      // 20.2.2. System displays “Submit Letter Status” window, displaying a list of all Claim Items and statuses\n      //for EC\n      // 20.\tSystem checks that Letter is a Request for Document Letter\n      // At Step 20 of Basic Flow\n      // 20.2.1. System detects that Letter is a Rejection Letter\n      const regroupArr = this.reGroupForm();\n      this.mapCreateNewLetterFormGroupToDto();\n      this.router.navigate(['claim/pop-up/submit-letter-status', {\n        regroupArr: JSON.stringify(regroupArr),\n        submitLetterItemDto: JSON.stringify(this.saveLetterItemDto)\n      }], {\n        queryParams: {\n          letterFormId: this.params.letterFormId,\n          caseId: this.currentParams.caseId,\n          claimId: this.currentParams.claimId,\n          claimType: this.currentParams.claimType,\n          letterTypeCode: this.currentParams.letterTypeCode,\n          letterTypeTitle: this.currentParams.letterTypeTitle,\n          nric: this.currentParams.nric,\n          itemType: this.currentParams.itemType,\n          itemName: this.currentParams.itemName,\n          claimItemId: this.currentParams.claimItemId,\n          latestStatus: this.currentParams.latestStatus,\n          latestStatusDesc: this.currentParams.latestStatusDesc,\n          latestStatusCode: this.currentParams.latestStatusCode\n        }\n      });\n    } else {\n      //proceed to submit  straight\n      this.nspConfirmService.onConfirmPopup(event, \"submitClaimLetter\", null, () => {\n        this.submitClaimLetter();\n      });\n    }\n  }\n  submitClaimLetter() {\n    this.mapCreateNewLetterFormGroupToDto();\n    this.claimService.submitClaimLetter(this.saveLetterItemDto, null).subscribe(resp => {\n      if (resp.status === 200 && resp.body.data) {\n        this.toastService.success(String(resp.body.success_message));\n        this.navigateCreateNewLetter(resp.body.data);\n      }\n    }, error => {\n      console.log(\"error is\" + String(error?.error?.error_desc));\n      this.toastService.error(String(error?.error?.error_desc));\n    });\n  }\n  reGroupForm() {\n    let fullClaimArr = [];\n    // params?.letterTypeCode === 'S06'\n    const additionalCaseIdArr = this.createNewLetterForm.get('additionalCaseIdArr').value;\n    const itemList = [];\n    let currentCaseIdObj;\n    if (this.existingLetterFormObj) {\n      const mainClaim = this.existingLetterFormObj['mainClaim'];\n      currentCaseIdObj = {\n        caseId: mainClaim.caseId,\n        claimId: mainClaim.claimId,\n        latestStatus: mainClaim.latestStatus,\n        latestStatusDesc: mainClaim.latestStatusDesc,\n        latestStatusCode: mainClaim.latestStatusCode,\n        itemList: mainClaim.itemList,\n        verifier: null,\n        claimOpt: mainClaim.claimOpt,\n        display: mainClaim.caseId.concat(\" \").concat(this.getClaimOptionName(mainClaim.claimOpt)).concat(\" (\").concat(mainClaim.latestStatusDesc).concat(\")\"),\n        trgStartDte: mainClaim.trgStartDte,\n        trgEndDte: mainClaim.trgEndDte\n      };\n    } else {\n      //for main claim\n      this.createNewLetterForm.get('claimItemObjList').value?.forEach(x => {\n        itemList.push({\n          claimItemId: x.claimItemId,\n          itemName: x.itemName,\n          itemType: x.itemType,\n          claimId: this.currentParams.claimId,\n          caseId: this.currentParams.caseId,\n          latestItemStatusCode: x.latestItemStatusCode,\n          latestItemStatusDesc: x.latestItemStatusDesc\n        });\n      });\n      currentCaseIdObj = {\n        caseId: this.currentParams.caseId,\n        claimId: this.currentParams.claimId,\n        latestStatus: this.currentParams.latestStatus,\n        latestStatusDesc: this.currentParams.latestStatusDesc,\n        latestStatusCode: this.currentParams.latestStatusCode,\n        itemList,\n        verifier: this.currentParams.verifier,\n        verifierInit: this.currentParams.verifierInit,\n        claimOpt: this.defaultClaimOpt,\n        display: this.currentParams.caseId.concat(\" \").concat(this.getClaimOptionName(this.defaultClaimOpt)).concat(\" (\").concat(this.currentParams.latestStatusDesc).concat(\")\"),\n        trgStartDte: this.currentParams.trgStartDte,\n        trgEndDte: this.currentParams.trgEndDte\n      };\n    }\n    additionalCaseIdArr.unshift(currentCaseIdObj);\n    fullClaimArr = additionalCaseIdArr;\n    return fullClaimArr;\n  }\n  openDialog(event, type) {\n    this.nspConfirmService.onConfirmPopup(event, type, null, () => {\n      switch (type) {\n        case 'confirmUpdate':\n          this.updateSubmittedLetterForm();\n          break;\n        case 'confirmDelete':\n          this.deleteLetterForm();\n          break;\n      }\n    });\n  }\n  //for non recomp letters, revert all previously changed item status to pend verify\n  updateSubmittedLetterForm() {\n    if (this.existingLetterFormObj && this.existingLetterFormObj.letterTypeCode !== 'S12' && this.existingLetterFormObj && this.existingLetterFormObj.letterTypeCode !== 'E08') {\n      console.log(\"the letter type, \", this.existingLetterFormObj.letterTypeCode);\n      let params = new http_1.HttpParams();\n      params = params.append(\"letterFormId\", this.existingLetterFormObj ? this.existingLetterFormObj.letterFormId : this.currentParams.letterFormId);\n      this.claimService.updateSubmittedClaimLetter(null, {\n        params\n      }).subscribe(resp => {\n        if (resp.status === 200 && resp.body.data) {\n          this.toastService.success(String(resp.body.success_message));\n          this.navigateCreateNewLetter(resp.body.data);\n        }\n      }, error => {\n        console.log(\"error is\" + String(error?.error?.error_desc));\n        this.toastService.error(String(error?.error?.error_desc));\n      });\n    }\n  }\n  deleteLetterForm() {\n    console.log(\"delete\");\n    if (this.existingLetterFormObj && this.existingLetterFormObj.letterTypeCode !== 'S12' && this.existingLetterFormObj && this.existingLetterFormObj.letterTypeCode !== 'E08') {\n      console.log(\"the letter type, \", this.existingLetterFormObj.letterTypeCode);\n      let params = new http_1.HttpParams();\n      params = params.append(\"letterFormId\", this.existingLetterFormObj ? this.existingLetterFormObj.letterFormId : this.currentParams.letterFormId);\n      this.claimService.deleteSubmittedClaimLetter(null, {\n        params\n      }).subscribe(resp => {\n        if (resp.status === 200) {\n          this.toastService.success(String(resp.body.success_message));\n          //navigate to Claim Letter window with initially  saved activated route\n          //activated route will not be persisted after window is closed\n          this.navigateClaimLetter();\n        }\n      }, error => {\n        console.log(\"error is\" + String(error?.error?.error_desc));\n        this.toastService.error(String(error?.error?.error_desc));\n      });\n    }\n  }\n  redirectTo(commands, extras) {\n    this.router.navigateByUrl('/', {\n      skipLocationChange: true\n    }).then(() => this.router.navigate(commands, extras));\n  }\n  getListOfAdditionalCaseIdsWOtherVerifiers() {\n    const fullArr = [];\n    const baseArr = this.createNewLetterForm.get('additionalCaseIdData').value;\n    if (baseArr.length > 0) {\n      const unselectedVerifier = baseArr.find(x => x.value === \"unselected\")?.items?.map(x => {\n        return {\n          verifier: String(x.verifier),\n          caseId: String(x.caseId),\n          verifierInit: String(x.verifierInit)\n        };\n      });\n      const selectedVerifier = baseArr.find(x => x.value === \"selected\")?.items?.map(x => {\n        return {\n          verifier: String(x.verifier),\n          caseId: String(x.caseId),\n          verifierInit: String(x.verifierInit)\n        };\n      });\n      if (unselectedVerifier?.length > 0) {\n        unselectedVerifier.forEach(x => {\n          if (x.verifier !== this.currentAccount.subjectId) {\n            fullArr.push(x.caseId.concat(\"(\").concat(x.verifierInit).concat(\")\"));\n          }\n        });\n      }\n      if (selectedVerifier?.length > 0) {\n        selectedVerifier.forEach(x => {\n          if (x.verifier !== this.currentAccount.subjectId) {\n            fullArr.push(x.caseId.concat(\"  (\").concat(x.verifierInit).concat(\")\"));\n          }\n        });\n      }\n    }\n    return fullArr.join(\", \");\n  }\n}\nexports.CreateNewLetterComponent = CreateNewLetterComponent;\nCreateNewLetterComponent.ɵfac = function CreateNewLetterComponent_Factory(t) {\n  return new (t || CreateNewLetterComponent)(i0.ɵɵdirectiveInject(i1.ActivatedRoute), i0.ɵɵdirectiveInject(i1.Router), i0.ɵɵdirectiveInject(i2.FormBuilder), i0.ɵɵdirectiveInject(i3.ClaimService), i0.ɵɵdirectiveInject(i4.CustomToastService), i0.ɵɵdirectiveInject(i5.AccountService), i0.ɵɵdirectiveInject(i6.LocalStorageService), i0.ɵɵdirectiveInject(i7.StateStorageService), i0.ɵɵdirectiveInject(i8.PopUpService), i0.ɵɵdirectiveInject(i9.DomSanitizer), i0.ɵɵdirectiveInject(i10.NspConfirmationService), i0.ɵɵdirectiveInject(i11.Location));\n};\nCreateNewLetterComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: CreateNewLetterComponent,\n  selectors: [[\"n2-create-new-letter\"]],\n  viewQuery: function CreateNewLetterComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c0, 7);\n    }\n    if (rf & 2) {\n      let _t;\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.table = _t.first);\n    }\n  },\n  decls: 86,\n  vars: 38,\n  consts: [[\"pButton\", \"\", \"label\", \"TESTER\", 3, \"click\"], [3, \"formGroup\"], [1, \"upper-form\"], [1, \"grid\", \"col-12\"], [4, \"ngIf\", \"ngIfElse\"], [\"newClaimTitle\", \"\"], [\"class\", \"grid col-12 align-items-center\", 4, \"ngIf\"], [4, \"ngIf\"], [\"formArrayName\", \"claimItemArr\"], [\"styleClass\", \"p-datatable-gridlines p-datatable-striped\", \"scrollHeight\", \"50vh\", 3, \"value\", \"filterDelay\", \"loading\", \"scrollable\"], [\"dataTable\", \"\"], [\"pTemplate\", \"header\"], [\"pTemplate\", \"body\"], [\"pTemplate\", \"emptymessage\"], [1, \"flex\", \"footer-button\"], [1, \"flex\", \"col-6\", \"justify-content-start\", \"flex-wrap\"], [\"pButton\", \"\", \"label\", \"Cancel\", 3, \"click\"], [1, \"flex\", \"col-6\", \"justify-content-end\", \"gap-2\", \"flex-wrap\"], [\"pButton\", \"\", \"label\", \"Delete Letter\", \"class\", \"p-button-danger\", 3, \"click\", 4, \"ngIf\"], [\"pButton\", \"\", \"label\", \"Save Letter\", 3, \"click\", 4, \"ngIf\"], [\"pButton\", \"\", \"label\", \"View Letter\", 3, \"disabled\", \"click\"], [\"pButton\", \"\", \"label\", \"Update Letter\", \"class\", \"p-button-warning\", 3, \"click\", 4, \"ngIf\"], [\"pButton\", \"\", \"label\", \"Submit Letter\", \"class\", \"p-button-success\", 3, \"click\", 4, \"ngIf\"], [\"header\", \"View Letter\", 3, \"visible\", \"modal\", \"closable\", \"dismissableMask\", \"draggable\", \"resizable\", \"visibleChange\"], [\"style\", \"height: 100%\", 4, \"ngIf\"], [\"pTemplate\", \"footer\"], [\"key\", \"submitClaimLetter\", \"header\", \"Confirmation\", \"icon\", \"fa fa-question-circle\", \"width\", \"425\"], [\"key\", \"confirmUpdate\", \"header\", \"Confirmation\", \"icon\", \"fa fa-question-circle\", \"width\", \"425\"], [\"key\", \"confirmDelete\", \"header\", \"Confirmation\", \"icon\", \"fa fa-question-circle\", \"width\", \"425\"], [1, \"grid\", \"col-12\", \"align-items-center\"], [1, \"col-1\"], [\"class\", \"col-11 multiselect-custom\", \"display\", \"chip\", \"formControlName\", \"additionalCaseIdArr\", \"optionLabel\", \"display\", \"optionDisabled\", \"isDisabled\", 3, \"style\", \"options\", \"group\", \"onPanelHide\", 4, \"ngIf\", \"ngIfElse\"], [\"labelAdditionalCaseId\", \"\"], [\"display\", \"chip\", \"formControlName\", \"additionalCaseIdArr\", \"optionLabel\", \"display\", \"optionDisabled\", \"isDisabled\", 1, \"col-11\", \"multiselect-custom\", 3, \"options\", \"group\", \"onPanelHide\"], [\"pTemplate\", \"group\"], [\"formArrayName\", \"claimOptionArr\", 1, \"flex\", \"justify-content-start\", \"gap-4\", \"input-group\"], [\"class\", \"field-checkbox\", 3, \"formGroupName\", 4, \"ngFor\", \"ngForOf\"], [1, \"field-checkbox\", 3, \"formGroupName\"], [3, \"formControl\", \"binary\", \"onChange\"], [1, \"pi\", \"pi-info-circle\"], [\"scope\", \"col\", 2, \"max-width\", \"40%\"], [\"scope\", \"col\", 2, \"max-width\", \"20%\"], [\"scope\", \"col\"], [3, \"formGroupName\"], [2, \"max-width\", \"40%\"], [2, \"list-style-type\", \"none\"], [4, \"ngFor\", \"ngForOf\"], [2, \"max-width\", \"20%\"], [\"formArrayName\", \"itemCategory\"], [1, \"grid\"], [\"class\", \"col-10\", 4, \"ngIf\", \"ngIfElse\"], [\"class\", \"col-2\", 4, \"ngIf\"], [\"hyperLinkedCategory\", \"\"], [1, \"col-10\"], [\"optionLabel\", \"label\", \"placeholder\", \"Select Category\", \"appendTo\", \"body\", 3, \"options\", \"autoDisplayFirst\", \"formControl\"], [1, \"col-2\"], [\"pButton\", \"\", \"pRipple\", \"\", \"type\", \"button\", \"icon\", \"pi pi-plus\", \"class\", \"p-button-rounded\", 3, \"disabled\", \"click\", 4, \"ngIf\", \"ngIfElse\"], [\"removeButton\", \"\"], [\"pButton\", \"\", \"pRipple\", \"\", \"type\", \"button\", \"icon\", \"pi pi-plus\", 1, \"p-button-rounded\", 3, \"disabled\", \"click\"], [\"pButton\", \"\", \"pRipple\", \"\", \"type\", \"button\", \"icon\", \"pi pi-minus\", 1, \"p-button-rounded\", \"p-button-danger\", 3, \"click\"], [1, \"col-10\", 2, \"display\", \"flex\", \"align-items\", \"center\"], [\"href\", \"javascript:\", 3, \"click\"], [\"colspan\", \"3\"], [\"pButton\", \"\", \"label\", \"Delete Letter\", 1, \"p-button-danger\", 3, \"click\"], [\"pButton\", \"\", \"label\", \"Save Letter\", 3, \"click\"], [\"pButton\", \"\", \"label\", \"Update Letter\", 1, \"p-button-warning\", 3, \"click\"], [\"pButton\", \"\", \"label\", \"Submit Letter\", 1, \"p-button-success\", 3, \"click\"], [2, \"height\", \"100%\"], [\"type\", \"application/pdf\", \"width\", \"100%\", \"height\", \"100%\"], [\"pButton\", \"\", \"label\", \"Close\", 1, \"p-button-danger\", 3, \"click\"]],\n  template: function CreateNewLetterComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"button\", 0);\n      i0.ɵɵlistener(\"click\", function CreateNewLetterComponent_Template_button_click_0_listener() {\n        return ctx.tester();\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(1, \"\\n\\n\\n\");\n      i0.ɵɵelementStart(2, \"form\", 1);\n      i0.ɵɵtext(3, \"\\n    \");\n      i0.ɵɵelementStart(4, \"div\", 2);\n      i0.ɵɵtext(5, \"\\n        \");\n      i0.ɵɵelementStart(6, \"div\", 3);\n      i0.ɵɵtext(7, \"\\n            \");\n      i0.ɵɵtemplate(8, CreateNewLetterComponent_span_8_Template, 3, 2, \"span\", 4);\n      i0.ɵɵtext(9, \"\\n            \");\n      i0.ɵɵtemplate(10, CreateNewLetterComponent_ng_template_10_Template, 4, 2, \"ng-template\", null, 5, i0.ɵɵtemplateRefExtractor);\n      i0.ɵɵtext(12, \"\\n\\n        \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(13, \"\\n        \");\n      i0.ɵɵelement(14, \"hr\");\n      i0.ɵɵtext(15, \"\\n        \");\n      i0.ɵɵtext(16, \"\\n        \");\n      i0.ɵɵtemplate(17, CreateNewLetterComponent_div_17_Template, 11, 2, \"div\", 6);\n      i0.ɵɵtext(18, \"\\n        \");\n      i0.ɵɵelement(19, \"br\");\n      i0.ɵɵtext(20, \"\\n        \");\n      i0.ɵɵtemplate(21, CreateNewLetterComponent_div_21_Template, 8, 1, \"div\", 6);\n      i0.ɵɵtext(22, \"\\n        \");\n      i0.ɵɵtemplate(23, CreateNewLetterComponent_div_23_Template, 8, 1, \"div\", 7);\n      i0.ɵɵtext(24, \"\\n        \");\n      i0.ɵɵelementStart(25, \"div\", 8);\n      i0.ɵɵtext(26, \"\\n            \");\n      i0.ɵɵelementStart(27, \"p-table\", 9, 10);\n      i0.ɵɵtext(29, \"\\n\\n                \");\n      i0.ɵɵtemplate(30, CreateNewLetterComponent_ng_template_30_Template, 13, 0, \"ng-template\", 11);\n      i0.ɵɵtext(31, \"\\n                \");\n      i0.ɵɵtemplate(32, CreateNewLetterComponent_ng_template_32_Template, 25, 9, \"ng-template\", 12);\n      i0.ɵɵtext(33, \"\\n                \");\n      i0.ɵɵtemplate(34, CreateNewLetterComponent_ng_template_34_Template, 7, 0, \"ng-template\", 13);\n      i0.ɵɵtext(35, \"\\n            \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(36, \"\\n        \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(37, \"\\n\\n    \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(38, \"\\n      \");\n      i0.ɵɵtext(39, \"\\n    \");\n      i0.ɵɵelementStart(40, \"div\", 14);\n      i0.ɵɵtext(41, \"\\n        \");\n      i0.ɵɵelementStart(42, \"div\", 15);\n      i0.ɵɵtext(43, \"\\n            \");\n      i0.ɵɵelementStart(44, \"button\", 16);\n      i0.ɵɵlistener(\"click\", function CreateNewLetterComponent_Template_button_click_44_listener() {\n        return ctx.onCancel();\n      });\n      i0.ɵɵtext(45, \"\\n            \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(46, \"\\n        \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(47, \"\\n        \");\n      i0.ɵɵelementStart(48, \"div\", 17);\n      i0.ɵɵtext(49, \"\\n            \");\n      i0.ɵɵtext(50, \"\\n            \");\n      i0.ɵɵtext(51, \"\\n            \");\n      i0.ɵɵtemplate(52, CreateNewLetterComponent_button_52_Template, 2, 0, \"button\", 18);\n      i0.ɵɵtext(53, \"\\n            \");\n      i0.ɵɵtemplate(54, CreateNewLetterComponent_button_54_Template, 2, 0, \"button\", 19);\n      i0.ɵɵtext(55, \"\\n            \");\n      i0.ɵɵelementStart(56, \"button\", 20);\n      i0.ɵɵlistener(\"click\", function CreateNewLetterComponent_Template_button_click_56_listener() {\n        return ctx.onRedirectViewLetter();\n      });\n      i0.ɵɵtext(57, \"\\n            \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(58, \"\\n            \");\n      i0.ɵɵtemplate(59, CreateNewLetterComponent_button_59_Template, 2, 0, \"button\", 21);\n      i0.ɵɵtext(60, \"\\n            \");\n      i0.ɵɵtemplate(61, CreateNewLetterComponent_button_61_Template, 2, 0, \"button\", 22);\n      i0.ɵɵtext(62, \"\\n        \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(63, \"\\n    \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(64, \"\\n\\n\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(65, \"\\n\\n\\n\");\n      i0.ɵɵelementStart(66, \"p-dialog\", 23);\n      i0.ɵɵlistener(\"visibleChange\", function CreateNewLetterComponent_Template_p_dialog_visibleChange_66_listener($event) {\n        return ctx.displayPreviewLetterDialog.display = $event;\n      });\n      i0.ɵɵtext(67, \"\\n    \");\n      i0.ɵɵtemplate(68, CreateNewLetterComponent_div_68_Template, 4, 1, \"div\", 24);\n      i0.ɵɵtext(69, \"\\n\\n    \");\n      i0.ɵɵtemplate(70, CreateNewLetterComponent_ng_template_70_Template, 3, 3, \"ng-template\", 25);\n      i0.ɵɵtext(71, \"\\n\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(72, \"\\n\\n\");\n      i0.ɵɵelementStart(73, \"p-dialog\", 23);\n      i0.ɵɵlistener(\"visibleChange\", function CreateNewLetterComponent_Template_p_dialog_visibleChange_73_listener($event) {\n        return ctx.displayGeneratedLetterDialog.display = $event;\n      });\n      i0.ɵɵtext(74, \"\\n    \");\n      i0.ɵɵtemplate(75, CreateNewLetterComponent_div_75_Template, 4, 1, \"div\", 24);\n      i0.ɵɵtext(76, \"\\n\\n    \");\n      i0.ɵɵtemplate(77, CreateNewLetterComponent_ng_template_77_Template, 3, 3, \"ng-template\", 25);\n      i0.ɵɵtext(78, \"\\n\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(79, \"\\n\\n\");\n      i0.ɵɵelement(80, \"p-confirmPopup\", 26);\n      i0.ɵɵtext(81, \"\\n\");\n      i0.ɵɵelement(82, \"p-confirmPopup\", 27);\n      i0.ɵɵtext(83, \"\\n\");\n      i0.ɵɵelement(84, \"p-confirmPopup\", 28);\n      i0.ɵɵtext(85, \"\\n\\n\");\n    }\n    if (rf & 2) {\n      const _r1 = i0.ɵɵreference(11);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"formGroup\", ctx.createNewLetterForm);\n      i0.ɵɵadvance(4);\n      i0.ɵɵstyleMap(i0.ɵɵpureFunction0(35, _c5));\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngIf\", ctx.existingLetterFormObj)(\"ngIfElse\", _r1);\n      i0.ɵɵadvance(9);\n      i0.ɵɵproperty(\"ngIf\", (ctx.currentParams == null ? null : ctx.currentParams.letterTypeCode) === \"S06\" || (ctx.currentParams == null ? null : ctx.currentParams.letterTypeCode) === \"E04\");\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"ngIf\", (ctx.currentParams == null ? null : ctx.currentParams.letterTypeCode) === \"S06\" && (!ctx.existingLetterFormObj || ctx.existingLetterFormObj && ctx.existingLetterFormObj.submittedDt === 0));\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngIf\", (ctx.currentParams == null ? null : ctx.currentParams.letterTypeCode) === \"S06\" || (ctx.currentParams == null ? null : ctx.currentParams.letterTypeCode) === \"E04\");\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"value\", ctx.claimItemArr == null ? null : ctx.claimItemArr.controls)(\"filterDelay\", 0)(\"loading\", ctx.loading)(\"scrollable\", true);\n      i0.ɵɵadvance(25);\n      i0.ɵɵproperty(\"ngIf\", ctx.existingLetterFormObj);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngIf\", !ctx.existingLetterFormObj || ctx.existingLetterFormObj && ctx.existingLetterFormObj.submittedDt === 0);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"disabled\", ctx.hasChanged);\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"ngIf\", ctx.existingLetterFormObj && ctx.existingLetterFormObj.submittedDt !== 0);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngIf\", !ctx.existingLetterFormObj || ctx.existingLetterFormObj && ctx.existingLetterFormObj.submittedDt === 0);\n      i0.ɵɵadvance(5);\n      i0.ɵɵstyleMap(i0.ɵɵpureFunction0(36, _c6));\n      i0.ɵɵproperty(\"visible\", ctx.displayPreviewLetterDialog.display)(\"modal\", true)(\"closable\", false)(\"dismissableMask\", true)(\"draggable\", false)(\"resizable\", false);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngIf\", ctx.previewLetterUrl != undefined);\n      i0.ɵɵadvance(5);\n      i0.ɵɵstyleMap(i0.ɵɵpureFunction0(37, _c6));\n      i0.ɵɵproperty(\"visible\", ctx.displayGeneratedLetterDialog.display)(\"modal\", true)(\"closable\", false)(\"dismissableMask\", true)(\"draggable\", false)(\"resizable\", false);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngIf\", ctx.generatedLetterUrl != undefined);\n    }\n  },\n  dependencies: [i11.NgForOf, i11.NgIf, i2.ɵNgNoValidate, i2.NgControlStatus, i2.NgControlStatusGroup, i2.FormControlDirective, i2.FormGroupDirective, i2.FormControlName, i2.FormGroupName, i2.FormArrayName, i12.PrimeTemplate, i13.ButtonDirective, i14.Checkbox, i15.Table, i16.Dropdown, i17.Dialog, i18.ConfirmPopup, i19.MultiSelect, i20.DefaultStringPipe],\n  styles: [\"[_nghost-%COMP%]     .p-multiselect {\\n  min-width: 15rem;\\n  height: 3rem;\\n}\\n\\n[_nghost-%COMP%]     .multiselect-custom-virtual-scroll .p-multiselect {\\n  min-width: 20rem;\\n}\\n\\n[_nghost-%COMP%]     .multiselect-custom .p-multiselect-label {\\n  padding-top: 0.25rem;\\n  padding-bottom: 0.25rem;\\n}\\n[_nghost-%COMP%]     .multiselect-custom .p-multiselect-token {\\n  padding: 0.375rem 0.75rem;\\n  margin-right: 0.5rem;\\n  background-color: var(--primary-color);\\n  color: var(--primary-color-text);\\n}\\n\\n.upper-form[_ngcontent-%COMP%] {\\n  height: 70vh;\\n  position: relative;\\n}\\n\\n.footer-button[_ngcontent-%COMP%] {\\n  display: flex;\\n  position: relative;\\n}\\n\\n.td[_ngcontent-%COMP%]   .p-dropdown[_ngcontent-%COMP%] {\\n  width: 75%;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNyZWF0ZS1uZXctbGV0dGVyLmNvbXBvbmVudC5zY3NzIiwiLi5cXC4uXFwuLlxcLi5cXC4uXFwuLlxcLi5cXC4uXFwuLlxcLi5cXHByb2plY3RzJTIwMlxcbnNwYXlpaWFwcFxcc3JjXFxtYWluXFx3ZWJhcHBcXGFwcFxcY2xhaW1cXHBvcC11cFxcY2xhaW0tbGV0dGVyXFxjcmVhdGUtbmV3LWxldHRlclxcY3JlYXRlLW5ldy1sZXR0ZXIuY29tcG9uZW50LnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDSSxnQkFBQTtFQUNBLFlBQUE7QUNDSjs7QURFQTtFQUNJLGdCQUFBO0FDQ0o7O0FER0k7RUFDSSxvQkFBQTtFQUNBLHVCQUFBO0FDQVI7QURHSTtFQUNJLHlCQUFBO0VBQ0Esb0JBQUE7RUFDQSxzQ0FBQTtFQUNBLGdDQUFBO0FDRFI7O0FES0E7RUFDSSxZQUFBO0VBQ0Esa0JBQUE7QUNGSjs7QURLQTtFQUNJLGFBQUE7RUFDQSxrQkFBQTtBQ0ZKOztBRE1BO0VBRUksVUFBQTtBQ0pKIiwiZmlsZSI6ImNyZWF0ZS1uZXctbGV0dGVyLmNvbXBvbmVudC5zY3NzIiwic291cmNlc0NvbnRlbnQiOlsiOmhvc3QgOjpuZy1kZWVwIC5wLW11bHRpc2VsZWN0IHtcclxuICAgIG1pbi13aWR0aDogMTVyZW07XHJcbiAgICBoZWlnaHQ6IDNyZW07XHJcbn1cclxuXHJcbjpob3N0IDo6bmctZGVlcCAubXVsdGlzZWxlY3QtY3VzdG9tLXZpcnR1YWwtc2Nyb2xsIC5wLW11bHRpc2VsZWN0IHtcclxuICAgIG1pbi13aWR0aDogMjByZW07XHJcbn1cclxuXHJcbjpob3N0IDo6bmctZGVlcCAubXVsdGlzZWxlY3QtY3VzdG9tIHtcclxuICAgIC5wLW11bHRpc2VsZWN0LWxhYmVsIHtcclxuICAgICAgICBwYWRkaW5nLXRvcDogLjI1cmVtO1xyXG4gICAgICAgIHBhZGRpbmctYm90dG9tOiAuMjVyZW07XHJcbiAgICB9XHJcblxyXG4gICAgLnAtbXVsdGlzZWxlY3QtdG9rZW4ge1xyXG4gICAgICAgIHBhZGRpbmc6IDAuMzc1cmVtIDAuNzVyZW07XHJcbiAgICAgICAgbWFyZ2luLXJpZ2h0OiAwLjVyZW07ICAgICAgIFxyXG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6IHZhcigtLXByaW1hcnktY29sb3IpO1xyXG4gICAgICAgIGNvbG9yOiB2YXIoLS1wcmltYXJ5LWNvbG9yLXRleHQpO1xyXG4gICAgfVxyXG59XHJcblxyXG4udXBwZXItZm9ybXtcclxuICAgIGhlaWdodDogNzB2aDtcclxuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcclxufVxyXG5cclxuLmZvb3Rlci1idXR0b257XHJcbiAgICBkaXNwbGF5OiBmbGV4O1xyXG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xyXG5cclxufVxyXG5cclxuLnRkIC5wLWRyb3Bkb3duIHtcclxuXHJcbiAgICB3aWR0aDogNzUlO1xyXG4gICAgXHJcbiAgICB9IiwiOmhvc3QgOjpuZy1kZWVwIC5wLW11bHRpc2VsZWN0IHtcbiAgbWluLXdpZHRoOiAxNXJlbTtcbiAgaGVpZ2h0OiAzcmVtO1xufVxuXG46aG9zdCA6Om5nLWRlZXAgLm11bHRpc2VsZWN0LWN1c3RvbS12aXJ0dWFsLXNjcm9sbCAucC1tdWx0aXNlbGVjdCB7XG4gIG1pbi13aWR0aDogMjByZW07XG59XG5cbjpob3N0IDo6bmctZGVlcCAubXVsdGlzZWxlY3QtY3VzdG9tIC5wLW11bHRpc2VsZWN0LWxhYmVsIHtcbiAgcGFkZGluZy10b3A6IDAuMjVyZW07XG4gIHBhZGRpbmctYm90dG9tOiAwLjI1cmVtO1xufVxuOmhvc3QgOjpuZy1kZWVwIC5tdWx0aXNlbGVjdC1jdXN0b20gLnAtbXVsdGlzZWxlY3QtdG9rZW4ge1xuICBwYWRkaW5nOiAwLjM3NXJlbSAwLjc1cmVtO1xuICBtYXJnaW4tcmlnaHQ6IDAuNXJlbTtcbiAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tcHJpbWFyeS1jb2xvcik7XG4gIGNvbG9yOiB2YXIoLS1wcmltYXJ5LWNvbG9yLXRleHQpO1xufVxuXG4udXBwZXItZm9ybSB7XG4gIGhlaWdodDogNzB2aDtcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xufVxuXG4uZm9vdGVyLWJ1dHRvbiB7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbn1cblxuLnRkIC5wLWRyb3Bkb3duIHtcbiAgd2lkdGg6IDc1JTtcbn0iXX0= */\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9tYWluL3dlYmFwcC9hcHAvY2xhaW0vcG9wLXVwL2NsYWltLWxldHRlci9jcmVhdGUtbmV3LWxldHRlci9jcmVhdGUtbmV3LWxldHRlci5jb21wb25lbnQuc2NzcyIsIndlYnBhY2s6Ly8uLy4uLy4uL3Byb2plY3RzJTIwMi9uc3BheWlpYXBwL3NyYy9tYWluL3dlYmFwcC9hcHAvY2xhaW0vcG9wLXVwL2NsYWltLWxldHRlci9jcmVhdGUtbmV3LWxldHRlci9jcmVhdGUtbmV3LWxldHRlci5jb21wb25lbnQuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNJLGdCQUFBO0VBQ0EsWUFBQTtBQ0NKOztBREVBO0VBQ0ksZ0JBQUE7QUNDSjs7QURHSTtFQUNJLG9CQUFBO0VBQ0EsdUJBQUE7QUNBUjtBREdJO0VBQ0kseUJBQUE7RUFDQSxvQkFBQTtFQUNBLHNDQUFBO0VBQ0EsZ0NBQUE7QUNEUjs7QURLQTtFQUNJLFlBQUE7RUFDQSxrQkFBQTtBQ0ZKOztBREtBO0VBQ0ksYUFBQTtFQUNBLGtCQUFBO0FDRko7O0FETUE7RUFFSSxVQUFBO0FDSko7QURDQSxnb0ZBQWdvRiIsInNvdXJjZXNDb250ZW50IjpbIjpob3N0IDo6bmctZGVlcCAucC1tdWx0aXNlbGVjdCB7XHJcbiAgICBtaW4td2lkdGg6IDE1cmVtO1xyXG4gICAgaGVpZ2h0OiAzcmVtO1xyXG59XHJcblxyXG46aG9zdCA6Om5nLWRlZXAgLm11bHRpc2VsZWN0LWN1c3RvbS12aXJ0dWFsLXNjcm9sbCAucC1tdWx0aXNlbGVjdCB7XHJcbiAgICBtaW4td2lkdGg6IDIwcmVtO1xyXG59XHJcblxyXG46aG9zdCA6Om5nLWRlZXAgLm11bHRpc2VsZWN0LWN1c3RvbSB7XHJcbiAgICAucC1tdWx0aXNlbGVjdC1sYWJlbCB7XHJcbiAgICAgICAgcGFkZGluZy10b3A6IC4yNXJlbTtcclxuICAgICAgICBwYWRkaW5nLWJvdHRvbTogLjI1cmVtO1xyXG4gICAgfVxyXG5cclxuICAgIC5wLW11bHRpc2VsZWN0LXRva2VuIHtcclxuICAgICAgICBwYWRkaW5nOiAwLjM3NXJlbSAwLjc1cmVtO1xyXG4gICAgICAgIG1hcmdpbi1yaWdodDogMC41cmVtOyAgICAgICBcclxuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1wcmltYXJ5LWNvbG9yKTtcclxuICAgICAgICBjb2xvcjogdmFyKC0tcHJpbWFyeS1jb2xvci10ZXh0KTtcclxuICAgIH1cclxufVxyXG5cclxuLnVwcGVyLWZvcm17XHJcbiAgICBoZWlnaHQ6IDcwdmg7XHJcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XHJcbn1cclxuXHJcbi5mb290ZXItYnV0dG9ue1xyXG4gICAgZGlzcGxheTogZmxleDtcclxuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcclxuXHJcbn1cclxuXHJcbi50ZCAucC1kcm9wZG93biB7XHJcblxyXG4gICAgd2lkdGg6IDc1JTtcclxuICAgIFxyXG4gICAgfSIsIjpob3N0IDo6bmctZGVlcCAucC1tdWx0aXNlbGVjdCB7XG4gIG1pbi13aWR0aDogMTVyZW07XG4gIGhlaWdodDogM3JlbTtcbn1cblxuOmhvc3QgOjpuZy1kZWVwIC5tdWx0aXNlbGVjdC1jdXN0b20tdmlydHVhbC1zY3JvbGwgLnAtbXVsdGlzZWxlY3Qge1xuICBtaW4td2lkdGg6IDIwcmVtO1xufVxuXG46aG9zdCA6Om5nLWRlZXAgLm11bHRpc2VsZWN0LWN1c3RvbSAucC1tdWx0aXNlbGVjdC1sYWJlbCB7XG4gIHBhZGRpbmctdG9wOiAwLjI1cmVtO1xuICBwYWRkaW5nLWJvdHRvbTogMC4yNXJlbTtcbn1cbjpob3N0IDo6bmctZGVlcCAubXVsdGlzZWxlY3QtY3VzdG9tIC5wLW11bHRpc2VsZWN0LXRva2VuIHtcbiAgcGFkZGluZzogMC4zNzVyZW0gMC43NXJlbTtcbiAgbWFyZ2luLXJpZ2h0OiAwLjVyZW07XG4gIGJhY2tncm91bmQtY29sb3I6IHZhcigtLXByaW1hcnktY29sb3IpO1xuICBjb2xvcjogdmFyKC0tcHJpbWFyeS1jb2xvci10ZXh0KTtcbn1cblxuLnVwcGVyLWZvcm0ge1xuICBoZWlnaHQ6IDcwdmg7XG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbn1cblxuLmZvb3Rlci1idXR0b24ge1xuICBkaXNwbGF5OiBmbGV4O1xuICBwb3NpdGlvbjogcmVsYXRpdmU7XG59XG5cbi50ZCAucC1kcm9wZG93biB7XG4gIHdpZHRoOiA3NSU7XG59Il0sInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"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","names":["i0","ctx_r48","data_r31","ctx_r58","CreateNewLetterComponent","constructor","route","router","formBuilder","claimService","toastService","account","$localStorage","stateStorageService","popUpService","domSanitizer","nspConfirmService","_location","letterFormId","caseId","claimId","claimType","letterTypeCode","letterTypeTitle","nric","itemType","itemName","claimItemId","latestStatus","latestStatusDesc","latestStatusCode","trgStartDte","trgEndDte","csn","display","name","key","claimOption","fullName","group","additionalCaseIdData","forms_1","claimOptionArr","additionalCaseIdArr","claimItemArr","itemNameMap","Map","claimItemObjList","identity","subscribe","accountToCopy","console","log","currentAccount","copyAccount","initCategory","category","required","catConfirmed","model","subjectId","email","firstName","lastName","login","username","authorities","groups","getClaimOptionName","String","claimOptionData","find","x","createNewLetterForm","get","populateParams","params","currentParams","verifier","verifierInit","getClaimOption","rslt","claimOptIndexArr","controls","flatMap","fc","i","value","filter","includes","ngOnInit","retrieveClaimLetterDetails","setValue","JSON","parse","snapshot","paramMap","queryParams","getItemCategory","select","fg","existingLetterFormObj","forEach","push","prepopulateByExistingLetterForm","getAdditionalClaimId","initClaimOpt","getLabelAdditionalCaseId","arr","length","map","join","valueChangeSubscribe","initialValue","valueChanges","initClaimItemTable","listOfAdditionalCaseIdsWOtherVerifiers","getListOfAdditionalCaseIdsWOtherVerifiers","hasChanged","Object","keys","some","selectedCategoryList","y","setState","claimOpt","index","defaultClaimOpt","getInnerFormControl","findIndex","ITEM_NAME_INCOME_TAX_ADJUSTMENT","getDetail","request","CLAIM_TYPE_SELF_EMP","claimOptionObjArr","z","undefined","CLAIM_TYPE_EMP","retrieveAdditionalClaimIds","resp","status","body","data","concat","itemList","groupedSelect","items","e","reconMultiSelect","error","error_desc","mainClaim","set","claimIdClaimItemMap","Array","claimDetail","latestItemStatusDesc","itemCategory","constructClaimItemTable","http_1","append","retrieveLetterFormDetails","pipe","letterFormDetailResp","claimList","mainClaimItemClaimOpt","obj","itemCategoryList","retrieveItemCategory","consolResp","selectedClaimIds","selectedArr","el","has","itemDetail","resolvedItemNameMap","entries","k","v","resolvedCategoryMap","innerK","innerV","resolvedModel","clear","resetDataTable","submittedDt","addRow","constructOverallRow","existingItemNameMap","itemNameKeys","addSubmittedRow","formObj","getItemCategoryObj","selectedAdditionalCaseId","base","filteredBase","table","reset","overallArr","categoryCd","mapCreateNewLetterFormGroupToDto","claimObjList","caseIdListStr","varMap","categoryList","ctrl","claimIdClaimItemMapList","claimItemList","itemCategoryArr","reconModel","saveLetterItemDto","letterType","fromEntries","output","stringify","tester","fa","getInnerFACtrl","controlName","onRedirectViewLetter","genDt","viewGeneratedLetter","previewLetter","previewClaimLetter","responseType","displayPreviewLetter","blob","Blob","type","headers","previewLetterUrl","bypassSecurityTrustResourceUrl","URL","createObjectURL","displayPreviewLetterDialog","viewGeneratedClaimLetter","displayGeneratedLetter","generatedLetterUrl","displayGeneratedLetterDialog","onCancel","navigateClaimLetter","onSave","saveClaimLetter","success","success_message","navigateCreateNewLetter","onSubmit","navigateSubmitLetterStatus","onUpdate","onRemoveCategory","removeAt","updateValueAndValidity","navigateChecklistItem","claimDetailList","categoryIndex","navigate","submitted","then","window","location","reload","localStorage","getItem","snapshotParams","regroupArr","reGroupForm","submitLetterItemDto","onConfirmPopup","event","submitClaimLetter","fullClaimArr","currentCaseIdObj","latestItemStatusCode","unshift","openDialog","updateSubmittedLetterForm","deleteLetterForm","updateSubmittedClaimLetter","deleteSubmittedClaimLetter","redirectTo","commands","extras","navigateByUrl","skipLocationChange","fullArr","baseArr","unselectedVerifier","selectedVerifier","exports","selectors","viewQuery","ctx"],"sourceRoot":"","sources":["C:\\Users\\D1347074\\Desktop\\projects 2\\nspayiiapp\\src\\main\\webapp\\app\\claim\\pop-up\\claim-letter\\create-new-letter\\create-new-letter.component.ts","C:\\Users\\D1347074\\Desktop\\projects 2\\nspayiiapp\\src\\main\\webapp\\app\\claim\\pop-up\\claim-letter\\create-new-letter\\create-new-letter.component.html"],"sourcesContent":["import { Component, Inject, OnInit, ViewChild } from '@angular/core';\r\nimport { AbstractControl, FormArray, FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { ActivatedRoute, NavigationExtras, Router } from '@angular/router';\r\nimport { ClaimService } from 'app/claim/service/claim.service';\r\nimport { AccountService } from 'app/core/auth/account.service';\r\nimport { StateStorageService } from 'app/core/auth/state-storage.service';\r\nimport { CustomToastService } from 'app/layouts/service/customtoast.service';\r\nimport { Table } from 'primeng/table';\r\nimport { flatMap, map, Observable, Subscription, switchMap } from 'rxjs';\r\nimport { LocalStorageService } from 'ngx-webstorage';\r\nimport { PopUpService } from '../../service/pop-up.service';\r\nimport { SaveLetterItemsDto } from '../model/save-letter-items-request.model';\r\nimport { LetterItemSubDto } from '../model/letter-items-sub-request';\r\nimport { HttpParams } from '@angular/common/http';\r\nimport { DomSanitizer,SafeResourceUrl } from '@angular/platform-browser';\r\nimport { RouteSubmitLetterStatusDto } from '../model/route-to-submit-letter-status.model';\r\nimport { NspConfirmationService } from 'app/shared/confirm/nsp-confirm.service';\r\nimport { SEClaimItemDto } from 'app/claim/se-claim/model/se-claim-item.model';\r\nimport {timer} from 'rxjs';\r\nimport { Location } from '@angular/common';\r\n@Component({\r\n  selector: 'n2-create-new-letter',\r\n  templateUrl: './create-new-letter.component.html',\r\n  styleUrls: ['./create-new-letter.component.scss']\r\n})\r\nexport class CreateNewLetterComponent implements OnInit {\r\n\r\n  currentParams:any = {\r\n    letterFormId: '',\r\n    caseId: '',\r\n    claimId: '',\r\n    claimType: '',\r\n    letterTypeCode: '',\r\n    letterTypeTitle: '',\r\n    nric: '',\r\n    itemType: '',\r\n    itemName: '',\r\n    claimItemId: '',\r\n    latestStatus: '',\r\n    latestStatusDesc: '',\r\n    latestStatusCode: '', \r\n    trgStartDte: '',\r\n    trgEndDte:'',\r\n    csn: ''\r\n  };\r\n  params: any; //readonly\r\n  loading!: boolean;\r\n  cities: any[];\r\n  itemCategoryList: any[] = [];\r\n  currentAccount: any;\r\n  saveLetterItemDto: SaveLetterItemsDto = {} as SaveLetterItemsDto; // main persisting request\r\n  defaultClaimOpt: string;\r\n  existingLetterFormObj: any;\r\n  displayPreviewLetterDialog: any = { display: false };\r\n  previewLetterUrl: SafeResourceUrl;\r\n  displayGeneratedLetterDialog: any = { display: false };\r\n  generatedLetterUrl: SafeResourceUrl;\r\n  // claimItemObjList: any[]; //routed from claim-letter\r\n  listOfAdditionalCaseIdsWOtherVerifiers: string;\r\n\r\n\r\n  readonly CLAIM_TYPE_SELF_EMP = 'S';\r\n  readonly CLAIM_TYPE_EMP = 'E';\r\n\r\n  claimOptionData: any[] = [{name: 'ITX PROV', key: 'ITX_PROV', claimOption: '2', fullName: 'INCOME TAX'}, \r\n  {name: 'ITX ADJ', key: 'ITX_ADJ', claimOption: '2', fullName: 'INCOME TAX ADJUSTMENT'}, {name: 'AVE', key: 'AVE', claimOption: '1', fullName: null}, \r\n  {name: 'REP', key: 'REP', claimOption: '3', fullName: null}];\r\n  hasChanged = false;\r\n\r\n  // additionalCaseIdData: any[] = [];\r\n  \r\n  createNewLetterForm: FormGroup = this.formBuilder.group({\r\n    additionalCaseIdData:  new FormControl([], null),\r\n    claimOptionArr: new FormArray([]),\r\n    additionalCaseIdArr:  new FormControl([], null),\r\n    claimItemArr: new FormArray([]),\r\n    itemNameMap: new FormControl( new Map<string, any>(), null),\r\n    claimItemObjList: new FormControl([])\r\n\r\n  });\r\n  selectedCategoryList: any[] = [];\r\n  readonly ITEM_NAME_INCOME_TAX = \"INCOME TAX\";\r\n  readonly ITEM_NAME_INCOME_TAX_ADJUSTMENT = \"INCOME TAX ADJUSTMENT\";\r\n\r\n  @ViewChild('dataTable', {static: true})\r\n  private table!: Table;\r\n  \r\n\r\n  constructor(\r\n    private route: ActivatedRoute,\r\n    private router: Router,\r\n    private formBuilder: FormBuilder,\r\n    private claimService: ClaimService,\r\n    private toastService: CustomToastService,\r\n    private account: AccountService,\r\n    private $localStorage: LocalStorageService,\r\n    private stateStorageService: StateStorageService,\r\n    private popUpService: PopUpService,\r\n    private domSanitizer: DomSanitizer,\r\n    private nspConfirmService: NspConfirmationService,\r\n    private _location: Location\r\n  ) { \r\n    this.account.identity().subscribe((accountToCopy: any) => {\r\n      console.log(\"the current user\", accountToCopy)\r\n      this.currentAccount = this.copyAccount(accountToCopy);\r\n    });\r\n    console.log(\"test\");\r\n \r\n\r\n  }\r\n\r\n\r\n  static initCategory(formBuilder: FormBuilder):  FormGroup{\r\n    return formBuilder.group({\r\n      category: new FormControl(null,  Validators.required),\r\n      catConfirmed:new FormControl(false, null),\r\n      model: new FormControl(null)\r\n    });\r\n  }\r\n\r\n  copyAccount(account: any): any {\r\n    return {\r\n      subjectId: account.subjectId,\r\n      email: account.email,\r\n      firstName: account.firstName,\r\n      lastName: account.lastName,\r\n      login: account.username,\r\n      authorities: account.authorities,\r\n      groups: account.groups,\r\n    };\r\n  }\r\n\r\n  getClaimOptionName(key: string): string{\r\n    return String(this.claimOptionData.find(x=> x.key === key)?.name || \"\");\r\n  }\r\n\r\n  get claimOptionArr(): FormArray {\r\n    return this.createNewLetterForm?.get('claimOptionArr') as FormArray;\r\n  }\r\n\r\n  get claimItemArr(): FormArray {\r\n    return this.createNewLetterForm?.get('claimItemArr') as FormArray;\r\n  }\r\n\r\n  populateParams(params:any): any{\r\n\r\n    if(params.letterFormId){\r\n      this.currentParams.letterFormId = params.letterFormId\r\n    }\r\n    if(params.caseId){\r\n      this.currentParams.caseId = params.caseId\r\n    }\r\n    if(params.claimId){\r\n      this.currentParams.claimId = params.claimId\r\n    }\r\n    if(params.claimType){\r\n      this.currentParams.claimType = params.claimType\r\n    }\r\n    if(params.letterTypeCode){\r\n      this.currentParams.letterTypeCode = params.letterTypeCode\r\n    }\r\n    if(params.letterTypeTitle){\r\n      this.currentParams.letterTypeTitle = params.letterTypeTitle\r\n    }\r\n    if(params.nric){\r\n      this.currentParams.nric = params.nric\r\n    }\r\n    if(params.itemType){\r\n      this.currentParams.itemType = params.itemType\r\n    }\r\n    if(params.claimItemId){\r\n      this.currentParams.claimItemId = params.claimItemId\r\n    }\r\n    if(params.latestStatus){\r\n      this.currentParams.latestStatus = params.latestStatus\r\n    }\r\n    if(params.latestStatusDesc){\r\n      this.currentParams.latestStatusDesc = params.latestStatusDesc\r\n    }\r\n    if(params.latestStatusCode){\r\n      this.currentParams.latestStatusCode = params.latestStatusCode\r\n    }\r\n    if(params.trgStartDte){\r\n      this.currentParams.trgStartDte = params.trgStartDte\r\n    }\r\n    if(params.trgEndDte){\r\n      this.currentParams.trgEndDte = params.trgEndDte\r\n    }\r\n    if(params.csn){\r\n      this.currentParams.csn = params.csn\r\n    }\r\n    if(params.verifier){\r\n      this.currentParams.verifier = params.verifier\r\n    }\r\n    if(params.verifierInit){\r\n      this.currentParams.verifierInit = params.verifierInit\r\n    }\r\n  }\r\n\r\n\r\n  getClaimOption(): any[]{\r\n    let rslt: string[] = [];\r\n    const claimOptIndexArr = this.claimOptionArr.controls.flatMap((fc:FormControl, i) => fc.value ? i : []);\r\n    rslt = this.claimOptionData.filter((x, i) => claimOptIndexArr.includes(i));\r\n    console.log(\"the claim opt result\", rslt)\r\n    return rslt;\r\n  }\r\n  ngOnInit(): void {\r\n    console.log(\"initializing create new letter\")\r\n    this.retrieveClaimLetterDetails();\r\n  }\r\n\r\n  retrieveClaimLetterDetails(): void{\r\n    this.createNewLetterForm.get('claimItemObjList').setValue(JSON.parse(this.route.snapshot.paramMap.get(\"claimItemObjList\")));\r\n    this.route.queryParams.subscribe((params) => {\r\n      this.params = params;\r\n      this.populateParams(params);\r\n      this.getItemCategory(this.currentParams.letterTypeCode);\r\n      console.log(\"isha\", params);\r\n      if(this.popUpService.select('create-new-letter-form')){\r\n        const fg = this.popUpService.select('create-new-letter-form') as FormGroup;\r\n        this.createNewLetterForm = fg;\r\n        if(this.popUpService.select('existingLetterFormObj')){\r\n          this.existingLetterFormObj = this.popUpService.select('existingLetterFormObj');\r\n        }\r\n        \r\n      }\r\n      else{\r\n \r\n        this.claimOptionData.forEach(x=>{\r\n          this.claimOptionArr.push(new FormControl(false, null));\r\n        })\r\n        if(this.currentParams.letterFormId){\r\n          //prepopulate the table and preselect the additional case ids and set the itemNameMap\r\n          console.log(\"forming existing letterForm\")\r\n          this.prepopulateByExistingLetterForm(this.currentParams.letterFormId, this.createNewLetterForm);\r\n\r\n        }else{\r\n          console.log(\"init create new letter\");\r\n          this.getAdditionalClaimId();\r\n          //this.params.itemType refers to the main itemType\r\n          //this.params.itemName refers to the main itemName\r\n          this.initClaimOpt(this.currentParams.itemType, this.currentParams.itemName, null);\r\n\r\n        }\r\n      }\r\n      \r\n\r\n\r\n    });\r\n\r\n  }\r\n\r\n  getLabelAdditionalCaseId(): string{\r\n    const arr = this.createNewLetterForm.get('additionalCaseIdArr').value as any[];\r\n    if(arr.length>0){\r\n      return arr.map(x=>{ return  String(x.display)}).join(\", \");\r\n    }else  return \"\";\r\n  }\r\n\r\n  valueChangeSubscribe(createNewLetterForm: FormGroup):void{\r\n    const initialValue = createNewLetterForm.value;\r\n    this.createNewLetterForm.get('additionalCaseIdArr').valueChanges.subscribe(()=>{\r\n      console.log(\"luka\", this.createNewLetterForm.get('additionalCaseIdArr'))\r\n      this.initClaimItemTable(createNewLetterForm);\r\n      this.listOfAdditionalCaseIdsWOtherVerifiers = this.getListOfAdditionalCaseIdsWOtherVerifiers();\r\n    });\r\n    createNewLetterForm.valueChanges.subscribe(()=>{\r\n      this.hasChanged = Object.keys(initialValue).some(key => createNewLetterForm.value[key] !==\r\n        initialValue[key]);\r\n      const selectedCategoryList:any[] = [];\r\n      this.claimItemArr.controls.forEach(x=>{\r\n        (x.get('itemCategory') as FormArray).controls.forEach(y=>{\r\n          if(y.get('category').value?.value){\r\n            selectedCategoryList.push(y.get('category').value?.value);\r\n          }\r\n        });\r\n      })\r\n      this.selectedCategoryList = selectedCategoryList;\r\n      this.popUpService.setState({\r\n        'create-new-letter-form': createNewLetterForm\r\n      }\r\n      );\r\n    })\r\n    this.popUpService.setState({\r\n      'create-new-letter-form':createNewLetterForm\r\n    });\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n\r\n  //supply claimOpt first, otherwise logic by itemType and itemName\r\n  initClaimOpt(itemType: string, itemName: string, claimOpt: string): void{\r\n    let index;\r\n    if(claimOpt){\r\n      this.defaultClaimOpt = this.claimOptionData.find(x=>x.key === claimOpt)?.name;\r\n      this.getInnerFormControl(this.claimOptionArr, this.claimOptionData.findIndex(x=>x.key === claimOpt)).setValue(true);\r\n\r\n    }else{\r\n      switch(itemType){\r\n        case 'ITX':{\r\n          if(itemName === \"INCOME TAX\"){\r\n            this.getInnerFormControl(this.claimOptionArr, 0).setValue(true);\r\n            index = 0;\r\n          }\r\n          else if(itemName === this.ITEM_NAME_INCOME_TAX_ADJUSTMENT){\r\n            this.getInnerFormControl(this.claimOptionArr, 1).setValue(true);\r\n            index = 1;\r\n          }\r\n          break;\r\n        }\r\n        case 'AVE':{\r\n          this.getInnerFormControl(this.claimOptionArr, 2).setValue(true);\r\n          index = 2;\r\n          break;\r\n        }\r\n        case 'REP':{\r\n          this.getInnerFormControl(this.claimOptionArr, 3).setValue(true);\r\n          index = 3;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n   \r\n    this.defaultClaimOpt = this.claimOptionData[index]?.name;\r\n    // return String(this.claimOptionData[index]?.name);\r\n  }\r\n\r\n  getDetail(caseId: string): string{\r\n    return \"x\"\r\n  }\r\n\r\n  getAdditionalClaimId(): void{\r\n    // this.createNewletterForm.get('additionalCaseIdArr').setValue([]);\r\n    let request:any;\r\n\r\n    if(this.currentParams.claimType === this.CLAIM_TYPE_SELF_EMP){\r\n      request = {\r\n        nric: this.currentParams.nric,\r\n        claimType: this.currentParams.claimType,\r\n        caseId: this.currentParams.caseId\r\n      }\r\n      const claimOptionObjArr =  this.getClaimOption();\r\n      request['claimOpt'] = claimOptionObjArr.map((z:any)=>{return String(z.claimOption)});\r\n      request['itemNameList'] = claimOptionObjArr.filter(x=>x.fullName!==undefined && x.fullName!== null).map((z:any)=>{return String(z.fullName)});\r\n    }else if(this.currentParams.claimType === this.CLAIM_TYPE_EMP){\r\n      console.log(\"do something, \", this.currentParams.csn)\r\n      request = {\r\n        nric: this.currentParams.nric,\r\n        claimType: this.currentParams.claimType,\r\n        caseId: this.currentParams.caseId,\r\n        csn: this.currentParams.csn\r\n      }\r\n    }\r\n    this.claimService.retrieveAdditionalClaimIds(request, null).subscribe((resp:any) => {\r\n      if(resp.status === 200 && resp.body.data){\r\n        const additionalCaseIdData = resp.body.data.map((x:any)=>{\r\n          return {\r\n            display: x.caseId.concat(\" \").concat(this.getClaimOptionName(x.claimOpt)).concat(\" (\").concat(x.latestStatusDesc).concat(\")\"),\r\n            claimId: x.claimId,\r\n            caseId: x.caseId,\r\n            nric: x.nric,\r\n            claimOpt: x.claimOpt,\r\n            latestStatus: x.latestStatus,\r\n            latestStatusCode: x.latestStatusCode,\r\n            latestStatusDesc: x.latestStatusDesc,\r\n            csn: x.csn,\r\n            verifier: x.verifier,\r\n            verifierInit: x.verifierInit,\r\n            itemList: x.itemList,\r\n            trgStartDte: x.trgStartDte,\r\n            trgEndDte: x.trgEndDte,\r\n          }\r\n   \r\n        })\r\n        const groupedSelect = [\r\n          {\r\n            display: \"Please select\", value: \"unselected\",\r\n            items: (additionalCaseIdData as any[]).filter(x=> !((this.createNewLetterForm.get('additionalCaseIdArr').value as any[]).map(e=>{return String(e.claimId)})).includes(x.claimId))\r\n          }\r\n        ]\r\n        this.createNewLetterForm.get('additionalCaseIdData').setValue(groupedSelect);\r\n\r\n        this.reconMultiSelect();\r\n        this.initClaimItemTable(this.createNewLetterForm);\r\n        this.listOfAdditionalCaseIdsWOtherVerifiers = this.getListOfAdditionalCaseIdsWOtherVerifiers();\r\n        this.valueChangeSubscribe(this.createNewLetterForm);\r\n\r\n      }\r\n    },\r\n    (error: any) => {\r\n      console.log(\"error is\" + String(error?.error?.error_desc));\r\n      this.toastService.error(String(error?.error?.error_desc));\r\n    });\r\n  }\r\n\r\n  initClaimItemTable(createNewLetterForm: FormGroup){\r\n\r\n\r\n      const itemNameMap = new Map<string, any>();\r\n      if(this.existingLetterFormObj){\r\n        console.log(\"momo\", this.existingLetterFormObj?.mainClaim?.itemList)\r\n        this.existingLetterFormObj?.mainClaim?.itemList.forEach((x:any)=>{\r\n          \r\n          itemNameMap.set(\r\n            x.itemName,{\r\n              claimIdClaimItemMap: new Array({\r\n                claimId: this.existingLetterFormObj.mainClaim.claimId,\r\n                claimItemId: x.claimItemId,\r\n                caseId: this.existingLetterFormObj.mainClaim.caseId\r\n              }),\r\n              claimDetail: new Array( this.existingLetterFormObj.mainClaim.caseId.concat(\" \").concat( this.existingLetterFormObj.mainClaim.claimOpt).concat(\" (\").concat(x.latestItemStatusDesc).concat(\")\"),),\r\n              itemCategory: []\r\n            }\r\n          )\r\n        })\r\n        console.log(\"reacha\", itemNameMap)\r\n      }\r\n      else if(this.currentParams.caseId && this.currentParams.claimId){\r\n        (createNewLetterForm.get('claimItemObjList').value as any[])?.forEach(x=>{\r\n          itemNameMap.set(\r\n            x.itemName,{\r\n              claimIdClaimItemMap: new Array({\r\n                claimId: this.currentParams.claimId,\r\n                claimItemId: x.claimItemId,\r\n                caseId: this.currentParams.caseId,\r\n              }),\r\n              claimDetail: new Array(this.currentParams.caseId.concat(\" \").concat(this.getClaimOptionName(this.defaultClaimOpt)).concat(\" (\").concat(x.latestItemStatusDesc).concat(\")\")),\r\n              itemCategory: []\r\n            }\r\n          )\r\n        })\r\n      }\r\n      \r\n      createNewLetterForm.get('itemNameMap').setValue(itemNameMap)\r\n      this.constructClaimItemTable(createNewLetterForm);\r\n  }\r\n\r\n  prepopulateByExistingLetterForm(letterFormId: string, createNewLetterForm: FormGroup): void{\r\n    console.log(\"mapping dto to formgroup\");\r\n    let params = new HttpParams();\r\n    params = params.append(\"letterFormId\", letterFormId);\r\n    this.claimService.retrieveLetterFormDetails({params}).pipe(map((resp:any)=>{\r\n      let letterFormDetailResp;\r\n      if(resp.body.data){\r\n        letterFormDetailResp = resp.body.data;\r\n      }\r\n      //init claim opt by first in item in array -> main claim item\r\n      const mainClaim = letterFormDetailResp.claimList[0];\r\n      const mainClaimItemClaimOpt = mainClaim?.claimOpt;\r\n      this.initClaimOpt(null, null, mainClaimItemClaimOpt);\r\n      return {\r\n        letterFormDetailResp,\r\n        mainClaim    \r\n      }\r\n    }),switchMap((obj:any)=>{\r\n      let itemCategoryList;\r\n      return this.claimService.retrieveItemCategory(obj.letterFormDetailResp.letterTypeCode,  null).pipe(map((resp:any) => {\r\n        if(resp.status === 200 && resp.body.data){\r\n          itemCategoryList = resp.body.data;\r\n        }\r\n        return {\r\n          itemCategoryList: resp.body.data,\r\n          letterFormDetailResp:obj.letterFormDetailResp,\r\n          mainClaim: obj.mainClaim\r\n        }\r\n      })\r\n\r\n    )})\r\n    ,switchMap((obj:any)=>{\r\n      let request:any;\r\n      if(this.currentParams.claimType === this.CLAIM_TYPE_SELF_EMP){\r\n        request = {\r\n          nric: this.currentParams.nric,\r\n          claimType: this.currentParams.claimType,\r\n          caseId: this.currentParams.caseId\r\n        }\r\n        const claimOptionObjArr =  this.getClaimOption();\r\n        request['claimOpt'] = claimOptionObjArr.map((z:any)=>{return String(z.claimOption)});\r\n        request['itemNameList'] = claimOptionObjArr.filter(x=>x.fullName!==undefined && x.fullName!== null).map((z:any)=>{return String(z.fullName)});\r\n        \r\n      }else if(this.currentParams.claimType === this.CLAIM_TYPE_EMP){\r\n        console.log(\"do something, \", this.currentParams.csn)\r\n        request = {\r\n          nric: this.currentParams.nric,\r\n          claimType: this.currentParams.claimType,\r\n          caseId: this.currentParams.caseId,\r\n          csn: this.currentParams.csn\r\n        }\r\n      }\r\n\r\n      //presets the claim option arr before retrieveadditionalclaimid is called\r\n    \r\n      return this.claimService.retrieveAdditionalClaimIds(request, null).pipe(map((resp:any) => {\r\n        \r\n        let additionalCaseIdData;\r\n        if(resp.body.data){\r\n          additionalCaseIdData = (resp.body.data as any[]).map(x=> {  return {\r\n            display: x.caseId.concat(\" \").concat(this.getClaimOptionName(x.claimOpt)).concat(\" (\").concat(x.latestStatusDesc).concat(\")\"),\r\n            claimId: x.claimId,\r\n            caseId: x.caseId,\r\n            nric: x.nric,\r\n            claimOpt: x.claimOpt,\r\n            latestStatus: x.latestStatus,\r\n            latestStatusCode: x.latestStatusCode,\r\n            latestStatusDesc: x.latestStatusDesc,\r\n            csn: x.csn,\r\n            verifier: x.verifier,\r\n            itemList: x.itemList\r\n          }});\r\n        }\r\n        return  {\r\n          additionalCaseIdData,\r\n          letterFormDetailResp: obj.letterFormDetailResp,\r\n          mainClaim: obj.mainClaim,\r\n          itemCategoryList: obj.itemCategoryList\r\n        }\r\n      }))\r\n    }\r\n    )\r\n    ).subscribe((consolResp:any) => {\r\n      if(consolResp){\r\n        const  selectedClaimIds = (consolResp.letterFormDetailResp.claimList as any[]).map(x=>{return String(x.claimId)});\r\n        this.existingLetterFormObj = consolResp.letterFormDetailResp;\r\n        const groupedSelect = [\r\n          {\r\n            display: \"Please select\", value: \"unselected\",\r\n            items:  consolResp.additionalCaseIdData\r\n            // items: (consolResp.additionalCaseIdData as any[]).filter(x=> !((this.createNewLetterForm.get('additionalCaseIdArr').value as any[]).map(e=>{return String(e.claimId)})).includes(x.claimId))\r\n          }\r\n        ]\r\n        createNewLetterForm.get('additionalCaseIdData').setValue(groupedSelect);\r\n        const selectedArr = (createNewLetterForm.get('additionalCaseIdData').value.find((x:any)=> x.value === \"unselected\")?.items as any[])\r\n        .filter((el:any)=>{return selectedClaimIds.includes(el.claimId)});\r\n        createNewLetterForm.get('additionalCaseIdArr').setValue(selectedArr);\r\n\r\n        this.reconMultiSelect();\r\n        this.existingLetterFormObj['mainClaim'] = consolResp.mainClaim;\r\n        this.itemCategoryList =consolResp.itemCategoryList.filter((el: any)=>{\r\n          return !this.selectedCategoryList.includes(el.value)\r\n        });\r\n        this.initClaimItemTable(createNewLetterForm);\r\n        //replace existing params after retrieving by letter form id\r\n        this.listOfAdditionalCaseIdsWOtherVerifiers = this.getListOfAdditionalCaseIdsWOtherVerifiers();\r\n        this.valueChangeSubscribe(createNewLetterForm);\r\n        this.popUpService.setState({'existingLetterFormObj': this.existingLetterFormObj});\r\n          this.populateParams(this.existingLetterFormObj)\r\n        }\r\n      });\r\n  }\r\n\r\n  constructClaimItemTable(createNewLetterForm: FormGroup): void{\r\n    const additionalCaseIdArr = createNewLetterForm.get('additionalCaseIdArr').value as Array<any>;\r\n    const itemNameMap = createNewLetterForm.get('itemNameMap').value;\r\n    console.log(\"beforethe\", itemNameMap)\r\n    additionalCaseIdArr?.forEach(x=> {\r\n      (x.itemList as any[]).forEach(y=>{\r\n\r\n        if(!itemNameMap.has(y.itemName)){\r\n            itemNameMap.set(y.itemName, {\r\n              claimIdClaimItemMap: new Array({\r\n                claimId: y.claimId,\r\n                claimItemId: y.claimItemId,\r\n                caseId: y.caseId\r\n              }),\r\n              claimDetail: new Array(y.caseId.concat(\" \").concat(this.getClaimOptionName(y.claimOpt)).concat(\" (\").concat(y.latestItemStatusDesc).concat(\")\"))\r\n      \r\n            });\r\n            console.log(\"no key\")\r\n          // }\r\n        }\r\n        else{\r\n          const itemDetail = itemNameMap.get(y.itemName);\r\n          if(!(itemDetail.claimDetail as any[]).includes(y.caseId.concat(\" \").concat(this.getClaimOptionName(y.claimOpt)).concat(\" (\").concat(y.latestItemStatusDesc).concat(\")\"))){\r\n            itemDetail.claimDetail.push(y.caseId.concat(\" \").concat(this.getClaimOptionName(y.claimOpt)).concat(\" (\").concat(y.latestItemStatusDesc).concat(\")\"));\r\n     \r\n            itemDetail.claimIdClaimItemMap.push({\r\n              claimId: y.claimId,\r\n              claimItemId: y.claimItemId,\r\n              caseId: y.caseId\r\n            })\r\n            itemNameMap.set(y.itemName, itemDetail);\r\n          }\r\n      \r\n        }\r\n\r\n      })\r\n    });\r\n    //intercept with adding formly value\r\n    //combine resolvedItemNameMap here\r\n    if(this.existingLetterFormObj){\r\n      const resolvedItemNameMap = new Map(Object.entries(this.existingLetterFormObj.resolvedItemNameMap));\r\n      for (const [k, v] of Object.entries(this.existingLetterFormObj.itemNameMap)) {\r\n        const itemDetail =  itemNameMap.get(k);\r\n        const resolvedCategoryMap =  new Map(Object.entries(resolvedItemNameMap.get(k)));\r\n        console.log(\"milo\", itemDetail)\r\n        \r\n        for (const [innerK, innerV] of Object.entries(v)) {\r\n          const resolvedModel = resolvedCategoryMap.get(innerK) as string[];\r\n          console.log(\"inner solved\", resolvedModel);\r\n          (itemDetail?.itemCategory)?.push({\r\n            category: innerK,\r\n            model: innerV,\r\n            resolvedModel\r\n          })\r\n          console.log(\"tata\", itemDetail)\r\n\r\n        };\r\n        itemNameMap.set(k, itemDetail)\r\n      }\r\n\r\n    }\r\n    createNewLetterForm.get('itemNameMap').setValue(itemNameMap);\r\n    this.claimItemArr.clear();\r\n    this.resetDataTable();\r\n\r\n\r\n    // if letter form has not been submitted (regardless newly created or saved existing)\r\n    if((this.existingLetterFormObj && this.existingLetterFormObj.submittedDt===0) || !this.existingLetterFormObj){\r\n      createNewLetterForm.get('itemNameMap').value.forEach((value:any, key:string) => {\r\n        console.log(value, key); \r\n        this.claimItemArr.push(this.addRow({\r\n          itemDetail: value,\r\n          itemName: key\r\n        }));\r\n      });\r\n      this.constructOverallRow(); \r\n    }else{\r\n      //if letter form has been submitted, filter by items that were set before with checklist items\r\n      if(this.existingLetterFormObj){\r\n        //filter by itemname existing in the resolveditemnamemap\r\n        const existingItemNameMap = this.existingLetterFormObj.resolvedItemNameMap as Map<string, any>;\r\n\r\n        const itemNameKeys:string[] = Object.keys(existingItemNameMap);\r\n        itemNameKeys.forEach(key=>{\r\n          const value = (createNewLetterForm.get('itemNameMap').value as Map<string, any>).get(key);\r\n          console.log(\"raka\", value)\r\n          this.claimItemArr.push(this.addSubmittedRow({\r\n            itemDetail: value,\r\n            itemName: key\r\n          }));\r\n        })\r\n      }\r\n    }\r\n  }\r\n\r\n  addRow(data: {itemDetail:any, itemName: string}) : FormGroup{\r\n    const formObj =  {\r\n      claimDetail: new FormControl(data.itemDetail?.claimDetail , null),//array\r\n      itemName: new FormControl(data.itemName, null),\r\n      itemCategory: new FormArray([\r\n      ]),//array\r\n      claimIdClaimItemMap: new FormControl(data.itemDetail?.claimIdClaimItemMap, null),\r\n\r\n    }\r\n    if(data.itemDetail.itemCategory && data.itemDetail.itemCategory.length>0){\r\n      (data.itemDetail.itemCategory as Array<any>).forEach(x=>{\r\n        formObj.itemCategory.push(this.formBuilder.group({\r\n          category: new FormControl(this.getItemCategoryObj(x.category), Validators.required),\r\n          catConfirmed:new FormControl(true, null),\r\n          model: new FormControl(x.model) //for storing checklist model\r\n        }))\r\n      })\r\n      \r\n    }\r\n    //appends new empty category row regardless\r\n    formObj.itemCategory.push(CreateNewLetterComponent.initCategory(this.formBuilder));\r\n    return this.formBuilder.group(formObj);\r\n\r\n  }\r\n\r\n  addSubmittedRow(data: {itemDetail:any, itemName: string}): FormGroup{\r\n    console.log(\"im here\", data)\r\n    const formObj =  {\r\n      claimDetail: new FormControl(data.itemDetail?.claimDetail , null),//array\r\n      itemName: new FormControl(data.itemName, null),\r\n      itemCategory: new FormArray([\r\n        \r\n      ]),//array\r\n      claimIdClaimItemMap: new FormControl(data.itemDetail?.claimIdClaimItemMap, null),\r\n    }\r\n    if(data.itemDetail?.itemCategory && data.itemDetail?.itemCategory.length>0){\r\n      (data.itemDetail?.itemCategory as Array<any>).forEach(x=>{\r\n        formObj.itemCategory.push(this.formBuilder.group({\r\n          category: new FormControl(this.getItemCategoryObj(x.category), Validators.required),\r\n          catConfirmed:new FormControl(true, null),\r\n          model: new FormControl(x.model), //for storing checklist model\r\n          resolvedModel: new FormControl(x.resolvedModel)\r\n        }))\r\n      })\r\n      \r\n    }\r\n    return this.formBuilder.group(formObj);\r\n\r\n  }\r\n\r\n  //shifts all selected chips and appends to additional case id filter\r\n  reconMultiSelect(): void{\r\n    const selectedAdditionalCaseId = this.createNewLetterForm.get('additionalCaseIdArr').value as any[];\r\n    if(selectedAdditionalCaseId.length>0){\r\n      const base = this.createNewLetterForm.get('additionalCaseIdData').value as any[];\r\n      const filteredBase = (base.find(x=> x.value === \"unselected\").items as any[]).filter(x=> !selectedAdditionalCaseId.includes(x));\r\n      (base.find(x=> x.value === \"unselected\").items as any[]) = filteredBase;\r\n      if(base.find(x=> x.value === \"selected\")){\r\n        base.find(x=> x.value === \"selected\").items = selectedAdditionalCaseId;\r\n      }else {\r\n        base.push({\r\n          display: 'Selected', value: 'selected',\r\n          items: selectedAdditionalCaseId\r\n        })\r\n      }\r\n   \r\n    }\r\n  }\r\n\r\n  resetDataTable(): void {\r\n    this.table.reset();\r\n  }\r\n\r\n  constructOverallRow(): void{\r\n\r\n    let overallArr: any[] = [];\r\n    this.createNewLetterForm.get('itemNameMap').value.forEach((value:any, key:string) => {\r\n      overallArr = overallArr?.concat(value.claimDetail);\r\n    });\r\n\r\n    this.claimItemArr.push(this.addRow({\r\n      itemDetail:{\r\n        claimDetail: overallArr,\r\n        // catConfirmed:new FormControl(false, null)\r\n\r\n      },\r\n      itemName: \"Overall\"\r\n    }));\r\n  }\r\n\r\n\r\n  getItemCategory(letterTypeCode: string): void{\r\n    this.claimService.retrieveItemCategory(letterTypeCode,  null).subscribe((resp:any) => {\r\n      if(resp.status === 200 && resp.body.data){\r\n        this.itemCategoryList = resp.body.data;\r\n        this.itemCategoryList = resp.body.data.filter((el: any)=>{\r\n          return !this.selectedCategoryList.includes(el.value)\r\n        });\r\n      }\r\n    },\r\n    (error: any) => {\r\n      console.log(\"error is\" + String(error?.error?.error_desc));\r\n      this.toastService.error(String(error?.error?.error_desc));\r\n    });\r\n  }\r\n\r\n  getItemCategoryObj(categoryCd: string): any{\r\n    return this.itemCategoryList.find(x=> x.value === categoryCd);\r\n  }\r\n\r\n\r\n  mapCreateNewLetterFormGroupToDto(): void{\r\n    console.log(\"mapping formgroup to dto\",  this.createNewLetterForm);\r\n    // this.saveLetterItemDto.letterItemDtoList = [];\r\n    const claimObjList: \r\n    {\r\n      caseId: string,\r\n      claimId: string, \r\n      claimItemList: SEClaimItemDto[]\r\n    }[] = [];\r\n\r\n    const caseIdListStr: string[] = [];\r\n    // const claimIdListStr: string[] = [];\r\n    const varMap: Map<string, any> = new Map<string, any>();\r\n    const categoryList: string[] = [];\r\n\r\n    //map by claimitemid to each claim\r\n    const claimItemArr = (this.createNewLetterForm.get('claimItemArr') as FormArray);\r\n    claimItemArr.controls.forEach(ctrl=>{\r\n        const claimIdClaimItemMapList = ctrl.get('claimIdClaimItemMap').value;\r\n        claimIdClaimItemMapList?.forEach((claimIdClaimItemMap: any)=>{\r\n          caseIdListStr.push(claimIdClaimItemMap.caseId);\r\n          // claimIdListStr.push(claimIdClaimItemMap.claimId);\r\n          claimObjList.push({\r\n            caseId: claimIdClaimItemMap.caseId,\r\n            claimId: claimIdClaimItemMap.claimId,\r\n            claimItemList: []\r\n          })\r\n\r\n  \r\n        })\r\n      const itemCategoryArr = (ctrl.get('itemCategory') as FormArray).controls.filter(x=>  \r\n      x.get('catConfirmed').value ===  true);\r\n      itemCategoryArr.forEach(x=>{\r\n        categoryList?.push(this.reconModel(x.get('category').value.value, ctrl.get('itemName').value, x.get('model').value))\r\n      })\r\n    })\r\n    varMap.set(\"caseIdList_Str\", caseIdListStr.join(\",\"))\r\n\r\n  \r\n    this.saveLetterItemDto = {\r\n      letterType: this.currentParams.letterTypeCode,\r\n      nric: this.params.nric,\r\n      varMap: Object.fromEntries(varMap),\r\n      categoryList,\r\n      claimObjList,\r\n      letterFormId: this.currentParams.letterFormId //Optional, will be undefined for new letterform creation\r\n    }    \r\n  }\r\n\r\n  reconModel(category: string, itemName: string, model: any):any{\r\n    const output: any = {};\r\n    output['category'] = category;\r\n    output['message'] = model;\r\n    output['itemName'] = itemName;\r\n    return JSON.stringify(output);\r\n\r\n  }\r\n\r\n  tester(): void{\r\n    // console.log(\"the item form array\", this.itemDetailsSection.otherSEItemArr);\r\n    console.log(\"the menu rata\", this.existingLetterFormObj)\r\n    console.log(\"hi\", this.getClaimOption());\r\n    console.log(\"miga\", this.createNewLetterForm.get('additionalCaseIdArr'))\r\n    console.log(\"yello\", (this.claimItemArr.controls[0] as FormArray).get('category'))\r\n    console.log(\"milata\", this.createNewLetterForm)\r\n    console.log(\"viga\", this.existingLetterFormObj )\r\n    this.getListOfAdditionalCaseIdsWOtherVerifiers();\r\n\r\n  }\r\n\r\n  getInnerFormControl(fa: FormArray,index: number): FormControl{\r\n    return fa?.controls[index] as FormControl;\r\n  }\r\n\r\n  getInnerFACtrl(ctrl: FormControl,controlName: string): FormControl{\r\n    return ctrl.get(controlName) as FormControl;\r\n  }\r\n\r\n  onRedirectViewLetter(){\r\n    if(this.existingLetterFormObj && this.existingLetterFormObj.genDt !== 0){\r\n      //if letter form has been generated, on click view letter, retrieve generated letter\r\n      this.viewGeneratedLetter(this.currentParams.letterFormId);\r\n    }else{\r\n      this.previewLetter();\r\n    }\r\n  }\r\n\r\n  previewLetter(): void{\r\n    console.log(\"viewing letter\")\r\n    let params = new HttpParams();\r\n    params = params.append('letterFormId', this.currentParams.letterFormId);\r\n\r\n\r\n    this.claimService.previewClaimLetter(null, {params,  responseType: 'blob'}).subscribe((resp:any) => {\r\n      if(resp && resp.status === 200){\r\n        console.log(\"preview letter blob generated and returned successfully\");\r\n        const data = resp;\r\n        this.displayPreviewLetter(data);\r\n      }\r\n    },\r\n    (error: any) => {\r\n      console.log(\"error is\" + String(error?.error?.error_desc));\r\n      this.toastService.error(\r\n        \"Failed to connect to Letter Generator, please try again. If the error persists, please contact the NSPAY Helpdesk\");\r\n    });\r\n  }\r\n\r\n  displayPreviewLetter(data: any): void {\r\n    const blob = new Blob([data.body], {type: data.headers.get('content-type')});\r\n    this.previewLetterUrl = this.domSanitizer.bypassSecurityTrustResourceUrl(URL.createObjectURL(blob)+'#toolbar=0');\r\n    this.displayPreviewLetterDialog.display = true;\r\n  }\r\n\r\n  viewGeneratedLetter(letterFormId: string): void{\r\n    console.log(\"viewing letter\")\r\n    let params = new HttpParams();\r\n    params = params.append('letterFormId', letterFormId);\r\n\r\n\r\n    this.claimService.viewGeneratedClaimLetter(null, {params,  responseType: 'blob'}).subscribe((resp:any) => {\r\n      if(resp && resp.status === 200){\r\n        console.log(\"generated letter blob generated and returned successfully\");\r\n        const data = resp;\r\n        this.displayGeneratedLetter(data);\r\n      }\r\n    },\r\n    (error: any) => {\r\n      console.log(\"error is\" + String(error?.error?.error_desc));\r\n      this.toastService.error(\r\n        \"Failed to connect to Letter Generator, please try again. If the error persists, please contact the NSPAY Helpdesk\");\r\n    });\r\n  }\r\n\r\n  \r\n  displayGeneratedLetter(data: any): void {\r\n    const blob = new Blob([data.body], {type: data.headers.get('content-type')});\r\n    this.generatedLetterUrl = this.domSanitizer.bypassSecurityTrustResourceUrl(URL.createObjectURL(blob)+'#toolbar=0');\r\n    this.displayGeneratedLetterDialog.display = true;\r\n  }\r\n\r\n  onCancel():void{\r\n    //route back to claim letter window\r\n    console.log(\"cancel\")\r\n    this.navigateClaimLetter();\r\n  }\r\n\r\n  onSave():void{\r\n    console.log(\"saving current state of letter form\");\r\n    this.mapCreateNewLetterFormGroupToDto();\r\n    console.log(\"the letter form\", this.saveLetterItemDto);\r\n    this.claimService.saveClaimLetter(this.saveLetterItemDto, null).subscribe((resp:any) => {\r\n      if(resp.status === 200 && resp.body.data){\r\n        this.toastService.success(String(resp.body.success_message));\r\n        this.navigateCreateNewLetter(resp.body.data);\r\n      }\r\n    },\r\n    (error: any) => {\r\n      console.log(\"error is\" + String(error?.error?.error_desc));\r\n      this.toastService.error(String(error?.error?.error_desc));\r\n    });\r\n\r\n  }\r\n\r\n\r\n\r\n  onSubmit():void{\r\n    console.log(\"the mega\", this.createNewLetterForm)\r\n    console.log(\"the current\", this.existingLetterFormObj)\r\n    this.navigateSubmitLetterStatus();\r\n  }\r\n\r\n  onUpdate():void{\r\n    console.log(\"updating\")\r\n\r\n  }\r\n\r\n  onRemoveCategory(fa: FormArray, index:  number){\r\n    fa.removeAt(index);\r\n    fa.updateValueAndValidity();\r\n  }\r\n\r\n  navigateChecklistItem(claimDetailList: any[], claimIdClaimItemMap: any[],  itemName: string, itemCategory:any, model:any, resolvedModel: any, categoryIndex: number): void{\r\n    console.log(\"poppy\", this.existingLetterFormObj)\r\n    this.router.navigate(['claim/pop-up/checklist-item',\r\n    {claimDetailList:JSON.stringify(claimDetailList), itemCategory:JSON.stringify(itemCategory), resolvedModel: JSON.stringify(resolvedModel), model: JSON.stringify(model),\r\n      claimIdClaimItemMap:JSON.stringify(claimIdClaimItemMap)}], {queryParams: {\r\n      caseId: this.currentParams.caseId,\r\n      claimType: this.currentParams.claimType,\r\n      letterTypeCode: this.existingLetterFormObj? this.existingLetterFormObj.letterTypeCode: this.currentParams.letterTypeCode,\r\n      letterTypeTitle: this.existingLetterFormObj? this.existingLetterFormObj.letterTypeTitle: this.currentParams.letterTypeTitle,\r\n      itemName,\r\n      categoryIndex,\r\n      nric: this.currentParams.nric,\r\n      claimItemId: this.currentParams.claimItemId,\r\n      latestStatusCode: this.currentParams.latestStatusCode,\r\n      latestStatus: this.currentParams.latestStatus,\r\n      latestStatusDesc: this.currentParams.latestStatusDesc,\r\n      trgStartDte: this.currentParams.trgStartDte,\r\n      trgEndDte: this.currentParams.trgEndDte,\r\n      submitted: this.existingLetterFormObj && this.existingLetterFormObj.submittedDt!==0,\r\n      verifier: this.currentParams.verifier,\r\n      verifierInit: this.currentParams.verifierInit,\r\n    }})\r\n  }\r\n\r\n  navigateCreateNewLetter(letterFormId: string): void{\r\n   \r\n    this.router.navigate(['claim/pop-up/create-new-letter'], {queryParams: {\r\n      letterFormId,\r\n      caseId: this.currentParams.caseId,\r\n      claimId: this.currentParams.claimId,\r\n      claimType: this.currentParams.claimType,\r\n      letterTypeCode: this.currentParams.letterTypeCode,\r\n      letterTypeTitle: this.currentParams.letterTypeTitle,\r\n      nric: this.currentParams.nric,\r\n      itemType: this.currentParams.itemType,\r\n      itemName: this.currentParams.itemName,\r\n      claimItemId: this.currentParams.claimItemId,\r\n      latestStatusCode: this.currentParams.latestStatusCode,\r\n      latestStatus: this.currentParams.latestStatus,\r\n      latestStatusDesc: this.currentParams.latestStatusDesc,\r\n      trgStartDte: this.currentParams.trgStartDte,\r\n      trgEndDte: this.currentParams.trgEndDte,\r\n      verifier: this.currentParams.verifier,\r\n      verifierInit: this.currentParams.verifierInit,\r\n    }})\r\n    .then(() => {\r\n      window.location.reload();\r\n    });\r\n\r\n  }\r\n\r\n \r\n\r\n  navigateClaimLetter(): void{\r\n    const route = JSON.parse(window.localStorage.getItem('claim-letter-route'));\r\n    const queryParams:any = route.queryParams;\r\n    this.router.navigate(['claim/pop-up/claim-letter', route.snapshotParams], {queryParams})\r\n\r\n  }\r\n\r\n  //this  is prior submissions\r\n  //if there is no letterForm Id provided, it will be directly saved with a new letterForm Id,\r\n  //otherwise it is submitted with an existing letterFormId\r\n  navigateSubmitLetterStatus(): void{\r\n\r\n    if(this.currentParams.letterTypeCode==='S06' || this.currentParams.letterTypeCode==='S10' || this.currentParams.letterTypeCode==='S14'\r\n    || this.currentParams.letterTypeCode==='E04' || this.currentParams.letterTypeCode==='E09'){\r\n      //for SE \r\n      // 20.\tSystem checks that Letter is a Request for Document or Request of Document for Adjustment Letter\r\n      //then route to Submit Letter Status window\r\n      //following route  transforms info to per claim basis\r\n\r\n      // const routingObjDto:RouteSubmitLetterStatusDto[] = [];\r\n      \r\n      //       At Step 20 of Basic Flow\r\n      // 20.2.1. System detects that Letter is a Rejection Letter  - s14\r\n      // 20.2.2. System displays “Submit Letter Status” window, displaying a list of all Claim Items and statuses\r\n\r\n      //for EC\r\n      // 20.\tSystem checks that Letter is a Request for Document Letter\r\n      // At Step 20 of Basic Flow\r\n      // 20.2.1. System detects that Letter is a Rejection Letter\r\n\r\n      const  regroupArr = this.reGroupForm();\r\n      this.mapCreateNewLetterFormGroupToDto();\r\n      this.router.navigate(['claim/pop-up/submit-letter-status', {regroupArr: JSON.stringify(regroupArr),\r\n      submitLetterItemDto: JSON.stringify(this.saveLetterItemDto) }], {queryParams: {\r\n          letterFormId: this.params.letterFormId,\r\n          caseId: this.currentParams.caseId,\r\n          claimId: this.currentParams.claimId,\r\n          claimType: this.currentParams.claimType,\r\n          letterTypeCode: this.currentParams.letterTypeCode,\r\n          letterTypeTitle: this.currentParams.letterTypeTitle,\r\n          nric: this.currentParams.nric,\r\n          itemType: this.currentParams.itemType,\r\n          itemName: this.currentParams.itemName,\r\n          claimItemId: this.currentParams.claimItemId,\r\n          latestStatus: this.currentParams.latestStatus,\r\n          latestStatusDesc: this.currentParams.latestStatusDesc,\r\n          latestStatusCode: this.currentParams.latestStatusCode\r\n        }});\r\n    }else{\r\n      //proceed to submit  straight\r\n      this.nspConfirmService.onConfirmPopup(event, \"submitClaimLetter\", null,\r\n        () => {\r\n          this.submitClaimLetter();\r\n        }\r\n      );\r\n    }\r\n  }\r\n  submitClaimLetter() {\r\n    this.mapCreateNewLetterFormGroupToDto();\r\n    this.claimService.submitClaimLetter(this.saveLetterItemDto, null).subscribe((resp:any) => {\r\n      if(resp.status === 200 && resp.body.data){\r\n        this.toastService.success(String(resp.body.success_message));\r\n        this.navigateCreateNewLetter(resp.body.data);\r\n       \r\n      }\r\n    },\r\n    (error: any) => {\r\n      console.log(\"error is\" + String(error?.error?.error_desc));\r\n      this.toastService.error(String(error?.error?.error_desc));\r\n    });\r\n  }\r\n\r\n  reGroupForm(): any[]{\r\n    let fullClaimArr:any[]  = [];\r\n    // params?.letterTypeCode === 'S06'\r\n    const additionalCaseIdArr = (this.createNewLetterForm.get('additionalCaseIdArr').value as any[]);\r\n    const itemList:any[] = [];\r\n    let currentCaseIdObj;\r\n    if(this.existingLetterFormObj){\r\n      const mainClaim = this.existingLetterFormObj['mainClaim'];\r\n      currentCaseIdObj = {\r\n        caseId: mainClaim.caseId,\r\n        claimId: mainClaim.claimId,\r\n        latestStatus: mainClaim.latestStatus,\r\n        latestStatusDesc: mainClaim.latestStatusDesc,\r\n        latestStatusCode: mainClaim.latestStatusCode,\r\n        itemList: mainClaim.itemList,\r\n        verifier: null,\r\n        claimOpt: mainClaim.claimOpt,\r\n        display: mainClaim.caseId.concat(\" \").concat(this.getClaimOptionName(mainClaim.claimOpt)).concat(\" (\").concat(mainClaim.latestStatusDesc).concat(\")\"),\r\n        trgStartDte: mainClaim.trgStartDte,\r\n        trgEndDte: mainClaim.trgEndDte,\r\n      }\r\n    }else{\r\n      //for main claim\r\n    \r\n      (this.createNewLetterForm.get('claimItemObjList').value as any[])?.forEach((x:any)=>{\r\n        itemList.push({\r\n          claimItemId: x.claimItemId,\r\n          itemName: x.itemName,\r\n          itemType: x.itemType,\r\n          claimId:  this.currentParams.claimId,\r\n          caseId:  this.currentParams.caseId,\r\n          latestItemStatusCode: x.latestItemStatusCode,\r\n          latestItemStatusDesc:x.latestItemStatusDesc\r\n\r\n        })\r\n      })\r\n      currentCaseIdObj = {\r\n        caseId: this.currentParams.caseId,\r\n        claimId: this.currentParams.claimId,\r\n        latestStatus: this.currentParams.latestStatus,\r\n        latestStatusDesc: this.currentParams.latestStatusDesc,\r\n        latestStatusCode: this.currentParams.latestStatusCode,\r\n        itemList,\r\n        verifier: this.currentParams.verifier,\r\n        verifierInit: this.currentParams.verifierInit,\r\n        claimOpt: this.defaultClaimOpt,\r\n        display: this.currentParams.caseId.concat(\" \").concat(this.getClaimOptionName(this.defaultClaimOpt)).concat(\" (\").concat(this.currentParams.latestStatusDesc).concat(\")\"),\r\n        trgStartDte: this.currentParams.trgStartDte,\r\n        trgEndDte: this.currentParams.trgEndDte,\r\n      }\r\n    \r\n    }\r\n    additionalCaseIdArr.unshift(currentCaseIdObj);\r\n    fullClaimArr = additionalCaseIdArr;\r\n\r\n    return fullClaimArr;\r\n\r\n  }\r\n\r\n  openDialog(event: Event,type: string): void{\r\n    this.nspConfirmService.onConfirmPopup(event, type, null,\r\n      () => {\r\n        switch (type) {\r\n          case 'confirmUpdate':\r\n            this.updateSubmittedLetterForm();\r\n            break;\r\n          case 'confirmDelete':\r\n            this.deleteLetterForm();\r\n            break;\r\n        }\r\n      }\r\n    );\r\n  } \r\n\r\n  //for non recomp letters, revert all previously changed item status to pend verify\r\n  updateSubmittedLetterForm():void{\r\n    if(this.existingLetterFormObj && this.existingLetterFormObj.letterTypeCode!=='S12'&& \r\n    this.existingLetterFormObj && this.existingLetterFormObj.letterTypeCode!=='E08'){\r\n      console.log(\"the letter type, \", this.existingLetterFormObj.letterTypeCode)\r\n      let params = new HttpParams();\r\n      params = params.append(\"letterFormId\", this.existingLetterFormObj? this.existingLetterFormObj.letterFormId: this.currentParams.letterFormId);\r\n      this.claimService.updateSubmittedClaimLetter(null, {params}).subscribe((resp:any) => {\r\n        if(resp.status === 200 && resp.body.data){\r\n          this.toastService.success(String(resp.body.success_message));\r\n          this.navigateCreateNewLetter(resp.body.data);\r\n        }\r\n      },\r\n      (error: any) => {\r\n        console.log(\"error is\" + String(error?.error?.error_desc));\r\n        this.toastService.error(String(error?.error?.error_desc));\r\n      });\r\n    }\r\n\r\n  }\r\n\r\n  deleteLetterForm():void{\r\n    console.log(\"delete\")\r\n    if(this.existingLetterFormObj && this.existingLetterFormObj.letterTypeCode!=='S12' && \r\n    this.existingLetterFormObj && this.existingLetterFormObj.letterTypeCode!=='E08'){\r\n      console.log(\"the letter type, \", this.existingLetterFormObj.letterTypeCode);\r\n      let params = new HttpParams();\r\n      params = params.append(\"letterFormId\", this.existingLetterFormObj? this.existingLetterFormObj.letterFormId: this.currentParams.letterFormId);\r\n      this.claimService.deleteSubmittedClaimLetter(null, {params}).subscribe((resp:any) => {\r\n        if(resp.status === 200){\r\n          this.toastService.success(String(resp.body.success_message));\r\n          //navigate to Claim Letter window with initially  saved activated route\r\n          //activated route will not be persisted after window is closed\r\n          this.navigateClaimLetter();\r\n          \r\n        }\r\n      },\r\n      (error: any) => {\r\n        console.log(\"error is\" + String(error?.error?.error_desc));\r\n        this.toastService.error(String(error?.error?.error_desc));\r\n      });\r\n    }\r\n\r\n  }\r\n\r\n  redirectTo(commands: any[], extras:NavigationExtras){\r\n    this.router.navigateByUrl('/', {skipLocationChange: true}).then(()=>\r\n    this.router.navigate(commands, extras));\r\n }\r\n\r\n getListOfAdditionalCaseIdsWOtherVerifiers():string{\r\n  const fullArr:any[] = [];\r\n  const baseArr = (this.createNewLetterForm.get('additionalCaseIdData').value as any[]);\r\n\r\n  if(baseArr.length>0){\r\n    const unselectedVerifier = (baseArr.find(x=> x.value === \"unselected\")?.items as any[])?.map(x=>{ return {\r\n      verifier:String(x.verifier),\r\n      caseId:String(x.caseId),\r\n      verifierInit: String(x.verifierInit)\r\n    }});\r\n    const selectedVerifier = (baseArr.find(x=> x.value === \"selected\")?.items as any[])?.map(x=>{ return {\r\n      verifier: String(x.verifier),\r\n      caseId:String(x.caseId),\r\n      verifierInit: String(x.verifierInit)\r\n    }});\r\n    if(unselectedVerifier?.length>0){\r\n      unselectedVerifier.forEach(x=>{\r\n        if(x.verifier!== this.currentAccount.subjectId){\r\n          fullArr.push(x.caseId.concat(\"(\").concat(x.verifierInit).concat(\")\"));\r\n        }\r\n      })\r\n    }\r\n    if(selectedVerifier?.length>0){\r\n      selectedVerifier.forEach(x=>{\r\n        if(x.verifier!== this.currentAccount.subjectId){\r\n          fullArr.push(x.caseId.concat(\"  (\").concat(x.verifierInit).concat(\")\"));\r\n        }\r\n      })    \r\n    }\r\n  }\r\n  return fullArr.join(\", \");\r\n }\r\n}\r\n\r\n\r\n","<button pButton label=\"TESTER\" (click)=\"tester()\"></button>\r\n\r\n\r\n<form [formGroup]=\"createNewLetterForm\">\r\n    <div class =\"upper-form\">\r\n        <div class = \"grid col-12\" [style]=\"{'margin-bottom':'1em'}\">\r\n            <span *ngIf =\"existingLetterFormObj; else newClaimTitle\"><h5>{{ existingLetterFormObj.mainClaim?.caseId }} {{ existingLetterFormObj.letterTypeTitle}} </h5></span>\r\n            <ng-template #newClaimTitle>\r\n                <h5>{{ currentParams?.caseId }} {{ currentParams?.letterTypeTitle}} </h5>\r\n            </ng-template>\r\n\r\n        </div>\r\n        <hr>\r\n        <!-- [options]=\"additionalCaseIdData\" -->\r\n        <div class = \"grid col-12 align-items-center\" *ngIf = \"currentParams?.letterTypeCode === 'S06' || currentParams?.letterTypeCode === 'E04'\" >\r\n            <label class = \"col-1\">Additional Case ID:</label>\r\n            <p-multiSelect  class = \"col-11 multiselect-custom\" [style] = \"{'width':'100%'}\"  *ngIf = \"!existingLetterFormObj ||  (existingLetterFormObj && existingLetterFormObj.submittedDt===0); else labelAdditionalCaseId\"\r\n            display=\"chip\" [options]=\"this.createNewLetterForm.get('additionalCaseIdData').value\" formControlName =\"additionalCaseIdArr\" optionLabel=\"display\"\r\n            optionDisabled=\"isDisabled\" (onPanelHide) = \"reconMultiSelect()\" [group]=\"true\"\r\n            >\r\n            <ng-template let-claim pTemplate=\"group\">\r\n                <div>\r\n                    <div>{{ claim.display }}</div>\r\n                </div>\r\n            </ng-template>\r\n            <!-- <ng-template let-claim pTemplate=\"item\">\r\n                <div>\r\n                    <div>{{ claim.display }}</div>\r\n                </div>\r\n            </ng-template> -->\r\n\r\n        </p-multiSelect>\r\n        <ng-template #labelAdditionalCaseId>\r\n            <span>\r\n                {{ getLabelAdditionalCaseId() }}\r\n            </span>\r\n        </ng-template>\r\n        <!-- has change is {{ hasChanged }} -->\r\n        </div>\r\n        <br>\r\n        <div class = \"grid col-12 align-items-center\" *ngIf=\"currentParams?.letterTypeCode === 'S06' && (!existingLetterFormObj ||  (existingLetterFormObj && existingLetterFormObj.submittedDt===0))\">\r\n            <div class=\"flex justify-content-start gap-4 input-group\" formArrayName = \"claimOptionArr\" >\r\n                <div *ngFor=\"let category of claimOptionArr?.controls; let i = index\" [formGroupName] = \"i\" class=\"field-checkbox\">\r\n                    <p-checkbox  [formControl]=\"getInnerFormControl(claimOptionArr, i)\"  [binary]=\"true\" (onChange) = \"getAdditionalClaimId()\"></p-checkbox>\r\n                    <label>{{claimOptionData[i].name}}&nbsp;</label>\r\n                 </div>\r\n            </div>\r\n            <!-- (onChange) = \"getAdditionalClaimId()\" -->\r\n        </div>\r\n        <div  *ngIf = \"currentParams?.letterTypeCode === 'S06' || currentParams?.letterTypeCode === 'E04'\">\r\n            <span><i class=\"pi pi-info-circle\"></i>&nbsp;Claims belonging to other Verifiers:&nbsp; {{ listOfAdditionalCaseIdsWOtherVerifiers }}\r\n            </span>\r\n            <br>\r\n        </div>\r\n        <div formArrayName=\"claimItemArr\">\r\n            <p-table [value]=\"claimItemArr?.controls\"\r\n                [filterDelay]=\"0\"\r\n                [loading] = \"loading\"\r\n                styleClass=\"p-datatable-gridlines p-datatable-striped\"\r\n                #dataTable\r\n                [scrollable]=\"true\" scrollHeight=\"50vh\"\r\n                >\r\n\r\n                <ng-template pTemplate=\"header\" let-columns>\r\n                    <tr>\r\n                        <th scope=\"col\" style=\"max-width:40%\">Claims\r\n                        </th>\r\n                        <th scope=\"col\" style=\"max-width:20%\">Item\r\n                        </th>\r\n                        <th scope=\"col\" >Category\r\n                        </th>\r\n                    </tr>\r\n                </ng-template>\r\n                <ng-template pTemplate=\"body\" let-data let-rowIndex = \"rowIndex\" let-columns=\"columns\">\r\n                    <tr [formGroupName]=\"rowIndex\">\r\n                        <td style=\"max-width:40%\">\r\n                        <ul style=\"list-style-type:none;\">\r\n                            <li *ngFor = \"let detail of data.value.claimDetail\">\r\n                                {{ detail  | defaultString }}\r\n                            </li>\r\n                        </ul>\r\n                        </td>\r\n                        <td  style=\"max-width:20%\">{{ data.value.itemName  | defaultString}}</td>\r\n                        <td  formArrayName=\"itemCategory\" >\r\n                            <ul [style]=\"{'list-style-type':'none', 'width':'100%'}\">\r\n\r\n                            <li *ngFor=\"let ctrl of data?.get('itemCategory')?.controls; let i = index\">\r\n                                <div  class=\"grid \">\r\n                                    <div  class = \"col-10\" *ngIf = \"!getInnerFACtrl(ctrl, 'catConfirmed').value; else hyperLinkedCategory\">\r\n\r\n                                        <p-dropdown [options]=\"itemCategoryList\"   [autoDisplayFirst] = false\r\n                                        [style]=\"{'width':'90%'}\" [formControl]=\"getInnerFACtrl(ctrl, 'category')\" optionLabel=\"label\" placeholder = \"Select Category\"\r\n                                        appendTo=\"body\"\r\n                                        >\r\n                                        </p-dropdown>\r\n\r\n                                        &nbsp;\r\n                                    </div>\r\n                                    <div class = \"col-2\" *ngIf = \"!existingLetterFormObj || existingLetterFormObj && existingLetterFormObj.submittedDt===0\">\r\n                                        <button *ngIf = \"!getInnerFACtrl(ctrl, 'catConfirmed').value; else removeButton\" pButton pRipple type=\"button\" icon=\"pi pi-plus\" class=\"p-button-rounded\" (click)=\"navigateChecklistItem(data.value.claimDetail,data.value.claimIdClaimItemMap,\r\n                                        data.value.itemName, getInnerFACtrl(ctrl, 'category').value, getInnerFACtrl(ctrl, 'model')?.value, null, i)\" [disabled]= ctrl.invalid></button>\r\n                                        <ng-template #removeButton>\r\n                                            <button pButton pRipple type=\"button\" icon=\"pi pi-minus\" class=\"p-button-rounded p-button-danger\" (click)=\"onRemoveCategory(data?.get('itemCategory'), i)\"></button>\r\n                                        </ng-template>\r\n                                    </div>\r\n                                    <ng-template #hyperLinkedCategory>\r\n                                        <div class=\"col-10\" style=\"display:flex; align-items:center\">\r\n                                            <a href='javascript:' (click)=\"navigateChecklistItem(data.value.claimDetail,data.value.claimIdClaimItemMap,\r\n                                        data.value.itemName, getInnerFACtrl(ctrl, 'category')?.value, getInnerFACtrl(ctrl, 'model')?.value, getInnerFACtrl(ctrl, 'resolvedModel')?.value, i)\">{{ getInnerFACtrl(ctrl, 'category')?.value?.label }}</a>\r\n                                        </div>\r\n                                    </ng-template>\r\n                                </div>\r\n                                <hr *ngIf=\"i+1<data?.get('itemCategory')?.controls.length\">\r\n                            </li>\r\n                            </ul>\r\n\r\n                            <!-- <div  class=\"grid\" *ngFor=\"let ctrl of data?.get('itemCategory')?.controls; let i = index\">\r\n                                    <div class = \"col-10\"  *ngIf = \"!getInnerFACtrl(ctrl, 'catConfirmed').value; else hyperLinkedCategory\">\r\n\r\n                                        <p-dropdown [options]=\"itemCategoryList\"   [autoDisplayFirst] = false\r\n                                        [style]=\"{'width':'90%'}\" [formControl]=\"getInnerFACtrl(ctrl, 'category')\" optionLabel=\"label\" placeholder = \"Select Category\">\r\n                                        </p-dropdown>\r\n\r\n                                        &nbsp;\r\n                                    </div>\r\n                                    <div class = \"col-2\" *ngIf = \"!existingLetterFormObj || existingLetterFormObj && existingLetterFormObj.submittedDt===0\">\r\n                                        <button *ngIf = \"!getInnerFACtrl(ctrl, 'catConfirmed').value; else removeButton\" pButton pRipple type=\"button\" icon=\"pi pi-plus\" class=\"p-button-rounded\" (click)=\"navigateChecklistItem(data.value.claimDetail,data.value.claimIdClaimItemMap,\r\n                                        data.value.itemName, getInnerFACtrl(ctrl, 'category').value, getInnerFACtrl(ctrl, 'model')?.value, null, i)\" [disabled]= ctrl.invalid></button>\r\n                                        <ng-template #removeButton>\r\n                                            <button pButton pRipple type=\"button\" icon=\"pi pi-minus\" class=\"p-button-rounded p-button-danger\" (click)=\"onRemoveCategory(data?.get('itemCategory'), i)\"></button>\r\n                                        </ng-template>\r\n                                    </div>\r\n                                    <ng-template #hyperLinkedCategory>\r\n                                        <div class=\"col-10\" style=\"display:flex; align-items:center\">\r\n                                            <a href='javascript:' (click)=\"navigateChecklistItem(data.value.claimDetail,data.value.claimIdClaimItemMap,\r\n                                        data.value.itemName, getInnerFACtrl(ctrl, 'category')?.value, getInnerFACtrl(ctrl, 'model')?.value, getInnerFACtrl(ctrl, 'resolvedModel')?.value, i)\">{{ getInnerFACtrl(ctrl, 'category')?.value?.label }}</a>\r\n                                        </div>\r\n                                    </ng-template>\r\n\r\n                                <hr *ngIf=\"i+1<data?.get('itemCategory')?.controls.length\">\r\n                            </div> -->\r\n                        </td>\r\n                    </tr>\r\n                </ng-template>\r\n                <ng-template pTemplate=\"emptymessage\">\r\n                    <tr>\r\n                        <td colspan=\"3\">No records found.</td>\r\n                    </tr>\r\n                </ng-template>\r\n            </p-table>\r\n        </div>\r\n\r\n    </div>\r\n      <!-- [style]= \"{'height': '100vh','position':'relative'}\" -->\r\n    <div class = \"flex footer-button\" >\r\n        <div class = \"flex col-6 justify-content-start flex-wrap\">\r\n            <button   pButton label=\"Cancel\" (click) = \"onCancel()\">\r\n            </button>\r\n        </div>\r\n        <div class = \"flex col-6  justify-content-end gap-2 flex-wrap\">\r\n            <!-- TODO hidden when  letter is generated -->\r\n            <!-- && existingLetterFormObj.submittedDt!==0 -->\r\n            <button *ngIf=\"existingLetterFormObj\" pButton label=\"Delete Letter\" (click) = \"openDialog($event, 'confirmDelete')\" class=\"p-button-danger\">\r\n            </button>\r\n            <button  *ngIf=\"!existingLetterFormObj || existingLetterFormObj && existingLetterFormObj.submittedDt===0\" pButton label=\"Save Letter\" (click) = \"onSave()\">\r\n            </button>\r\n            <button   pButton label=\"View Letter\" (click)=\"onRedirectViewLetter()\" [disabled]=\"hasChanged\">\r\n            </button>\r\n            <button *ngIf=\"existingLetterFormObj && existingLetterFormObj.submittedDt!==0\"  pButton label=\"Update Letter\" (click) = \"openDialog($event, 'confirmUpdate')\" class=\"p-button-warning\">\r\n            </button>\r\n            <button *ngIf=\"!existingLetterFormObj || existingLetterFormObj && existingLetterFormObj.submittedDt===0\"  pButton label=\"Submit Letter\" (click) = \"onSubmit()\" class=\"p-button-success\">\r\n            </button>\r\n        </div>\r\n    </div>\r\n\r\n</form>\r\n\r\n\r\n<p-dialog header=\"View Letter\" [(visible)]=\"displayPreviewLetterDialog.display\" [modal]=\"true\" [closable]=\"false\"\r\n          [style]=\"{width: '60vw', height:'100%'}\" [dismissableMask]=\"true\" [draggable]=\"false\" [resizable]=\"false\" >\r\n    <div *ngIf=\"previewLetterUrl != undefined\" style=\"height: 100%\">\r\n        <object [attr.data]=\"previewLetterUrl\" type=\"application/pdf\" width=\"100%\" height=\"100%\"></object>\r\n    </div>\r\n\r\n    <ng-template pTemplate=\"footer\">\r\n        <button pButton class=\"p-button-danger\" label=\"Close\" (click)=\"displayPreviewLetterDialog.display=false\"\r\n                [style]=\"{'margin-left': '.5em' , 'margin-bottom': '.5em'}\"></button>\r\n    </ng-template>\r\n</p-dialog>\r\n\r\n<p-dialog header=\"View Letter\" [(visible)]=\"displayGeneratedLetterDialog.display\" [modal]=\"true\" [closable]=\"false\"\r\n          [style]=\"{width: '60vw', height:'100%'}\" [dismissableMask]=\"true\" [draggable]=\"false\" [resizable]=\"false\" >\r\n    <div *ngIf=\"generatedLetterUrl != undefined\" style=\"height: 100%\">\r\n        <object [attr.data]=\"generatedLetterUrl\" type=\"application/pdf\" width=\"100%\" height=\"100%\"></object>\r\n    </div>\r\n\r\n    <ng-template pTemplate=\"footer\">\r\n        <button pButton class=\"p-button-danger\" label=\"Close\" (click)=\"displayGeneratedLetterDialog.display=false\"\r\n                [style]=\"{'margin-left': '.5em' , 'margin-bottom': '.5em'}\"></button>\r\n    </ng-template>\r\n</p-dialog>\r\n\r\n<p-confirmPopup key = \"submitClaimLetter\" header=\"Confirmation\" icon=\"fa fa-question-circle\" width=\"425\"></p-confirmPopup>\r\n<p-confirmPopup key = \"confirmUpdate\" header=\"Confirmation\" icon=\"fa fa-question-circle\" width=\"425\"></p-confirmPopup>\r\n<p-confirmPopup key = \"confirmDelete\" header=\"Confirmation\" icon=\"fa fa-question-circle\" width=\"425\"></p-confirmPopup>\r\n\r\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}