{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AuditLogService = void 0;\nconst tslib_1 = require(\"tslib\");\nconst operators_1 = require(\"rxjs/operators\");\nconst request_util_1 = require(\"app/core/request/request-util\");\nconst app_constants_1 = require(\"../../../app.constants\");\nconst i0 = tslib_1.__importStar(require(\"@angular/core\"));\nconst i1 = tslib_1.__importStar(require(\"@angular/common/http\"));\nclass AuditLogService {\n  constructor(http) {\n    this.http = http;\n    this.resourceUrlForAuditList = app_constants_1.SERVER_API_URL + 'api/log/auditLog';\n    this.resourceUrlForExportLog = app_constants_1.SERVER_API_URL + 'api/log/exportCSV';\n  }\n  query(req) {\n    const params = (0, request_util_1.createRequestOption)(req);\n    return this.http.get(this.resourceUrlForAuditList, {\n      params,\n      observe: 'response'\n    }).pipe((0, operators_1.map)(res => this.convertArrayResponse(res)));\n  }\n  exportToCSV(req) {\n    const params = (0, request_util_1.createRequestOption)(req);\n    return this.http.get(this.resourceUrlForExportLog, {\n      params,\n      observe: 'response',\n      responseType: 'text'\n    });\n  }\n  convertArrayResponse(res) {\n    const jsonResponse = res.body;\n    const body = [];\n    for (let i = 0; i < jsonResponse.length; i++) {\n      body.push(jsonResponse[i]);\n    }\n    return res.clone({\n      body\n    });\n  }\n}\nexports.AuditLogService = AuditLogService;\nAuditLogService.ɵfac = function AuditLogService_Factory(t) {\n  return new (t || AuditLogService)(i0.ɵɵinject(i1.HttpClient));\n};\nAuditLogService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuditLogService,\n  factory: AuditLogService.ɵfac\n});","map":{"version":3,"mappings":";;;;;;;AAGA;AACA;AACA;;;AAEA,MACaA,eAAe;EAI1BC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAHhB,4BAAuB,GAAGC,8BAAc,GAAG,kBAAkB;IAC7D,4BAAuB,GAAGA,8BAAc,GAAG,mBAAmB;EAE/B;EAEvCC,KAAK,CAACC,GAAS;IACb,MAAMC,MAAM,GAAe,sCAAmB,EAACD,GAAG,CAAC;IACnD,OAAO,IAAI,CAACH,IAAI,CACbK,GAAG,CAAC,IAAI,CAACC,uBAAuB,EAAE;MAAEF,MAAM;MAAEG,OAAO,EAAE;IAAU,CAAE,CAAC,CAClEC,IAAI,CAAC,mBAAG,EAAEC,GAAsB,IAAK,IAAI,CAACC,oBAAoB,CAACD,GAAG,CAAC,CAAC,CAAC;EAC1E;EAEAE,WAAW,CAACR,GAAS;IACnB,MAAMC,MAAM,GAAe,sCAAmB,EAACD,GAAG,CAAC;IACnD,OAAO,IAAI,CAACH,IAAI,CAACK,GAAG,CAAC,IAAI,CAACO,uBAAuB,EAAE;MAAER,MAAM;MAAEG,OAAO,EAAE,UAAU;MAAEM,YAAY,EAAE;IAAM,CAAE,CAAC;EAC3G;EAEQH,oBAAoB,CAACD,GAAwB;IACnD,MAAMK,YAAY,GAAUL,GAAG,CAACM,IAAW;IAC3C,MAAMA,IAAI,GAAU,EAAE;IACtB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,YAAY,CAACG,MAAM,EAAED,CAAC,EAAE,EAAE;MAC5CD,IAAI,CAACG,IAAI,CAACJ,YAAY,CAACE,CAAC,CAAC,CAAC;;IAE5B,OAAOP,GAAG,CAACU,KAAK,CAAC;MAAEJ;IAAI,CAAE,CAAC;EAC5B;;AA1BFK;;mBACatB,eAAe;AAAA;;SAAfA,eAAe;EAAAuB,SAAfvB,eAAe;AAAA","names":["AuditLogService","constructor","http","app_constants_1","query","req","params","get","resourceUrlForAuditList","observe","pipe","res","convertArrayResponse","exportToCSV","resourceUrlForExportLog","responseType","jsonResponse","body","i","length","push","clone","exports","factory"],"sourceRoot":"","sources":["C:\\Users\\D1347074\\Desktop\\projects 2\\nspayiiapp\\src\\main\\webapp\\app\\admin\\entity-audit\\audit-log\\audit-log.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpParams, HttpResponse } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { createRequestOption } from 'app/core/request/request-util';\r\nimport { SERVER_API_URL } from '../../../app.constants';\r\n\r\n@Injectable()\r\nexport class AuditLogService {\r\n  private resourceUrlForAuditList = SERVER_API_URL + 'api/log/auditLog';\r\n  private resourceUrlForExportLog = SERVER_API_URL + 'api/log/exportCSV';\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  query(req?: any): Observable<HttpResponse<any>> {\r\n    const params: HttpParams = createRequestOption(req);\r\n    return this.http\r\n      .get(this.resourceUrlForAuditList, { params, observe: 'response' })\r\n      .pipe(map((res: HttpResponse<any>) => this.convertArrayResponse(res)));\r\n  }\r\n\r\n  exportToCSV(req?: any): Observable<HttpResponse<string>> {\r\n    const params: HttpParams = createRequestOption(req);\r\n    return this.http.get(this.resourceUrlForExportLog, { params, observe: 'response', responseType: 'text' });\r\n  }\r\n\r\n  private convertArrayResponse(res: HttpResponse<any[]>): HttpResponse<any[]> {\r\n    const jsonResponse: any[] = res.body as any;\r\n    const body: any[] = [];\r\n    for (let i = 0; i < jsonResponse.length; i++) {\r\n      body.push(jsonResponse[i]);\r\n    }\r\n    return res.clone({ body });\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}