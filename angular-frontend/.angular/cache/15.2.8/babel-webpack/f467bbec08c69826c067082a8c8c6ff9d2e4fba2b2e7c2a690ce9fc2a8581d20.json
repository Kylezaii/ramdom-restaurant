{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ECClaimService = void 0;\nconst tslib_1 = require(\"tslib\");\nconst http_1 = require(\"@angular/common/http\");\nconst i0 = tslib_1.__importStar(require(\"@angular/core\"));\nconst i1 = tslib_1.__importStar(require(\"app/core/config/application-config.service\"));\nconst i2 = tslib_1.__importStar(require(\"app/shared/service/ns2-http.service\"));\nconst i3 = tslib_1.__importStar(require(\"@angular/common/http\"));\nclass ECClaimService {\n  constructor(applicationConfigService, ns2Http, http) {\n    this.applicationConfigService = applicationConfigService;\n    this.ns2Http = ns2Http;\n    this.http = http;\n    this.resourceUrl = this.applicationConfigService.getEndpointFor('api/claim/emp-claim');\n    this.nsManInfoResource = this.applicationConfigService.getEndpointFor('api/common/nsman');\n    this.personnelInfoResource = this.applicationConfigService.getEndpointFor('api/common/nsman');\n    this.companyInfoResource = this.applicationConfigService.getEndpointFor('api/company');\n    this.resourceUrlForFindMultipleCodeType = 'api/codes';\n    this.headers = new http_1.HttpHeaders().set('Content-Type', 'application/json');\n  }\n  saveHardcopyEmpClaim(payload) {\n    const path = this.resourceUrl + '/save_hardcopy_emp_claim';\n    return this.ns2Http.post(path, JSON.stringify(payload));\n  }\n  getEmpClaimRequestById(params) {\n    const path = this.resourceUrl + '/get_emp_claim_request_by_id';\n    return this.ns2Http.get(path, {\n      params\n    });\n  }\n  // getEmpClaimRequestById(empClaimId: string): Observable<any>{\n  //   const path = this.resourceUrl + '/get_emp_claim_request_by_id/' + empClaimId;\n  //   return this.ns2Http.get(path);\n  // }\n  // getEmpClaimRequestByCaseId(caseId: string): Observable<any>{\n  //   const path = this.resourceUrl + '/get_emp_claim_request_by_case_id/' + caseId;\n  //   return this.ns2Http.get(path);\n  // }\n  getEmpClaimRequestByCaseId(params) {\n    const path = this.resourceUrl + '/get_emp_claim_request_by_case_id';\n    return this.ns2Http.get(path, {\n      params\n    });\n  }\n  getNsmanInfo(nric) {\n    const path = this.nsManInfoResource + '/' + nric;\n    return this.ns2Http.get(path);\n  }\n  getPersonnelInfo(nric) {\n    const path = this.nsManInfoResource + '/' + nric;\n    return this.ns2Http.get(path);\n  }\n  getCPFSnapshotsAndRealtimeForClaimPopUp(caseId) {\n    const path = this.resourceUrl + '/cpf_pop_up/' + caseId;\n    return this.http.get(path);\n  }\n  getItemDetailsByCaseId(caseId) {\n    const path = this.resourceUrl + '/get_claim_item_detail_by_case_id/' + caseId;\n    return this.ns2Http.get(path);\n  }\n  getItemDetailsByEmpClaimId(empClaimId) {\n    const path = this.resourceUrl + '/get_claim_item_detail_by_emp_claim_id/' + empClaimId;\n    return this.ns2Http.get(path);\n  }\n  getItemChangeHistoryByCaseId(caseId) {\n    const path = this.resourceUrl + '/get_claim_item_history_by_case_id/' + caseId;\n    return this.ns2Http.get(path);\n  }\n  getCpfSnapshotByEmpClaimId(empClaimId) {\n    const path = this.resourceUrl + '/get_cpf_snapshot_by_emp_claim_id/' + empClaimId;\n    return this.ns2Http.get(path);\n  }\n  //TODO: temporary get realtime CPF\n  getRealtimeCpf(params) {\n    const path = this.resourceUrl + '/get_realtime_cpf';\n    return this.ns2Http.get(path, {\n      params\n    });\n  }\n  retrieveLatestOwners(params) {\n    const path = `${this.resourceUrl}/retrieve_latest_owner`;\n    return this.http.get(path, {\n      params\n    });\n  }\n  retrieveViewCpfDeviation(params) {\n    const path = `${this.resourceUrl}/retrieve_cpf_deviation`;\n    return this.http.get(path, {\n      params\n    });\n  }\n  updateEmpClaim(empClaimRequest) {\n    const path = this.resourceUrl + '/update_emp_claim';\n    return this.ns2Http.post(path, JSON.stringify(empClaimRequest));\n  }\n  getInitialEmpClaimByEmpClaimId(empClaimId) {\n    const path = this.resourceUrl + '/get_initial_emp_claim/' + empClaimId;\n    return this.ns2Http.get(path);\n  }\n  getEClaimAdditionalInfoByEmpClaimId(empClaimId) {\n    const path = this.resourceUrl + '/get_eclaim_additional_info/' + empClaimId;\n    return this.ns2Http.get(path);\n  }\n  getOverlappingEmpClaim(params) {\n    const path = this.resourceUrl + '/get_overlapping_emp_claim';\n    return this.ns2Http.get(path, {\n      params\n    });\n  }\n  getCodes(codeTypes) {\n    return this.ns2Http.get(`${this.resourceUrlForFindMultipleCodeType}/${codeTypes}`);\n  }\n  getOverlappingEmpClaimWithCsn(params) {\n    const path = this.resourceUrl + '/get_overlapping_emp_claim_with_csn';\n    return this.ns2Http.get(path, {\n      params\n    });\n  }\n  getCabBlockByNric(nric) {\n    const path = this.resourceUrl + '/get_nsman_cab/' + nric;\n    return this.ns2Http.get(path);\n  }\n}\nexports.ECClaimService = ECClaimService;\nECClaimService.ɵfac = function ECClaimService_Factory(t) {\n  return new (t || ECClaimService)(i0.ɵɵinject(i1.ApplicationConfigService), i0.ɵɵinject(i2.Ns2HttpService), i0.ɵɵinject(i3.HttpClient));\n};\nECClaimService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ECClaimService,\n  factory: ECClaimService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["ECClaimService","constructor","applicationConfigService","ns2Http","http","getEndpointFor","http_1","set","saveHardcopyEmpClaim","payload","path","resourceUrl","post","JSON","stringify","getEmpClaimRequestById","params","get","getEmpClaimRequestByCaseId","getNsmanInfo","nric","nsManInfoResource","getPersonnelInfo","getCPFSnapshotsAndRealtimeForClaimPopUp","caseId","getItemDetailsByCaseId","getItemDetailsByEmpClaimId","empClaimId","getItemChangeHistoryByCaseId","getCpfSnapshotByEmpClaimId","getRealtimeCpf","retrieveLatestOwners","retrieveViewCpfDeviation","updateEmpClaim","empClaimRequest","getInitialEmpClaimByEmpClaimId","getEClaimAdditionalInfoByEmpClaimId","getOverlappingEmpClaim","getCodes","codeTypes","resourceUrlForFindMultipleCodeType","getOverlappingEmpClaimWithCsn","getCabBlockByNric","exports","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\D1347074\\Desktop\\projects 2\\nspayiiapp\\src\\main\\webapp\\app\\claim\\ec-claim\\service\\ec-claim.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { EmpClaimRequest } from '../model/EmpClaimRequest.model';\r\nimport {HttpClient, HttpHeaders, HttpParams, HttpResponse} from '@angular/common/http';\r\nimport { ApplicationConfigService } from 'app/core/config/application-config.service';\r\nimport { Ns2HttpService } from 'app/shared/service/ns2-http.service';\r\nimport {ICpfSnapshot} from \"app/claim/ec-claim/model/cpf-snapshot.model\";\r\nimport {Ns2Response} from \"app/shared/model/ns2-response.model\";\r\nimport {LatestClaimOwner} from \"app/claim/model/latest-claim-owner.model\";\r\nimport {CpfDeviation} from \"app/claim/ec-claim/model/cpf-deviation.model\";\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ECClaimService {\r\n\r\n  public resourceUrl = this.applicationConfigService.getEndpointFor('api/claim/emp-claim');\r\n  public nsManInfoResource = this.applicationConfigService.getEndpointFor('api/common/nsman');\r\n  public personnelInfoResource = this.applicationConfigService.getEndpointFor('api/common/nsman');\r\n  public companyInfoResource = this.applicationConfigService.getEndpointFor('api/company');\r\n  public resourceUrlForFindMultipleCodeType = 'api/codes';\r\n\r\n  hardcopyEcDto: EmpClaimRequest;\r\n  nsManInfo: any;\r\n\r\n  headers: HttpHeaders = new HttpHeaders().set('Content-Type', 'application/json');\r\n  constructor(private applicationConfigService: ApplicationConfigService,\r\n    private ns2Http: Ns2HttpService,\r\n    private http: HttpClient) { }\r\n\r\n  saveHardcopyEmpClaim(payload: EmpClaimRequest): Observable<any> {\r\n    const path = this.resourceUrl + '/save_hardcopy_emp_claim';\r\n    return this.ns2Http.post(path, JSON.stringify(payload));\r\n  }\r\n\r\n  getEmpClaimRequestById(params: HttpParams): Observable<any>{\r\n    const path = this.resourceUrl + '/get_emp_claim_request_by_id';\r\n    return this.ns2Http.get(path, {params});\r\n  }\r\n\r\n  // getEmpClaimRequestById(empClaimId: string): Observable<any>{\r\n  //   const path = this.resourceUrl + '/get_emp_claim_request_by_id/' + empClaimId;\r\n  //   return this.ns2Http.get(path);\r\n  // }\r\n\r\n  // getEmpClaimRequestByCaseId(caseId: string): Observable<any>{\r\n  //   const path = this.resourceUrl + '/get_emp_claim_request_by_case_id/' + caseId;\r\n  //   return this.ns2Http.get(path);\r\n  // }\r\n\r\n  getEmpClaimRequestByCaseId(params: HttpParams): Observable<any>{\r\n    const path = this.resourceUrl + '/get_emp_claim_request_by_case_id';\r\n    return this.ns2Http.get(path, {params});\r\n  }\r\n\r\n  getNsmanInfo(nric: string): Observable<any>{\r\n    const path = this.nsManInfoResource + '/' + nric;\r\n    return this.ns2Http.get(path);\r\n  }\r\n\r\n  getPersonnelInfo(nric: string): Observable<any>{\r\n    const path = this.nsManInfoResource + '/' + nric;\r\n    return this.ns2Http.get(path);\r\n  }\r\n\r\n  getCPFSnapshotsAndRealtimeForClaimPopUp(caseId: string): Observable<Ns2Response<ICpfSnapshot[]>>{\r\n    const path = this.resourceUrl + '/cpf_pop_up/' + caseId;\r\n    return this.http.get<Ns2Response<ICpfSnapshot[]>>(path);\r\n  }\r\n\r\n  getItemDetailsByCaseId(caseId: string): Observable<any> {\r\n    const path = this.resourceUrl + '/get_claim_item_detail_by_case_id/' + caseId;\r\n    return this.ns2Http.get(path);\r\n  }\r\n  \r\n  getItemDetailsByEmpClaimId(empClaimId: string): Observable<any> {\r\n    const path = this.resourceUrl + '/get_claim_item_detail_by_emp_claim_id/' + empClaimId;\r\n    return this.ns2Http.get(path);\r\n  }\r\n\r\n  getItemChangeHistoryByCaseId(caseId: string): Observable<any> {\r\n    const path = this.resourceUrl + '/get_claim_item_history_by_case_id/' + caseId;\r\n    return this.ns2Http.get(path);\r\n  }\r\n\r\n  getCpfSnapshotByEmpClaimId(empClaimId: string): Observable<any> {\r\n    const path = this.resourceUrl + '/get_cpf_snapshot_by_emp_claim_id/' + empClaimId;\r\n    return this.ns2Http.get(path);\r\n  }\r\n\r\n  //TODO: temporary get realtime CPF\r\n  getRealtimeCpf(params: HttpParams): Observable<any> {\r\n    const path = this.resourceUrl + '/get_realtime_cpf';\r\n    return this.ns2Http.get(path, {params});\r\n  }\r\n\r\n  retrieveLatestOwners(params: HttpParams): Observable<Ns2Response<LatestClaimOwner>> {\r\n    const path =`${this.resourceUrl}/retrieve_latest_owner`;\r\n    return this.http.get<Ns2Response<LatestClaimOwner>>(path,{params});\r\n  }\r\n\r\n  retrieveViewCpfDeviation(params: HttpParams): Observable<Ns2Response<CpfDeviation>> {\r\n    const path =`${this.resourceUrl}/retrieve_cpf_deviation`;\r\n    return this.http.get<Ns2Response<CpfDeviation>>(path,{params});\r\n  }\r\n\r\n  updateEmpClaim(empClaimRequest: EmpClaimRequest) {\r\n    const path = this.resourceUrl + '/update_emp_claim';\r\n    return this.ns2Http.post(path, JSON.stringify(empClaimRequest));\r\n  }\r\n  \r\n  getInitialEmpClaimByEmpClaimId(empClaimId: string): Observable<any> {\r\n    const path = this.resourceUrl + '/get_initial_emp_claim/' + empClaimId;\r\n    return this.ns2Http.get(path);\r\n  }\r\n\r\n  getEClaimAdditionalInfoByEmpClaimId(empClaimId: string): Observable<any> {\r\n    const path = this.resourceUrl + '/get_eclaim_additional_info/' + empClaimId;\r\n    return this.ns2Http.get(path);\r\n  }\r\n\r\n  getOverlappingEmpClaim(params: HttpParams): Observable<any> {\r\n    const path = this.resourceUrl + '/get_overlapping_emp_claim';\r\n    return this.ns2Http.get(path, {params});\r\n  }\r\n\r\n  getCodes(codeTypes: string): Observable<any> {\r\n    return this.ns2Http.get(`${this.resourceUrlForFindMultipleCodeType}/${codeTypes}`)\r\n  }\r\n\r\n  getOverlappingEmpClaimWithCsn(params: HttpParams): Observable<any> {\r\n    const path = this.resourceUrl + '/get_overlapping_emp_claim_with_csn';\r\n    return this.ns2Http.get(path, {params});\r\n  }\r\n\r\n  getCabBlockByNric(nric: string) {\r\n    const path = this.resourceUrl + '/get_nsman_cab/' + nric;\r\n    return this.ns2Http.get(path);\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}