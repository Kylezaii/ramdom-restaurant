{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ErrorHandlerInterceptor = void 0;\nconst tslib_1 = require(\"tslib\");\nconst operators_1 = require(\"rxjs/operators\");\nconst event_manager_service_1 = require(\"app/core/util/event-manager.service\");\nconst i0 = tslib_1.__importStar(require(\"@angular/core\"));\nconst i1 = tslib_1.__importStar(require(\"app/core/util/event-manager.service\"));\nconst i2 = tslib_1.__importStar(require(\"@angular/router\"));\nclass ErrorHandlerInterceptor {\n  constructor(eventManager, router) {\n    this.eventManager = eventManager;\n    this.router = router;\n  }\n  intercept(request, next) {\n    return next.handle(request).pipe((0, operators_1.tap)({\n      error: err => {\n        if (!(err.status === 401 && (err.message === '' || err.url?.includes('api/account')))) {\n          this.eventManager.broadcast(new event_manager_service_1.EventWithContent('nspay2App.httpError', err));\n        }\n        switch (err.status) {\n          case 401:\n            this.status = 401;\n            break;\n          case 403:\n            this.status = 403;\n            break;\n          case 404:\n            this.status = 404;\n            break;\n          case 500:\n            this.status = 500;\n            break;\n          case 502:\n            this.status = 502;\n            break;\n          case 503:\n            this.status = 503;\n            break;\n          case 504:\n            this.status = 504;\n            break;\n        }\n        if (this.status && this.status !== 401) {\n          this.router.navigate(['/error/' + this.status.toString()], err.error);\n          this.status = 0;\n        }\n        if (this.status && this.status === 401) {\n          this.router.navigate(['/login']);\n          this.status = 0;\n        }\n      }\n    }));\n  }\n}\nexports.ErrorHandlerInterceptor = ErrorHandlerInterceptor;\nErrorHandlerInterceptor.ɵfac = function ErrorHandlerInterceptor_Factory(t) {\n  return new (t || ErrorHandlerInterceptor)(i0.ɵɵinject(i1.EventManager), i0.ɵɵinject(i2.Router));\n};\nErrorHandlerInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ErrorHandlerInterceptor,\n  factory: ErrorHandlerInterceptor.ɵfac\n});","map":{"version":3,"mappings":";;;;;;;AAGA;AAEA;;;;AAEA,MACaA,uBAAuB;EAElCC,YAAoBC,YAA0B,EAAUC,MAAc;IAAlD,iBAAY,GAAZD,YAAY;IAAwB,WAAM,GAANC,MAAM;EAAW;EAEzEC,SAAS,CAACC,OAAyB,EAAEC,IAAiB;IACpD,OAAOA,IAAI,CAACC,MAAM,CAACF,OAAO,CAAC,CAACG,IAAI,CAC9B,mBAAG,EAAC;MACFC,KAAK,EAAGC,GAAsB,IAAI;QAChC,IAAI,EAAEA,GAAG,CAACC,MAAM,KAAK,GAAG,KAAKD,GAAG,CAACE,OAAO,KAAK,EAAE,IAAIF,GAAG,CAACG,GAAG,EAAEC,QAAQ,CAAC,aAAa,CAAC,CAAC,CAAC,EAAE;UACrF,IAAI,CAACZ,YAAY,CAACa,SAAS,CAAC,IAAIC,wCAAgB,CAAC,qBAAqB,EAAEN,GAAG,CAAC,CAAC;;QAE/E,QAAQA,GAAG,CAACC,MAAM;UAChB,KAAK,GAAG;YACN,IAAI,CAACA,MAAM,GAAG,GAAG;YACjB;UACF,KAAK,GAAG;YACN,IAAI,CAACA,MAAM,GAAG,GAAG;YACjB;UACF,KAAK,GAAG;YACN,IAAI,CAACA,MAAM,GAAG,GAAG;YACjB;UACF,KAAK,GAAG;YACN,IAAI,CAACA,MAAM,GAAG,GAAG;YACjB;UACF,KAAK,GAAG;YACN,IAAI,CAACA,MAAM,GAAG,GAAG;YACjB;UACF,KAAK,GAAG;YACN,IAAI,CAACA,MAAM,GAAG,GAAG;YACjB;UACF,KAAK,GAAG;YACN,IAAI,CAACA,MAAM,GAAG,GAAG;YACjB;QAAM;QAEV,IAAI,IAAI,CAACA,MAAM,IAAI,IAAI,CAACA,MAAM,KAAK,GAAG,EAAE;UACtC,IAAI,CAACR,MAAM,CAACc,QAAQ,CAAC,CAAC,SAAS,GAAG,IAAI,CAACN,MAAM,CAACO,QAAQ,EAAE,CAAC,EAAER,GAAG,CAACD,KAAK,CAAC;UACrE,IAAI,CAACE,MAAM,GAAG,CAAC;;QAEjB,IAAI,IAAI,CAACA,MAAM,IAAI,IAAI,CAACA,MAAM,KAAK,GAAG,EAAE;UACtC,IAAI,CAACR,MAAM,CAACc,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;UAChC,IAAI,CAACN,MAAM,GAAG,CAAC;;MAEnB;KACD,CAAC,CACH;EACH;;AA9CFQ;;mBACanB,uBAAuB;AAAA;;SAAvBA,uBAAuB;EAAAoB,SAAvBpB,uBAAuB;AAAA","names":["ErrorHandlerInterceptor","constructor","eventManager","router","intercept","request","next","handle","pipe","error","err","status","message","url","includes","broadcast","event_manager_service_1","navigate","toString","exports","factory"],"sourceRoot":"","sources":["C:\\Users\\D1347074\\Desktop\\projects 2\\nspayiiapp\\src\\main\\webapp\\app\\core\\interceptor\\error-handler.interceptor.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpInterceptor, HttpRequest, HttpErrorResponse, HttpHandler, HttpEvent } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { tap } from 'rxjs/operators';\r\nimport { Router } from '@angular/router';\r\nimport { EventManager, EventWithContent } from 'app/core/util/event-manager.service';\r\n\r\n@Injectable()\r\nexport class ErrorHandlerInterceptor implements HttpInterceptor {\r\n  status!: number;\r\n  constructor(private eventManager: EventManager, private router: Router) {}\r\n\r\n  intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n    return next.handle(request).pipe(\r\n      tap({\r\n        error: (err: HttpErrorResponse) => {\r\n          if (!(err.status === 401 && (err.message === '' || err.url?.includes('api/account')))) {\r\n            this.eventManager.broadcast(new EventWithContent('nspay2App.httpError', err));\r\n          }\r\n          switch (err.status) {\r\n            case 401:\r\n              this.status = 401;\r\n              break;\r\n            case 403:\r\n              this.status = 403;\r\n              break;\r\n            case 404:\r\n              this.status = 404;\r\n              break;\r\n            case 500:\r\n              this.status = 500;\r\n              break;\r\n            case 502:\r\n              this.status = 502;\r\n              break;\r\n            case 503:\r\n              this.status = 503;\r\n              break;\r\n            case 504:\r\n              this.status = 504;\r\n              break;\r\n          }\r\n          if (this.status && this.status !== 401) {\r\n            this.router.navigate(['/error/' + this.status.toString()], err.error);\r\n            this.status = 0;\r\n          }\r\n          if (this.status && this.status === 401) {\r\n            this.router.navigate(['/login']);\r\n            this.status = 0;\r\n          }\r\n        },\r\n      })\r\n    );\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}