{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ApplicationConfigService = void 0;\nconst tslib_1 = require(\"tslib\");\nconst i0 = tslib_1.__importStar(require(\"@angular/core\"));\nclass ApplicationConfigService {\n  constructor() {\n    this.endpointPrefix = '';\n  }\n  setEndpointPrefix(endpointPrefix) {\n    this.endpointPrefix = endpointPrefix;\n  }\n  getEndpointFor(api, microservice) {\n    if (microservice) {\n      return `${this.endpointPrefix}services/${microservice}/${api}`;\n    }\n    return `${this.endpointPrefix}${api}`;\n  }\n}\nexports.ApplicationConfigService = ApplicationConfigService;\nApplicationConfigService.ɵfac = function ApplicationConfigService_Factory(t) {\n  return new (t || ApplicationConfigService)();\n};\nApplicationConfigService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ApplicationConfigService,\n  factory: ApplicationConfigService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";;;;;;;;AAEA,MAGaA,wBAAwB;EAHrCC;IAIU,mBAAc,GAAG,EAAE;;EAE3BC,iBAAiB,CAACC,cAAsB;IACtC,IAAI,CAACA,cAAc,GAAGA,cAAc;EACtC;EAEAC,cAAc,CAACC,GAAW,EAAEC,YAAqB;IAC/C,IAAIA,YAAY,EAAE;MAChB,OAAO,GAAG,IAAI,CAACH,cAAc,YAAYG,YAAY,IAAID,GAAG,EAAE;;IAEhE,OAAO,GAAG,IAAI,CAACF,cAAc,GAAGE,GAAG,EAAE;EACvC;;AAfFE;;mBAGaP,wBAAwB;AAAA;;SAAxBA,wBAAwB;EAAAQ,SAAxBR,wBAAwB;EAAAS,YAFvB;AAAM","names":["ApplicationConfigService","constructor","setEndpointPrefix","endpointPrefix","getEndpointFor","api","microservice","exports","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\D1347074\\Desktop\\projects 2\\nspayiiapp\\src\\main\\webapp\\app\\core\\config\\application-config.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class ApplicationConfigService {\r\n  private endpointPrefix = '';\r\n\r\n  setEndpointPrefix(endpointPrefix: string): void {\r\n    this.endpointPrefix = endpointPrefix;\r\n  }\r\n\r\n  getEndpointFor(api: string, microservice?: string): string {\r\n    if (microservice) {\r\n      return `${this.endpointPrefix}services/${microservice}/${api}`;\r\n    }\r\n    return `${this.endpointPrefix}${api}`;\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}