{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.FileUploadValidator2 = void 0;\n/* Validate FileUpload Component for reactive form*/\nclass FileUploadValidator2 {\n  static maxFileLimit(fileLimit) {\n    console.log(\"filelimitssssss\", fileLimit);\n    return c => {\n      let rslt = null;\n      const fileArray = c.value;\n      if (fileArray.length > fileLimit) {\n        rslt = {\n          invalidMaxFileLimit: `Max number of file that can be uploaded is ${fileLimit}`\n        };\n      }\n      console.log(\"the rslt for fielimit\", rslt);\n      return rslt;\n    };\n  }\n  static maxSingleFileSize(maxfileSize) {\n    console.log(\"fileSize limit\", maxfileSize);\n    return c => {\n      const fileArray = c.value;\n      let rslt = null;\n      for (const file of fileArray) {\n        if (file && file.size > maxfileSize * 1000 * 1000) {\n          rslt = {\n            invalidMaxSingleFileSize: `Single File maximum size is ${maxfileSize} MB`\n          };\n          break;\n        }\n      }\n      console.log(\"the rslt for filesize\", rslt);\n      return rslt;\n    };\n  }\n  static maxMultipleFileSize(maxfileSize) {\n    return c => {\n      const fileArray = c.value;\n      let sum = 0;\n      fileArray.forEach(file => {\n        sum = sum + file.size;\n      });\n      if (sum > maxfileSize * 1000 * 1000) {\n        return {\n          invalidMaxMultiFileSize: `Multiple File maximum size is ${maxfileSize} MB`\n        };\n      }\n      return null;\n    };\n  }\n  static allowableExtension(extensionString) {\n    return c => {\n      if (extensionString) {\n        const arr = extensionString.split(\",\");\n        const fileArray = c.value;\n        console.log(\"the current files\", fileArray);\n        let rslt = null;\n        for (const file of fileArray) {\n          console.log(\"filename is \", file.name);\n          if (!this.endsWithAny(arr, file.name)) {\n            rslt = {\n              invalidFileExtension: \"Invalid file extensions. Extensions allowed are \" + extensionString\n            };\n            break;\n          }\n        }\n        console.log('the reslt', rslt);\n        return rslt;\n      } else {\n        return null;\n      }\n    };\n  }\n  static endsWithAny(suffixes, val) {\n    return suffixes.some(function (suffix) {\n      return val.endsWith(suffix.trim());\n    });\n  }\n}\nexports.FileUploadValidator2 = FileUploadValidator2;","map":{"version":3,"mappings":";;;;;;AAEA;AACA,MAAaA,oBAAoB;EAE/B,OAAOC,YAAY,CAACC,SAAiB;IACnCC,OAAO,CAACC,GAAG,CAAC,iBAAiB,EAAEF,SAAS,CAAC;IAEzC,OAAQG,CAAkB,IAAsC;MAC9D,IAAIC,IAAI,GAAG,IAAI;MAEf,MAAMC,SAAS,GAAWF,CAAC,CAACG,KAAK;MACjC,IAAID,SAAS,CAACE,MAAM,GAAGP,SAAS,EAAE;QAChCI,IAAI,GAAG;UAAEI,mBAAmB,EAAE,8CAA8CR,SAAS;QAAE,CAAE;;MAE3FC,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAAEE,IAAI,CAAC;MAC1C,OAAOA,IAAI;IACb,CAAC;EACH;EAEA,OAAOK,iBAAiB,CAACC,WAAmB;IAC1CT,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEQ,WAAW,CAAC;IAC1C,OAAQP,CAAkB,IAAsC;MAC9D,MAAME,SAAS,GAAWF,CAAC,CAACG,KAAK;MACjC,IAAIF,IAAI,GAAG,IAAI;MACf,KAAK,MAAMO,IAAI,IAAIN,SAAS,EAAE;QAC5B,IAAIM,IAAI,IAAIA,IAAI,CAACC,IAAI,GAAGF,WAAW,GAAG,IAAI,GAAG,IAAI,EAAE;UACjDN,IAAI,GAAG;YAAES,wBAAwB,EAAE,+BAA+BH,WAAW;UAAK,CAAE;UACpF;;;MAGJT,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAAEE,IAAI,CAAC;MAE1C,OAAOA,IAAI;IACb,CAAC;EACH;EAEA,OAAOU,mBAAmB,CAACJ,WAAmB;IAC5C,OAAQP,CAAkB,IAAsC;MAC9D,MAAME,SAAS,GAAWF,CAAC,CAACG,KAAK;MACjC,IAAIS,GAAG,GAAG,CAAC;MACXV,SAAS,CAACW,OAAO,CAACL,IAAI,IAAG;QACvBI,GAAG,GAAGA,GAAG,GAAGJ,IAAI,CAACC,IAAI;MACvB,CAAC,CAAC;MACF,IAAIG,GAAG,GAAGL,WAAW,GAAG,IAAI,GAAG,IAAI,EAAE;QACnC,OAAO;UAAEO,uBAAuB,EAAE,iCAAiCP,WAAW;QAAK,CAAE;;MACrF,OAAO,IAAI;IACf,CAAC;EACH;EAEA,OAAOQ,kBAAkB,CAACC,eAAuB;IAC/C,OAAQhB,CAAkB,IAAsC;MAC9D,IAAIgB,eAAe,EAAE;QACnB,MAAMC,GAAG,GAAaD,eAAe,CAACE,KAAK,CAAC,GAAG,CAAC;QAChD,MAAMhB,SAAS,GAAWF,CAAC,CAACG,KAAK;QACjCL,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAEG,SAAS,CAAC;QAC3C,IAAID,IAAI,GAAG,IAAI;QACf,KAAK,MAAMO,IAAI,IAAIN,SAAS,EAAE;UAC5BJ,OAAO,CAACC,GAAG,CAAC,cAAc,EAAES,IAAI,CAACW,IAAI,CAAC;UACtC,IAAI,CAAC,IAAI,CAACC,WAAW,CAACH,GAAG,EAAET,IAAI,CAACW,IAAI,CAAC,EAAE;YACrClB,IAAI,GAAG;cAAEoB,oBAAoB,EAAE,kDAAkD,GAAGL;YAAe,CAAE;YACrG;;;QAGJlB,OAAO,CAACC,GAAG,CAAC,WAAW,EAAEE,IAAI,CAAC;QAC9B,OAAOA,IAAI;OACZ,MAAM;QACL,OAAO,IAAI;;IAEf,CAAC;EACH;EAGA,OAAOmB,WAAW,CAACE,QAAkB,EAAEC,GAAW;IAChD,OAAOD,QAAQ,CAACE,IAAI,CAAC,UAAUC,MAAM;MACnC,OAAOF,GAAG,CAACG,QAAQ,CAACD,MAAM,CAACE,IAAI,EAAE,CAAC;IACpC,CAAC,CAAC;EACJ;;AA1EFC","names":["FileUploadValidator2","maxFileLimit","fileLimit","console","log","c","rslt","fileArray","value","length","invalidMaxFileLimit","maxSingleFileSize","maxfileSize","file","size","invalidMaxSingleFileSize","maxMultipleFileSize","sum","forEach","invalidMaxMultiFileSize","allowableExtension","extensionString","arr","split","name","endsWithAny","invalidFileExtension","suffixes","val","some","suffix","endsWith","trim","exports"],"sourceRoot":"","sources":["C:\\Users\\D1347074\\Desktop\\projects 2\\nspayiiapp\\src\\main\\webapp\\app\\shared\\validator\\fileupload2.directive.ts"],"sourcesContent":["import { AbstractControl, ValidatorFn } from '@angular/forms';\r\n\r\n/* Validate FileUpload Component for reactive form*/\r\nexport class FileUploadValidator2 {\r\n\r\n  static maxFileLimit(fileLimit: number): ValidatorFn {\r\n    console.log(\"filelimitssssss\", fileLimit);\r\n\r\n    return (c: AbstractControl): { [key: string]: string } | null => {\r\n      let rslt = null;\r\n\r\n      const fileArray: File[] = c.value;\r\n      if (fileArray.length > fileLimit) {\r\n        rslt = { invalidMaxFileLimit: `Max number of file that can be uploaded is ${fileLimit}` };\r\n      }\r\n      console.log(\"the rslt for fielimit\", rslt);\r\n      return rslt;\r\n    };\r\n  }\r\n\r\n  static maxSingleFileSize(maxfileSize: number): ValidatorFn {\r\n    console.log(\"fileSize limit\", maxfileSize);\r\n    return (c: AbstractControl): { [key: string]: string } | null => {\r\n      const fileArray: File[] = c.value;\r\n      let rslt = null;\r\n      for (const file of fileArray) {\r\n        if (file && file.size > maxfileSize * 1000 * 1000) {\r\n          rslt = { invalidMaxSingleFileSize: `Single File maximum size is ${maxfileSize} MB` };\r\n          break;\r\n        }\r\n      }\r\n      console.log(\"the rslt for filesize\", rslt);\r\n\r\n      return rslt;\r\n    }\r\n  }\r\n\r\n  static maxMultipleFileSize(maxfileSize: number): ValidatorFn {\r\n    return (c: AbstractControl): { [key: string]: string } | null => {\r\n      const fileArray: File[] = c.value;\r\n      let sum = 0;\r\n      fileArray.forEach(file => {\r\n        sum = sum + file.size\r\n      })\r\n      if (sum > maxfileSize * 1000 * 1000) {\r\n        return { invalidMaxMultiFileSize: `Multiple File maximum size is ${maxfileSize} MB` };\r\n      } return null;\r\n    }\r\n  }\r\n\r\n  static allowableExtension(extensionString: string): ValidatorFn {\r\n    return (c: AbstractControl): { [key: string]: string } | null => {\r\n      if (extensionString) {\r\n        const arr: string[] = extensionString.split(\",\");\r\n        const fileArray: File[] = c.value;\r\n        console.log(\"the current files\", fileArray);\r\n        let rslt = null;\r\n        for (const file of fileArray) {\r\n          console.log(\"filename is \", file.name);\r\n          if (!this.endsWithAny(arr, file.name)) {\r\n            rslt = { invalidFileExtension: \"Invalid file extensions. Extensions allowed are \" + extensionString };\r\n            break;\r\n          }\r\n        }\r\n        console.log('the reslt', rslt);\r\n        return rslt;\r\n      } else {\r\n        return null;\r\n      }\r\n    }\r\n  }\r\n\r\n\r\n  static endsWithAny(suffixes: string[], val: string): boolean {\r\n    return suffixes.some(function (suffix) {\r\n      return val.endsWith(suffix.trim());\r\n    });\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}