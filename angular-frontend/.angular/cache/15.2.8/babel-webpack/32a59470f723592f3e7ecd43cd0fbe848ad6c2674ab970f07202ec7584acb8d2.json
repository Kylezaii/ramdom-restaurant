{"ast":null,"code":"\"use strict\";\n\nvar _asyncToGenerator = require(\"C:/Users/D1347074/Desktop/projects 2/nspayiiapp/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SerbInboxComponent = void 0;\nconst tslib_1 = require(\"tslib\");\nconst forms_1 = require(\"@angular/forms\");\nconst fileupload2_directive_1 = require(\"app/shared/validator/fileupload2.directive\");\nconst moment_1 = tslib_1.__importDefault(require(\"moment\"));\nconst http_1 = require(\"@angular/common/http\");\nconst common_1 = require(\"@angular/common\");\nconst i0 = tslib_1.__importStar(require(\"@angular/core\"));\nconst i1 = tslib_1.__importStar(require(\"app/workload/service/workload-inbox.service\"));\nconst i2 = tslib_1.__importStar(require(\"app/shared/confirm/nsp-confirm.service\"));\nconst i3 = tslib_1.__importStar(require(\"app/core/util/date-utils.service\"));\nconst i4 = tslib_1.__importStar(require(\"@angular/forms\"));\nconst i5 = tslib_1.__importStar(require(\"app/layouts/service/customtoast.service\"));\nconst i6 = tslib_1.__importStar(require(\"app/shared/service/file-upload.service\"));\nconst i7 = tslib_1.__importStar(require(\"app/shared/service/ns2-http.service\"));\nconst i8 = tslib_1.__importStar(require(\"app/administration/black-out-date/public-holiday/service/public-holiday.service\"));\nconst i9 = tslib_1.__importStar(require(\"app/ng-connect\"));\nconst i10 = tslib_1.__importStar(require(\"app/core/util/export-utils.service\"));\nconst i11 = tslib_1.__importStar(require(\"@angular/common\"));\nconst i12 = tslib_1.__importStar(require(\"primeng/api\"));\nconst i13 = tslib_1.__importStar(require(\"primeng/button\"));\nconst i14 = tslib_1.__importStar(require(\"primeng/table\"));\nconst i15 = tslib_1.__importStar(require(\"primeng/dropdown\"));\nconst i16 = tslib_1.__importStar(require(\"primeng/dialog\"));\nconst i17 = tslib_1.__importStar(require(\"primeng/confirmpopup\"));\nconst i18 = tslib_1.__importStar(require(\"primeng/calendar\"));\nconst i19 = tslib_1.__importStar(require(\"../../../shared/component/file-upload/file-upload.component\"));\nconst i20 = tslib_1.__importStar(require(\"../../../shared/pipe/default-string.pipe\"));\nconst _c0 = [\"fileUpload\"];\nconst _c1 = [\"dataTable\"];\nconst _c2 = function () {\n  return {\n    \"margin-right\": \".5em\",\n    \"margin-bottom\": \".5em\"\n  };\n};\nconst _c3 = function () {\n  return {\n    width: \"13rem\",\n    \"margin-right\": \".5em\",\n    \"margin-bottom\": \".5em\"\n  };\n};\nconst _c4 = function () {\n  return {\n    \"margin-left\": \".5em\",\n    \"margin-bottom\": \".5em\"\n  };\n};\nfunction SerbInboxComponent_ng_template_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r14 = i0.ɵɵgetCurrentView();\n    i0.ɵɵtext(0, \"\\n                \");\n    i0.ɵɵelementStart(1, \"form\", 7);\n    i0.ɵɵtext(2, \"\\n\\n                    \");\n    i0.ɵɵtext(3, \"\\n\\n                    \");\n    i0.ɵɵelementStart(4, \"div\", 28);\n    i0.ɵɵtext(5, \"\\n                        \");\n    i0.ɵɵelementStart(6, \"div\", 29);\n    i0.ɵɵtext(7, \"\\n                            \");\n    i0.ɵɵelementStart(8, \"p-button\", 30);\n    i0.ɵɵlistener(\"click\", function SerbInboxComponent_ng_template_3_Template_p_button_click_8_listener() {\n      i0.ɵɵrestoreView(_r14);\n      const ctx_r13 = i0.ɵɵnextContext();\n      const _r0 = i0.ɵɵreference(1);\n      return i0.ɵɵresetView(ctx_r13.exportCSV(_r0));\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(9, \"\\n                            \");\n    i0.ɵɵelementStart(10, \"p-dropdown\", 31);\n    i0.ɵɵlistener(\"onChange\", function SerbInboxComponent_ng_template_3_Template_p_dropdown_onChange_10_listener() {\n      i0.ɵɵrestoreView(_r14);\n      const ctx_r15 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r15.applyFilter(\"serbDate\", ctx_r15.captionGroup.get(\"serbDateFilter\").value));\n    });\n    i0.ɵɵtext(11, \"\\n                            \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(12, \"\\n\\n                            \");\n    i0.ɵɵelementStart(13, \"p-dropdown\", 32);\n    i0.ɵɵlistener(\"onChange\", function SerbInboxComponent_ng_template_3_Template_p_dropdown_onChange_13_listener() {\n      i0.ɵɵrestoreView(_r14);\n      const ctx_r16 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r16.applyFilter(\"claimantNRIC\", ctx_r16.captionGroup.get(\"selectedDupNric\").value));\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(14, \"\\n                                        \");\n    i0.ɵɵtext(15, \"\\n                        \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(16, \"\\n\\n\\n                        \");\n    i0.ɵɵelementStart(17, \"div\", 33);\n    i0.ɵɵtext(18, \"\\n                            \");\n    i0.ɵɵelementStart(19, \"button\", 34);\n    i0.ɵɵlistener(\"click\", function SerbInboxComponent_ng_template_3_Template_button_click_19_listener() {\n      i0.ɵɵrestoreView(_r14);\n      const ctx_r17 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r17.onOpen(ctx_r17.displaySerbDateDialog));\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(20, \"\\n                            \");\n    i0.ɵɵelementStart(21, \"button\", 35);\n    i0.ɵɵlistener(\"click\", function SerbInboxComponent_ng_template_3_Template_button_click_21_listener() {\n      i0.ɵɵrestoreView(_r14);\n      const ctx_r18 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r18.onOpen(ctx_r18.displayGenerateReportDialog));\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(22, \"\\n                            \");\n    i0.ɵɵelementStart(23, \"button\", 36);\n    i0.ɵɵlistener(\"click\", function SerbInboxComponent_ng_template_3_Template_button_click_23_listener() {\n      i0.ɵɵrestoreView(_r14);\n      const ctx_r19 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r19.onOpen(ctx_r19.displayMassApprovalDialog));\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(24, \"\\n                        \");\n    i0.ɵɵtext(25, \"\\n                        \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(26, \"\\n                    \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(27, \"\\n                \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(28, \"\\n            \");\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"formGroup\", ctx_r1.captionGroup);\n    i0.ɵɵadvance(7);\n    i0.ɵɵstyleMap(i0.ɵɵpureFunction0(19, _c2));\n    i0.ɵɵadvance(2);\n    i0.ɵɵstyleMap(i0.ɵɵpureFunction0(20, _c3));\n    i0.ɵɵproperty(\"options\", ctx_r1.serbDateQuickilterOptions);\n    i0.ɵɵadvance(3);\n    i0.ɵɵstyleMap(i0.ɵɵpureFunction0(21, _c2));\n    i0.ɵɵproperty(\"options\", ctx_r1.nricWithMoreThanOneClaimOptions)(\"placeholder\", ctx_r1.duplicateNricPlaceHolder)(\"showClear\", true);\n    i0.ɵɵadvance(6);\n    i0.ɵɵstyleMap(i0.ɵɵpureFunction0(22, _c4));\n    i0.ɵɵproperty(\"disabled\", !ctx_r1.enableSerbDate());\n    i0.ɵɵadvance(2);\n    i0.ɵɵstyleMap(i0.ɵɵpureFunction0(23, _c4));\n    i0.ɵɵadvance(2);\n    i0.ɵɵstyleMap(i0.ɵɵpureFunction0(24, _c4));\n    i0.ɵɵproperty(\"disabled\", !ctx_r1.enableMassApprove() || !ctx_r1.massApprovedEnable);\n  }\n}\nfunction SerbInboxComponent_ng_template_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtext(0, \"\\n            \");\n    i0.ɵɵelementStart(1, \"tr\");\n    i0.ɵɵtext(2, \"\\n                \");\n    i0.ɵɵelementStart(3, \"th\", 37);\n    i0.ɵɵelement(4, \"p-tableHeaderCheckbox\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(5, \"\\n                \");\n    i0.ɵɵelementStart(6, \"th\", 38);\n    i0.ɵɵtext(7, \"SN\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(8, \"\\n                \");\n    i0.ɵɵelementStart(9, \"th\", 39);\n    i0.ɵɵtext(10, \"Case ID\");\n    i0.ɵɵelement(11, \"p-sortIcon\", 40);\n    i0.ɵɵtext(12, \"\\n                    \");\n    i0.ɵɵelement(13, \"p-columnFilter\", 41);\n    i0.ɵɵtext(14, \"\\n                \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(15, \"\\n                \");\n    i0.ɵɵelementStart(16, \"th\", 42);\n    i0.ɵɵtext(17, \"Name\");\n    i0.ɵɵelement(18, \"p-sortIcon\", 43);\n    i0.ɵɵtext(19, \"\\n                    \");\n    i0.ɵɵelement(20, \"p-columnFilter\", 44);\n    i0.ɵɵtext(21, \"\\n                \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(22, \"\\n                \");\n    i0.ɵɵelementStart(23, \"th\", 45);\n    i0.ɵɵtext(24, \"SERB Date\");\n    i0.ɵɵelement(25, \"p-sortIcon\", 46);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(26, \"\\n                \");\n    i0.ɵɵelementStart(27, \"th\", 47);\n    i0.ɵɵtext(28, \"Prev SERB Date\");\n    i0.ɵɵelement(29, \"p-sortIcon\", 48);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(30, \"\\n                \");\n    i0.ɵɵelementStart(31, \"th\", 49);\n    i0.ɵɵtext(32, \"Start Date\");\n    i0.ɵɵelement(33, \"p-sortIcon\", 50);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(34, \"\\n                \");\n    i0.ɵɵelementStart(35, \"th\", 51);\n    i0.ɵɵtext(36, \"End Date\");\n    i0.ɵɵelement(37, \"p-sortIcon\", 50);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(38, \"\\n                \");\n    i0.ɵɵelementStart(39, \"th\", 52);\n    i0.ɵɵtext(40, \"Option\");\n    i0.ɵɵelement(41, \"p-sortIcon\", 53);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(42, \"\\n                \");\n    i0.ɵɵelementStart(43, \"th\", 54);\n    i0.ɵɵtext(44, \"Conflicting Approved SE\");\n    i0.ɵɵelement(45, \"p-sortIcon\", 55);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(46, \"\\n                \");\n    i0.ɵɵelementStart(47, \"th\", 56);\n    i0.ɵɵtext(48, \"Receipt Date\");\n    i0.ɵɵelement(49, \"p-sortIcon\", 57);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(50, \"\\n\\n            \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(51, \"\\n        \");\n  }\n}\nfunction SerbInboxComponent_ng_template_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtext(0, \"\\n\\n        \");\n    i0.ɵɵelementStart(1, \"tr\", 58);\n    i0.ɵɵtext(2, \"\\n            \");\n    i0.ɵɵelementStart(3, \"td\");\n    i0.ɵɵelement(4, \"p-tableCheckbox\", 59);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(5, \"\\n            \");\n    i0.ɵɵelementStart(6, \"td\");\n    i0.ɵɵtext(7);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(8, \"\\n            \");\n    i0.ɵɵelementStart(9, \"td\")(10, \"a\", 60);\n    i0.ɵɵtext(11);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵtext(12, \"\\n            \");\n    i0.ɵɵelementStart(13, \"td\");\n    i0.ɵɵtext(14);\n    i0.ɵɵelement(15, \"br\");\n    i0.ɵɵtext(16);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(17, \"\\n            \");\n    i0.ɵɵelementStart(18, \"td\");\n    i0.ɵɵtext(19);\n    i0.ɵɵpipe(20, \"defaultString\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(21, \"\\n            \");\n    i0.ɵɵelementStart(22, \"td\");\n    i0.ɵɵtext(23);\n    i0.ɵɵpipe(24, \"defaultString\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(25, \"\\n            \");\n    i0.ɵɵelementStart(26, \"td\");\n    i0.ɵɵtext(27);\n    i0.ɵɵpipe(28, \"defaultString\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(29, \"\\n            \");\n    i0.ɵɵelementStart(30, \"td\");\n    i0.ɵɵtext(31);\n    i0.ɵɵpipe(32, \"defaultString\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(33, \"\\n            \");\n    i0.ɵɵelementStart(34, \"td\");\n    i0.ɵɵtext(35);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(36, \"\\n            \");\n    i0.ɵɵelementStart(37, \"td\");\n    i0.ɵɵelement(38, \"a\", 60);\n    i0.ɵɵtext(39);\n    i0.ɵɵpipe(40, \"defaultString\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(41, \"\\n            \");\n    i0.ɵɵelementStart(42, \"td\");\n    i0.ɵɵtext(43);\n    i0.ɵɵpipe(44, \"defaultString\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(45, \"\\n        \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(46, \"\\n    \");\n  }\n  if (rf & 2) {\n    const serbRecord_r21 = ctx.$implicit;\n    const rowIndex_r22 = ctx.rowIndex;\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"pSelectableRow\", serbRecord_r21);\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"value\", serbRecord_r21);\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(rowIndex_r22 + 1);\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate(serbRecord_r21.caseId);\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate1(\"\", serbRecord_r21.nric, \" \");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", serbRecord_r21.name, \"\");\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(20, 13, serbRecord_r21.currentSD));\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(24, 15, serbRecord_r21.prevSD));\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(28, 17, ctx_r3.dateUtilsService.convertUnixToDateString(serbRecord_r21.start, ctx_r3.dateFormat)));\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(32, 19, ctx_r3.dateUtilsService.convertUnixToDateString(serbRecord_r21.end, ctx_r3.dateFormat)));\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate(serbRecord_r21.optionDesc);\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(40, 21, serbRecord_r21.conflict));\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(44, 23, ctx_r3.dateUtilsService.convertUnixToDateString(serbRecord_r21.receiptDate, ctx_r3.dateFormat)));\n  }\n}\nfunction SerbInboxComponent_ng_template_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtext(0, \"\\n        \");\n    i0.ɵɵelementStart(1, \"tr\");\n    i0.ɵɵtext(2, \"\\n            \");\n    i0.ɵɵelementStart(3, \"td\", 61);\n    i0.ɵɵtext(4, \"No records found.\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(5, \"\\n        \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(6, \"\\n    \");\n  }\n}\nfunction SerbInboxComponent_ng_template_45_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r25 = i0.ɵɵgetCurrentView();\n    i0.ɵɵtext(0, \"\\n        \");\n    i0.ɵɵelementStart(1, \"button\", 62);\n    i0.ɵɵlistener(\"click\", function SerbInboxComponent_ng_template_45_Template_button_click_1_listener() {\n      i0.ɵɵrestoreView(_r25);\n      const ctx_r24 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r24.displaySerbDateDialog.display = false);\n    });\n    i0.ɵɵtext(2, \"\\n        \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(3, \"\\n        \");\n    i0.ɵɵelementStart(4, \"button\", 63);\n    i0.ɵɵlistener(\"click\", function SerbInboxComponent_ng_template_45_Template_button_click_4_listener($event) {\n      i0.ɵɵrestoreView(_r25);\n      const ctx_r26 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r26.onSubmit($event, \"confirmSendToSerb\", ctx_r26.displaySerbDateDialog));\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(5, \"\\n    \");\n  }\n  if (rf & 2) {\n    const ctx_r7 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵstyleMap(i0.ɵɵpureFunction0(5, _c4));\n    i0.ɵɵadvance(3);\n    i0.ɵɵstyleMap(i0.ɵɵpureFunction0(6, _c4));\n    i0.ɵɵproperty(\"disabled\", (ctx_r7.serbDateForm == null ? null : ctx_r7.serbDateForm.get(\"selectedSerbDate\").value) == null);\n  }\n}\nfunction SerbInboxComponent_ng_template_71_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r28 = i0.ɵɵgetCurrentView();\n    i0.ɵɵtext(0, \"\\n        \");\n    i0.ɵɵelementStart(1, \"button\", 62);\n    i0.ɵɵlistener(\"click\", function SerbInboxComponent_ng_template_71_Template_button_click_1_listener() {\n      i0.ɵɵrestoreView(_r28);\n      const ctx_r27 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r27.displayGenerateReportDialog.display = false);\n    });\n    i0.ɵɵtext(2, \"\\n        \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(3, \"\\n        \");\n    i0.ɵɵelementStart(4, \"button\", 63);\n    i0.ɵɵlistener(\"click\", function SerbInboxComponent_ng_template_71_Template_button_click_4_listener($event) {\n      i0.ɵɵrestoreView(_r28);\n      const ctx_r29 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r29.onSubmit($event, \"confirmGenReport\", ctx_r29.displayGenerateReportDialog));\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(5, \"\\n\\n    \");\n  }\n  if (rf & 2) {\n    const ctx_r9 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵstyleMap(i0.ɵɵpureFunction0(5, _c4));\n    i0.ɵɵadvance(3);\n    i0.ɵɵstyleMap(i0.ɵɵpureFunction0(6, _c4));\n    i0.ɵɵproperty(\"disabled\", ctx_r9.selectedDropDownSerbDate == null);\n  }\n}\nfunction SerbInboxComponent_form_81_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"form\", 7);\n    i0.ɵɵtext(1, \"\\n        \");\n    i0.ɵɵelement(2, \"n2-file-upload\", 64, 65);\n    i0.ɵɵtext(4, \"\\n    \");\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r10 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"formGroup\", ctx_r10.massApproveForm);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"externalFileLimit\", ctx_r10.fileUploadFileLimit)(\"showCSV\", true);\n  }\n}\nfunction SerbInboxComponent_span_84_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 66);\n    i0.ɵɵtext(1, \"Maximum of  file can be uploaded\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction SerbInboxComponent_ng_template_86_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r32 = i0.ɵɵgetCurrentView();\n    i0.ɵɵtext(0, \"\\n        \");\n    i0.ɵɵelementStart(1, \"button\", 62);\n    i0.ɵɵlistener(\"click\", function SerbInboxComponent_ng_template_86_Template_button_click_1_listener($event) {\n      i0.ɵɵrestoreView(_r32);\n      const ctx_r31 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r31.onCancelMassApproval($event, \"massApproveCancel\", ctx_r31.displayMassApprovalDialog));\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(2, \"\\n        \");\n    i0.ɵɵelementStart(3, \"button\", 67);\n    i0.ɵɵlistener(\"keyup\", function SerbInboxComponent_ng_template_86_Template_button_keyup_3_listener() {\n      return true;\n    })(\"click\", function SerbInboxComponent_ng_template_86_Template_button_click_3_listener($event) {\n      i0.ɵɵrestoreView(_r32);\n      const ctx_r34 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r34.onSubmit($event, \"massApprove\", ctx_r34.displayMassApprovalDialog));\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(4, \"\\n        \");\n    i0.ɵɵtext(5, \"\\n    \");\n  }\n  if (rf & 2) {\n    const ctx_r12 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵstyleMap(i0.ɵɵpureFunction0(5, _c4));\n    i0.ɵɵadvance(2);\n    i0.ɵɵstyleMap(i0.ɵɵpureFunction0(6, _c4));\n    i0.ɵɵproperty(\"disabled\", ctx_r12.massApproveForm.get(\"massApproveSupportingDocs\").value.length <= 0 || ctx_r12.massApproveForm.get(\"massApproveSupportingDocs\").errors != null);\n  }\n}\nconst _c5 = function () {\n  return {\n    \"960px\": \"75vw\"\n  };\n};\nconst _c6 = function () {\n  return [0, 6];\n};\nconst _c7 = function () {\n  return {\n    width: \"30vw\"\n  };\n};\nconst _c8 = function () {\n  return {\n    width: \"50vw\"\n  };\n};\nclass SerbInboxComponent {\n  constructor(workloadService, nspConfirmService, cd, dateUtilsService, formBuilder, toastService, fileUploadService, ns2Http, publicHolService, codeService, exportUtilsService) {\n    this.workloadService = workloadService;\n    this.nspConfirmService = nspConfirmService;\n    this.cd = cd;\n    this.dateUtilsService = dateUtilsService;\n    this.formBuilder = formBuilder;\n    this.toastService = toastService;\n    this.fileUploadService = fileUploadService;\n    this.ns2Http = ns2Http;\n    this.publicHolService = publicHolService;\n    this.codeService = codeService;\n    this.exportUtilsService = exportUtilsService;\n    this.serbDateQuickilterOptions = [];\n    this.selectAll = false;\n    // massUploadForm: FormGroup = this.formBuilder.group({\n    //   massUploadControl: new FormControl([], Validators.compose([FileUploadValidator2.maxFileLimit(5),\n    //   FileUploadValidator2.maxSingleFileSize(2)]))\n    // })\n    this.serbDateForm = this.formBuilder.group({\n      // selectedSerbDate: new FormControl([], Validators.compose(DateValidator.dateNotEquals()))\n      selectedSerbDate: new forms_1.FormControl(null, forms_1.Validators.required)\n    });\n    this.totalRecords = 0;\n    this.selectedRows = [];\n    this.autoResize = true;\n    this.serbDtoList = [];\n    this.cloneSerbDtoList = [];\n    this.holidays = [];\n    this.holidayDate = [];\n    this.duplicateNricPlaceHolder = \"0 Duplicates\";\n    this.serbDateOptions = [];\n    this.dateFormat = \"DD-MM-YYYY\";\n    this.txnIdList = [];\n    this.quickFilterclaimCount = {\n      claimsPendRecompNo: 0,\n      claimsDueToDate: 0,\n      claimsOverDue: 0,\n      claimsTotal: 0\n    };\n    this.displaySerbDateDialog = {\n      display: false\n    };\n    this.displayMassApprovalDialog = {\n      display: false\n    };\n    this.displayGenerateReportDialog = {\n      display: false\n    };\n    this.massApprovedEnable = false;\n    // massApproveForm = new FormGroup({\n    //   massApproveSupportingDocs: new FormControl([], null)\n    // });\n    this.massApproveForm = new forms_1.FormGroup({\n      massApproveSupportingDocs: new forms_1.FormControl([], forms_1.Validators.compose([fileupload2_directive_1.FileUploadValidator2.maxFileLimit(4), fileupload2_directive_1.FileUploadValidator2.maxSingleFileSize(7)]))\n    });\n    // FileUploadValidator2.allowableExtension(\".txt\")\n    this.fileUploadFileLimit = 4;\n    // this.subscription = new Subscription();\n    this.pagingSetting = {\n      rowsPerPage: 10\n    };\n  }\n  ngOnInit() {\n    console.log('current time', this.dateUtilsService.convertUnixToMoment(1657121655000));\n    this.captionGroup = this.formBuilder.group({\n      selectedDupNric: new forms_1.FormControl(),\n      serbDateFilter: new forms_1.FormControl()\n    });\n    this.serbDateQuickilterOptions = this.initSerbDateFilter();\n    // this.selectedSerbDateFilter =  this.serbDateQuickilterOptions[0].value;\n    console.log('initial value', this.serbDateQuickilterOptions[0].value);\n    this.captionGroup.controls['serbDateFilter'].setValue(this.serbDateQuickilterOptions[0].value);\n    // this.minimumDate = new Date();\n    this.retrievePublicHol();\n    // this.maximumDate = this.findNextSerbDate();\n    // this.massApproveSubmitEnable = ;\n  }\n\n  initSerbDateFilter() {\n    return [{\n      key: 'No Serb Date',\n      value: null\n    }];\n  }\n  getSerbRecordsData(event) {\n    this.loading = true;\n    this.lastTableLazyLoadEvent = event;\n    setTimeout(() => {\n      const options = this.ns2Http.convertLazyEvent(event, null, null);\n      options.params = options.params.append(\"currentSD\", this.captionGroup.get('serbDateFilter').value);\n      this.workloadService.getSerbRecordsData(options).subscribe(resp => {\n        if (resp.body.data) {\n          if (resp.body.data.dtoList) {\n            this.serbDtoList = resp.body.data.dtoList;\n            this.cloneSerbDtoList = this.serbDtoList;\n          }\n          this.totalRecords = resp.body.data.total_no_of_elems;\n          if (resp.body.data.serbDateCount) {\n            this.setSerbQuickFilterOptions(resp.body.data.serbDateCount);\n          }\n          if (resp.body.data.duplicateNrics) {\n            this.nricWithMoreThanOneClaimOptions = resp.body.data.duplicateNrics;\n          }\n          this.duplicateNricPlaceHolder = `${this.nricWithMoreThanOneClaimOptions.length} Duplicates`;\n        }\n        this.loading = false;\n      });\n    }, 0);\n  }\n  applyFilter(column, filterValue) {\n    this.table.filter(filterValue, column, 'equals');\n    if (column === 'serbDate') {\n      this.resetDataTable();\n      // disable mass approve button if filter is no serb date/otherwise check\n      // if the mass approval has been done for current serb date\n      if (this.captionGroup.get('serbDateFilter').value != null) {\n        let params = new http_1.HttpParams();\n        params = params.append('serbDate', this.captionGroup.get('serbDateFilter').value);\n        this.workloadService.checkSerbDateMassApproved({\n          params\n        }).subscribe(resp => {\n          if (resp.status === 200) {\n            console.log('mass approved was ', resp.body.data);\n            this.massApprovedEnable = !resp.body.data;\n          }\n        });\n      }\n    }\n  }\n  setSerbQuickFilterOptions(serbDateCount) {\n    // eslint-disable-next-line  @typescript-eslint/no-unnecessary-type-assertion\n    const serbDateCountMap = new Map(Object.entries(serbDateCount));\n    const sortedSDMap = new Map([...serbDateCountMap.entries()].sort(this.sortSerb()));\n    const sortedSDMapArr = Array.from(sortedSDMap, ([key, value]) => ({\n      key,\n      value\n    })).filter(x => x.key !== 'NO_SERB');\n    // let qkFilterOptions = this.serbDateQuickilterOptions;\n    this.serbDateQuickilterOptions = this.initSerbDateFilter().concat(sortedSDMapArr.map(x => ({\n      key: x.key + \" (\" + this.dateUtilsService.convertStrToMoment(x.key, this.dateFormat).format('ddd') + \")\",\n      value: x.key\n    })));\n    // this.serbDateQuickilterOptions = qkFilterOptions;\n    this.serbDateOptions = sortedSDMapArr.map(x => ({\n      key: x.key + \" (\" + this.dateUtilsService.convertStrToMoment(x.key, this.dateFormat).format('ddd') + \")(\" + x.value + \")\",\n      value: x.key\n    }));\n    console.log(\"serbdate op\", this.serbDateQuickilterOptions);\n  }\n  sortSerb() {\n    return function (a, b) {\n      if ((0, moment_1.default)(a[0], \"DD-MM-YYYY\") === (0, moment_1.default)(b[0], \"DD-MM-YYYY\")) {\n        return 0;\n      } else if (a[0] === 'NO_SERB') {\n        return -1;\n      } else if (b[0] === 'NO_SERB') {\n        return 1;\n      } else {\n        return (0, moment_1.default)(a[0], \"DD-MM-YYYY\") < (0, moment_1.default)(b[0], \"DD-MM-YYYY\") ? -1 : 1;\n      }\n    };\n  }\n  onSelectAllChange(event) {\n    const checked = event.checked;\n    if (checked) {\n      this.selectedRows = this.serbDtoList;\n      this.selectAll = true;\n    } else {\n      this.selectedRows = [];\n      this.selectAll = false;\n    }\n  }\n  copyAccount(account) {\n    return {\n      email: account.email,\n      firstName: account.firstName,\n      lastName: account.lastName,\n      login: account.username,\n      authorities: account.authorities,\n      groups: account.groups\n    };\n  }\n  onOpen(dialog) {\n    dialog.display = true;\n    if (dialog === this.displaySerbDateDialog) {\n      console.log(\"serb dialog displayed\");\n      this.serbDateForm.controls['selectedSerbDate'].setValue(new Date());\n    } else if (dialog === this.displayMassApprovalDialog) {\n      // this.massUploadForm = this.formBuilder.group({\n      //   // massUploadControl: new FormControl([], FileUploadValidator2(0, 1))\n      //   massUploadControl: new FormControl([], FileUploadValidator2(this.fileUploadComp))\n      // })\n    }\n  }\n  // TODO: Shaun to fix\n  // eslint-disable-next-line @typescript-eslint/require-await,@typescript-eslint/explicit-function-return-type\n  onSubmit(event, type, dialog) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      console.log(\"submitting\");\n      switch (type) {\n        case 'confirmSendToSerb':\n          _this.sendToSerb(type, dialog);\n          break;\n        case 'confirmGenReport':\n          _this.generateReport();\n          break;\n        case 'massApprove':\n          _this.massApprove(event, type, dialog);\n      }\n    })();\n  }\n  massApprove(event, key, dialog) {\n    console.log(\"submitting supporting doc for mass approval\");\n    this.nspConfirmService.onConfirmPopup(event, key, dialog, () => {\n      // this.fileUploadComponent.fileUploadHandler(\"CLM\", \"UC1\");\n      console.log(\"saving file to file server based on file upload ids\");\n      console.log(\"the verified\", this.fileUploadComponent.verifiedFiles);\n      const request = {\n        serbDate: this.captionGroup.get('serbDateFilter').value,\n        claimList: this.selectedRows.map(x => ({\n          claimId: x.claimId,\n          claimInboxId: x.claimInboxId\n        })),\n        txnIdList: this.fileUploadComponent.verifiedFiles.map(x => String(x.meta_data.id))\n      };\n      const successArr = [];\n      const errorArr = [];\n      this.workloadService.massApproveSerb(request).subscribe(resp => {\n        if (resp.body.data) {\n          for (const [k, v] of Object.entries(resp.body.data)) {\n            if (k.startsWith(\"I\")) {\n              successArr.push(v);\n            } else if (k.startsWith(\"E\")) {\n              errorArr.push(v);\n            }\n          }\n          successArr.forEach(succMsg => {\n            this.toastService.success(succMsg);\n          });\n          errorArr.forEach(errMsg => {\n            this.toastService.error(errMsg);\n          });\n          this.resetDataTable();\n        }\n      }, error => {\n        console.log(\"error is\" + String(error?.error?.error_desc));\n        this.toastService.error(String(error?.error?.error_desc));\n      });\n      //\n      // this.fileUploadService.saveFileToFileServer(data).subscribe(resp=>{\n      //   if(resp){\n      //     if(resp.ok){\n      //       this.toastService.success(resp.body.success_message);\n      //     }\n      //   }\n      // }),\n      // (error:any)=>{\n      //   this.toastService.error(error.error_desc);\n      // }\n    });\n  }\n\n  onCancelMassApproval(event, key, dialog) {\n    if (this.fileUploadComponent.verifiedFiles.length + this.fileUploadComponent.selectedFilesObj.length > 0) {\n      this.nspConfirmService.onConfirmPopupMsg(event, 'All uploaded supporting documents will be deleted', key, dialog, () => {\n        console.log(\"confirm removal\");\n        this.fileUploadComponent.onClose();\n      });\n    } else dialog.display = false;\n  }\n  sendToSerb(key, dialog) {\n    this.nspConfirmService.onConfirmPopup(event, key, dialog, () => {\n      const req = {\n        serbDate: (0, common_1.formatDate)(this.serbDateForm?.get('selectedSerbDate').value, 'dd-MM-yyyy', 'en_US'),\n        // serbDate: formatDate(this.selectedSerbDate, 'dd-MM-yyyy', 'en_US'),\n        claimantList: this.selectedRows.map(x => ({\n          claimId: x.claimId,\n          currentSD: x.currentSD\n        }))\n      };\n      this.workloadService.sendToSerb(req).subscribe(resp => {\n        if (resp) {\n          if (resp.status === 200) {\n            this.toastService.success(resp.body.success_message);\n            this.getSerbRecordsData(this.lastTableLazyLoadEvent);\n          }\n        }\n      }, error => {\n        console.log(\"error is\" + String(error?.error?.error_desc));\n        this.toastService.error(String(error?.error?.error_desc));\n      });\n    });\n  }\n  exportCSV(dataTable) {\n    let params = new http_1.HttpParams();\n    params = params.append(\"currentSD\", this.captionGroup.get('serbDateFilter').value);\n    console.log(\"inside the mind\", this.captionGroup.get('serbDateFilter').value);\n    this.workloadService.getSerbRecordsData({\n      params\n    }).subscribe(resp => {\n      if (resp.body.data) {\n        const columns = [{\n          field: 'caseId',\n          header: 'Case ID',\n          index: 1\n        }, {\n          field: 'claimantNRIC',\n          header: 'NRIC',\n          index: 2\n        }, {\n          field: 'claimantName',\n          header: 'Name',\n          index: 3\n        }, {\n          field: 'currentSD',\n          header: 'SERB Date',\n          index: 4\n        }, {\n          field: 'prevSD',\n          header: 'Prev SERB Date',\n          index: 5\n        }, {\n          field: 'dateTrgStart',\n          header: 'Start Date',\n          index: 6\n        }, {\n          field: 'dateTrgEnd',\n          header: 'End Date',\n          index: 7\n        }, {\n          field: 'claimOptDesc',\n          header: 'Option',\n          index: 8\n        }, {\n          field: 'conflict',\n          header: 'Conflicting Approved SE',\n          index: 9\n        }, {\n          field: 'receiptDate',\n          header: 'Receipt Date',\n          index: 10\n        }];\n        const dtoList = [];\n        resp.body.data.dtoList.forEach(data => {\n          const dto = {\n            caseId: data.caseId,\n            claimantNRIC: data.nric,\n            claimantName: data.name,\n            currentSD: data.currentSD,\n            prevSD: data.prevSD,\n            dateTrgStart: this.dateUtilsService.convertUnixToDateString(data.start, this.dateFormat),\n            dateTrgEnd: this.dateUtilsService.convertUnixToDateString(data.end, this.dateFormat),\n            claimOptDesc: data.optionDesc,\n            conflict: data.conflict,\n            receiptDate: this.dateUtilsService.convertUnixToDateString(data.receiptDate, this.dateFormat)\n          };\n          dtoList.push(dto);\n        });\n        this.exportUtilsService.exportCSV(dataTable, dtoList, resp.body.data.total_no_of_elems, columns, \"serb_inbox_\".concat((0, common_1.formatDate)(new Date(), \"dd-MM-YYYY\", 'en-US')));\n        this.loading = false;\n      }\n    });\n  }\n  generateReport() {\n    // this.selectedRows, this.selectedSerbDate\n  }\n  // onChangeSerbFilter(event: any): void {\n  //   console.log(\"selected is now \", this.captionGroup.get('serbDateFilter').value);\n  //   console.log(event);\n  //   // disable mass approve button if filter is no serb date/otherwise check\n  //   // if the mass approval has been done for current serb date\n  //   if (this.captionGroup.get('serbDateFilter').value != null) {\n  //     let params = new HttpParams();\n  //     params = params.append('serbDate', this.captionGroup.get('serbDateFilter').value);\n  //     this.workloadService.checkSerbDateMassApproved({params}).subscribe(resp => {\n  //       if (resp.status === 200) {\n  //         console.log('mass approved was ', resp.body.data)\n  //         this.massApprovedEnable = !resp.body.data;\n  //       }\n  //     });\n  //   }\n  //   this.getSerbRecordsData(this.lastTableLazyLoadEvent);\n  // if(this.serbDateFilter ==null){\n  //   this.filterNoSerb();\n  // }else {\n  //   this.serbDtoList = this.cloneSerbDtoList;\n  //   this.cd.detectChanges();\n  //   this.serbDataTable.reset();\n  //   this.serbDataTable.saveState;\n  //   this.cd.detectChanges();\n  //   this.serbDataTable.filter(event.value, 'serbDte','equals');\n  // }\n  // call api to get current status of selected serb date whether has been approved\n  // setTimeout(() => {\n  //   this.workloadService.getSerbDateMassApproved(this.serbDateFilter).subscribe(data => {\n  //    this.massApprovedEnable = data.approved;\n  //   });\n  // }, 0);\n  // }\n  // filterNoSerb(options:){\n  //   // this.serbDtoList = this.serbDtoList.filter(x=> x.serbDte==null);\n  //   // console.log(\"new\", this.serbDtoList);\n  //   // this.cd.detectChanges();\n  //   // this.serbDataTable.reset();\n  //   // this.serbDataTable.saveState;\n  //   // this.cd.detectChanges();\n  // }\n  retrievePublicHol() {\n    this.publicHolService.getCurrentOneYear(null).subscribe(resp => {\n      if (resp.status === 200 && resp.body.data) {\n        resp.body.data.forEach(x => {\n          this.holidays.push(this.dateUtilsService.convertStrToMoment(x?.holidayDate, \"YYYY-MM-DD\").startOf('day').unix());\n        });\n      }\n      console.log('holiday is ', this.holidays);\n      this.constructMinMaxAvailDate();\n      this.holidayDate = this.holidays.map(x => new Date(x * 1000));\n      console.log('holidate', this.holidayDate);\n    });\n  }\n  constructMinMaxAvailDate() {\n    this.minimumDate = new Date();\n    this.maximumDate = this.findNextSerbDate();\n  }\n  onSelectSerbCalDate(event) {\n    // console.log(\"evn\", this.serbDateForm.get(\"selectedSerbDate\").value);\n    console.log('selected dates for ', this.selectedRows);\n    console.log('selected dates for ', event);\n  }\n  findNextSerbDate() {\n    this.holidays.sort((a, b) => a - b);\n    console.log(\"hol\", this.holidays);\n    let next = (0, moment_1.default)().add(1, 'days').startOf('day');\n    console.log(\"current avail \" + String(next.unix()));\n    console.log(\"current avail \" + String(next.day()));\n    // For excluding public holidays and weekends\n    while (this.holidays.includes(next.unix()) || next.day() === 0 || next.day() === 6) {\n      next = next.add(1, 'days');\n    }\n    console.log(\"next avail \" + String(next.toDate()));\n    return next.toDate();\n  }\n  enableSerbDate() {\n    return this.selectedRows.length > 0;\n  }\n  enableMassApprove() {\n    // console.log('serbdatefilter value',typeof this.captionGroup.get('serbDateFilter').value );\n    for (const serbInbox of this.selectedRows) {\n      if (serbInbox.currentSD == null || this.dateUtilsService.convertStrToDate(serbInbox.currentSD, this.dateFormat) > new Date() || serbInbox.currentSD !== this.captionGroup.get('serbDateFilter').value) {\n        console.log('chicko');\n        return false;\n      }\n    }\n    if (this.captionGroup.get('serbDateFilter').value == null) {\n      return false;\n    }\n    return this.selectedRows.length > 0;\n  }\n  // resetFile(): void {\n  //   // this.massApproveForm.controls.\n  //   this.fileUploadComponent.ngOnInit();\n  //   // this.fileUploadComponent.onClose();\n  // }\n  unescapeBreak(text) {\n    return text.replace('\\\\n', '\\n');\n  }\n  resetDataTable() {\n    this.selectAll = false;\n    this.selectedRows = [];\n    this.table.filters = {};\n    this.table.reset();\n  }\n  ngOnDestroy() {\n    // this.subscription.unsubscribe();\n  }\n}\nexports.SerbInboxComponent = SerbInboxComponent;\nSerbInboxComponent.ɵfac = function SerbInboxComponent_Factory(t) {\n  return new (t || SerbInboxComponent)(i0.ɵɵdirectiveInject(i1.WorkloadInboxService), i0.ɵɵdirectiveInject(i2.NspConfirmationService), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i3.DateUtilsService), i0.ɵɵdirectiveInject(i4.FormBuilder), i0.ɵɵdirectiveInject(i5.CustomToastService), i0.ɵɵdirectiveInject(i6.FileUploadService), i0.ɵɵdirectiveInject(i7.Ns2HttpService), i0.ɵɵdirectiveInject(i8.PublicHolidayService), i0.ɵɵdirectiveInject(i9.IcCodeService), i0.ɵɵdirectiveInject(i10.ExportUtilsService));\n};\nSerbInboxComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: SerbInboxComponent,\n  selectors: [[\"n2-serb-inbox\"]],\n  viewQuery: function SerbInboxComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c0, 5);\n      i0.ɵɵviewQuery(_c1, 5);\n    }\n    if (rf & 2) {\n      let _t;\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.fileUploadComponent = _t.first);\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.table = _t.first);\n    }\n  },\n  decls: 92,\n  vars: 46,\n  consts: [[\"styleClass\", \"p-datatable-gridlines p-datatable-striped\", \"responsiveLayout\", \"scroll\", 3, \"value\", \"totalRecords\", \"selection\", \"filterDelay\", \"selectAll\", \"loading\", \"lazy\", \"selectionChange\", \"selectAllChange\", \"onLazyLoad\"], [\"dataTable\", \"\"], [\"pTemplate\", \"caption\"], [\"pTemplate\", \"header\"], [\"pTemplate\", \"body\"], [\"pTemplate\", \"emptymessage\"], [\"header\", \"SERB Date\", 3, \"visible\", \"breakpoints\", \"autoZIndex\", \"baseZIndex\", \"draggable\", \"modal\", \"visibleChange\", \"onHide\"], [3, \"formGroup\"], [\"formDirective\", \"ngForm\"], [1, \"form-inline\"], [1, \"field\", \"grid\"], [\"for\", \"serbDate\", 1, \"col-3\", \"col-form-label\"], [1, \"col-9\", \"input-group\"], [\"appendTo\", \"body\", \"inputId\", \"serbDate\", \"formControlName\", \"selectedSerbDate\", \"position\", \"center\", 3, \"readonlyInput\", \"showOtherMonths\", \"selectOtherMonths\", \"minDate\", \"maxDate\", \"disabledDates\", \"disabledDays\", \"onSelect\"], [\"serbDateDp\", \"\"], [1, \"input-group-append\"], [\"icon\", \"pi pi-calendar\", \"pButton\", \"\", 1, \"p-button-secondary\", 3, \"click\"], [\"pTemplate\", \"footer\"], [\"key\", \"confirmSendToSerb\", \"header\", \"Confirmation\", \"icon\", \"fa fa-question-circle\", \"width\", \"425\"], [\"header\", \"Generate Report\", 3, \"visible\", \"breakpoints\", \"baseZIndex\", \"draggable\", \"modal\", \"resizable\", \"visibleChange\", \"onHide\"], [\"generateRptForm\", \"ngForm\"], [\"optionLabel\", \"key\", \"optionValue\", \"value\", \"placeholder\", \"Please select\", \"appendTo\", \"body\", 3, \"options\", \"ngModel\", \"ngModelChange\"], [\"key\", \"confirmGenReport\", \"header\", \"Confirmation\", \"icon\", \"fa fa-question-circle\", \"width\", \"425\"], [\"header\", \"Mass Approval\", 3, \"visible\", \"breakpoints\", \"draggable\", \"resizable\", \"modal\", \"visibleChange\"], [3, \"formGroup\", 4, \"ngIf\"], [\"class\", \"p-error\", 4, \"ngIf\"], [\"key\", \"massApprove\", \"header\", \"Confirmation\", \"icon\", \"fa fa-question-circle\", \"width\", \"425\"], [\"key\", \"massApproveCancel\", \"header\", \"Confirmation\", \"icon\", \"fa fa-question-circle\", \"width\", \"425\"], [1, \"grid\"], [1, \"col-6\", \"nsp-align-left\", \"flex\", \"justify-content-start\", \"align-items-center\"], [\"icon\", \"pi pi-file-o\", 3, \"click\"], [\"formControlName\", \"serbDateFilter\", \"optionValue\", \"value\", \"optionLabel\", \"key\", 3, \"options\", \"onChange\"], [\"formControlName\", \"selectedDupNric\", 3, \"options\", \"placeholder\", \"showClear\", \"onChange\"], [1, \"col-6\", \"nsp-align-right\"], [\"pButton\", \"\", \"label\", \"Serb Date\", 3, \"disabled\", \"click\"], [\"pButton\", \"\", \"label\", \"Generate Report\", 3, \"click\"], [\"pButton\", \"\", \"label\", \"Mass Approve\", 3, \"disabled\", \"click\"], [\"scope\", \"col\", 2, \"width\", \"3%\"], [\"scope\", \"col\"], [\"scope\", \"col\", \"pSortableColumn\", \"caseId\"], [\"field\", \"caseId\"], [\"type\", \"text\", \"field\", \"caseId\", \"display\", \"menu\", \"matchMode\", \"contains\"], [\"scope\", \"col\", \"pSortableColumn\", \"claimantNRIC\"], [\"field\", \"claimantNRIC\"], [\"type\", \"text\", \"field\", \"claimantNRIC\", \"display\", \"menu\", \"matchMode\", \"contains\"], [\"scope\", \"col\", \"pSortableColumn\", \"currentSD\"], [\"field\", \"currentSD\"], [\"scope\", \"col\", \"pSortableColumn\", \"prevSD\"], [\"field\", \"prevSD\"], [\"scope\", \"col\", \"pSortableColumn\", \"dateTrgStart\"], [\"field\", \"dateTrgStart\"], [\"scope\", \"col\", \"pSortableColumn\", \"dateTrgEnd\"], [\"scope\", \"col\", \"pSortableColumn\", \"claimOptDesc\"], [\"field\", \"claimOptDesc\"], [\"scope\", \"col\", \"pSortableColumn\", \"conflict\"], [\"field\", \"conflict\"], [\"scope\", \"col\", \"pSortableColumn\", \"receiptDate\"], [\"field\", \"receiptDate\"], [3, \"pSelectableRow\"], [3, \"value\"], [\"href\", \"#\"], [\"colspan\", \"11\"], [\"pButton\", \"\", \"label\", \"Cancel\", 1, \"p-button-danger\", 3, \"click\"], [\"pButton\", \"\", \"label\", \"Submit\", 3, \"disabled\", \"click\"], [\"id\", \"massApproveSupportingDocs\", \"formControlName\", \"massApproveSupportingDocs\", 2, \"width\", \"400px\", 3, \"externalFileLimit\", \"showCSV\"], [\"fileUpload\", \"\"], [1, \"p-error\"], [\"pButton\", \"\", \"label\", \"Submit\", 3, \"disabled\", \"keyup\", \"click\"]],\n  template: function SerbInboxComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      const _r35 = i0.ɵɵgetCurrentView();\n      i0.ɵɵelementStart(0, \"p-table\", 0, 1);\n      i0.ɵɵlistener(\"selectionChange\", function SerbInboxComponent_Template_p_table_selectionChange_0_listener($event) {\n        return ctx.selectedRows = $event;\n      })(\"selectAllChange\", function SerbInboxComponent_Template_p_table_selectAllChange_0_listener($event) {\n        return ctx.onSelectAllChange($event);\n      })(\"onLazyLoad\", function SerbInboxComponent_Template_p_table_onLazyLoad_0_listener($event) {\n        return ctx.getSerbRecordsData($event);\n      });\n      i0.ɵɵtext(2, \"\\n\\n            \");\n      i0.ɵɵtemplate(3, SerbInboxComponent_ng_template_3_Template, 29, 25, \"ng-template\", 2);\n      i0.ɵɵtext(4, \"\\n        \");\n      i0.ɵɵtemplate(5, SerbInboxComponent_ng_template_5_Template, 52, 0, \"ng-template\", 3);\n      i0.ɵɵtext(6, \"\\n    \");\n      i0.ɵɵtemplate(7, SerbInboxComponent_ng_template_7_Template, 47, 25, \"ng-template\", 4);\n      i0.ɵɵtext(8, \"\\n    \");\n      i0.ɵɵtemplate(9, SerbInboxComponent_ng_template_9_Template, 7, 0, \"ng-template\", 5);\n      i0.ɵɵtext(10, \"\\n\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(11, \"\\n\\n\");\n      i0.ɵɵelementStart(12, \"p-dialog\", 6);\n      i0.ɵɵlistener(\"visibleChange\", function SerbInboxComponent_Template_p_dialog_visibleChange_12_listener($event) {\n        return ctx.displaySerbDateDialog.display = $event;\n      })(\"onHide\", function SerbInboxComponent_Template_p_dialog_onHide_12_listener() {\n        i0.ɵɵrestoreView(_r35);\n        const _r5 = i0.ɵɵreference(15);\n        return i0.ɵɵresetView(_r5.resetForm());\n      });\n      i0.ɵɵtext(13, \"\\n\\n    \");\n      i0.ɵɵelementStart(14, \"form\", 7, 8);\n      i0.ɵɵtext(16, \"\\n        \");\n      i0.ɵɵtext(17, \"\\n        \");\n      i0.ɵɵtext(18, \"\\n\\n    \");\n      i0.ɵɵtext(19, \"\\n        \");\n      i0.ɵɵelementStart(20, \"div\", 9);\n      i0.ɵɵtext(21, \"\\n            \");\n      i0.ɵɵelementStart(22, \"div\", 10);\n      i0.ɵɵtext(23, \"\\n                \");\n      i0.ɵɵelementStart(24, \"label\", 11);\n      i0.ɵɵtext(25, \"Select SERB Date: \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(26, \"\\n                \");\n      i0.ɵɵelementStart(27, \"div\", 12);\n      i0.ɵɵtext(28, \"\\n                    \");\n      i0.ɵɵelementStart(29, \"p-calendar\", 13, 14);\n      i0.ɵɵlistener(\"onSelect\", function SerbInboxComponent_Template_p_calendar_onSelect_29_listener($event) {\n        return ctx.onSelectSerbCalDate($event);\n      });\n      i0.ɵɵtext(31, \"\\n                    \");\n      i0.ɵɵtext(32, \"\\n\\n                \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(33, \"\\n                    \");\n      i0.ɵɵelementStart(34, \"span\", 15);\n      i0.ɵɵtext(35, \"\\n                        \");\n      i0.ɵɵelementStart(36, \"button\", 16);\n      i0.ɵɵlistener(\"click\", function SerbInboxComponent_Template_button_click_36_listener() {\n        i0.ɵɵrestoreView(_r35);\n        const _r6 = i0.ɵɵreference(30);\n        return i0.ɵɵresetView(_r6.toggle());\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(37, \"\\n                    \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(38, \"\\n                \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(39, \"\\n            \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(40, \"\\n        \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(41, \"\\n    \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(42, \"\\n\\n\\n        \");\n      i0.ɵɵtext(43, \"\\n    \");\n      i0.ɵɵtext(44, \"\\n\\n    \");\n      i0.ɵɵtemplate(45, SerbInboxComponent_ng_template_45_Template, 6, 7, \"ng-template\", 17);\n      i0.ɵɵtext(46, \"\\n    \");\n      i0.ɵɵelement(47, \"p-confirmPopup\", 18);\n      i0.ɵɵtext(48, \"\\n\\n\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(49, \"\\n\\n\");\n      i0.ɵɵelementStart(50, \"p-dialog\", 19);\n      i0.ɵɵlistener(\"visibleChange\", function SerbInboxComponent_Template_p_dialog_visibleChange_50_listener($event) {\n        return ctx.displayGenerateReportDialog.display = $event;\n      })(\"onHide\", function SerbInboxComponent_Template_p_dialog_onHide_50_listener() {\n        i0.ɵɵrestoreView(_r35);\n        const _r8 = i0.ɵɵreference(53);\n        return i0.ɵɵresetView(_r8.resetForm());\n      });\n      i0.ɵɵtext(51, \"\\n    \");\n      i0.ɵɵelementStart(52, \"form\", null, 20);\n      i0.ɵɵtext(54, \"\\n        \");\n      i0.ɵɵelementStart(55, \"div\", 9);\n      i0.ɵɵtext(56, \"\\n            \");\n      i0.ɵɵelementStart(57, \"div\", 10);\n      i0.ɵɵtext(58, \"\\n                \");\n      i0.ɵɵelementStart(59, \"label\", 11);\n      i0.ɵɵtext(60, \"Select SERB Date: \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(61, \"\\n                \");\n      i0.ɵɵelementStart(62, \"div\", 12);\n      i0.ɵɵtext(63, \"\\n                    \");\n      i0.ɵɵelementStart(64, \"p-dropdown\", 21);\n      i0.ɵɵlistener(\"ngModelChange\", function SerbInboxComponent_Template_p_dropdown_ngModelChange_64_listener($event) {\n        return ctx.selectedDropDownSerbDate = $event;\n      });\n      i0.ɵɵtext(65, \"\\n                    \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(66, \"\\n                \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(67, \"\\n            \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(68, \"\\n        \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(69, \"\\n    \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(70, \"\\n\\n    \");\n      i0.ɵɵtemplate(71, SerbInboxComponent_ng_template_71_Template, 6, 7, \"ng-template\", 17);\n      i0.ɵɵtext(72, \"\\n    \");\n      i0.ɵɵelement(73, \"p-confirmPopup\", 22);\n      i0.ɵɵtext(74, \"\\n\\n\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(75, \"\\n\\n\\n\\n\");\n      i0.ɵɵelementStart(76, \"p-dialog\", 23);\n      i0.ɵɵlistener(\"visibleChange\", function SerbInboxComponent_Template_p_dialog_visibleChange_76_listener($event) {\n        return ctx.displayMassApprovalDialog.display = $event;\n      });\n      i0.ɵɵtext(77, \"\\n    \");\n      i0.ɵɵelementStart(78, \"h6\");\n      i0.ɵɵtext(79, \"Please attach SERB approval email\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(80, \"\\n\\n    \");\n      i0.ɵɵtemplate(81, SerbInboxComponent_form_81_Template, 5, 3, \"form\", 24);\n      i0.ɵɵtext(82, \"\\n    \");\n      i0.ɵɵtext(83, \"\\n\\n    \");\n      i0.ɵɵtemplate(84, SerbInboxComponent_span_84_Template, 2, 0, \"span\", 25);\n      i0.ɵɵtext(85, \"\\n    \");\n      i0.ɵɵtemplate(86, SerbInboxComponent_ng_template_86_Template, 6, 7, \"ng-template\", 17);\n      i0.ɵɵtext(87, \"\\n    \");\n      i0.ɵɵelement(88, \"p-confirmPopup\", 26);\n      i0.ɵɵtext(89, \"\\n    \");\n      i0.ɵɵelement(90, \"p-confirmPopup\", 27);\n      i0.ɵɵtext(91, \"\\n\\n\\n\\n\\n\");\n      i0.ɵɵelementEnd();\n    }\n    if (rf & 2) {\n      let tmp_37_0;\n      i0.ɵɵproperty(\"value\", ctx.serbDtoList)(\"totalRecords\", ctx.totalRecords)(\"selection\", ctx.selectedRows)(\"filterDelay\", 0)(\"selectAll\", ctx.selectAll)(\"loading\", ctx.loading)(\"lazy\", true);\n      i0.ɵɵadvance(12);\n      i0.ɵɵproperty(\"visible\", ctx.displaySerbDateDialog.display)(\"breakpoints\", i0.ɵɵpureFunction0(40, _c5))(\"autoZIndex\", false)(\"baseZIndex\", 99999)(\"draggable\", false)(\"modal\", true);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"formGroup\", ctx.serbDateForm);\n      i0.ɵɵadvance(15);\n      i0.ɵɵproperty(\"readonlyInput\", true)(\"showOtherMonths\", true)(\"selectOtherMonths\", true)(\"minDate\", ctx.minimumDate)(\"maxDate\", ctx.maximumDate)(\"disabledDates\", ctx.holidayDate)(\"disabledDays\", i0.ɵɵpureFunction0(41, _c6));\n      i0.ɵɵadvance(21);\n      i0.ɵɵstyleMap(i0.ɵɵpureFunction0(42, _c7));\n      i0.ɵɵproperty(\"visible\", ctx.displayGenerateReportDialog.display)(\"breakpoints\", i0.ɵɵpureFunction0(43, _c5))(\"baseZIndex\", 99999)(\"draggable\", false)(\"modal\", true)(\"resizable\", false);\n      i0.ɵɵadvance(14);\n      i0.ɵɵproperty(\"options\", ctx.serbDateOptions)(\"ngModel\", ctx.selectedDropDownSerbDate);\n      i0.ɵɵadvance(12);\n      i0.ɵɵstyleMap(i0.ɵɵpureFunction0(44, _c8));\n      i0.ɵɵproperty(\"visible\", ctx.displayMassApprovalDialog.display)(\"breakpoints\", i0.ɵɵpureFunction0(45, _c5))(\"draggable\", false)(\"resizable\", false)(\"modal\", true);\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"ngIf\", ctx.displayMassApprovalDialog.display);\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"ngIf\", (ctx.massApproveForm == null ? null : (tmp_37_0 = ctx.massApproveForm.get(\"massApproveSupportingDocs\")) == null ? null : tmp_37_0.hasError(\"invalidMaxFileLimit\")) && (ctx.massApproveForm == null ? null : (tmp_37_0 = ctx.massApproveForm.get(\"massApproveSupportingDocs\")) == null ? null : tmp_37_0.dirty));\n    }\n  },\n  dependencies: [i4.ɵNgNoValidate, i4.NgControlStatus, i4.NgControlStatusGroup, i4.NgModel, i4.NgForm, i11.NgIf, i4.FormGroupDirective, i4.FormControlName, i12.PrimeTemplate, i13.ButtonDirective, i13.Button, i14.Table, i14.SortableColumn, i14.SelectableRow, i14.SortIcon, i14.TableCheckbox, i14.TableHeaderCheckbox, i14.ColumnFilter, i15.Dropdown, i16.Dialog, i17.ConfirmPopup, i18.Calendar, i19.FileUploadComponent, i20.DefaultStringPipe],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzZXJiLWluYm94LmNvbXBvbmVudC5zY3NzIn0= */\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9tYWluL3dlYmFwcC9hcHAvd29ya2xvYWQvY2xhaW0tYXBwcm92ZXIvc2VyYi1pbmJveC9zZXJiLWluYm94LmNvbXBvbmVudC5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFDQSx3S0FBd0siLCJzb3VyY2VSb290IjoiIn0= */\"],\n  encapsulation: 2\n});","map":{"version":3,"mappings":"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","names":["i0","ctx_r15","ctx_r16","SerbInboxComponent","constructor","workloadService","nspConfirmService","cd","dateUtilsService","formBuilder","toastService","fileUploadService","ns2Http","publicHolService","codeService","exportUtilsService","group","selectedSerbDate","forms_1","required","claimsPendRecompNo","claimsDueToDate","claimsOverDue","claimsTotal","display","massApproveSupportingDocs","compose","fileupload2_directive_1","maxFileLimit","maxSingleFileSize","pagingSetting","rowsPerPage","ngOnInit","console","log","convertUnixToMoment","captionGroup","selectedDupNric","serbDateFilter","serbDateQuickilterOptions","initSerbDateFilter","value","controls","setValue","retrievePublicHol","key","getSerbRecordsData","event","loading","lastTableLazyLoadEvent","setTimeout","options","convertLazyEvent","params","append","get","subscribe","resp","body","data","dtoList","serbDtoList","cloneSerbDtoList","totalRecords","total_no_of_elems","serbDateCount","setSerbQuickFilterOptions","duplicateNrics","nricWithMoreThanOneClaimOptions","duplicateNricPlaceHolder","length","applyFilter","column","filterValue","table","filter","resetDataTable","http_1","checkSerbDateMassApproved","status","massApprovedEnable","serbDateCountMap","Map","Object","entries","sortedSDMap","sort","sortSerb","sortedSDMapArr","Array","from","x","concat","map","convertStrToMoment","dateFormat","format","serbDateOptions","a","b","onSelectAllChange","checked","selectedRows","selectAll","copyAccount","account","email","firstName","lastName","login","username","authorities","groups","onOpen","dialog","displaySerbDateDialog","serbDateForm","Date","displayMassApprovalDialog","onSubmit","type","sendToSerb","generateReport","massApprove","onConfirmPopup","fileUploadComponent","verifiedFiles","request","serbDate","claimList","claimId","claimInboxId","txnIdList","String","meta_data","id","successArr","errorArr","massApproveSerb","k","v","startsWith","push","forEach","succMsg","success","errMsg","error","error_desc","onCancelMassApproval","selectedFilesObj","onConfirmPopupMsg","onClose","req","claimantList","currentSD","success_message","exportCSV","dataTable","columns","field","header","index","dto","caseId","claimantNRIC","nric","claimantName","name","prevSD","dateTrgStart","convertUnixToDateString","start","dateTrgEnd","end","claimOptDesc","optionDesc","conflict","receiptDate","getCurrentOneYear","holidays","holidayDate","startOf","unix","constructMinMaxAvailDate","minimumDate","maximumDate","findNextSerbDate","onSelectSerbCalDate","next","add","day","includes","toDate","enableSerbDate","enableMassApprove","serbInbox","convertStrToDate","unescapeBreak","text","replace","filters","reset","ngOnDestroy","exports","selectors","viewQuery","ctx"],"sourceRoot":"","sources":["C:\\Users\\D1347074\\Desktop\\projects 2\\nspayiiapp\\src\\main\\webapp\\app\\workload\\claim-approver\\serb-inbox\\serb-inbox.component.ts","C:\\Users\\D1347074\\Desktop\\projects 2\\nspayiiapp\\src\\main\\webapp\\app\\workload\\claim-approver\\serb-inbox\\serb-inbox.component.html"],"sourcesContent":["import {ChangeDetectorRef, Component, OnDestroy, OnInit, ViewChild, ViewEncapsulation} from '@angular/core';\r\nimport {FormBuilder, FormControl, FormGroup, ValidatorFn, Validators} from '@angular/forms';\r\nimport {DateUtilsService} from 'app/core/util/date-utils.service';\r\nimport {CustomToastService} from 'app/layouts/service/customtoast.service';\r\nimport {NspConfirmationService} from 'app/shared/confirm/nsp-confirm.service';\r\nimport {FileUploadService} from 'app/shared/service/file-upload.service';\r\nimport {Ns2HttpService} from 'app/shared/service/ns2-http.service';\r\nimport {FileUploadValidator2} from 'app/shared/validator/fileupload2.directive';\r\nimport {WorkloadInboxService} from 'app/workload/service/workload-inbox.service';\r\nimport moment from 'moment';\r\nimport {LazyLoadEvent} from 'primeng/api';\r\nimport {Table} from 'primeng/table';\r\nimport {PublicHolidayService} from 'app/administration/black-out-date/public-holiday/service/public-holiday.service';\r\n\r\nimport { FileUploadComponent } from 'app/shared/component/file-upload/file-upload.component';\r\nimport { HttpParams } from '@angular/common/http';\r\nimport { formatDate } from \"@angular/common\";\r\nimport { ExportUtilsService } from 'app/core/util/export-utils.service';\r\nimport { IcCodeService } from 'app/ng-connect';\r\n\r\n\r\n\r\n@Component({\r\n  selector: 'n2-serb-inbox',\r\n  templateUrl: './serb-inbox.component.html',\r\n  styleUrls: ['./serb-inbox.component.scss'],\r\n  encapsulation: ViewEncapsulation.None\r\n})\r\nexport class SerbInboxComponent implements OnInit, OnDestroy{\r\n\r\n  serbDateQuickilterOptions: { key: string, value: string }[] = [];\r\n\r\n  selectedSerbDateFilter!: any;\r\n  currentAccount: any;\r\n  public nricWithMoreThanOneClaimOptions!: string[];\r\n  selectAll = false;\r\n  loading!: boolean;\r\n  pagingSetting: any;\r\n  captionGroup: FormGroup;\r\n  // massUploadForm: FormGroup = this.formBuilder.group({\r\n  //   massUploadControl: new FormControl([], Validators.compose([FileUploadValidator2.maxFileLimit(5),\r\n  //   FileUploadValidator2.maxSingleFileSize(2)]))\r\n  // })\r\n  serbDateForm: FormGroup = this.formBuilder.group({\r\n    // selectedSerbDate: new FormControl([], Validators.compose(DateValidator.dateNotEquals()))\r\n    selectedSerbDate: new FormControl(null, Validators.required)\r\n  })\r\n\r\n  totalRecords = 0;\r\n  public selectedRows: any[] = [];\r\n  autoResize = true;\r\n\r\n  public serbDtoList: any[] = [];\r\n  public cloneSerbDtoList: any[] = [];\r\n  public holidays: number[] = [];\r\n  public holidayDate: Date[] = [];\r\n  public serbDateClaimCount!: Map<any, any>;\r\n\r\n  // selectedSerbDate!: Date;\r\n  selectedDropDownSerbDate!: string;\r\n  // @ViewChild('fileUpload', {static: true})\r\n  // public fileUploadComponent?: FileUploadWrapperComponent;\r\n  @ViewChild('fileUpload', {static: false})\r\n  public fileUploadComponent?: FileUploadComponent;\r\n\r\n  specificFormat: string;\r\n  selectedFiles: File[];\r\n  lastTableLazyLoadEvent: LazyLoadEvent;\r\n  duplicateNricPlaceHolder = \"0 Duplicates\";\r\n\r\n  serbDateOptions: { key: string, value: string }[] = [];\r\n  minimumDate: any;\r\n  maximumDate: any;\r\n  dateFormat = \"DD-MM-YYYY\";\r\n  txnIdList: any[] = [];\r\n\r\n  quickFilterclaimCount: any = {\r\n    claimsPendRecompNo: 0,\r\n    claimsDueToDate: 0,\r\n    claimsOverDue: 0,\r\n    claimsTotal: 0\r\n  }\r\n\r\n  displaySerbDateDialog: any = {display: false};\r\n  displayMassApprovalDialog: any = {display: false};\r\n  displayGenerateReportDialog: any = {display: false};\r\n\r\n  massApprovedEnable = false;\r\n\r\n  // massApproveForm = new FormGroup({\r\n  //   massApproveSupportingDocs: new FormControl([], null)\r\n  // });\r\n  massApproveForm = new FormGroup({\r\n    massApproveSupportingDocs: new FormControl([], Validators.compose([FileUploadValidator2.maxFileLimit(4),\r\n      FileUploadValidator2.maxSingleFileSize(7),\r\n    ]))\r\n  });\r\n  // FileUploadValidator2.allowableExtension(\".txt\")\r\n\r\n  fileUploadFileLimit = 4;\r\n\r\n\r\n  @ViewChild('dataTable') table: Table;\r\n\r\n  constructor(\r\n    private workloadService: WorkloadInboxService,\r\n    private nspConfirmService: NspConfirmationService,\r\n    private cd: ChangeDetectorRef,\r\n    public dateUtilsService: DateUtilsService,\r\n    private formBuilder: FormBuilder,\r\n    private toastService: CustomToastService,\r\n    private fileUploadService: FileUploadService,\r\n    private ns2Http: Ns2HttpService,\r\n    private publicHolService: PublicHolidayService,\r\n    private codeService: IcCodeService,\r\n    private exportUtilsService: ExportUtilsService,\r\n  ) {\r\n    // this.subscription = new Subscription();\r\n    this.pagingSetting = {\r\n      rowsPerPage: 10\r\n    }\r\n\r\n\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    console.log('current time', this.dateUtilsService.convertUnixToMoment(1657121655000));\r\n    this.captionGroup = this.formBuilder.group({\r\n      selectedDupNric: new FormControl(),\r\n      serbDateFilter: new FormControl()\r\n    })\r\n    this.serbDateQuickilterOptions = this.initSerbDateFilter();\r\n\r\n    // this.selectedSerbDateFilter =  this.serbDateQuickilterOptions[0].value;\r\n    console.log('initial value', this.serbDateQuickilterOptions[0].value);\r\n    this.captionGroup.controls['serbDateFilter'].setValue(this.serbDateQuickilterOptions[0].value);\r\n\r\n    // this.minimumDate = new Date();\r\n    this.retrievePublicHol();\r\n    // this.maximumDate = this.findNextSerbDate();\r\n    // this.massApproveSubmitEnable = ;\r\n    \r\n  }\r\n\r\n  initSerbDateFilter(): any[] {\r\n    return [{\r\n      key: 'No Serb Date',\r\n      value: null\r\n    }]\r\n  }\r\n\r\n  getSerbRecordsData(event: LazyLoadEvent): void {\r\n    this.loading = true;\r\n    this.lastTableLazyLoadEvent = event;\r\n    setTimeout(() => {\r\n      const options = this.ns2Http.convertLazyEvent(event, null, null);\r\n      options.params = options.params.append(\"currentSD\", this.captionGroup.get('serbDateFilter').value);\r\n\r\n      this.workloadService.getSerbRecordsData(options).subscribe(resp => {\r\n        if (resp.body.data) {\r\n          if (resp.body.data.dtoList) {\r\n            this.serbDtoList = resp.body.data.dtoList;\r\n            this.cloneSerbDtoList = this.serbDtoList;\r\n          }\r\n          this.totalRecords = resp.body.data.total_no_of_elems;\r\n          if (resp.body.data.serbDateCount) {\r\n            this.setSerbQuickFilterOptions(resp.body.data.serbDateCount);\r\n          }\r\n          if (resp.body.data.duplicateNrics) {\r\n\r\n            this.nricWithMoreThanOneClaimOptions = resp.body.data.duplicateNrics;\r\n          }\r\n          this.duplicateNricPlaceHolder = `${this.nricWithMoreThanOneClaimOptions.length} Duplicates`\r\n\r\n        }\r\n        this.loading = false;\r\n\r\n      })\r\n      ;\r\n    }, 0);\r\n  }\r\n\r\n  applyFilter(column: string, filterValue: string): void {\r\n    this.table.filter(filterValue, column, 'equals');\r\n    if(column==='serbDate'){\r\n      this.resetDataTable();\r\n       // disable mass approve button if filter is no serb date/otherwise check\r\n      // if the mass approval has been done for current serb date\r\n      if (this.captionGroup.get('serbDateFilter').value != null) {\r\n        let params = new HttpParams();\r\n        params = params.append('serbDate', this.captionGroup.get('serbDateFilter').value);\r\n\r\n        this.workloadService.checkSerbDateMassApproved({params}).subscribe(resp => {\r\n          if (resp.status === 200) {\r\n            console.log('mass approved was ', resp.body.data)\r\n            this.massApprovedEnable = !resp.body.data;\r\n          }\r\n\r\n        });\r\n      }\r\n\r\n    }\r\n  }\r\n\r\n\r\n  setSerbQuickFilterOptions(serbDateCount: any): void {\r\n    // eslint-disable-next-line  @typescript-eslint/no-unnecessary-type-assertion\r\n    const serbDateCountMap = new Map(Object.entries(serbDateCount)) as Map<string, string>;\r\n    const sortedSDMap = new Map<string, string>([...serbDateCountMap.entries()].sort(this.sortSerb()));\r\n    const sortedSDMapArr = Array.from(sortedSDMap, ([key, value]) => (\r\n      {key, value}\r\n    )).filter(x => x.key !== 'NO_SERB');\r\n\r\n    // let qkFilterOptions = this.serbDateQuickilterOptions;\r\n    this.serbDateQuickilterOptions = this.initSerbDateFilter().concat(sortedSDMapArr.map(x => ({\r\n      key: x.key +\r\n        \" (\" + this.dateUtilsService.convertStrToMoment(x.key, this.dateFormat).format('ddd') + \")\",\r\n      value: x.key\r\n    })));\r\n    // this.serbDateQuickilterOptions = qkFilterOptions;\r\n    this.serbDateOptions = sortedSDMapArr.map(x => ({\r\n      key: x.key + \" (\" + this.dateUtilsService.convertStrToMoment(x.key, this.dateFormat).format('ddd') + \")(\" + x.value + \")\",\r\n      value: x.key\r\n    }));\r\n    console.log(\"serbdate op\", this.serbDateQuickilterOptions);\r\n\r\n  }\r\n\r\n  sortSerb() {\r\n    return function (a: any, b: any) {\r\n      if (moment(a[0], \"DD-MM-YYYY\") === moment(b[0], \"DD-MM-YYYY\")) {\r\n        return 0;\r\n      } else if (a[0] === 'NO_SERB') {\r\n        return -1;\r\n      } else if (b[0] === 'NO_SERB') {\r\n        return 1;\r\n      } else {\r\n        return moment(a[0], \"DD-MM-YYYY\") < moment(b[0], \"DD-MM-YYYY\") ? -1 : 1;\r\n      }\r\n    }\r\n  }\r\n\r\n  onSelectAllChange(event: any): void {\r\n    const checked = event.checked;\r\n    if (checked) {\r\n      this.selectedRows = this.serbDtoList;\r\n      this.selectAll = true;\r\n    } else {\r\n      this.selectedRows = [];\r\n      this.selectAll = false;\r\n    }\r\n  }\r\n\r\n  copyAccount(account: any): any {\r\n    return {\r\n      email: account.email,\r\n      firstName: account.firstName,\r\n      lastName: account.lastName,\r\n      login: account.username,\r\n      authorities: account.authorities,\r\n      groups: account.groups,\r\n    };\r\n  }\r\n\r\n  onOpen(dialog: any): void {\r\n    dialog.display = true;\r\n\r\n    if (dialog === this.displaySerbDateDialog) {\r\n      console.log(\"serb dialog displayed\");\r\n      this.serbDateForm.controls['selectedSerbDate'].setValue(new Date());\r\n    } else if (dialog === this.displayMassApprovalDialog) {\r\n      // this.massUploadForm = this.formBuilder.group({\r\n      //   // massUploadControl: new FormControl([], FileUploadValidator2(0, 1))\r\n      //   massUploadControl: new FormControl([], FileUploadValidator2(this.fileUploadComp))\r\n\r\n      // })\r\n    }\r\n  }\r\n\r\n\r\n  // TODO: Shaun to fix\r\n  // eslint-disable-next-line @typescript-eslint/require-await,@typescript-eslint/explicit-function-return-type\r\n  async onSubmit(event: Event, type: string, dialog: any) {\r\n    console.log(\"submitting\");\r\n    switch (type) {\r\n      case 'confirmSendToSerb':\r\n        this.sendToSerb(type, dialog);\r\n        break;\r\n      case 'confirmGenReport':\r\n        this.generateReport();\r\n        break;\r\n      case 'massApprove':\r\n        this.massApprove(event, type, dialog);\r\n\r\n    }\r\n  }\r\n\r\n  massApprove(event: Event, key: string, dialog: any): void {\r\n    console.log(\"submitting supporting doc for mass approval\");\r\n    this.nspConfirmService.onConfirmPopup(event, key, dialog,\r\n      () => {\r\n\r\n        // this.fileUploadComponent.fileUploadHandler(\"CLM\", \"UC1\");\r\n        console.log(\"saving file to file server based on file upload ids\");\r\n        console.log(\"the verified\", this.fileUploadComponent.verifiedFiles);\r\n        const request = {\r\n          serbDate: this.captionGroup.get('serbDateFilter').value,\r\n          claimList: this.selectedRows.map(x => ({\r\n            claimId: x.claimId,\r\n            claimInboxId: x.claimInboxId\r\n          })),\r\n          txnIdList: this.fileUploadComponent.verifiedFiles.map(x=>\r\n            String(x.meta_data.id)\r\n          )\r\n\r\n        }\r\n        const successArr: any[] = [];\r\n        const errorArr: any[] = [];\r\n        this.workloadService.massApproveSerb(request).subscribe(resp => {\r\n          if (resp.body.data) {\r\n            for (const [k, v] of Object.entries(resp.body.data)) {\r\n              if (k.startsWith(\"I\")) {\r\n                successArr.push(v);\r\n              } else if (k.startsWith(\"E\")) {\r\n                errorArr.push(v);\r\n              }\r\n            }\r\n            successArr.forEach(succMsg => {\r\n              this.toastService.success(succMsg);\r\n            })\r\n            errorArr.forEach(errMsg => {\r\n              this.toastService.error(errMsg);\r\n            })\r\n            this.resetDataTable();\r\n          }\r\n        },\r\n        (error: any) => {\r\n          console.log(\"error is\" + String(error?.error?.error_desc));\r\n          this.toastService.error(String(error?.error?.error_desc));\r\n        }\r\n      );\r\n//\r\n        // this.fileUploadService.saveFileToFileServer(data).subscribe(resp=>{\r\n        //   if(resp){\r\n        //     if(resp.ok){\r\n        //       this.toastService.success(resp.body.success_message);\r\n        //     }\r\n        //   }\r\n        // }),\r\n        // (error:any)=>{\r\n        //   this.toastService.error(error.error_desc);\r\n        // }\r\n      }\r\n    )\r\n\r\n  }\r\n\r\n  onCancelMassApproval(event: Event, key: string, dialog: any): void{\r\n    if(this.fileUploadComponent.verifiedFiles.length + this.fileUploadComponent.selectedFilesObj.length>0){\r\n      this.nspConfirmService.onConfirmPopupMsg(event, 'All uploaded supporting documents will be deleted', key, dialog, ()=>{\r\n        console.log(\"confirm removal\");\r\n        this.fileUploadComponent.onClose();\r\n      })\r\n    }else dialog.display=false\r\n\r\n\r\n  }\r\n \r\n\r\n  sendToSerb(key: string, dialog: any): void {\r\n    this.nspConfirmService.onConfirmPopup(event, key, dialog,\r\n      () => {\r\n        const req = {\r\n          serbDate: formatDate(this.serbDateForm?.get('selectedSerbDate').value, 'dd-MM-yyyy', 'en_US'),\r\n\r\n          // serbDate: formatDate(this.selectedSerbDate, 'dd-MM-yyyy', 'en_US'),\r\n          claimantList: this.selectedRows.map(x => ({\r\n            claimId: x.claimId,\r\n            currentSD: x.currentSD\r\n          }))\r\n        }\r\n        this.workloadService.sendToSerb(req).subscribe(resp => {\r\n          if (resp) {\r\n            if (resp.status === 200) {\r\n              this.toastService.success(resp.body.success_message);\r\n              this.getSerbRecordsData(this.lastTableLazyLoadEvent);\r\n            }\r\n          }\r\n        },\r\n        (error: any) => {\r\n          console.log(\"error is\" + String(error?.error?.error_desc));\r\n          this.toastService.error(String(error?.error?.error_desc));\r\n        }\r\n      );});\r\n  }\r\n\r\n  exportCSV(dataTable: Table): void{\r\n\r\n    let params = new HttpParams;\r\n    params =params.append(\"currentSD\", this.captionGroup.get('serbDateFilter').value);\r\n\r\n    console.log(\"inside the mind\", this.captionGroup.get('serbDateFilter').value);\r\n\r\n\r\n    this.workloadService.getSerbRecordsData({params}).subscribe((resp: any) => {\r\n      if(resp.body.data) {\r\n        const columns = \r\n          [\r\n            {field: 'caseId', header: 'Case ID', index: 1},\r\n            {field: 'claimantNRIC', header: 'NRIC', index: 2},\r\n            {field: 'claimantName', header: 'Name', index: 3},\r\n            {field: 'currentSD', header: 'SERB Date', index: 4},\r\n            {field: 'prevSD', header: 'Prev SERB Date', index: 5},\r\n            {field: 'dateTrgStart', header: 'Start Date', index: 6},\r\n            {field: 'dateTrgEnd', header: 'End Date', index: 7},\r\n            {field: 'claimOptDesc', header: 'Option', index: 8},\r\n            {field: 'conflict', header: 'Conflicting Approved SE', index: 9},\r\n            {field: 'receiptDate', header: 'Receipt Date', index: 10}\r\n          ];\r\n\r\n       \r\n        const dtoList:any[] = [];\r\n        resp.body.data.dtoList.forEach((data:any)=>{\r\n          const dto = {\r\n            caseId: data.caseId,\r\n            claimantNRIC: data.nric,\r\n            claimantName: data.name,\r\n            currentSD: data.currentSD,\r\n            prevSD: data.prevSD,\r\n            dateTrgStart: this.dateUtilsService.convertUnixToDateString(data.start, this.dateFormat),\r\n            dateTrgEnd: this.dateUtilsService.convertUnixToDateString(data.end, this.dateFormat),\r\n            claimOptDesc: data.optionDesc,\r\n            conflict: data.conflict,\r\n            receiptDate: this.dateUtilsService.convertUnixToDateString(data.receiptDate, this.dateFormat),\r\n          }\r\n          dtoList.push(dto);\r\n        })\r\n        this.exportUtilsService.exportCSV(dataTable, dtoList,resp.body.data.total_no_of_elems, columns, \r\n          \"serb_inbox_\".concat(formatDate(new Date(),\"dd-MM-YYYY\", 'en-US')));\r\n      this.loading = false;\r\n    }});\r\n    \r\n  }\r\n\r\n\r\n  generateReport(): void {\r\n    // this.selectedRows, this.selectedSerbDate\r\n  }\r\n\r\n  // onChangeSerbFilter(event: any): void {\r\n  //   console.log(\"selected is now \", this.captionGroup.get('serbDateFilter').value);\r\n  //   console.log(event);\r\n  //   // disable mass approve button if filter is no serb date/otherwise check\r\n  //   // if the mass approval has been done for current serb date\r\n  //   if (this.captionGroup.get('serbDateFilter').value != null) {\r\n  //     let params = new HttpParams();\r\n  //     params = params.append('serbDate', this.captionGroup.get('serbDateFilter').value);\r\n\r\n  //     this.workloadService.checkSerbDateMassApproved({params}).subscribe(resp => {\r\n  //       if (resp.status === 200) {\r\n  //         console.log('mass approved was ', resp.body.data)\r\n  //         this.massApprovedEnable = !resp.body.data;\r\n  //       }\r\n\r\n  //     });\r\n  //   }\r\n\r\n  //   this.getSerbRecordsData(this.lastTableLazyLoadEvent);\r\n\r\n    // if(this.serbDateFilter ==null){\r\n    //   this.filterNoSerb();\r\n    // }else {\r\n    //   this.serbDtoList = this.cloneSerbDtoList;\r\n    //   this.cd.detectChanges();\r\n    //   this.serbDataTable.reset();\r\n    //   this.serbDataTable.saveState;\r\n    //   this.cd.detectChanges();\r\n    //   this.serbDataTable.filter(event.value, 'serbDte','equals');\r\n    // }\r\n\r\n    // call api to get current status of selected serb date whether has been approved\r\n\r\n    // setTimeout(() => {\r\n    //   this.workloadService.getSerbDateMassApproved(this.serbDateFilter).subscribe(data => {\r\n    //    this.massApprovedEnable = data.approved;\r\n    //   });\r\n    // }, 0);\r\n\r\n  // }\r\n\r\n\r\n  // filterNoSerb(options:){\r\n\r\n  //   // this.serbDtoList = this.serbDtoList.filter(x=> x.serbDte==null);\r\n  //   // console.log(\"new\", this.serbDtoList);\r\n  //   // this.cd.detectChanges();\r\n  //   // this.serbDataTable.reset();\r\n  //   // this.serbDataTable.saveState;\r\n  //   // this.cd.detectChanges();\r\n  // }\r\n\r\n\r\n  retrievePublicHol(): void {\r\n    this.publicHolService.getCurrentOneYear(null).subscribe(resp => {\r\n      if (resp.status === 200 && resp.body.data) {\r\n        resp.body.data.forEach((x: any) => {\r\n          this.holidays.push(this.dateUtilsService.convertStrToMoment(x?.holidayDate, \"YYYY-MM-DD\").startOf('day').unix());\r\n        })\r\n      }\r\n      console.log('holiday is ', this.holidays);\r\n      this.constructMinMaxAvailDate();\r\n      this.holidayDate = this.holidays.map(x => new Date(x * 1000));\r\n      console.log('holidate', this.holidayDate);\r\n    });\r\n  }\r\n\r\n  constructMinMaxAvailDate(): void {\r\n    this.minimumDate = new Date();\r\n    this.maximumDate = this.findNextSerbDate();\r\n  }\r\n\r\n  onSelectSerbCalDate(event: Event): void {\r\n    // console.log(\"evn\", this.serbDateForm.get(\"selectedSerbDate\").value);\r\n    console.log('selected dates for ', this.selectedRows);\r\n    console.log('selected dates for ', event);\r\n  }\r\n\r\n  findNextSerbDate(): Date {\r\n\r\n    this.holidays.sort((a, b) => a - b);\r\n    console.log(\"hol\", this.holidays);\r\n    let next = moment().add(1, 'days').startOf('day');\r\n    console.log(\"current avail \" + String(next.unix()));\r\n    console.log(\"current avail \" + String(next.day()));\r\n    // For excluding public holidays and weekends\r\n    while (this.holidays.includes(next.unix()) || next.day() === 0 || next.day() === 6) {\r\n      next = next.add(1, 'days');\r\n\r\n    }\r\n    console.log(\"next avail \" + String(next.toDate()));\r\n    return next.toDate();\r\n  }\r\n\r\n  enableSerbDate(): boolean {\r\n    return this.selectedRows.length > 0;\r\n  }\r\n\r\n  enableMassApprove(): boolean {\r\n    // console.log('serbdatefilter value',typeof this.captionGroup.get('serbDateFilter').value );\r\n    for (const serbInbox of this.selectedRows) {\r\n      if (serbInbox.currentSD == null\r\n        || this.dateUtilsService.convertStrToDate(serbInbox.currentSD, this.dateFormat) > new Date()\r\n        || serbInbox.currentSD !== this.captionGroup.get('serbDateFilter').value) {\r\n        console.log('chicko');\r\n        return false;\r\n\r\n      }\r\n    }\r\n    if (this.captionGroup.get('serbDateFilter').value == null) {\r\n      return false;\r\n    }\r\n    return this.selectedRows.length > 0;\r\n  }\r\n\r\n  // resetFile(): void {\r\n  //   // this.massApproveForm.controls.\r\n  //   this.fileUploadComponent.ngOnInit();\r\n  //   // this.fileUploadComponent.onClose();\r\n  // }\r\n\r\n  unescapeBreak(text: string): string {\r\n    return text.replace('\\\\n', '\\n');\r\n  }\r\n\r\n  resetDataTable(): void {\r\n    this.selectAll = false;\r\n    this.selectedRows = [];\r\n    this.table.filters = {};\r\n    this.table.reset();\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    // this.subscription.unsubscribe();\r\n  }\r\n}\r\n","<p-table [value]=\"serbDtoList\"\r\n            [totalRecords] = \"totalRecords\"\r\n            [(selection)] = \"selectedRows\"\r\n            [filterDelay]=\"0\"\r\n            [selectAll]=\"selectAll\"\r\n            (selectAllChange)=\"onSelectAllChange($event)\"\r\n            [loading] = \"loading\"\r\n            styleClass=\"p-datatable-gridlines p-datatable-striped\"\r\n            responsiveLayout=\"scroll\"\r\n            [lazy] = \"true\"\r\n            (onLazyLoad)=\"getSerbRecordsData($event)\"\r\n            #dataTable\r\n            >\r\n\r\n            <ng-template pTemplate=\"caption\">\r\n                <form [formGroup] = \"captionGroup\">\r\n\r\n                    <!-- (onChange) = \"onChangeSerbFilter($event)\"  -->\r\n\r\n                    <div class=\"grid\">\r\n                        <div class = \"col-6 nsp-align-left flex justify-content-start align-items-center\">\r\n                            <p-button icon=\"pi pi-file-o\" [style]=\"{'margin-right': '.5em', 'margin-bottom': '.5em'}\" (click) = \"exportCSV(dataTable)\"></p-button>\r\n                            <p-dropdown [options]=\"serbDateQuickilterOptions\"\r\n                            (onChange) = \"applyFilter('serbDate', this.captionGroup.get('serbDateFilter').value)\"\r\n                            [style]=\"{width: '13rem', 'margin-right': '.5em', 'margin-bottom': '.5em'}\"\r\n                            formControlName=\"serbDateFilter\"\r\n                            optionValue = \"value\"\r\n                            optionLabel = \"key\"\r\n\r\n                            >\r\n                            </p-dropdown>\r\n\r\n                            <p-dropdown [options]=\"nricWithMoreThanOneClaimOptions\" [style]=\"{'margin-right': '.5em', 'margin-bottom': '.5em'}\" formControlName=\"selectedDupNric\" [placeholder]=\"duplicateNricPlaceHolder\" [showClear]=\"true\"\r\n                            (onChange)=\"applyFilter('claimantNRIC', captionGroup.get('selectedDupNric').value)\"\r\n                            ></p-dropdown>\r\n                                        <!--\r\n                            <p><b>{{ ecseFilter.label }}:<span style=\"color:rgb(175, 3, 3);\">\r\n                                {{ quickFilterclaimCount.claimsPendRecompNo }} (Recomp);\r\n                                {{ quickFilterclaimCount.claimsDueToDate }} (Today);\r\n                                {{ quickFilterclaimCount.claimsOverDue }} (Overdue);</span>\r\n                                {{ quickFilterclaimCount.claimsTotal }} (Total)\r\n                            </b></p> -->\r\n                        </div>\r\n\r\n\r\n                        <div class = \"col-6 nsp-align-right\">\r\n                            <button pButton  label=\"Serb Date\" (click) = \"onOpen(displaySerbDateDialog)\" [disabled]=\"!enableSerbDate()\" [style]=\"{'margin-left': '.5em', 'margin-bottom': '.5em'}\"></button>\r\n                            <button pButton  label=\"Generate Report\"  (click) = \"onOpen(displayGenerateReportDialog)\" [style]=\"{'margin-left': '.5em', 'margin-bottom': '.5em'}\"></button>\r\n                            <button pButton  label=\"Mass Approve\"\r\n                            (click) = \"onOpen(displayMassApprovalDialog)\" [style]=\"{'margin-left': '.5em', 'margin-bottom': '.5em'}\"\r\n                            [disabled] = \"!enableMassApprove() || !massApprovedEnable\"\r\n                        ></button>\r\n                        <!-- [disabled] = \"!enableMassApprove() || !massApprovedEnable\"  -->\r\n                        </div>\r\n                    </div>\r\n                </form>\r\n            </ng-template>\r\n        <ng-template pTemplate=\"header\" let-columns>\r\n            <tr>\r\n                <th scope=\"col\" style=\"width:3%\"><p-tableHeaderCheckbox></p-tableHeaderCheckbox></th>\r\n                <th scope=\"col\">SN</th>\r\n                <th scope=\"col\" pSortableColumn = \"caseId\">Case ID<p-sortIcon field=\"caseId\"></p-sortIcon>\r\n                    <p-columnFilter type=\"text\" field=\"caseId\" display=\"menu\" matchMode=\"contains\"></p-columnFilter>\r\n                </th>\r\n                <th scope=\"col\" pSortableColumn =\"claimantNRIC\">Name<p-sortIcon field=\"claimantNRIC\"></p-sortIcon>\r\n                    <p-columnFilter type=\"text\" field=\"claimantNRIC\" display=\"menu\" matchMode=\"contains\"></p-columnFilter>\r\n                </th>\r\n                <th scope=\"col\" pSortableColumn =\"currentSD\">SERB Date<p-sortIcon field=\"currentSD\"></p-sortIcon></th>\r\n                <th scope=\"col\" pSortableColumn =\"prevSD\">Prev SERB Date<p-sortIcon field=\"prevSD\"></p-sortIcon></th>\r\n                <th scope=\"col\" pSortableColumn =\"dateTrgStart\">Start Date<p-sortIcon field=\"dateTrgStart\"></p-sortIcon></th>\r\n                <th scope=\"col\" pSortableColumn =\"dateTrgEnd\">End Date<p-sortIcon field=\"dateTrgStart\"></p-sortIcon></th>\r\n                <th scope=\"col\" pSortableColumn =\"claimOptDesc\">Option<p-sortIcon field=\"claimOptDesc\"></p-sortIcon></th>\r\n                <th scope=\"col\" pSortableColumn =\"conflict\">Conflicting Approved SE<p-sortIcon field=\"conflict\"></p-sortIcon></th>\r\n                <th scope=\"col\" pSortableColumn =\"receiptDate\">Receipt Date<p-sortIcon field=\"receiptDate\"></p-sortIcon></th>\r\n\r\n            </tr>\r\n        </ng-template>\r\n    <ng-template pTemplate=\"body\" let-serbRecord let-rowIndex = \"rowIndex\" let-columns=\"columns\">\r\n\r\n        <tr [pSelectableRow]=\"serbRecord\">\r\n            <td><p-tableCheckbox [value]=\"serbRecord\"></p-tableCheckbox></td>\r\n            <td>{{ rowIndex + 1}}</td>\r\n            <td><a href=\"#\">{{serbRecord.caseId}}</a></td>\r\n            <td>{{serbRecord.nric }} <br/> {{ serbRecord.name}}</td>\r\n            <td>{{ serbRecord.currentSD | defaultString}}</td>\r\n            <td>{{ serbRecord.prevSD | defaultString  }}</td>\r\n            <td>{{ this.dateUtilsService.convertUnixToDateString(serbRecord.start, dateFormat)  | defaultString}}</td>\r\n            <td>{{ this.dateUtilsService.convertUnixToDateString(serbRecord.end, dateFormat) | defaultString}}</td>\r\n            <td>{{ serbRecord.optionDesc }}</td>\r\n            <td ><a href=\"#\"></a>{{ serbRecord.conflict | defaultString}}</td>\r\n            <td>{{ this.dateUtilsService.convertUnixToDateString(serbRecord.receiptDate, dateFormat) | defaultString}}</td>\r\n        </tr>\r\n    </ng-template>\r\n    <ng-template pTemplate=\"emptymessage\">\r\n        <tr>\r\n            <td colspan=\"11\">No records found.</td>\r\n        </tr>\r\n    </ng-template>\r\n</p-table>\r\n\r\n<p-dialog header=\"SERB Date\"\r\n[(visible)]=\"displaySerbDateDialog.display\"\r\n[breakpoints]=\"{'960px': '75vw'}\"\r\n[autoZIndex] = \"false\"\r\n[baseZIndex] = 99999\r\n[draggable]=\"false\"\r\n[modal]=\"true\"\r\n(onHide) = \"formDirective.resetForm()\">\r\n\r\n    <form  [formGroup] =\"serbDateForm\"  #formDirective=\"ngForm\" >\r\n        <!-- [(ngModel)]=\"selectedSerbDate\" -->\r\n        <!-- formControlName = selectedSerbDate -->\r\n\r\n    <!-- <form  #serbDateForm=\"ngForm\"> -->\r\n        <div class=\"form-inline\">\r\n            <div class=\"field grid\">\r\n                <label class=\"col-3 col-form-label\" for=\"serbDate\">Select SERB Date: </label>\r\n                <div class=\"col-9 input-group\">\r\n                    <p-calendar\r\n                    appendTo=\"body\"\r\n                    inputId=\"serbDate\"\r\n                    #serbDateDp\r\n                    [readonlyInput]=\"true\"\r\n                    [showOtherMonths] = \"true\"\r\n                    [selectOtherMonths] = \"true\"\r\n                    [minDate]=\"minimumDate\"\r\n                    [maxDate]=\"maximumDate\"\r\n                    (onSelect) = \"onSelectSerbCalDate($event)\"\r\n                    [disabledDates]=\"holidayDate\"\r\n                    [disabledDays]=\"[0,6]\"\r\n                    formControlName = \"selectedSerbDate\"\r\n                    position='center'>\r\n                    <!-- [(ngModel)]=\"selectedSerbDate\" -->\r\n\r\n                </p-calendar>\r\n                    <span class=\"input-group-append\">\r\n                        <button icon=\"pi pi-calendar\"\r\n                        pButton class=\"p-button-secondary\"\r\n                        (click)=\"serbDateDp.toggle()\"></button>\r\n                    </span>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </form>\r\n\r\n\r\n        <!-- <p-dropdown [options]=\"serbDateOptions\"  [(ngModel)]=\"selectedSerbDate\" optionLabel = \"value\"></p-dropdown> -->\r\n    <!-- </div> -->\r\n\r\n    <ng-template pTemplate=\"footer\">\r\n        <button pButton class =\"p-button-danger\" label=\"Cancel\"  (click)=\"displaySerbDateDialog.display=false\" [style]=\"{'margin-left': '.5em' , 'margin-bottom': '.5em'}\">\r\n        </button>\r\n        <button pButton  label=\"Submit\"  (click)=\"onSubmit($event, 'confirmSendToSerb', displaySerbDateDialog)\"\r\n        [style]=\"{'margin-left': '.5em' , 'margin-bottom': '.5em'}\"\r\n        [disabled] = \"serbDateForm?.get('selectedSerbDate').value == null\"\r\n        ></button>\r\n    </ng-template>\r\n    <p-confirmPopup key = \"confirmSendToSerb\" header=\"Confirmation\" icon=\"fa fa-question-circle\" width=\"425\"></p-confirmPopup>\r\n\r\n</p-dialog>\r\n\r\n<p-dialog header=\"Generate Report\"\r\n[(visible)]=\"displayGenerateReportDialog.display\"\r\n[breakpoints]=\"{'960px': '75vw'}\"\r\n[baseZIndex] = 99999\r\n[draggable]=\"false\"\r\n[style]=\"{width: '30vw'}\"\r\n[modal]=\"true\"\r\n(onHide) = \"generateRptForm.resetForm()\"\r\n[resizable]='false'\r\n>\r\n    <form  #generateRptForm=\"ngForm\">\r\n        <div class=\"form-inline\">\r\n            <div class=\"field grid\">\r\n                <label class=\"col-3 col-form-label\" for=\"serbDate\">Select SERB Date: </label>\r\n                <div class=\"col-9 input-group\">\r\n                    <p-dropdown [options]=\"serbDateOptions\"\r\n                    [(ngModel)]=\"selectedDropDownSerbDate\"\r\n                    optionLabel = \"key\" optionValue = \"value\"\r\n                    placeholder=\"Please select\"\r\n                    appendTo=\"body\">\r\n                    </p-dropdown>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </form>\r\n\r\n    <ng-template pTemplate=\"footer\">\r\n        <button pButton class =\"p-button-danger\" label=\"Cancel\"  (click)=\"displayGenerateReportDialog.display=false\" [style]=\"{'margin-left': '.5em' , 'margin-bottom': '.5em'}\">\r\n        </button>\r\n        <button pButton  label=\"Submit\"  (click)=\"onSubmit($event, 'confirmGenReport', displayGenerateReportDialog)\"\r\n        [style]=\"{'margin-left': '.5em' , 'margin-bottom': '.5em'}\"\r\n        [disabled] = \"selectedDropDownSerbDate == null\"\r\n        ></button>\r\n\r\n    </ng-template>\r\n    <p-confirmPopup key = \"confirmGenReport\" header=\"Confirmation\" icon=\"fa fa-question-circle\" width=\"425\"></p-confirmPopup>\r\n\r\n</p-dialog>\r\n\r\n\r\n\r\n<p-dialog header=\"Mass Approval\"\r\n[(visible)]=\"displayMassApprovalDialog.display\"\r\n[breakpoints]=\"{'960px': '75vw'}\"\r\n[style]=\"{width: '50vw'}\"\r\n[draggable]=\"false\" [resizable]=\"false\"\r\n[modal]=\"true\"\r\n\r\n>\r\n    <h6>Please attach SERB approval email</h6>\r\n\r\n    <form *ngIf=\"displayMassApprovalDialog.display\" [formGroup]=\"massApproveForm\"   >\r\n        <n2-file-upload #fileUpload id=\"massApproveSupportingDocs\" style=\"width:400px\" formControlName=\"massApproveSupportingDocs\"\r\n        [externalFileLimit] = \"fileUploadFileLimit\" [showCSV]=true></n2-file-upload>\r\n    </form>\r\n    <!-- <form [formGroup]=\"massApproveForm\"   >\r\n        <n2-file-upload #fileUpload id=\"massApproveSupportingDocs\" style=\"width:400px\" formControlName=\"massApproveSupportingDocs\"\r\n        [externalFileLimit] = \"fileUploadFileLimit\" [showCSV]=true></n2-file-upload>\r\n    </form> -->\r\n\r\n    <span *ngIf=\"(massApproveForm?.get('massApproveSupportingDocs')?.hasError('invalidMaxFileLimit')\r\n    && massApproveForm?.get('massApproveSupportingDocs')?.dirty)\"\r\n                class='p-error'>Maximum of  file can be uploaded</span>\r\n    <ng-template pTemplate=\"footer\">\r\n        <button pButton class =\"p-button-danger\" label=\"Cancel\" (click)=\"onCancelMassApproval($event, 'massApproveCancel', displayMassApprovalDialog)\"  [style]=\"{'margin-left': '.5em' , 'margin-bottom': '.5em'}\"\r\n        ></button>\r\n        <button pButton (keyup)=\"true\" [disabled]=\"massApproveForm.get('massApproveSupportingDocs').value.length<=0\r\n        || massApproveForm.get('massApproveSupportingDocs').errors!=null\" label=\"Submit\" (click)=\"onSubmit($event, 'massApprove', displayMassApprovalDialog)\"   [style]=\"{'margin-left': '.5em' , 'margin-bottom': '.5em'}\"\r\n        ></button>\r\n        <!-- \"fileUploadComponent?.n2fileUpload?.pFileUpload?.files.length<=0\r\n        || fileUploadComponent?.n2fileUpload?.fileUploadForm.controls['fileControl'].errors!=null\" -->\r\n    </ng-template>\r\n    <p-confirmPopup key = \"massApprove\" header=\"Confirmation\" icon=\"fa fa-question-circle\" width=\"425\"></p-confirmPopup>\r\n    <p-confirmPopup key = \"massApproveCancel\" header=\"Confirmation\" icon=\"fa fa-question-circle\" width=\"425\"></p-confirmPopup>\r\n\r\n\r\n\r\n\r\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}