{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AuthInterceptor = void 0;\nconst tslib_1 = require(\"tslib\");\nconst http_1 = require(\"@angular/common/http\");\nconst operators_1 = require(\"rxjs/operators\");\nconst i0 = tslib_1.__importStar(require(\"@angular/core\"));\nconst i1 = tslib_1.__importStar(require(\"ngx-webstorage\"));\nconst i2 = tslib_1.__importStar(require(\"../config/application-config.service\"));\nclass AuthInterceptor {\n  constructor(localStorage, sessionStorage, applicationConfigService) {\n    this.localStorage = localStorage;\n    this.sessionStorage = sessionStorage;\n    this.applicationConfigService = applicationConfigService;\n  }\n  intercept(request, next) {\n    const serverApiUrl = this.applicationConfigService.getEndpointFor('');\n    if (!request.url || request.url.startsWith('http') && !(serverApiUrl && request.url.startsWith(serverApiUrl))) {\n      return next.handle(request);\n    }\n    const token = this.localStorage.retrieve('authenticationToken') ?? this.sessionStorage.retrieve('authenticationToken');\n    if (token) {\n      request = request.clone({\n        setHeaders: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n    }\n    return next.handle(request).pipe((0, operators_1.tap)(event => {\n      if (event instanceof http_1.HttpResponse) {\n        event.headers.keys().forEach(entry => {\n          if (entry.toLowerCase().endsWith('refresh_token')) {\n            this.sessionStorage.store('authenticationToken', event.headers.get(entry));\n          }\n        });\n      }\n    }));\n  }\n}\nexports.AuthInterceptor = AuthInterceptor;\nAuthInterceptor.ɵfac = function AuthInterceptor_Factory(t) {\n  return new (t || AuthInterceptor)(i0.ɵɵinject(i1.LocalStorageService), i0.ɵɵinject(i1.SessionStorageService), i0.ɵɵinject(i2.ApplicationConfigService));\n};\nAuthInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthInterceptor,\n  factory: AuthInterceptor.ɵfac\n});","map":{"version":3,"mappings":";;;;;;;AAGA;AACA;;;;AAGA,MACaA,eAAe;EAC1BC,YACUC,YAAiC,EACjCC,cAAqC,EACrCC,wBAAkD;IAFlD,iBAAY,GAAZF,YAAY;IACZ,mBAAc,GAAdC,cAAc;IACd,6BAAwB,GAAxBC,wBAAwB;EAC/B;EAEHC,SAAS,CAACC,OAAyB,EAAEC,IAAiB;IACpD,MAAMC,YAAY,GAAG,IAAI,CAACJ,wBAAwB,CAACK,cAAc,CAAC,EAAE,CAAC;IACrE,IAAI,CAACH,OAAO,CAACI,GAAG,IAAKJ,OAAO,CAACI,GAAG,CAACC,UAAU,CAAC,MAAM,CAAC,IAAI,EAAEH,YAAY,IAAIF,OAAO,CAACI,GAAG,CAACC,UAAU,CAACH,YAAY,CAAC,CAAE,EAAE;MAC/G,OAAOD,IAAI,CAACK,MAAM,CAACN,OAAO,CAAC;;IAG7B,MAAMO,KAAK,GAAkB,IAAI,CAACX,YAAY,CAACY,QAAQ,CAAC,qBAAqB,CAAC,IAAI,IAAI,CAACX,cAAc,CAACW,QAAQ,CAAC,qBAAqB,CAAC;IACrI,IAAID,KAAK,EAAE;MACTP,OAAO,GAAGA,OAAO,CAACS,KAAK,CAAC;QACtBC,UAAU,EAAE;UACVC,aAAa,EAAE,UAAUJ,KAAK;;OAEjC,CAAC;;IAEJ,OAAON,IAAI,CAACK,MAAM,CAACN,OAAO,CAAC,CAACY,IAAI,CAC9B,mBAAG,EAAEC,KAAqB,IAAI;MAC5B,IAAIA,KAAK,YAAYC,mBAAY,EAAE;QACjCD,KAAK,CAACE,OAAO,CAACC,IAAI,EAAE,CAACC,OAAO,CAACC,KAAK,IAAG;UACnC,IAAIA,KAAK,CAACC,WAAW,EAAE,CAACC,QAAQ,CAAC,eAAe,CAAC,EAAE;YACjD,IAAI,CAACvB,cAAc,CAACwB,KAAK,CAAC,qBAAqB,EAAER,KAAK,CAACE,OAAO,CAACO,GAAG,CAACJ,KAAK,CAAC,CAAC;;QAE9E,CAAC,CAAC;;IAEN,CAAC,CAAC,CACH;EACH;;AAjCFK;;mBACa7B,eAAe;AAAA;;SAAfA,eAAe;EAAA8B,SAAf9B,eAAe;AAAA","names":["AuthInterceptor","constructor","localStorage","sessionStorage","applicationConfigService","intercept","request","next","serverApiUrl","getEndpointFor","url","startsWith","handle","token","retrieve","clone","setHeaders","Authorization","pipe","event","http_1","headers","keys","forEach","entry","toLowerCase","endsWith","store","get","exports","factory"],"sourceRoot":"","sources":["C:\\Users\\D1347074\\Desktop\\projects 2\\nspayiiapp\\src\\main\\webapp\\app\\core\\interceptor\\auth.interceptor.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { LocalStorageService, SessionStorageService } from 'ngx-webstorage';\r\nimport { HttpInterceptor, HttpRequest, HttpHandler, HttpEvent, HttpResponse } from '@angular/common/http';\r\nimport { tap } from 'rxjs/operators';\r\nimport { ApplicationConfigService } from '../config/application-config.service';\r\n\r\n@Injectable()\r\nexport class AuthInterceptor implements HttpInterceptor {\r\n  constructor(\r\n    private localStorage: LocalStorageService,\r\n    private sessionStorage: SessionStorageService,\r\n    private applicationConfigService: ApplicationConfigService\r\n  ) {}\r\n\r\n  intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n    const serverApiUrl = this.applicationConfigService.getEndpointFor('');\r\n    if (!request.url || (request.url.startsWith('http') && !(serverApiUrl && request.url.startsWith(serverApiUrl)))) {\r\n      return next.handle(request);\r\n    }\r\n\r\n    const token: string | null = this.localStorage.retrieve('authenticationToken') ?? this.sessionStorage.retrieve('authenticationToken');\r\n    if (token) {\r\n      request = request.clone({\r\n        setHeaders: {\r\n          Authorization: `Bearer ${token}`,\r\n        },\r\n      });\r\n    }\r\n    return next.handle(request).pipe(\r\n      tap((event: HttpEvent<any>) => {\r\n        if (event instanceof HttpResponse) {\r\n          event.headers.keys().forEach(entry => {\r\n            if (entry.toLowerCase().endsWith('refresh_token')) {\r\n              this.sessionStorage.store('authenticationToken', event.headers.get(entry));\r\n            }\r\n          });\r\n        }\r\n      })\r\n    );\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}