{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.IcCodeService = void 0;\nconst tslib_1 = require(\"tslib\");\nconst operators_1 = require(\"rxjs/operators\");\nconst i0 = tslib_1.__importStar(require(\"@angular/core\"));\nconst i1 = tslib_1.__importStar(require(\"@angular/common/http\"));\nclass IcCodeService {\n  constructor(http) {\n    this.http = http;\n    this.resourceUrlForFindMultipleCodeType = 'api/codes';\n    this.resourceUrlForFindAllChildLocaleCodes = 'api/codes/childCodes';\n    this.resourceUrlForGetCode = 'api/code';\n  }\n  /**\r\n   *  Performs http 'Get' request to find all local codes by multiple CodeType\r\n   * @param codeTypeIdsAsStr\r\n   * @returns {Observable<R>}\r\n   */\n  gets(codeTypeIdsAsStr) {\n    return this.http.get(`${this.resourceUrlForFindMultipleCodeType}/${codeTypeIdsAsStr}`).pipe((0, operators_1.map)(res => {\n      try {\n        return res;\n      } catch (error) {\n        console.error(error);\n        return null;\n      }\n    }));\n  }\n  /**\r\n   *  Performs http 'Get' request to get one code\r\n   * @param codeTypeBZId\r\n   * @param codeId\r\n   * @returns {Observable<R>}\r\n   */\n  get(codeTypeBZId, codeId) {\n    return this.http.get(`${this.resourceUrlForGetCode}/${codeTypeBZId}/${codeId}`).pipe((0, operators_1.map)(response => response));\n  }\n  /**\r\n   *  Performs http 'Get' request to find all child local codes\r\n   * @param parentCodeTypeId\r\n   * @param parentCodeId\r\n   * @returns {Observable<R>}\r\n   */\n  getChildren(parentCodeTypeId, parentCodeId) {\n    return this.http.get(`${this.resourceUrlForFindAllChildLocaleCodes}/${parentCodeTypeId}/${parentCodeId}`).pipe((0, operators_1.map)(resp => resp));\n  }\n}\nexports.IcCodeService = IcCodeService;\nIcCodeService.ɵfac = function IcCodeService_Factory(t) {\n  return new (t || IcCodeService)(i0.ɵɵinject(i1.HttpClient));\n};\nIcCodeService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: IcCodeService,\n  factory: IcCodeService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";;;;;;;AAGA;;;AAWA,MACaA,aAAa;EAKxBC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAJhB,uCAAkC,GAAG,WAAW;IAChD,0CAAqC,GAAG,sBAAsB;IAC9D,0BAAqB,GAAG,UAAU;EAEF;EAExC;;;;;EAKAC,IAAI,CAACC,gBAAwB;IAC3B,OAAO,IAAI,CAACF,IAAI,CAACG,GAAG,CAAC,GAAG,IAAI,CAACC,kCAAkC,IAAIF,gBAAgB,EAAE,CAAC,CAACG,IAAI,CACzF,mBAAG,EAACC,GAAG,IAAG;MACR,IAAI;QACF,OAAOA,GAAG;OACX,CAAC,OAAOC,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC;QACpB,OAAO,IAAI;;IAEf,CAAC,CAAC,CACH;EACH;EAEA;;;;;;EAMAJ,GAAG,CAACM,YAAoB,EAAEC,MAAc;IACtC,OAAO,IAAI,CAACV,IAAI,CAACG,GAAG,CAAC,GAAG,IAAI,CAACQ,qBAAqB,IAAIF,YAAY,IAAIC,MAAM,EAAE,CAAC,CAACL,IAAI,CAAC,mBAAG,EAACO,QAAQ,IAAIA,QAAQ,CAAC,CAAC;EACjH;EAEA;;;;;;EAMAC,WAAW,CAACC,gBAAwB,EAAEC,YAAoB;IACxD,OAAO,IAAI,CAACf,IAAI,CAACG,GAAG,CAAC,GAAG,IAAI,CAACa,qCAAqC,IAAIF,gBAAgB,IAAIC,YAAY,EAAE,CAAC,CAACV,IAAI,CAAC,mBAAG,EAACY,IAAI,IAAIA,IAAI,CAAC,CAAC;EACnI;;AA5CFC;;mBACapB,aAAa;AAAA;;SAAbA,aAAa;EAAAqB,SAAbrB,aAAa;EAAAsB,YADA;AAAM","names":["IcCodeService","constructor","http","gets","codeTypeIdsAsStr","get","resourceUrlForFindMultipleCodeType","pipe","res","error","console","codeTypeBZId","codeId","resourceUrlForGetCode","response","getChildren","parentCodeTypeId","parentCodeId","resourceUrlForFindAllChildLocaleCodes","resp","exports","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\D1347074\\Desktop\\projects 2\\nspayiiapp\\src\\main\\webapp\\app\\ng-connect\\user-picker\\ic-code-service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { Ns2HttpService } from 'app/shared/service/ns2-http.service';\r\n\r\nexport interface CodeView {\r\n  codetypeId?: string;\r\n  codeId?: string;\r\n  label?: any;\r\n  codeSeq?: number;\r\n  status?: string;\r\n}\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class IcCodeService {\r\n  private resourceUrlForFindMultipleCodeType = 'api/codes';\r\n  private resourceUrlForFindAllChildLocaleCodes = 'api/codes/childCodes';\r\n  private resourceUrlForGetCode = 'api/code';\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  /**\r\n   *  Performs http 'Get' request to find all local codes by multiple CodeType\r\n   * @param codeTypeIdsAsStr\r\n   * @returns {Observable<R>}\r\n   */\r\n  gets(codeTypeIdsAsStr: string): Observable<any> {\r\n    return this.http.get(`${this.resourceUrlForFindMultipleCodeType}/${codeTypeIdsAsStr}`).pipe(\r\n      map(res => {\r\n        try {\r\n          return res;\r\n        } catch (error) {\r\n          console.error(error);\r\n          return null;\r\n        }\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   *  Performs http 'Get' request to get one code\r\n   * @param codeTypeBZId\r\n   * @param codeId\r\n   * @returns {Observable<R>}\r\n   */\r\n  get(codeTypeBZId: string, codeId: string): Observable<any> {\r\n    return this.http.get(`${this.resourceUrlForGetCode}/${codeTypeBZId}/${codeId}`).pipe(map(response => response));\r\n  }\r\n\r\n  /**\r\n   *  Performs http 'Get' request to find all child local codes\r\n   * @param parentCodeTypeId\r\n   * @param parentCodeId\r\n   * @returns {Observable<R>}\r\n   */\r\n  getChildren(parentCodeTypeId: string, parentCodeId: string): Observable<any> {\r\n    return this.http.get(`${this.resourceUrlForFindAllChildLocaleCodes}/${parentCodeTypeId}/${parentCodeId}`).pipe(map(resp => resp));\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}