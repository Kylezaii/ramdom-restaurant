{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.JobExecutionPopupService = void 0;\nconst tslib_1 = require(\"tslib\");\nconst job_execution_model_1 = require(\"./job-execution.model\");\nconst i0 = tslib_1.__importStar(require(\"@angular/core\"));\nconst i1 = tslib_1.__importStar(require(\"@angular/common\"));\nconst i2 = tslib_1.__importStar(require(\"@ng-bootstrap/ng-bootstrap\"));\nconst i3 = tslib_1.__importStar(require(\"@angular/router\"));\nconst i4 = tslib_1.__importStar(require(\"./job-execution.service\"));\nclass JobExecutionPopupService {\n  constructor(datePipe, modalService, router, jobExecutionService) {\n    this.datePipe = datePipe;\n    this.modalService = modalService;\n    this.router = router;\n    this.jobExecutionService = jobExecutionService;\n    this.ngbModalRef = null;\n  }\n  open(component, id) {\n    return new Promise(resolve => {\n      // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n      const isOpen = this.ngbModalRef !== null;\n      if (isOpen) {\n        resolve(this.ngbModalRef);\n      }\n      if (id) {\n        this.jobExecutionService.find(id).subscribe(jobExecutionResponse => {\n          const jobExecution = jobExecutionResponse.body;\n          jobExecution.startTime = this.datePipe.transform(jobExecution.startTime, 'yyyy-MM-ddTHH:mm:ss');\n          jobExecution.endTime = this.datePipe.transform(jobExecution.endTime, 'yyyy-MM-ddTHH:mm:ss');\n          this.ngbModalRef = this.jobExecutionModalRef(component, jobExecution);\n          resolve(this.ngbModalRef);\n        });\n      } else {\n        // setTimeout used as a workaround for getting ExpressionChangedAfterItHasBeenCheckedError\n        setTimeout(() => {\n          this.ngbModalRef = this.jobExecutionModalRef(component, new job_execution_model_1.JobExecution());\n          resolve(this.ngbModalRef);\n        }, 0);\n      }\n    });\n  }\n  jobExecutionModalRef(component, jobExecution) {\n    const modalRef = this.modalService.open(component, {\n      size: 'lg',\n      backdrop: 'static'\n    });\n    modalRef.componentInstance.jobExecution = jobExecution;\n    modalRef.result.then(() => {\n      this.router.navigate([{\n        outlets: {\n          popup: null\n        }\n      }], {\n        replaceUrl: true,\n        queryParamsHandling: 'merge'\n      });\n      this.ngbModalRef = null;\n    }, () => {\n      this.router.navigate([{\n        outlets: {\n          popup: null\n        }\n      }], {\n        replaceUrl: true,\n        queryParamsHandling: 'merge'\n      });\n      this.ngbModalRef = null;\n    });\n    return modalRef;\n  }\n}\nexports.JobExecutionPopupService = JobExecutionPopupService;\nJobExecutionPopupService.ɵfac = function JobExecutionPopupService_Factory(t) {\n  return new (t || JobExecutionPopupService)(i0.ɵɵinject(i1.DatePipe), i0.ɵɵinject(i2.NgbModal), i0.ɵɵinject(i3.Router), i0.ɵɵinject(i4.JobExecutionService));\n};\nJobExecutionPopupService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: JobExecutionPopupService,\n  factory: JobExecutionPopupService.ɵfac\n});","map":{"version":3,"mappings":";;;;;;;AAKA;;;;;;AAGA,MACaA,wBAAwB;EAGnCC,YACUC,QAAkB,EAClBC,YAAsB,EACtBC,MAAc,EACdC,mBAAwC;IAHxC,aAAQ,GAARH,QAAQ;IACR,iBAAY,GAAZC,YAAY;IACZ,WAAM,GAANC,MAAM;IACN,wBAAmB,GAAnBC,mBAAmB;IAE3B,IAAI,CAACC,WAAW,GAAG,IAAW;EAChC;EAEAC,IAAI,CAACC,SAAoB,EAAEC,EAAiB;IAC1C,OAAO,IAAIC,OAAO,CAAcC,OAAO,IAAG;MACxC;MACA,MAAMC,MAAM,GAAG,IAAI,CAACN,WAAW,KAAK,IAAI;MACxC,IAAIM,MAAM,EAAE;QACVD,OAAO,CAAC,IAAI,CAACL,WAAW,CAAC;;MAG3B,IAAIG,EAAE,EAAE;QACN,IAAI,CAACJ,mBAAmB,CAACQ,IAAI,CAACJ,EAAE,CAAC,CAACK,SAAS,CAAEC,oBAAgD,IAAI;UAC/F,MAAMC,YAAY,GAAiBD,oBAAoB,CAACE,IAAW;UACnED,YAAY,CAACE,SAAS,GAAG,IAAI,CAAChB,QAAQ,CAACiB,SAAS,CAACH,YAAY,CAACE,SAAS,EAAE,qBAAqB,CAAC;UAC/FF,YAAY,CAACI,OAAO,GAAG,IAAI,CAAClB,QAAQ,CAACiB,SAAS,CAACH,YAAY,CAACI,OAAO,EAAE,qBAAqB,CAAC;UAC3F,IAAI,CAACd,WAAW,GAAG,IAAI,CAACe,oBAAoB,CAACb,SAAS,EAAEQ,YAAY,CAAC;UACrEL,OAAO,CAAC,IAAI,CAACL,WAAW,CAAC;QAC3B,CAAC,CAAC;OACH,MAAM;QACL;QACAgB,UAAU,CAAC,MAAK;UACd,IAAI,CAAChB,WAAW,GAAG,IAAI,CAACe,oBAAoB,CAACb,SAAS,EAAE,IAAIe,kCAAY,EAAE,CAAC;UAC3EZ,OAAO,CAAC,IAAI,CAACL,WAAW,CAAC;QAC3B,CAAC,EAAE,CAAC,CAAC;;IAET,CAAC,CAAC;EACJ;EAEAe,oBAAoB,CAACb,SAAoB,EAAEQ,YAA0B;IACnE,MAAMQ,QAAQ,GAAG,IAAI,CAACrB,YAAY,CAACI,IAAI,CAACC,SAAS,EAAE;MAAEiB,IAAI,EAAE,IAAI;MAAEC,QAAQ,EAAE;IAAQ,CAAE,CAAC;IACtFF,QAAQ,CAACG,iBAAiB,CAACX,YAAY,GAAGA,YAAY;IACtDQ,QAAQ,CAACI,MAAM,CAACC,IAAI,CAClB,MAAK;MACH,IAAI,CAACzB,MAAM,CAAC0B,QAAQ,CAAC,CAAC;QAAEC,OAAO,EAAE;UAAEC,KAAK,EAAE;QAAI;MAAE,CAAE,CAAC,EAAE;QAAEC,UAAU,EAAE,IAAI;QAAEC,mBAAmB,EAAE;MAAO,CAAE,CAAC;MACxG,IAAI,CAAC5B,WAAW,GAAG,IAAW;IAChC,CAAC,EACD,MAAK;MACH,IAAI,CAACF,MAAM,CAAC0B,QAAQ,CAAC,CAAC;QAAEC,OAAO,EAAE;UAAEC,KAAK,EAAE;QAAI;MAAE,CAAE,CAAC,EAAE;QAAEC,UAAU,EAAE,IAAI;QAAEC,mBAAmB,EAAE;MAAO,CAAE,CAAC;MACxG,IAAI,CAAC5B,WAAW,GAAG,IAAW;IAChC,CAAC,CACF;IACD,OAAOkB,QAAQ;EACjB;;AArDFW;;mBACanC,wBAAwB;AAAA;;SAAxBA,wBAAwB;EAAAoC,SAAxBpC,wBAAwB;AAAA","names":["JobExecutionPopupService","constructor","datePipe","modalService","router","jobExecutionService","ngbModalRef","open","component","id","Promise","resolve","isOpen","find","subscribe","jobExecutionResponse","jobExecution","body","startTime","transform","endTime","jobExecutionModalRef","setTimeout","job_execution_model_1","modalRef","size","backdrop","componentInstance","result","then","navigate","outlets","popup","replaceUrl","queryParamsHandling","exports","factory"],"sourceRoot":"","sources":["C:\\Users\\D1347074\\Desktop\\projects 2\\nspayiiapp\\src\\main\\webapp\\app\\admin\\batch\\job-execution\\job-execution-popup.service.ts"],"sourcesContent":["import { Injectable, Component } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { NgbModal, NgbModalRef } from '@ng-bootstrap/ng-bootstrap';\r\nimport { HttpResponse } from '@angular/common/http';\r\nimport { DatePipe } from '@angular/common';\r\nimport { JobExecution } from './job-execution.model';\r\nimport { JobExecutionService } from './job-execution.service';\r\n\r\n@Injectable()\r\nexport class JobExecutionPopupService {\r\n  private ngbModalRef: NgbModalRef;\r\n\r\n  constructor(\r\n    private datePipe: DatePipe,\r\n    private modalService: NgbModal,\r\n    private router: Router,\r\n    private jobExecutionService: JobExecutionService\r\n  ) {\r\n    this.ngbModalRef = null as any;\r\n  }\r\n\r\n  open(component: Component, id?: number | any): Promise<NgbModalRef> {\r\n    return new Promise<NgbModalRef>(resolve => {\r\n      // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\r\n      const isOpen = this.ngbModalRef !== null;\r\n      if (isOpen) {\r\n        resolve(this.ngbModalRef);\r\n      }\r\n\r\n      if (id) {\r\n        this.jobExecutionService.find(id).subscribe((jobExecutionResponse: HttpResponse<JobExecution>) => {\r\n          const jobExecution: JobExecution = jobExecutionResponse.body as any;\r\n          jobExecution.startTime = this.datePipe.transform(jobExecution.startTime, 'yyyy-MM-ddTHH:mm:ss');\r\n          jobExecution.endTime = this.datePipe.transform(jobExecution.endTime, 'yyyy-MM-ddTHH:mm:ss');\r\n          this.ngbModalRef = this.jobExecutionModalRef(component, jobExecution);\r\n          resolve(this.ngbModalRef);\r\n        });\r\n      } else {\r\n        // setTimeout used as a workaround for getting ExpressionChangedAfterItHasBeenCheckedError\r\n        setTimeout(() => {\r\n          this.ngbModalRef = this.jobExecutionModalRef(component, new JobExecution());\r\n          resolve(this.ngbModalRef);\r\n        }, 0);\r\n      }\r\n    });\r\n  }\r\n\r\n  jobExecutionModalRef(component: Component, jobExecution: JobExecution): NgbModalRef {\r\n    const modalRef = this.modalService.open(component, { size: 'lg', backdrop: 'static' });\r\n    modalRef.componentInstance.jobExecution = jobExecution;\r\n    modalRef.result.then(\r\n      () => {\r\n        this.router.navigate([{ outlets: { popup: null } }], { replaceUrl: true, queryParamsHandling: 'merge' });\r\n        this.ngbModalRef = null as any;\r\n      },\r\n      () => {\r\n        this.router.navigate([{ outlets: { popup: null } }], { replaceUrl: true, queryParamsHandling: 'merge' });\r\n        this.ngbModalRef = null as any;\r\n      }\r\n    );\r\n    return modalRef;\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}