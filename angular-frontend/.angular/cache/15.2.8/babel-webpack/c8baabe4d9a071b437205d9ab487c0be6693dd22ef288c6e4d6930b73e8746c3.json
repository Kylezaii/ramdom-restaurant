{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.toUnixParser = exports.toDateParser = exports.endDateMoreThanStartDateMsg = exports.passwordMatchMsg = exports.requiredValidationMsg = void 0;\nconst tslib_1 = require(\"tslib\");\nconst report_json_1 = tslib_1.__importDefault(require(\"../../../i18n/en/report.json\"));\nfunction requiredValidationMsg(err, field) {\n  console.log(err, field);\n  return report_json_1.default.nspay2App.report.validation.V001;\n}\nexports.requiredValidationMsg = requiredValidationMsg;\nfunction passwordMatchMsg(control) {\n  const {\n    password,\n    passwordConfirm\n  } = control.value;\n  if (passwordConfirm && password && passwordConfirm !== password) {\n    return {\n      fieldMatch: {\n        message: 'Password Not Matching'\n      }\n    };\n  } else return null;\n}\nexports.passwordMatchMsg = passwordMatchMsg;\nfunction endDateMoreThanStartDateMsg(control) {\n  const {\n    startDate,\n    endDate\n  } = control.value;\n  if (startDate && endDate && new Date(startDate) >= new Date(endDate)) {\n    return {\n      endDateMoreThanStartDate: {\n        message: report_json_1.default.nspay2App.report.validation.V005\n      }\n    };\n  } else return null;\n}\nexports.endDateMoreThanStartDateMsg = endDateMoreThanStartDateMsg;\nfunction toDateParser(unix) {\n  return new Date(unix);\n}\nexports.toDateParser = toDateParser;\nfunction toUnixParser(date) {\n  return date.getTime();\n}\nexports.toUnixParser = toUnixParser;","map":{"version":3,"mappings":";;;;;;;AAGA;AAEA,SAAgBA,qBAAqB,CAACC,GAAQ,EAAEC,KAAwB;EACtEC,OAAO,CAACC,GAAG,CAACH,GAAG,EAACC,KAAK,CAAC;EACtB,OAAOG,qBAAM,CAACC,SAAS,CAACC,MAAM,CAACC,UAAU,CAACC,IAAI;AAChD;AAHAC;AAKA,SAAgBC,gBAAgB,CAACC,OAAwB;EACvD,MAAM;IAAEC,QAAQ;IAAEC;EAAe,CAAE,GAAGF,OAAO,CAACG,KAAK;EAEnD,IAAID,eAAe,IAAID,QAAQ,IAAKC,eAAe,KAAID,QAAQ,EAAC;IAC9D,OAAO;MAAEG,UAAU,EAAE;QAAEC,OAAO,EAAE;MAAuB;IAAE,CAAE;GAC5D,MAAK,OAAO,IAAI;AACnB;AANAP;AAQA,SAAgBQ,2BAA2B,CAACN,OAAwB;EAClE,MAAM;IAAEO,SAAS;IAAEC;EAAO,CAAE,GAAGR,OAAO,CAACG,KAAK;EAE5C,IAAII,SAAS,IAAIC,OAAO,IAAK,IAAIC,IAAI,CAACF,SAAS,CAAC,IAAI,IAAIE,IAAI,CAACD,OAAO,CAAC,EAAC;IACpE,OAAO;MAAEE,wBAAwB,EAAE;QAAEL,OAAO,EAAEZ,qBAAM,CAACC,SAAS,CAACC,MAAM,CAACC,UAAU,CAACe;MAAI;IAAE,CAAE;GAC1F,MAAK,OAAO,IAAI;AACnB;AANAb;AAQA,SAAgBc,YAAY,CAACC,IAAY;EAEvC,OAAO,IAAIJ,IAAI,CAACI,IAAI,CAAC;AACvB;AAHAf;AAKA,SAAgBgB,YAAY,CAACC,IAAW;EAEtC,OAAOA,IAAI,CAACC,OAAO,EAAE;AACvB;AAHAlB","names":["requiredValidationMsg","err","field","console","log","report_json_1","nspay2App","report","validation","V001","exports","passwordMatchMsg","control","password","passwordConfirm","value","fieldMatch","message","endDateMoreThanStartDateMsg","startDate","endDate","Date","endDateMoreThanStartDate","V005","toDateParser","unix","toUnixParser","date","getTime"],"sourceRoot":"","sources":["C:\\Users\\D1347074\\Desktop\\projects 2\\nspayiiapp\\src\\main\\webapp\\app\\shared\\validator\\formly-validator.directive.ts"],"sourcesContent":["import { ValidatorFn, AbstractControl } from '@angular/forms';\r\nimport { FormlyFieldConfig } from '@ngx-formly/core';\r\nimport { NSPAppConstants } from 'app/shared/constants/nspapp.constants';\r\nimport report from '../../../i18n/en/report.json';\r\n\r\nexport function requiredValidationMsg(err: any, field: FormlyFieldConfig){\r\n  console.log(err,field);\r\n  return report.nspay2App.report.validation.V001;\r\n}\r\n\r\nexport function passwordMatchMsg(control: AbstractControl) {\r\n  const { password, passwordConfirm } = control.value;\r\n\r\n  if((passwordConfirm && password) && passwordConfirm!== password){\r\n    return { fieldMatch: { message: 'Password Not Matching' } };\r\n  }else return null;\r\n}\r\n\r\nexport function endDateMoreThanStartDateMsg(control: AbstractControl) {\r\n  const { startDate, endDate } = control.value;\r\n\r\n  if((startDate && endDate) && new Date(startDate) >= new Date(endDate)){\r\n    return { endDateMoreThanStartDate: { message: report.nspay2App.report.validation.V005 } };\r\n  }else return null;\r\n}\r\n\r\nexport function toDateParser(unix: number){\r\n\r\n  return new Date(unix);\r\n}\r\n\r\nexport function toUnixParser(date : Date): number{\r\n\r\n  return date.getTime();\r\n}\r\n\r\n\r\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}