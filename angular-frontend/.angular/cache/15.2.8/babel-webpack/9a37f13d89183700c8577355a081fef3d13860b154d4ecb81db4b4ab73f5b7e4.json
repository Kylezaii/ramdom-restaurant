{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TimeValidator = void 0;\nclass TimeValidator {\n  /* Validate 0000 - 2359 */\n  static wrkHourValidator() {\n    return c => {\n      let isValid = false;\n      if (c.value) {\n        const regex = '^(0[0-9]|1[0-9]|2[0-3])([0-5][0-9])$';\n        isValid = c.value.match(regex);\n        if (isValid) {\n          return {};\n        } else {\n          return {\n            invalidTime: true\n          };\n        }\n      } else {\n        return {};\n      }\n    };\n  }\n  static isBeforeWorkHourStart(startWrkHrName, endWrkHrName) {\n    return c => {\n      const startWrkHr = parseInt(c.get(startWrkHrName).value, 10);\n      const endWrkHr = parseInt(c.get(endWrkHrName).value, 10);\n      if (startWrkHr !== null && endWrkHr !== null && endWrkHr < startWrkHr) {\n        return {\n          isBeforeWrkHrStart: true\n        };\n      }\n      return {\n        isBeforeWrkHrStart: false\n      };\n    };\n  }\n  static isClaimAndDrivingWrkHourNotEqual(drivingStartWrkHrName, drivingEndWrkHrName, currHardCopyDetails) {\n    return c => {\n      const drivingStartWrkHr = parseInt(c.get(drivingStartWrkHrName).value, 10);\n      const drivingEndWrkHr = parseInt(c.get(drivingEndWrkHrName).value, 10);\n      const claimStartWrkHr = parseInt(currHardCopyDetails?.workStartTime, 10);\n      const claimEndWrkHr = parseInt(currHardCopyDetails?.workEndTime, 10);\n      if (drivingStartWrkHr !== null && claimStartWrkHr !== null && drivingStartWrkHr !== claimStartWrkHr) {\n        return {\n          isClaimAndDrivingWrkHrNotEqual: true\n        };\n      } else if (drivingEndWrkHr !== null && claimEndWrkHr !== null && drivingEndWrkHr !== claimEndWrkHr) {\n        return {\n          isClaimAndDrivingWrkHrNotEqual: true\n        };\n      }\n      return {\n        isClaimAndDrivingWrkHrNotEqual: false\n      };\n    };\n  }\n}\nexports.TimeValidator = TimeValidator;","map":{"version":3,"mappings":";;;;;;AAIA,MAAaA,aAAa;EAExB;EACA,OAAOC,gBAAgB;IACrB,OAAQC,CAAkB,IAAuC;MAC/D,IAAIC,OAAO,GAAG,KAAK;MAEnB,IAAID,CAAC,CAACE,KAAK,EAAE;QACX,MAAMC,KAAK,GAAG,sCAAsC;QAEpDF,OAAO,GAAGD,CAAC,CAACE,KAAK,CAACE,KAAK,CAACD,KAAK,CAAC;QAC9B,IAAIF,OAAO,EAAE;UACX,OAAO,EAAE;SACV,MAAM;UACL,OAAO;YAACI,WAAW,EAAE;UAAI,CAAC;;OAE7B,MAAM;QACL,OAAO,EAAE;;IAEb,CAAC;EACH;EAEA,OAAOC,qBAAqB,CAACC,cAAsB,EAAEC,YAAoB;IACvE,OAAQR,CAAkB,IAAuC;MAC/D,MAAMS,UAAU,GAAGC,QAAQ,CAACV,CAAC,CAACW,GAAG,CAACJ,cAAc,CAAC,CAACL,KAAK,EAAE,EAAE,CAAC;MAC5D,MAAMU,QAAQ,GAAGF,QAAQ,CAACV,CAAC,CAACW,GAAG,CAACH,YAAY,CAAC,CAACN,KAAK,EAAE,EAAE,CAAC;MACxD,IAAKO,UAAU,KAAK,IAAI,IAAIG,QAAQ,KAAK,IAAI,IAAKA,QAAQ,GAAGH,UAAU,EAAE;QACvE,OAAO;UAACI,kBAAkB,EAAE;QAAI,CAAC;;MAEnC,OAAO;QAACA,kBAAkB,EAAE;MAAK,CAAC;IACpC,CAAC;EACH;EAEA,OAAOC,gCAAgC,CAACC,qBAA6B,EAAEC,mBAA2B,EAAEC,mBAAwB;IAC1H,OAAQjB,CAAkB,IAAuC;MAC/D,MAAMkB,iBAAiB,GAAGR,QAAQ,CAACV,CAAC,CAACW,GAAG,CAACI,qBAAqB,CAAC,CAACb,KAAK,EAAE,EAAE,CAAC;MAC1E,MAAMiB,eAAe,GAAGT,QAAQ,CAACV,CAAC,CAACW,GAAG,CAACK,mBAAmB,CAAC,CAACd,KAAK,EAAE,EAAE,CAAC;MACtE,MAAMkB,eAAe,GAAGV,QAAQ,CAACO,mBAAmB,EAAEI,aAAa,EAAE,EAAE,CAAC;MACxE,MAAMC,aAAa,GAAGZ,QAAQ,CAACO,mBAAmB,EAAEM,WAAW,EAAE,EAAE,CAAC;MACpE,IAAKL,iBAAiB,KAAK,IAAI,IAAIE,eAAe,KAAK,IAAI,IAAKF,iBAAiB,KAAKE,eAAe,EAAE;QACrG,OAAO;UAACI,8BAA8B,EAAE;QAAI,CAAC;OAC9C,MAAM,IAAKL,eAAe,KAAK,IAAI,IAAIG,aAAa,KAAK,IAAI,IAAKH,eAAe,KAAKG,aAAa,EAAE;QACpG,OAAO;UAACE,8BAA8B,EAAE;QAAI,CAAC;;MAE/C,OAAO;QAACA,8BAA8B,EAAE;MAAK,CAAC;IAChD,CAAC;EACH;;AA9CFC","names":["TimeValidator","wrkHourValidator","c","isValid","value","regex","match","invalidTime","isBeforeWorkHourStart","startWrkHrName","endWrkHrName","startWrkHr","parseInt","get","endWrkHr","isBeforeWrkHrStart","isClaimAndDrivingWrkHourNotEqual","drivingStartWrkHrName","drivingEndWrkHrName","currHardCopyDetails","drivingStartWrkHr","drivingEndWrkHr","claimStartWrkHr","workStartTime","claimEndWrkHr","workEndTime","isClaimAndDrivingWrkHrNotEqual","exports"],"sourceRoot":"","sources":["C:\\Users\\D1347074\\Desktop\\projects 2\\nspayiiapp\\src\\main\\webapp\\app\\shared\\validator\\time.directive.ts"],"sourcesContent":["import { ValidatorFn, AbstractControl } from '@angular/forms';\r\nimport { validateNRIC } from '../../ng-connect/nric/nric-validate';\r\n\r\n\r\nexport class TimeValidator {\r\n\r\n  /* Validate 0000 - 2359 */\r\n  static wrkHourValidator(): ValidatorFn {\r\n    return (c: AbstractControl): { [key: string]: boolean } | null => {\r\n      let isValid = false;\r\n\r\n      if (c.value) {\r\n        const regex = '^(0[0-9]|1[0-9]|2[0-3])([0-5][0-9])$';\r\n\r\n        isValid = c.value.match(regex);\r\n        if (isValid) {\r\n          return {};\r\n        } else {\r\n          return {invalidTime: true};\r\n        }\r\n      } else {\r\n        return {};\r\n      }\r\n    }\r\n  }\r\n\r\n  static isBeforeWorkHourStart(startWrkHrName: string, endWrkHrName: string): ValidatorFn {\r\n    return (c: AbstractControl): { [key: string]: boolean } | null => {\r\n      const startWrkHr = parseInt(c.get(startWrkHrName).value, 10);\r\n      const endWrkHr = parseInt(c.get(endWrkHrName).value, 10);\r\n      if ((startWrkHr !== null && endWrkHr !== null) && endWrkHr < startWrkHr) {\r\n        return {isBeforeWrkHrStart: true};\r\n      }\r\n      return {isBeforeWrkHrStart: false};\r\n    };\r\n  }\r\n\r\n  static isClaimAndDrivingWrkHourNotEqual(drivingStartWrkHrName: string, drivingEndWrkHrName: string, currHardCopyDetails: any): ValidatorFn {\r\n    return (c: AbstractControl): { [key: string]: boolean } | null => {\r\n      const drivingStartWrkHr = parseInt(c.get(drivingStartWrkHrName).value, 10);\r\n      const drivingEndWrkHr = parseInt(c.get(drivingEndWrkHrName).value, 10);\r\n      const claimStartWrkHr = parseInt(currHardCopyDetails?.workStartTime, 10);\r\n      const claimEndWrkHr = parseInt(currHardCopyDetails?.workEndTime, 10);\r\n      if ((drivingStartWrkHr !== null && claimStartWrkHr !== null) && drivingStartWrkHr !== claimStartWrkHr) {\r\n        return {isClaimAndDrivingWrkHrNotEqual: true};\r\n      } else if ((drivingEndWrkHr !== null && claimEndWrkHr !== null) && drivingEndWrkHr !== claimEndWrkHr) {\r\n        return {isClaimAndDrivingWrkHrNotEqual: true};\r\n      }\r\n      return {isClaimAndDrivingWrkHrNotEqual: false};\r\n    };\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}