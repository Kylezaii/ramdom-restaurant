{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ResourceAssignPopupService = void 0;\nconst tslib_1 = require(\"tslib\");\nconst i0 = tslib_1.__importStar(require(\"@angular/core\"));\nconst i1 = tslib_1.__importStar(require(\"@ng-bootstrap/ng-bootstrap\"));\nconst i2 = tslib_1.__importStar(require(\"@angular/router\"));\nclass ResourceAssignPopupService {\n  constructor(modalService, router) {\n    this.modalService = modalService;\n    this.router = router;\n    this.ngbModalRef = null;\n  }\n  open(component, applicationId, resourceId) {\n    return new Promise(resolve => {\n      if (this.ngbModalRef) {\n        resolve(this.ngbModalRef);\n      }\n      if (applicationId && resourceId) {\n        setTimeout(() => {\n          this.ngbModalRef = this.resourceIdModalRef(component, applicationId, resourceId);\n          resolve(this.ngbModalRef);\n        }, 0);\n      }\n    });\n  }\n  resourceIdModalRef(component, applicationId, resourceId) {\n    const modalRef = this.modalService.open(component, {\n      size: 'lg',\n      backdrop: 'static'\n    });\n    modalRef.componentInstance.applicationId = applicationId;\n    modalRef.componentInstance.resourceId = resourceId;\n    modalRef.result.then(() => {\n      this.router.navigate([{\n        outlets: {\n          popup: null\n        }\n      }], {\n        replaceUrl: true\n      });\n      this.ngbModalRef = null;\n    }, () => {\n      this.router.navigate([{\n        outlets: {\n          popup: null\n        }\n      }], {\n        replaceUrl: true\n      });\n      this.ngbModalRef = null;\n    });\n    return modalRef;\n  }\n}\nexports.ResourceAssignPopupService = ResourceAssignPopupService;\nResourceAssignPopupService.ɵfac = function ResourceAssignPopupService_Factory(t) {\n  return new (t || ResourceAssignPopupService)(i0.ɵɵinject(i1.NgbModal), i0.ɵɵinject(i2.Router));\n};\nResourceAssignPopupService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ResourceAssignPopupService,\n  factory: ResourceAssignPopupService.ɵfac\n});","map":{"version":3,"mappings":";;;;;;;;;;AAIA,MACaA,0BAA0B;EAGrCC,YAAoBC,YAAsB,EAAUC,MAAc;IAA9C,iBAAY,GAAZD,YAAY;IAAoB,WAAM,GAANC,MAAM;IACxD,IAAI,CAACC,WAAW,GAAG,IAAI;EACzB;EAEAC,IAAI,CAACC,SAAoB,EAAEC,aAA4B,EAAEC,UAAyB;IAChF,OAAO,IAAIC,OAAO,CAAcC,OAAO,IAAG;MACxC,IAAI,IAAI,CAACN,WAAW,EAAE;QACpBM,OAAO,CAAC,IAAI,CAACN,WAAW,CAAC;;MAE3B,IAAIG,aAAa,IAAIC,UAAU,EAAE;QAC/BG,UAAU,CAAC,MAAK;UACd,IAAI,CAACP,WAAW,GAAG,IAAI,CAACQ,kBAAkB,CAACN,SAAS,EAAEC,aAAa,EAAEC,UAAU,CAAC;UAChFE,OAAO,CAAC,IAAI,CAACN,WAAW,CAAC;QAC3B,CAAC,EAAE,CAAC,CAAC;;IAET,CAAC,CAAC;EACJ;EAEAQ,kBAAkB,CAACN,SAAoB,EAAEC,aAAqB,EAAEC,UAAkB;IAChF,MAAMK,QAAQ,GAAG,IAAI,CAACX,YAAY,CAACG,IAAI,CAACC,SAAS,EAAE;MAAEQ,IAAI,EAAE,IAAI;MAAEC,QAAQ,EAAE;IAAQ,CAAE,CAAC;IACtFF,QAAQ,CAACG,iBAAiB,CAACT,aAAa,GAAGA,aAAa;IACxDM,QAAQ,CAACG,iBAAiB,CAACR,UAAU,GAAGA,UAAU;IAClDK,QAAQ,CAACI,MAAM,CAACC,IAAI,CAClB,MAAK;MACH,IAAI,CAACf,MAAM,CAACgB,QAAQ,CAAC,CAAC;QAAEC,OAAO,EAAE;UAAEC,KAAK,EAAE;QAAI;MAAE,CAAE,CAAC,EAAE;QAAEC,UAAU,EAAE;MAAI,CAAE,CAAC;MAC1E,IAAI,CAAClB,WAAW,GAAG,IAAI;IACzB,CAAC,EACD,MAAK;MACH,IAAI,CAACD,MAAM,CAACgB,QAAQ,CAAC,CAAC;QAAEC,OAAO,EAAE;UAAEC,KAAK,EAAE;QAAI;MAAE,CAAE,CAAC,EAAE;QAAEC,UAAU,EAAE;MAAI,CAAE,CAAC;MAC1E,IAAI,CAAClB,WAAW,GAAG,IAAI;IACzB,CAAC,CACF;IACD,OAAOS,QAAQ;EACjB;;AArCFU;;mBACavB,0BAA0B;AAAA;;SAA1BA,0BAA0B;EAAAwB,SAA1BxB,0BAA0B;AAAA","names":["ResourceAssignPopupService","constructor","modalService","router","ngbModalRef","open","component","applicationId","resourceId","Promise","resolve","setTimeout","resourceIdModalRef","modalRef","size","backdrop","componentInstance","result","then","navigate","outlets","popup","replaceUrl","exports","factory"],"sourceRoot":"","sources":["C:\\Users\\D1347074\\Desktop\\projects 2\\nspayiiapp\\src\\main\\webapp\\app\\admin\\access-control\\resource\\resource-assign-popup.service.ts"],"sourcesContent":["import { Injectable, Component } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { NgbModal, NgbModalRef } from '@ng-bootstrap/ng-bootstrap';\r\n\r\n@Injectable()\r\nexport class ResourceAssignPopupService {\r\n  private ngbModalRef: NgbModalRef | null;\r\n\r\n  constructor(private modalService: NgbModal, private router: Router) {\r\n    this.ngbModalRef = null;\r\n  }\r\n\r\n  open(component: Component, applicationId?: number | any, resourceId?: number | any): Promise<NgbModalRef> {\r\n    return new Promise<NgbModalRef>(resolve => {\r\n      if (this.ngbModalRef) {\r\n        resolve(this.ngbModalRef);\r\n      }\r\n      if (applicationId && resourceId) {\r\n        setTimeout(() => {\r\n          this.ngbModalRef = this.resourceIdModalRef(component, applicationId, resourceId);\r\n          resolve(this.ngbModalRef);\r\n        }, 0);\r\n      }\r\n    });\r\n  }\r\n\r\n  resourceIdModalRef(component: Component, applicationId: string, resourceId: string): NgbModalRef {\r\n    const modalRef = this.modalService.open(component, { size: 'lg', backdrop: 'static' });\r\n    modalRef.componentInstance.applicationId = applicationId;\r\n    modalRef.componentInstance.resourceId = resourceId;\r\n    modalRef.result.then(\r\n      () => {\r\n        this.router.navigate([{ outlets: { popup: null } }], { replaceUrl: true });\r\n        this.ngbModalRef = null;\r\n      },\r\n      () => {\r\n        this.router.navigate([{ outlets: { popup: null } }], { replaceUrl: true });\r\n        this.ngbModalRef = null;\r\n      }\r\n    );\r\n    return modalRef;\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}