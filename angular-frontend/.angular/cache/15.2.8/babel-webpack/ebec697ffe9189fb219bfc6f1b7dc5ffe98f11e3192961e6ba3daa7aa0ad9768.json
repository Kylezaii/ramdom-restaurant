{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.StateStorageService = void 0;\nconst tslib_1 = require(\"tslib\");\nconst i0 = tslib_1.__importStar(require(\"@angular/core\"));\nconst i1 = tslib_1.__importStar(require(\"ngx-webstorage\"));\nclass StateStorageService {\n  constructor($sessionStorage) {\n    this.$sessionStorage = $sessionStorage;\n    this.previousUrlKey = 'previousUrl';\n  }\n  storeUrl(url) {\n    this.$sessionStorage.store(this.previousUrlKey, url);\n  }\n  getUrl() {\n    return this.$sessionStorage.retrieve(this.previousUrlKey);\n  }\n  clearUrl() {\n    this.$sessionStorage.clear(this.previousUrlKey);\n  }\n  // new\n  storeLocalData(key, val) {\n    // console.log(`recieved= key:${key}`,val);\n    this.$sessionStorage.store(key, val);\n    // this.$sessionStorage.\n  }\n\n  getLocalData(key) {\n    return String(this.$sessionStorage.retrieve(key));\n  }\n}\nexports.StateStorageService = StateStorageService;\nStateStorageService.ɵfac = function StateStorageService_Factory(t) {\n  return new (t || StateStorageService)(i0.ɵɵinject(i1.SessionStorageService));\n};\nStateStorageService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: StateStorageService,\n  factory: StateStorageService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";;;;;;;;;AAIA,MACaA,mBAAmB;EAG9BC,YAAoBC,eAAsC;IAAtC,oBAAe,GAAfA,eAAe;IAF3B,mBAAc,GAAG,aAAa;EAEuB;EAE7DC,QAAQ,CAACC,GAAW;IAClB,IAAI,CAACF,eAAe,CAACG,KAAK,CAAC,IAAI,CAACC,cAAc,EAAEF,GAAG,CAAC;EACtD;EAEAG,MAAM;IACJ,OAAO,IAAI,CAACL,eAAe,CAACM,QAAQ,CAAC,IAAI,CAACF,cAAc,CAAkB;EAC5E;EAEAG,QAAQ;IACN,IAAI,CAACP,eAAe,CAACQ,KAAK,CAAC,IAAI,CAACJ,cAAc,CAAC;EACjD;EAEA;EACAK,cAAc,CAACC,GAAW,EAAGC,GAAQ;IACnC;IACA,IAAI,CAACX,eAAe,CAACG,KAAK,CAACO,GAAG,EAAEC,GAAG,CAAC;IACpC;EAEF;;EAEAC,YAAY,CAACF,GAAW;IACtB,OAAOG,MAAM,CAAC,IAAI,CAACb,eAAe,CAACM,QAAQ,CAACI,GAAG,CAAC,CAAC;EAEnD;;AA7BFI;;mBACahB,mBAAmB;AAAA;;SAAnBA,mBAAmB;EAAAiB,SAAnBjB,mBAAmB;EAAAkB,YADN;AAAM","names":["StateStorageService","constructor","$sessionStorage","storeUrl","url","store","previousUrlKey","getUrl","retrieve","clearUrl","clear","storeLocalData","key","val","getLocalData","String","exports","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\D1347074\\Desktop\\projects 2\\nspayiiapp\\src\\main\\webapp\\app\\core\\auth\\state-storage.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { SessionStorageService } from 'ngx-webstorage';\r\nimport { Observable } from 'rxjs';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class StateStorageService {\r\n  private previousUrlKey = 'previousUrl';\r\n\r\n  constructor(private $sessionStorage: SessionStorageService) {}\r\n\r\n  storeUrl(url: string): void {\r\n    this.$sessionStorage.store(this.previousUrlKey, url);\r\n  }\r\n\r\n  getUrl(): string | null {\r\n    return this.$sessionStorage.retrieve(this.previousUrlKey) as string | null;\r\n  }\r\n\r\n  clearUrl(): void {\r\n    this.$sessionStorage.clear(this.previousUrlKey);\r\n  }\r\n\r\n  // new\r\n  storeLocalData(key: string,  val: any){\r\n    // console.log(`recieved= key:${key}`,val);\r\n    this.$sessionStorage.store(key, val);\r\n    // this.$sessionStorage.\r\n\r\n  }\r\n\r\n  getLocalData(key: string): string{\r\n    return String(this.$sessionStorage.retrieve(key));\r\n\r\n  }\r\n  \r\n}\r\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}