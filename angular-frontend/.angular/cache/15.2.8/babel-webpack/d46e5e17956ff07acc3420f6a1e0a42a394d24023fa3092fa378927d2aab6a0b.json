{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Ns2HttpService = void 0;\nconst tslib_1 = require(\"tslib\");\nconst http_1 = require(\"@angular/common/http\");\nconst i0 = tslib_1.__importStar(require(\"@angular/core\"));\nconst i1 = tslib_1.__importStar(require(\"@angular/common/http\"));\nconst i2 = tslib_1.__importStar(require(\"app/core/util/date-utils.service\"));\nclass Ns2HttpService {\n  constructor(httpClient, dateUtilsService) {\n    this.httpClient = httpClient;\n    this.dateUtilsService = dateUtilsService;\n  }\n  delete(url) {\n    throw new Error('Method not implemented.');\n  }\n  get(url, options) {\n    options = this.setRequestOptions(options, 'GET');\n    return this.httpClient.get(url, options);\n  }\n  //special but anti http get design\n  // public getWithBody<T>(url: string, body?: any, options?: any): Observable<any> {\n  //   options = this.setRequestGenericOptions(options);\n  //   options.body = body;\n  //   console.log(\"options is\", options)\n  //   return this.httpClient.request<T>('GET', url, options);\n  // }\n  post(url, body, options) {\n    options = this.setRequestOptions(options, 'POST');\n    return this.httpClient.post(url, body, options);\n  }\n  put(url, body, options) {\n    options = this.setRequestOptions(options, 'PUT');\n    return this.httpClient.put(url, body, options);\n  }\n  patch(url, body, options) {\n    options = this.setRequestOptions(options, 'PATCH');\n    return this.httpClient.patch(url, body, options);\n  }\n  postWithFormData(url, body, options) {\n    options = this.setRequestOptions(options, 'POST_MULTIPART');\n    return this.httpClient.post(url, body, options);\n  }\n  fileUpload(url, body, options) {\n    options = this.setRequestOptions(options, 'FILE');\n    return this.httpClient.post(url, body, options);\n  }\n  convertLazyEvent(event, pageData, pageSize) {\n    console.log(\"filters\", event.filters);\n    const eventFilters = event.filters;\n    const keys = Object.keys(eventFilters);\n    console.log(\"filters2\", keys);\n    const filterArray = [];\n    keys.forEach(key => {\n      const arr = [];\n      if (eventFilters[key][0] && eventFilters[key][0].value !== null) {\n        arr.push(key);\n        arr.push(eventFilters[key][0].value);\n        filterArray.push(arr);\n      } else if (eventFilters[key].value) {\n        arr.push(key);\n        arr.push(eventFilters[key].value);\n        filterArray.push(arr);\n      }\n    });\n    console.log(\"the filter array\", filterArray);\n    let params = new http_1.HttpParams();\n    if (pageData) {\n      params = params.set('page', pageData.currentPage);\n    }\n    if (pageSize) {\n      params = params.set('size', pageSize);\n    }\n    // .set('sort', sort);\n    filterArray.forEach(extraHttpParams => {\n      params = params.append(extraHttpParams[0], extraHttpParams[1]);\n    });\n    //PLEASE DO NOT HARD CODE THE FORMAT\n    // filterArray.forEach(extraHttpParams => {\n    //   if (extraHttpParams[0].slice(-4) === \"Date\") {\n    //     // For date filters\n    //     params = params.append(extraHttpParams[0], String(this.dateUtilsService.formatStrDate(extraHttpParams[1], \"YYYY-MM-DD\")));\n    //   } else if (extraHttpParams[0].slice(-4) === \"Time\") {\n    //     // For time filters\n    //     params = params.append(extraHttpParams[0], String(this.dateUtilsService.formatStrDate(extraHttpParams[1], \"YYYY-MM-DD HH:mm:ss\")));\n    //   } \n    //   else if(extraHttpParams[0].slice(-2) === \"Dt\") { //To handle instant\n    //     params = params.append(extraHttpParams[0], new Date(extraHttpParams[1]).toISOString());\n    //   } \n    //   else {\n    //     if (Array.isArray(extraHttpParams[1])) {\n    //       extraHttpParams[1].forEach((value: any) => {\n    //         // For array filters\n    //         params = params.append(extraHttpParams[0], value);\n    //       });\n    //     } else {\n    //       // For single filters\n    //       params = params.append(extraHttpParams[0], extraHttpParams[1]);\n    //     }\n    //   }\n    // });\n    if (event.sortField) {\n      const sort = event.sortField.concat(',').concat(event.sortOrder === 1 ? 'asc' : 'desc');\n      params = params.append('sort', sort);\n    }\n    const options = {\n      params\n    };\n    console.log(\"params\", params);\n    return options;\n  }\n  parseDynamicParamToObj(dynamicParam) {\n    const arr = [];\n    let combine;\n    dynamicParam.split('|').forEach(x => {\n      x.split('=#').reduce((accumulator, current, index, array) => {\n        const y = Object.assign({\n          [array[0].replace(\"@\", \"\")]: array[1].replace(\"{\", \"\").replace(\"}\", \"\")\n        });\n        arr.push(y);\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n        return y;\n      });\n    });\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n    arr.forEach(item => combine = {\n      ...combine,\n      ...item\n    });\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n    return combine;\n  }\n  appendHttpParamFromDP(dynamicParam, options) {\n    const obj = this.parseDynamicParamToObj(dynamicParam);\n    let arr;\n    if (obj) {\n      if (obj.query) {\n        arr = obj.query.split('&').filter(value => Object.keys(value).length !== 0);\n        arr.forEach(x => {\n          const criteria = x.split(\"=\");\n          options = options.append(criteria[0], criteria[1]);\n        });\n      }\n    }\n    return options;\n  }\n  appendHttpParam(filterPath, options) {\n    let arr;\n    if (filterPath) {\n      arr = filterPath.split('&').filter(value => Object.keys(value).length !== 0);\n      arr.forEach(x => {\n        const criteria = x.split(\"=\");\n        options = options.append(criteria[0], criteria[1]);\n      });\n    }\n    return options;\n  }\n  setRequestOptions(options, method) {\n    const reqOptions = options || {};\n    let reqHeaders;\n    if (reqOptions.headers) {\n      reqHeaders = reqOptions.headers;\n    } else {\n      reqHeaders = new http_1.HttpHeaders();\n    }\n    if (method === 'POST' || method === 'PATCH') {\n      reqHeaders = reqHeaders.set('Content-Type', 'application/json; charset=UTF-8');\n    }\n    if (!reqOptions.responseType) {\n      reqOptions.responseType = 'json';\n    }\n    reqOptions.observe = 'response';\n    reqOptions.headers = reqHeaders;\n    return reqOptions;\n  }\n  setRequestGenericOptions(options) {\n    const reqOptions = options || {};\n    let reqHeaders;\n    if (reqOptions.headers) {\n      reqHeaders = reqOptions.headers;\n    } else {\n      reqHeaders = new http_1.HttpHeaders();\n    }\n    reqHeaders = reqHeaders.set('Content-Type', 'application/json; charset=UTF-8');\n    if (!reqOptions.responseType) {\n      reqOptions.responseType = 'json';\n    }\n    reqOptions.observe = 'response';\n    reqOptions.headers = reqHeaders;\n    return reqOptions;\n  }\n}\nexports.Ns2HttpService = Ns2HttpService;\nNs2HttpService.ɵfac = function Ns2HttpService_Factory(t) {\n  return new (t || Ns2HttpService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.DateUtilsService));\n};\nNs2HttpService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: Ns2HttpService,\n  factory: Ns2HttpService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["Ns2HttpService","constructor","httpClient","dateUtilsService","delete","url","Error","get","options","setRequestOptions","post","body","put","patch","postWithFormData","fileUpload","convertLazyEvent","event","pageData","pageSize","console","log","filters","eventFilters","keys","Object","filterArray","forEach","key","arr","value","push","params","http_1","set","currentPage","extraHttpParams","append","sortField","sort","concat","sortOrder","parseDynamicParamToObj","dynamicParam","combine","split","x","reduce","accumulator","current","index","array","y","assign","replace","item","appendHttpParamFromDP","obj","query","filter","length","criteria","appendHttpParam","filterPath","method","reqOptions","reqHeaders","headers","responseType","observe","setRequestGenericOptions","exports","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\D1347074\\Desktop\\projects 2\\nspayiiapp\\src\\main\\webapp\\app\\shared\\service\\ns2-http.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { LazyLoadEvent } from 'primeng/api';\r\nimport { DateUtilsService } from 'app/core/util/date-utils.service';\r\n\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class Ns2HttpService {\r\n\r\n  constructor(\r\n    private httpClient: HttpClient,\r\n    private dateUtilsService: DateUtilsService\r\n  ) {\r\n  }\r\n\r\n  delete(url: string): Observable<any> {\r\n    throw new Error('Method not implemented.');\r\n  }\r\n\r\n  public get<T>(url: string, options?: any): Observable<any> {\r\n    options = this.setRequestOptions(options, 'GET');\r\n    return this.httpClient.get<T>(url, options);\r\n  }\r\n\r\n  //special but anti http get design\r\n  // public getWithBody<T>(url: string, body?: any, options?: any): Observable<any> {\r\n  //   options = this.setRequestGenericOptions(options);\r\n  //   options.body = body;\r\n  //   console.log(\"options is\", options)\r\n  //   return this.httpClient.request<T>('GET', url, options);\r\n  // }\r\n\r\n  public post<T>(url: string, body?: any, options?: any): Observable<any> {\r\n    options = this.setRequestOptions(options, 'POST');\r\n    return this.httpClient.post<T>(url, body, options);\r\n  }\r\n\r\n  public put<T>(url: string, body?: any, options?: any): Observable<any> {\r\n    options = this.setRequestOptions(options, 'PUT');\r\n    return this.httpClient.put<T>(url, body, options);\r\n  }\r\n\r\n  public patch<T>(url: string, body?: any, options?: any): Observable<any> {\r\n    options = this.setRequestOptions(options, 'PATCH');\r\n    return this.httpClient.patch<T>(url, body, options);\r\n  }\r\n\r\n  public postWithFormData<T>(url: string, body?: any, options?: any): Observable<any> {\r\n    options = this.setRequestOptions(options, 'POST_MULTIPART');\r\n    return this.httpClient.post<T>(url, body, options);\r\n  }\r\n\r\n  public fileUpload<T>(url: string, body?: any, options?: any): Observable<any> {\r\n    options = this.setRequestOptions(options, 'FILE');\r\n    return this.httpClient.post<T>(url, body, options);\r\n  }\r\n\r\n  public convertLazyEvent(event: LazyLoadEvent, pageData: any, pageSize: number): { params: HttpParams } {\r\n\r\n    console.log(\"filters\", event.filters)\r\n    const eventFilters: any = event.filters;\r\n    const keys = Object.keys(eventFilters) as (keyof typeof event.filters)[];\r\n    console.log(\"filters2\", keys);\r\n\r\n    const filterArray: any[] = [];\r\n    keys.forEach(key => {\r\n      const arr: any[] = [];\r\n\r\n      if (eventFilters[key][0] && eventFilters[key][0].value !== null) {\r\n        arr.push(key);\r\n        arr.push(eventFilters[key][0].value);\r\n        filterArray.push(arr);\r\n      } else if (eventFilters[key].value) {\r\n        arr.push(key);\r\n        arr.push(eventFilters[key].value);\r\n        filterArray.push(arr);\r\n      }\r\n    })\r\n    console.log(\"the filter array\", filterArray)\r\n\r\n    let params = new HttpParams();\r\n    if (pageData) {\r\n      params = params.set('page', pageData.currentPage);\r\n    }\r\n    if (pageSize) {\r\n      params = params.set('size', pageSize);\r\n    }\r\n    // .set('sort', sort);\r\n    filterArray.forEach(extraHttpParams => {\r\n      params = params.append(extraHttpParams[0], extraHttpParams[1]);\r\n    });\r\n\r\n    //PLEASE DO NOT HARD CODE THE FORMAT\r\n    // filterArray.forEach(extraHttpParams => {\r\n    //   if (extraHttpParams[0].slice(-4) === \"Date\") {\r\n    //     // For date filters\r\n    //     params = params.append(extraHttpParams[0], String(this.dateUtilsService.formatStrDate(extraHttpParams[1], \"YYYY-MM-DD\")));\r\n    //   } else if (extraHttpParams[0].slice(-4) === \"Time\") {\r\n    //     // For time filters\r\n    //     params = params.append(extraHttpParams[0], String(this.dateUtilsService.formatStrDate(extraHttpParams[1], \"YYYY-MM-DD HH:mm:ss\")));\r\n    //   } \r\n    //   else if(extraHttpParams[0].slice(-2) === \"Dt\") { //To handle instant\r\n    //     params = params.append(extraHttpParams[0], new Date(extraHttpParams[1]).toISOString());\r\n    //   } \r\n    //   else {\r\n    //     if (Array.isArray(extraHttpParams[1])) {\r\n    //       extraHttpParams[1].forEach((value: any) => {\r\n    //         // For array filters\r\n    //         params = params.append(extraHttpParams[0], value);\r\n    //       });\r\n    //     } else {\r\n    //       // For single filters\r\n    //       params = params.append(extraHttpParams[0], extraHttpParams[1]);\r\n    //     }\r\n    //   }\r\n    // });\r\n\r\n    if (event.sortField) {\r\n      const sort = event.sortField.concat(',').concat(event.sortOrder === 1 ? 'asc' : 'desc');\r\n      params = params.append('sort', sort);\r\n    }\r\n\r\n    const options = {\r\n      params\r\n    };\r\n    console.log(\"params\", params);\r\n    return options;\r\n  }\r\n\r\n  parseDynamicParamToObj(dynamicParam: string): any {\r\n    const arr: any[] = [];\r\n    let combine: any;\r\n    dynamicParam.split('|').forEach(x => {\r\n      x.split('=#').reduce((accumulator, current, index, array) => {\r\n        const y = Object.assign({ [array[0].replace(\"@\", \"\")]: array[1].replace(\"{\", \"\").replace(\"}\", \"\") });\r\n        arr.push(y);\r\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-return\r\n        return y;\r\n      });\r\n    })\r\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-return\r\n    arr.forEach(item => combine = { ...combine, ...item });\r\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-return\r\n    return combine;\r\n  }\r\n\r\n  appendHttpParamFromDP(dynamicParam: string, options: HttpParams): HttpParams {\r\n    const obj = this.parseDynamicParamToObj(dynamicParam);\r\n    let arr;\r\n    if (obj) {\r\n      if (obj.query) {\r\n        arr = obj.query.split('&').filter((value: any) => Object.keys(value).length !== 0);\r\n        arr.forEach((x: string) => {\r\n          const criteria = x.split(\"=\");\r\n          options = options.append(criteria[0], criteria[1]);\r\n        })\r\n\r\n      }\r\n    }\r\n    return options;\r\n  }\r\n\r\n  appendHttpParam(filterPath: any, options: HttpParams): HttpParams {\r\n    let arr;\r\n    if (filterPath) {\r\n      arr = filterPath.split('&').filter((value: any) => Object.keys(value).length !== 0);\r\n      arr.forEach((x: string) => {\r\n        const criteria = x.split(\"=\");\r\n        options = options.append(criteria[0], criteria[1]);\r\n      })\r\n    }\r\n    return options;\r\n  }\r\n\r\n  private setRequestOptions(options?: any, method?: string): any {\r\n    const reqOptions = options || {};\r\n    let reqHeaders: HttpHeaders;\r\n    if (reqOptions.headers) {\r\n      reqHeaders = reqOptions.headers;\r\n    } else {\r\n      reqHeaders = new HttpHeaders();\r\n    }\r\n\r\n    if (method === 'POST' || method === 'PATCH') {\r\n      reqHeaders = reqHeaders.set('Content-Type', 'application/json; charset=UTF-8');\r\n    }\r\n\r\n    if (!reqOptions.responseType) {\r\n      reqOptions.responseType = 'json';\r\n    }\r\n    reqOptions.observe = 'response';\r\n    reqOptions.headers = reqHeaders;\r\n    return reqOptions;\r\n  }\r\n\r\n  private setRequestGenericOptions(options?: any): any {\r\n    const reqOptions = options || {};\r\n    let reqHeaders: HttpHeaders;\r\n    if (reqOptions.headers) {\r\n      reqHeaders = reqOptions.headers;\r\n    } else {\r\n      reqHeaders = new HttpHeaders();\r\n    }\r\n    reqHeaders = reqHeaders.set('Content-Type', 'application/json; charset=UTF-8');\r\n\r\n    if (!reqOptions.responseType) {\r\n      reqOptions.responseType = 'json';\r\n    }\r\n    reqOptions.observe = 'response';\r\n    reqOptions.headers = reqHeaders;\r\n    return reqOptions;\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}