{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.PopUpService = void 0;\nconst tslib_1 = require(\"tslib\");\nconst rxjs_1 = require(\"rxjs\");\nconst i0 = tslib_1.__importStar(require(\"@angular/core\"));\n//for storing states, instead of using sessionstorageservice\nclass PopUpService {\n  constructor() {\n    this.data$ = new rxjs_1.BehaviorSubject(null);\n  }\n  setData(inputData) {\n    this.data$.next(inputData);\n  }\n  getData() {\n    return this.data$.value;\n  }\n  select(key) {\n    if (this.data$.value) {\n      if (this.data$.value[key]) {\n        return this.data$.value[key];\n      } else return null;\n    } else return null;\n  }\n  setState(partialState) {\n    const currentState = this.getStateSnapshot();\n    const nextState = Object.assign({}, currentState, partialState);\n    this.data$.next(nextState);\n  }\n  getStateSnapshot() {\n    return this.data$.getValue();\n  }\n  clearStatesExcept(key) {\n    if (this.data$.value) {\n      console.log(\"before clear\", this.data$.value);\n      if (this.data$.value[key]) {\n        const baseSnapShot = {\n          [key]: this.data$.value[key]\n        };\n        this.data$ = new rxjs_1.BehaviorSubject(null);\n        this.setState(baseSnapShot);\n      }\n    }\n  }\n  refreshStates() {\n    this.data$ = new rxjs_1.BehaviorSubject(null);\n  }\n}\nexports.PopUpService = PopUpService;\nPopUpService.ɵfac = function PopUpService_Factory(t) {\n  return new (t || PopUpService)();\n};\nPopUpService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: PopUpService,\n  factory: PopUpService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";;;;;;;AAEA;;AAEA;AACA,MACaA,YAAY;EADzBC;IAGY,UAAK,GAAyB,IAAIC,sBAAe,CAAC,IAAI,CAAC;;EAG/DC,OAAO,CAACC,SAAc;IAClB,IAAI,CAACC,KAAK,CAACC,IAAI,CAACF,SAAS,CAAC;EAC9B;EAEAG,OAAO;IACH,OAAO,IAAI,CAACF,KAAK,CAACG,KAAK;EAC3B;EAEAC,MAAM,CAACC,GAAW;IACd,IAAG,IAAI,CAACL,KAAK,CAACG,KAAK,EAAC;MAChB,IAAG,IAAI,CAACH,KAAK,CAACG,KAAK,CAACE,GAAG,CAAC,EAAC;QACrB,OAAO,IAAI,CAACL,KAAK,CAACG,KAAK,CAACE,GAAG,CAAC;OAE/B,MAAK,OAAO,IAAI;KACpB,MAAK,OAAO,IAAI;EAErB;EAEOC,QAAQ,CAAEC,YAA0B;IAE7C,MAAMC,YAAY,GAAG,IAAI,CAACC,gBAAgB,EAAE;IAC5C,MAAMC,SAAS,GAAGC,MAAM,CAACC,MAAM,CAAE,EAAE,EAAEJ,YAAY,EAAED,YAAY,CAAE;IACjE,IAAI,CAACP,KAAK,CAACC,IAAI,CAAES,SAAS,CAAE;EAG7B;EAEUD,gBAAgB;IAEzB,OAAQ,IAAI,CAACT,KAAK,CAACa,QAAQ,EAAE;EAE9B;EAEGC,iBAAiB,CAACT,GAAW;IACzB,IAAG,IAAI,CAACL,KAAK,CAACG,KAAK,EAAC;MAChBY,OAAO,CAACC,GAAG,CAAC,cAAc,EAAE,IAAI,CAAChB,KAAK,CAACG,KAAK,CAAC;MAC7C,IAAG,IAAI,CAACH,KAAK,CAACG,KAAK,CAACE,GAAG,CAAC,EAAC;QACrB,MAAMY,YAAY,GAAG;UAAC,CAACZ,GAAG,GAAG,IAAI,CAACL,KAAK,CAACG,KAAK,CAACE,GAAG;QAAC,CAAC;QACnD,IAAI,CAACL,KAAK,GAAG,IAAIH,sBAAe,CAAC,IAAI,CAAC;QACtC,IAAI,CAACS,QAAQ,CAACW,YAAY,CAAC;;;EAKvC;EAEAC,aAAa;IACT,IAAI,CAAClB,KAAK,GAAG,IAAIH,sBAAe,CAAC,IAAI,CAAC;EAC1C;;AAtDJsB;;mBACaxB,YAAY;AAAA;;SAAZA,YAAY;EAAAyB,SAAZzB,YAAY;EAAA0B,YADC;AAAM","names":["PopUpService","constructor","rxjs_1","setData","inputData","data$","next","getData","value","select","key","setState","partialState","currentState","getStateSnapshot","nextState","Object","assign","getValue","clearStatesExcept","console","log","baseSnapShot","refreshStates","exports","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\D1347074\\Desktop\\projects 2\\nspayiiapp\\src\\main\\webapp\\app\\claim\\pop-up\\service\\pop-up.service.ts"],"sourcesContent":["import {Injectable} from '@angular/core';\r\nimport {HttpResponse} from '@angular/common/http';\r\nimport {BehaviorSubject, distinctUntilChanged, map, Observable, Subject} from 'rxjs';\r\n\r\n//for storing states, instead of using sessionstorageservice\r\n@Injectable({ providedIn: 'root' })\r\nexport class PopUpService {\r\n\r\n    private data$: BehaviorSubject<any> = new BehaviorSubject(null);\r\n\r\n\r\n    setData(inputData: any): void{\r\n        this.data$.next(inputData);\r\n    }\r\n\r\n    getData(): any{\r\n        return this.data$.value;\r\n    }\r\n\r\n    select(key: string): any{\r\n        if(this.data$.value){\r\n            if(this.data$.value[key]){\r\n                return this.data$.value[key];\r\n\r\n            }else return null;\r\n        }else return null;\r\n\r\n    }\r\n\r\n    public setState( partialState: Partial<any> ) : void {\r\n\r\n\t\tconst currentState = this.getStateSnapshot();\r\n\t\tconst nextState = Object.assign( {}, currentState, partialState );\r\n\t\tthis.data$.next( nextState );\r\n        \r\n\r\n\t}\r\n\r\n    public getStateSnapshot() : any {\r\n\r\n\t\treturn( this.data$.getValue() );\r\n\r\n\t}\r\n\r\n    clearStatesExcept(key: string): void{\r\n        if(this.data$.value){\r\n            console.log(\"before clear\", this.data$.value);\r\n            if(this.data$.value[key]){\r\n                const baseSnapShot = {[key]: this.data$.value[key]}\r\n                this.data$ = new BehaviorSubject(null);\r\n                this.setState(baseSnapShot)\r\n\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    refreshStates(): void{\r\n        this.data$ = new BehaviorSubject(null);\r\n    }\r\n\r\n   \r\n}"]},"metadata":{},"sourceType":"script","externalDependencies":[]}