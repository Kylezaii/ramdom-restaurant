{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.WorkloadInboxService = void 0;\nconst tslib_1 = require(\"tslib\");\nconst i0 = tslib_1.__importStar(require(\"@angular/core\"));\nconst i1 = tslib_1.__importStar(require(\"@angular/common/http\"));\nconst i2 = tslib_1.__importStar(require(\"app/core/config/application-config.service\"));\nconst i3 = tslib_1.__importStar(require(\"app/shared/service/ns2-http.service\"));\nclass WorkloadInboxService {\n  constructor(http, applicationConfigService, ns2Http) {\n    this.http = http;\n    this.applicationConfigService = applicationConfigService;\n    this.ns2Http = ns2Http;\n    this.resourceUrl = this.applicationConfigService.getEndpointFor('api/workload');\n  }\n  // to test with service api\n  //  public getDataEntryData(params: any) : Observable<any>{\n  //   let url = \"assets/mock/workload/data_entry_data_v1.json\"\n  //   return this.http.get(url, {params: params});\n  // }\n  getDataEntryData(options) {\n    const path = this.resourceUrl + '/retrieve_dataentry_view';\n    return this.ns2Http.get(path, options);\n  }\n  getAllDataEntryData() {\n    const url = \"assets/mock/workload/data_entry_data.json\";\n    // \"src/main/webapp/assets/mock/workload/data_entry_data.json\";\n    return this.http.get(url);\n  }\n  // public getWorkLoadRecords(): Observable<any>{\n  //   const url = \"assets/mock/workload/workload_records.json\";\n  //   return this.http.get<{\n  //     \"dataEntry\": number,\n  //     \"payrollRejection\": number,\n  //     \"payrollNotification\": number,\n  //     \"payrollRejectionHist\": number,\n  //     \"payrollNotificationHist\": number,\n  //   }[]>(url);\n  // }\n  getPVTabCount(options) {\n    const path = this.resourceUrl + '/retrieve_payroll_verifier_tab_count';\n    return this.ns2Http.get(path, options);\n  }\n  getCATabCount(options) {\n    const path = this.resourceUrl + '/retrieve_claim_approver_tab_count';\n    return this.ns2Http.get(path, options);\n  }\n  changeClaim(request) {\n    const path = this.resourceUrl + '/change_claim';\n    console.log(\"request\", request);\n    return this.ns2Http.post(path, JSON.stringify(request));\n  }\n  authIRAS(request) {\n    const path = this.resourceUrl + '/auth_iras';\n    console.log(\"request\", request);\n    return this.ns2Http.post(path, JSON.stringify(request));\n  }\n  transferOwnership(request) {\n    const path = this.resourceUrl + '/transfer_ownership';\n    console.log(\"request\", request);\n    return this.ns2Http.post(path, JSON.stringify(request));\n  }\n  removeWithNoActions(request, options) {\n    const path = this.resourceUrl + '/remove_payroll_rejection';\n    console.log(\"request\", request);\n    return this.ns2Http.post(path, JSON.stringify(request), options);\n  }\n  removeNotifWithNoActions(request, options) {\n    const path = this.resourceUrl + '/remove_payroll_notif';\n    console.log(\"request\", request);\n    return this.ns2Http.post(path, JSON.stringify(request), options);\n  }\n  // public getApproverInboxRecords(): Observable<any>{\n  //   const url = \"assets/mock/workload/approver_inbox_records.json\";\n  //   return this.http.get<{\n  //     \"claimApprover\": number,\n  //     \"claimVerifier\": number,\n  //     \"serb\": number,\n  //     \"appeal\": number,\n  //   }[]>(url);\n  // }\n  getECSEFilter(options) {\n    const path = this.resourceUrl + '/get_ecse_filter';\n    return this.ns2Http.get(path, options);\n  }\n  getPayRollRejectionData(options) {\n    const path = this.resourceUrl + '/retrieve_payroll_rejection_inbox_view';\n    return this.ns2Http.get(path, options);\n  }\n  getPayRollRejectionHistData(options) {\n    const path = this.resourceUrl + '/retrieve_payroll_rejection_inboxhistory_view';\n    return this.ns2Http.get(path, options);\n  }\n  getPayRollNotificationData(options) {\n    const path = this.resourceUrl + '/retrieve_payroll_notitf_inbox_view';\n    return this.ns2Http.get(path, options);\n  }\n  getPayRollNotificationHistData(options) {\n    const path = this.resourceUrl + '/retrieve_payroll_notitf_inboxhistory_view';\n    return this.ns2Http.get(path, options);\n  }\n  insertUpdate(request) {\n    const path = this.resourceUrl + '/insert_update';\n    console.log(\"request\", request);\n    return this.ns2Http.post(path, JSON.stringify(request));\n  }\n  getClaimRecordsData(options) {\n    const path = this.resourceUrl + '/retrieve_claim_verifier_view';\n    return this.ns2Http.get(path, options);\n  }\n  adoptClaim(request) {\n    const path = this.resourceUrl + '/adopt_claim';\n    console.log(\"request\", request);\n    return this.ns2Http.post(path, JSON.stringify(request));\n  }\n  getClaimsApproverData(options) {\n    const path = this.resourceUrl + '/retrieve_claim_approver_view';\n    return this.ns2Http.get(path, options);\n  }\n  getClaimsVerifierData(options) {\n    const path = this.resourceUrl + '/retrieve_claim_verifier_view';\n    return this.ns2Http.get(path, options);\n  }\n  assignClaimManual(request) {\n    const path = this.resourceUrl + '/assign_claim_manual';\n    return this.ns2Http.post(path, JSON.stringify(request));\n  }\n  assignClaimsAuto(request) {\n    const path = this.resourceUrl + '/assign_claim_auto';\n    return this.ns2Http.post(path, JSON.stringify(request));\n  }\n  getSerbRecordsData(options) {\n    const path = this.resourceUrl + '/retrieve_serb_inbox_view';\n    return this.ns2Http.get(path, options);\n  }\n  sendToSerb(request) {\n    const path = this.resourceUrl + '/send_to_serb';\n    return this.ns2Http.post(path, JSON.stringify(request));\n  }\n  checkSerbDateMassApproved(options) {\n    const path = this.resourceUrl + '/check_approved_serb_date';\n    return this.ns2Http.get(path, options);\n  }\n  massApproveSerb(request) {\n    const path = this.resourceUrl + '/mass_approve_serb_date';\n    return this.ns2Http.post(path, JSON.stringify(request));\n  }\n  // get payroll approver data\n  getPayRollApproverInboxData(options) {\n    const path = this.resourceUrl + '/retrieve_payroll_approver_inbox_view';\n    return this.ns2Http.get(path, options);\n  }\n  rejectPayRollTxn(request) {\n    const path = this.resourceUrl + '/reject_payroll_txn';\n    return this.ns2Http.post(path, JSON.stringify(request));\n  }\n  getVerifierAvailability(options) {\n    const path = this.resourceUrl + '/retrieve_verifier_availability';\n    return this.ns2Http.get(path, options);\n  }\n  editPOA(request) {\n    const path = this.resourceUrl + '/edit_poa';\n    return this.ns2Http.post(path, JSON.stringify(request));\n  }\n  editVerifierAvail(request) {\n    const path = this.resourceUrl + '/edit_verifier_avail';\n    return this.ns2Http.post(path, JSON.stringify(request));\n  }\n  exportDataEntryCSV(options) {\n    const path = this.resourceUrl + '/data_entry_export_csv';\n    return this.ns2Http.get(path, options);\n  }\n  exportPayRollRejCSV(options) {\n    const path = this.resourceUrl + '/payroll_rej_export_csv';\n    return this.ns2Http.get(path, options);\n  }\n}\nexports.WorkloadInboxService = WorkloadInboxService;\nWorkloadInboxService.ɵfac = function WorkloadInboxService_Factory(t) {\n  return new (t || WorkloadInboxService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.ApplicationConfigService), i0.ɵɵinject(i3.Ns2HttpService));\n};\nWorkloadInboxService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: WorkloadInboxService,\n  factory: WorkloadInboxService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["WorkloadInboxService","constructor","http","applicationConfigService","ns2Http","getEndpointFor","getDataEntryData","options","path","resourceUrl","get","getAllDataEntryData","url","getPVTabCount","getCATabCount","changeClaim","request","console","log","post","JSON","stringify","authIRAS","transferOwnership","removeWithNoActions","removeNotifWithNoActions","getECSEFilter","getPayRollRejectionData","getPayRollRejectionHistData","getPayRollNotificationData","getPayRollNotificationHistData","insertUpdate","getClaimRecordsData","adoptClaim","getClaimsApproverData","getClaimsVerifierData","assignClaimManual","assignClaimsAuto","getSerbRecordsData","sendToSerb","checkSerbDateMassApproved","massApproveSerb","getPayRollApproverInboxData","rejectPayRollTxn","getVerifierAvailability","editPOA","editVerifierAvail","exportDataEntryCSV","exportPayRollRejCSV","exports","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\D1347074\\Desktop\\projects 2\\nspayiiapp\\src\\main\\webapp\\app\\workload\\service\\workload-inbox.service.ts"],"sourcesContent":["import {HttpClient, HttpResponse} from '@angular/common/http';\r\nimport {Injectable} from '@angular/core';\r\nimport {ApplicationConfigService} from 'app/core/config/application-config.service';\r\nimport {Ns2HttpService} from 'app/shared/service/ns2-http.service';\r\nimport {Observable} from 'rxjs';\r\nimport {ClaimAssigneeResponse} from '../claim-approver/claim-verifier-inbox/assign-claims/claim-assignee-request.model';\r\n// import { AssignClaim } from '../claim-approver/claim-verifier-inbox/assign-claims/assign-claims.model';\r\nimport {DataEntry} from '../payroll-verifier/data-entry/data-entry.model';\r\nimport {PayrollNotification} from '../payroll-verifier/payroll-notification/payroll-notification.model';\r\nimport {VerifierAvailDto} from '../personal-availability/verifier-avail.model';\r\n\r\nexport type EntityResponseType = HttpResponse<any>;\r\nexport type EntityArrayResponseType = HttpResponse<any[]>;\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class WorkloadInboxService {\r\n\r\n  public resourceUrl = this.applicationConfigService.getEndpointFor('api/workload');\r\n\r\n  constructor(\r\n    private http: HttpClient,\r\n    private applicationConfigService: ApplicationConfigService,\r\n    private ns2Http: Ns2HttpService) { }\r\n\r\n   // to test with service api\r\n  //  public getDataEntryData(params: any) : Observable<any>{\r\n  //   let url = \"assets/mock/workload/data_entry_data_v1.json\"\r\n  //   return this.http.get(url, {params: params});\r\n  // }\r\n\r\n\r\n  public getDataEntryData(options: any) : Observable<any>{\r\n    const path = this.resourceUrl + '/retrieve_dataentry_view';\r\n    return this.ns2Http.get(path, options);\r\n  }\r\n\r\n  public getAllDataEntryData() : Observable<DataEntry[]>{\r\n    const url = \"assets/mock/workload/data_entry_data.json\"\r\n    // \"src/main/webapp/assets/mock/workload/data_entry_data.json\";\r\n    return this.http.get<DataEntry[]>(url);\r\n  }\r\n\r\n  // public getWorkLoadRecords(): Observable<any>{\r\n  //   const url = \"assets/mock/workload/workload_records.json\";\r\n  //   return this.http.get<{\r\n  //     \"dataEntry\": number,\r\n  //     \"payrollRejection\": number,\r\n  //     \"payrollNotification\": number,\r\n  //     \"payrollRejectionHist\": number,\r\n  //     \"payrollNotificationHist\": number,\r\n  //   }[]>(url);\r\n\r\n  // }\r\n\r\n  public getPVTabCount(options: any): Observable<any> {\r\n    const path = this.resourceUrl + '/retrieve_payroll_verifier_tab_count';\r\n    return this.ns2Http.get(path, options);\r\n  }\r\n\r\n  public getCATabCount(options: any): Observable<any> {\r\n    const path = this.resourceUrl + '/retrieve_claim_approver_tab_count';\r\n    return this.ns2Http.get(path, options);\r\n  }\r\n  \r\n  public changeClaim(request: any): Observable<any>{\r\n    const path = this.resourceUrl + '/change_claim';\r\n    console.log(\"request\", request);\r\n    return this.ns2Http.post(path, JSON.stringify(request));\r\n  }\r\n\r\n  public authIRAS(request: any): Observable<any>{\r\n    const path = this.resourceUrl + '/auth_iras';\r\n    console.log(\"request\", request);\r\n    return this.ns2Http.post(path, JSON.stringify(request));\r\n  }\r\n\r\n  public transferOwnership(request: any): Observable<any>{\r\n    const path = this.resourceUrl + '/transfer_ownership';\r\n    console.log(\"request\", request);\r\n    return this.ns2Http.post(path, JSON.stringify(request));\r\n  }\r\n\r\n  removeWithNoActions(request: any, options: any): Observable<any>{\r\n    const path = this.resourceUrl + '/remove_payroll_rejection';\r\n    console.log(\"request\", request);\r\n    return this.ns2Http.post(path, JSON.stringify(request), options);\r\n  }\r\n\r\n  removeNotifWithNoActions(request: any, options: any): Observable<any>{\r\n    const path = this.resourceUrl + '/remove_payroll_notif';\r\n    console.log(\"request\", request);\r\n    return this.ns2Http.post(path, JSON.stringify(request), options);\r\n  }\r\n \r\n  // public getApproverInboxRecords(): Observable<any>{\r\n  //   const url = \"assets/mock/workload/approver_inbox_records.json\";\r\n  //   return this.http.get<{\r\n  //     \"claimApprover\": number,\r\n  //     \"claimVerifier\": number,\r\n  //     \"serb\": number,\r\n  //     \"appeal\": number,\r\n  //   }[]>(url);\r\n\r\n  // }\r\n\r\n  getECSEFilter(options: any): Observable<any> {\r\n    const path = this.resourceUrl + '/get_ecse_filter';\r\n    return this.ns2Http.get(path, options);\r\n  }\r\n\r\n    public getPayRollRejectionData(options: any) : Observable<any>{\r\n    const path = this.resourceUrl + '/retrieve_payroll_rejection_inbox_view';\r\n    return this.ns2Http.get(path, options);\r\n  }\r\n\r\n  getPayRollRejectionHistData(options: any) : Observable<any>{\r\n    const path = this.resourceUrl + '/retrieve_payroll_rejection_inboxhistory_view';\r\n    return this.ns2Http.get(path, options);\r\n  }\r\n\r\n  getPayRollNotificationData(options: any) : Observable<any>{\r\n    const path = this.resourceUrl + '/retrieve_payroll_notitf_inbox_view';\r\n    return this.ns2Http.get(path, options);\r\n  }\r\n\r\n  getPayRollNotificationHistData(options: any) : Observable<any>{\r\n    const path = this.resourceUrl + '/retrieve_payroll_notitf_inboxhistory_view';\r\n    return this.ns2Http.get(path, options);\r\n  }\r\n\r\n  insertUpdate(request: any): Observable<any>{\r\n    const path = this.resourceUrl + '/insert_update';\r\n    console.log(\"request\", request);\r\n    return this.ns2Http.post(path, JSON.stringify(request));\r\n  }\r\n\r\n\r\n  getClaimRecordsData(options: any) : Observable<any>{\r\n    const path = this.resourceUrl + '/retrieve_claim_verifier_view';\r\n    return this.ns2Http.get(path, options);\r\n  }\r\n\r\n  adoptClaim(request: any): Observable<any>{\r\n    const path = this.resourceUrl + '/adopt_claim';\r\n    console.log(\"request\", request);\r\n    return this.ns2Http.post(path, JSON.stringify(request));\r\n  }\r\n\r\n  getClaimsApproverData(options: any) : Observable<any>{\r\n    const path = this.resourceUrl + '/retrieve_claim_approver_view';\r\n    return this.ns2Http.get(path, options);\r\n  }\r\n\r\n  getClaimsVerifierData(options: any) : Observable<any>{\r\n    const path = this.resourceUrl + '/retrieve_claim_verifier_view';\r\n    return this.ns2Http.get(path, options);\r\n  }\r\n\r\n  assignClaimManual(request: any): Observable<any>{\r\n    const path = this.resourceUrl + '/assign_claim_manual';\r\n    return this.ns2Http.post(path, JSON.stringify(request));\r\n  }\r\n\r\n  assignClaimsAuto(request: any[]): Observable<any>{\r\n    const path = this.resourceUrl + '/assign_claim_auto';\r\n    return this.ns2Http.post(path, JSON.stringify(request));\r\n  }\r\n\r\n  getSerbRecordsData(options: any) : Observable<any>{\r\n    const path = this.resourceUrl + '/retrieve_serb_inbox_view';\r\n    return this.ns2Http.get(path, options);\r\n  }\r\n\r\n  sendToSerb(request: any): Observable<any>{\r\n    const path = this.resourceUrl + '/send_to_serb';\r\n    return this.ns2Http.post(path, JSON.stringify(request));\r\n  }\r\n\r\n  checkSerbDateMassApproved(options: any) : Observable<any>{\r\n    const path = this.resourceUrl + '/check_approved_serb_date';\r\n    return this.ns2Http.get(path, options);\r\n  }\r\n\r\n  massApproveSerb(request: any): Observable<any>{\r\n    const path = this.resourceUrl + '/mass_approve_serb_date';\r\n    return this.ns2Http.post(path, JSON.stringify(request));\r\n  }\r\n\r\n  // get payroll approver data\r\n  getPayRollApproverInboxData(options: any) : Observable<any>{\r\n    const path = this.resourceUrl + '/retrieve_payroll_approver_inbox_view';\r\n    return this.ns2Http.get(path, options);\r\n  }\r\n\r\n  rejectPayRollTxn(request: any): Observable<any>{\r\n    const path = this.resourceUrl + '/reject_payroll_txn';\r\n    return this.ns2Http.post(path, JSON.stringify(request));\r\n  }\r\n\r\n  getVerifierAvailability(options: any) : Observable<any>{\r\n    const path = this.resourceUrl + '/retrieve_verifier_availability';\r\n    return this.ns2Http.get(path, options);\r\n  }\r\n\r\n  editPOA(request: any): Observable<any>{\r\n    const path = this.resourceUrl + '/edit_poa';\r\n    return this.ns2Http.post(path, JSON.stringify(request));\r\n  }\r\n\r\n  editVerifierAvail(request: any): Observable<any>{\r\n    const path = this.resourceUrl + '/edit_verifier_avail';\r\n    return this.ns2Http.post(path, JSON.stringify(request));\r\n  }\r\n\r\n  exportDataEntryCSV(options: any) : Observable<any>{\r\n    const path = this.resourceUrl + '/data_entry_export_csv';\r\n    return this.ns2Http.get(path, options);\r\n  }\r\n\r\n  exportPayRollRejCSV(options: any) : Observable<any>{\r\n    const path = this.resourceUrl + '/payroll_rej_export_csv';\r\n    return this.ns2Http.get(path, options);\r\n  }\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}