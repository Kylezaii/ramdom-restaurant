{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CreateVesService = void 0;\nconst tslib_1 = require(\"tslib\");\nconst i0 = tslib_1.__importStar(require(\"@angular/core\"));\nconst i1 = tslib_1.__importStar(require(\"app/core/config/application-config.service\"));\nconst i2 = tslib_1.__importStar(require(\"app/shared/service/ns2-http.service\"));\nconst i3 = tslib_1.__importStar(require(\"@angular/common/http\"));\nclass CreateVesService {\n  constructor(applicationConfigService, ns2Http, http) {\n    this.applicationConfigService = applicationConfigService;\n    this.ns2Http = ns2Http;\n    this.http = http;\n    this.resourceUrl = this.applicationConfigService.getEndpointFor('/api/payroll/ves/request');\n    this.resourceUrls = this.applicationConfigService.getEndpointFor('/api/payroll/ves');\n    this.nsManUrl = this.applicationConfigService.getEndpointFor('/api/common/nsman');\n  }\n  postVesRequest(body) {\n    const url = this.resourceUrl + '/create';\n    return this.ns2Http.post(url, body);\n  }\n  deleteVesRequest(id) {\n    const url = this.resourceUrl + '/discard/' + id;\n    return this.ns2Http.post(url);\n  }\n  postAmendRequest(body) {\n    const url = this.resourceUrl + '/amend';\n    return this.ns2Http.post(url, body);\n  }\n  postApproveRequest(body) {\n    const url = this.resourceUrl + '/approve';\n    return this.ns2Http.post(url, body);\n  }\n  postRemarks(id, body) {\n    const url = this.resourceUrl + '/' + id + '/remarks';\n    return this.ns2Http.post(url, body);\n  }\n  getById(id) {\n    const url = this.resourceUrl + '/' + id;\n    return this.ns2Http.get(url);\n  }\n  checkIfNricHasVesActive(nric) {\n    const url = this.resourceUrls + '/exist/' + nric;\n    return this.ns2Http.post(url);\n  }\n  getNsManName(nric) {\n    const url = this.nsManUrl + '/' + nric;\n    return this.ns2Http.get(url);\n  }\n}\nexports.CreateVesService = CreateVesService;\nCreateVesService.ɵfac = function CreateVesService_Factory(t) {\n  return new (t || CreateVesService)(i0.ɵɵinject(i1.ApplicationConfigService), i0.ɵɵinject(i2.Ns2HttpService), i0.ɵɵinject(i3.HttpClient));\n};\nCreateVesService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: CreateVesService,\n  factory: CreateVesService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";;;;;;;;;;;AAUA,MAGaA,gBAAgB;EAK3BC,YACUC,wBAAkD,EAClDC,OAAuB,EACvBC,IAAgB;IAFhB,6BAAwB,GAAxBF,wBAAwB;IACxB,YAAO,GAAPC,OAAO;IACP,SAAI,GAAJC,IAAI;IAPP,gBAAW,GAAG,IAAI,CAACF,wBAAwB,CAACG,cAAc,CAAC,0BAA0B,CAAC;IACtF,iBAAY,GAAG,IAAI,CAACH,wBAAwB,CAACG,cAAc,CAAC,kBAAkB,CAAC;IAC/E,aAAQ,GAAG,IAAI,CAACH,wBAAwB,CAACG,cAAc,CAAC,mBAAmB,CAAC;EAM/E;EAEGC,cAAc,CAACC,IAAS;IAC7B,MAAMC,GAAG,GAAG,IAAI,CAACC,WAAW,GAAG,SAAS;IACxC,OAAO,IAAI,CAACN,OAAO,CAACO,IAAI,CAACF,GAAG,EAAED,IAAI,CAAC;EACrC;EAEOI,gBAAgB,CAACC,EAAU;IAChC,MAAMJ,GAAG,GAAG,IAAI,CAACC,WAAW,GAAG,WAAW,GAAGG,EAAE;IAC/C,OAAO,IAAI,CAACT,OAAO,CAACO,IAAI,CAACF,GAAG,CAAC;EAC/B;EAEOK,gBAAgB,CAACN,IAAS;IAC/B,MAAMC,GAAG,GAAG,IAAI,CAACC,WAAW,GAAG,QAAQ;IACvC,OAAO,IAAI,CAACN,OAAO,CAACO,IAAI,CAACF,GAAG,EAAED,IAAI,CAAC;EACrC;EAEOO,kBAAkB,CAACP,IAAS;IACjC,MAAMC,GAAG,GAAG,IAAI,CAACC,WAAW,GAAG,UAAU;IACzC,OAAO,IAAI,CAACN,OAAO,CAACO,IAAI,CAACF,GAAG,EAAED,IAAI,CAAC;EACrC;EAEOQ,WAAW,CAACH,EAAU,EAAEL,IAAS;IACtC,MAAMC,GAAG,GAAG,IAAI,CAACC,WAAW,GAAG,GAAG,GAAGG,EAAE,GAAG,UAAU;IACpD,OAAO,IAAI,CAACT,OAAO,CAACO,IAAI,CAACF,GAAG,EAAED,IAAI,CAAC;EACrC;EAEOS,OAAO,CAACJ,EAAU;IACvB,MAAMJ,GAAG,GAAG,IAAI,CAACC,WAAW,GAAG,GAAG,GAAGG,EAAE;IACvC,OAAO,IAAI,CAACT,OAAO,CAACc,GAAG,CAACT,GAAG,CAAC;EAC9B;EAEOU,uBAAuB,CAACC,IAAY;IACzC,MAAMX,GAAG,GAAG,IAAI,CAACY,YAAY,GAAG,SAAS,GAAGD,IAAI;IAChD,OAAO,IAAI,CAAChB,OAAO,CAACO,IAAI,CAACF,GAAG,CAAC;EAC/B;EAEOa,YAAY,CAACF,IAAY;IAC9B,MAAMX,GAAG,GAAG,IAAI,CAACc,QAAQ,GAAG,GAAG,GAAGH,IAAI;IACtC,OAAO,IAAI,CAAChB,OAAO,CAACc,GAAG,CAACT,GAAG,CAAC;EAC9B;;AApDFe;;mBAGavB,gBAAgB;AAAA;;SAAhBA,gBAAgB;EAAAwB,SAAhBxB,gBAAgB;EAAAyB,YAFf;AAAM","names":["CreateVesService","constructor","applicationConfigService","ns2Http","http","getEndpointFor","postVesRequest","body","url","resourceUrl","post","deleteVesRequest","id","postAmendRequest","postApproveRequest","postRemarks","getById","get","checkIfNricHasVesActive","nric","resourceUrls","getNsManName","nsManUrl","exports","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\D1347074\\Desktop\\projects 2\\nspayiiapp\\src\\main\\webapp\\app\\payroll\\ves\\service\\create-ves.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpResponse } from '@angular/common/http';\r\nimport { ApplicationConfigService } from 'app/core/config/application-config.service';\r\nimport { Observable } from \"rxjs\";\r\nimport { Ns2HttpService } from 'app/shared/service/ns2-http.service';\r\nimport { IQueryVES } from '../model/create-ves-request.model';\r\n\r\nexport type EntityResponseType = HttpResponse<IQueryVES>;\r\nexport type EntityArrayResponseType = HttpResponse<IQueryVES[]>;\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class CreateVesService {\r\n  public resourceUrl = this.applicationConfigService.getEndpointFor('/api/payroll/ves/request');\r\n  public resourceUrls = this.applicationConfigService.getEndpointFor('/api/payroll/ves');\r\n  public nsManUrl = this.applicationConfigService.getEndpointFor('/api/common/nsman')\r\n\r\n  constructor(\r\n    private applicationConfigService: ApplicationConfigService,\r\n    private ns2Http: Ns2HttpService,\r\n    private http: HttpClient\r\n  ) { }\r\n\r\n  public postVesRequest(body: any): Observable<any> {\r\n    const url = this.resourceUrl + '/create';\r\n    return this.ns2Http.post(url, body);\r\n  }\r\n\r\n  public deleteVesRequest(id: string): Observable<any> {\r\n    const url = this.resourceUrl + '/discard/' + id;\r\n    return this.ns2Http.post(url);\r\n  }\r\n\r\n  public postAmendRequest(body: any): Observable<any> {\r\n    const url = this.resourceUrl + '/amend';\r\n    return this.ns2Http.post(url, body);\r\n  }\r\n\r\n  public postApproveRequest(body: any): Observable<any> {\r\n    const url = this.resourceUrl + '/approve';\r\n    return this.ns2Http.post(url, body);\r\n  }\r\n\r\n  public postRemarks(id: string, body: any): Observable<any> {\r\n    const url = this.resourceUrl + '/' + id + '/remarks';\r\n    return this.ns2Http.post(url, body);\r\n  }\r\n\r\n  public getById(id: string): Observable<any> {\r\n    const url = this.resourceUrl + '/' + id;\r\n    return this.ns2Http.get(url);\r\n  }\r\n\r\n  public checkIfNricHasVesActive(nric: string): Observable<any> {\r\n    const url = this.resourceUrls + '/exist/' + nric;\r\n    return this.ns2Http.post(url);\r\n  }\r\n\r\n  public getNsManName(nric: string): Observable<any> {\r\n    const url = this.nsManUrl + '/' + nric;\r\n    return this.ns2Http.get(url);\r\n  }\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}