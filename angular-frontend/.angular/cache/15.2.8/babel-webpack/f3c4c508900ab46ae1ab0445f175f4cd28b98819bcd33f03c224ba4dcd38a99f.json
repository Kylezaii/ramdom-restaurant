{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ClaimService = void 0;\nconst tslib_1 = require(\"tslib\");\nconst i0 = tslib_1.__importStar(require(\"@angular/core\"));\nconst i1 = tslib_1.__importStar(require(\"app/core/config/application-config.service\"));\nconst i2 = tslib_1.__importStar(require(\"app/shared/service/ns2-http.service\"));\nconst i3 = tslib_1.__importStar(require(\"@angular/common/http\"));\nclass ClaimService {\n  constructor(applicationConfigService, ns2Http, http) {\n    this.applicationConfigService = applicationConfigService;\n    this.ns2Http = ns2Http;\n    this.http = http;\n    this.resourceUrl = this.applicationConfigService.getEndpointFor('api/claim');\n    this.nsManInfoResourceUrl = this.applicationConfigService.getEndpointFor('api/common/nsman');\n  }\n  retrieveOccupationList(options) {\n    const path = this.resourceUrl + '/retrieve_occupation_list';\n    return this.ns2Http.get(path, options);\n  }\n  saveRemarks(request) {\n    const path = `${this.resourceUrl}/save_remarks`;\n    return this.ns2Http.post(path, JSON.stringify(request));\n  }\n  retrieveRemarks(options) {\n    const path = this.resourceUrl + '/retrieve_remarks';\n    return this.ns2Http.get(path, options);\n  }\n  retrieveSuppDoc(options) {\n    const path = this.resourceUrl + '/retrieve_supp_docs';\n    return this.ns2Http.get(path, options);\n  }\n  //deprecated\n  retrieveClaimItems(options) {\n    const path = this.resourceUrl + '/retrieve_claim_items';\n    return this.ns2Http.get(path, options);\n  }\n  retrieveClaimItemsHistory(options) {\n    const path = this.resourceUrl + '/retrieve_claim_items_history';\n    return this.ns2Http.get(path, options);\n  }\n  retrieveItemStatusMap(options) {\n    const path = this.resourceUrl + '/retrieve_item_status_map';\n    return this.ns2Http.get(path, options);\n  }\n  updateCreateClaimItem(request, options) {\n    const path = `${this.resourceUrl}/update_create_claim_item`;\n    return this.ns2Http.post(path, JSON.stringify(request), options);\n  }\n  downloadDocument(id) {\n    const path = this.resourceUrl + '/downloadDocument';\n    return this.ns2Http.post(path, JSON.stringify(id));\n  }\n  getClaimFormula(type, basis) {\n    const payload = {\n      searchParams: {\n        claimType: type,\n        claimBasis: basis\n      }\n    };\n    const path = this.resourceUrl + '/get_formula_map';\n    return this.ns2Http.post(path, JSON.stringify(payload));\n  }\n  retrieveFormulaList(options) {\n    const path = this.resourceUrl + '/get_formula_dropdown';\n    return this.ns2Http.get(path, options);\n  }\n  retrieveActualTrainingDetails(options) {\n    const path = `${this.resourceUrl}/retrieve_actual_training_details`;\n    return this.ns2Http.get(path, options);\n  }\n  getUserLoginDetails() {\n    const path = `${this.resourceUrl}/get_login_user_detail`;\n    return this.ns2Http.get(path);\n  }\n  retrieveDropDownItemStatus(options) {\n    const path = `${this.resourceUrl}/get_item_status_dropdown`;\n    return this.ns2Http.get(path, options);\n  }\n  retrieveViewPastClaims(params) {\n    const path = `${this.resourceUrl}/retrieve_view_past_claims`;\n    return this.http.get(path, {\n      params\n    });\n  }\n  sortFormulaListByCode() {\n    const regex = \"^([0-9]*)([a-zA-Z])$\";\n    return function (a, b) {\n      //sort by number then alphabet\n      const aNum = Number(a.formulaCode.trim().match(regex)[1]);\n      const bNum = Number(b.formulaCode.trim().match(regex)[1]);\n      const aAlpha = a.formulaCode.trim().match(regex)[2];\n      const bAlpha = b.formulaCode.trim().match(regex)[2];\n      if (aNum === bNum) {\n        return aAlpha < bAlpha ? -1 : 1;\n      }\n      return aNum < bNum ? -1 : 1;\n    };\n  }\n  retrieveEHRNsmanName(options) {\n    const path = `${this.resourceUrl}/get_ehr_nsmanname`;\n    return this.ns2Http.get(path, options);\n  }\n  getNsmanInfo(nric) {\n    const path = this.nsManInfoResourceUrl + '/' + nric;\n    return this.ns2Http.get(path);\n  }\n  noActionReq(request, options) {\n    const path = `${this.resourceUrl}/no_action_required`;\n    return this.ns2Http.post(path, JSON.stringify(request), options);\n  }\n  // nextRecomp(options: any) : Observable<any>{\n  //     const path =`${this.resourceUrl}/retrieve_next_recomp`;\n  //     return this.ns2Http.get(path, options);\n  // }\n  // nextNric(options: any) : Observable<any>{\n  //     const path =`${this.resourceUrl}/retrieve_next_nric`;\n  //     return this.ns2Http.get(path, options);\n  // }\n  nextClaim(options) {\n    const path = `${this.resourceUrl}/retrieve_next_claim`;\n    return this.ns2Http.get(path, options);\n  }\n  retrieveClaimCntByClaimStatusNric(options) {\n    const path = `${this.resourceUrl}/retrieve_claim_count_by_claim_status`;\n    return this.ns2Http.get(path, options);\n  }\n  getCountryList() {\n    const path = `${this.resourceUrl}/get_country_list`;\n    return this.ns2Http.get(path);\n  }\n  getByItemStatusHistorical(options) {\n    const path = `${this.resourceUrl}/has_historical_item_status`;\n    return this.ns2Http.get(path, options);\n  }\n  getCertificationOfficer(options) {\n    const path = `${this.resourceUrl}/get_certification_officer`;\n    return this.ns2Http.get(path, options);\n  }\n  getAllItemStatusOption() {\n    const path = this.resourceUrl + '/get_all_item_status_option';\n    return this.ns2Http.get(path);\n  }\n  getAllItemFormulaOption() {\n    const path = this.resourceUrl + '/get_all_item_formula_option';\n    return this.ns2Http.get(path);\n  }\n  retrieveAdditionalClaimIds(request, options) {\n    const path = `${this.resourceUrl}/retrieve_additional_claim_ids`;\n    return this.ns2Http.post(path, JSON.stringify(request), options);\n  }\n  retrieveItemCategory(letterTypeCode, options) {\n    const path = `${this.resourceUrl}/retrieve_item_category/${letterTypeCode}`;\n    return this.ns2Http.get(path, options);\n  }\n  saveClaimLetter(request, options) {\n    const path = `${this.resourceUrl}/save_claim_letter`;\n    return this.ns2Http.post(path, JSON.stringify(request), options);\n  }\n  retrieveClaimLetters(options) {\n    const path = `${this.resourceUrl}/retrieve_claim_letters`;\n    return this.ns2Http.get(path, options);\n  }\n  retrieveLetterFormDetails(options) {\n    const path = `${this.resourceUrl}/retrieve_letter_form_detail`;\n    return this.ns2Http.get(path, options);\n  }\n  previewClaimLetter(request, options) {\n    const path = `${this.resourceUrl}/view_preview_letter`;\n    return this.ns2Http.post(path, JSON.stringify(request), options);\n  }\n  submitClaimLetter(request, options) {\n    const path = `${this.resourceUrl}/submit_claim_letter`;\n    return this.ns2Http.post(path, JSON.stringify(request), options);\n  }\n  updateSubmittedClaimLetter(request, options) {\n    const path = `${this.resourceUrl}/update_claim_letter`;\n    return this.ns2Http.post(path, JSON.stringify(request), options);\n  }\n  deleteSubmittedClaimLetter(request, options) {\n    const path = `${this.resourceUrl}/delete_claim_letter`;\n    return this.ns2Http.post(path, JSON.stringify(request), options);\n  }\n  getCompanyInfo(csn) {\n    const path = this.resourceUrl + '/get_company_info/' + csn;\n    return this.ns2Http.get(path);\n  }\n  viewGeneratedClaimLetter(request, options) {\n    const path = `${this.resourceUrl}/view_generated_letter`;\n    return this.ns2Http.post(path, JSON.stringify(request), options);\n  }\n}\nexports.ClaimService = ClaimService;\nClaimService.ɵfac = function ClaimService_Factory(t) {\n  return new (t || ClaimService)(i0.ɵɵinject(i1.ApplicationConfigService), i0.ɵɵinject(i2.Ns2HttpService), i0.ɵɵinject(i3.HttpClient));\n};\nClaimService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ClaimService,\n  factory: ClaimService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["ClaimService","constructor","applicationConfigService","ns2Http","http","getEndpointFor","retrieveOccupationList","options","path","resourceUrl","get","saveRemarks","request","post","JSON","stringify","retrieveRemarks","retrieveSuppDoc","retrieveClaimItems","retrieveClaimItemsHistory","retrieveItemStatusMap","updateCreateClaimItem","downloadDocument","id","getClaimFormula","type","basis","payload","searchParams","claimType","claimBasis","retrieveFormulaList","retrieveActualTrainingDetails","getUserLoginDetails","retrieveDropDownItemStatus","retrieveViewPastClaims","params","sortFormulaListByCode","regex","a","b","aNum","Number","formulaCode","trim","match","bNum","aAlpha","bAlpha","retrieveEHRNsmanName","getNsmanInfo","nric","nsManInfoResourceUrl","noActionReq","nextClaim","retrieveClaimCntByClaimStatusNric","getCountryList","getByItemStatusHistorical","getCertificationOfficer","getAllItemStatusOption","getAllItemFormulaOption","retrieveAdditionalClaimIds","retrieveItemCategory","letterTypeCode","saveClaimLetter","retrieveClaimLetters","retrieveLetterFormDetails","previewClaimLetter","submitClaimLetter","updateSubmittedClaimLetter","deleteSubmittedClaimLetter","getCompanyInfo","csn","viewGeneratedClaimLetter","exports","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\D1347074\\Desktop\\projects 2\\nspayiiapp\\src\\main\\webapp\\app\\claim\\service\\claim.service.ts"],"sourcesContent":["import {HttpClient, HttpParams, HttpResponse} from '@angular/common/http';\r\nimport {Injectable} from '@angular/core';\r\nimport {ApplicationConfigService} from 'app/core/config/application-config.service';\r\nimport {Ns2HttpService} from 'app/shared/service/ns2-http.service';\r\nimport {Observable} from 'rxjs';\r\nimport {Ns2Response} from \"app/shared/model/ns2-response.model\";\r\nimport {LatestClaimOwner} from \"app/claim/model/latest-claim-owner.model\";\r\nimport {ViewPastClaim} from \"app/claim/model/view-past-claim.model\";\r\nimport {CpfDeviation} from \"app/claim/ec-claim/model/cpf-deviation.model\";\r\nimport { SaveLetterItemsDto } from '../pop-up/claim-letter/model/save-letter-items-request.model';\r\n\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class ClaimService {\r\n\r\n\r\n    public resourceUrl = this.applicationConfigService.getEndpointFor('api/claim');\r\n    public nsManInfoResourceUrl = this.applicationConfigService.getEndpointFor('api/common/nsman');\r\n\r\n    constructor(\r\n        private applicationConfigService: ApplicationConfigService,\r\n        private ns2Http: Ns2HttpService,\r\n        private http: HttpClient) { }\r\n\r\n\r\n    retrieveOccupationList(options: any) : Observable<any>{\r\n        const path = this.resourceUrl + '/retrieve_occupation_list';\r\n        return this.ns2Http.get(path, options);\r\n    }\r\n\r\n    saveRemarks(request: any): Observable<any>{\r\n        const path = `${this.resourceUrl}/save_remarks`;\r\n        return this.ns2Http.post(path, JSON.stringify(request));\r\n    }\r\n\r\n    retrieveRemarks(options: any) : Observable<any>{\r\n        const path = this.resourceUrl + '/retrieve_remarks';\r\n        return this.ns2Http.get(path, options);\r\n    }\r\n\r\n    retrieveSuppDoc(options: any) : Observable<any>{\r\n        const path = this.resourceUrl + '/retrieve_supp_docs';\r\n        return this.ns2Http.get(path, options);\r\n    }\r\n\r\n    //deprecated\r\n    retrieveClaimItems(options: any) : Observable<any>{\r\n        const path = this.resourceUrl + '/retrieve_claim_items';\r\n        return this.ns2Http.get(path, options);\r\n    }\r\n\r\n    retrieveClaimItemsHistory(options: any) : Observable<any>{\r\n        const path = this.resourceUrl + '/retrieve_claim_items_history';\r\n        return this.ns2Http.get(path, options);\r\n    }\r\n\r\n    retrieveItemStatusMap(options: any) : Observable<any>{\r\n        const path = this.resourceUrl + '/retrieve_item_status_map';\r\n        return this.ns2Http.get(path, options);\r\n    }\r\n\r\n    updateCreateClaimItem(request: any, options: any): Observable<any>{\r\n        const path = `${this.resourceUrl}/update_create_claim_item`;\r\n        return this.ns2Http.post(path, JSON.stringify(request), options);\r\n    }\r\n\r\n    downloadDocument(id: string[]): Observable<any> {\r\n        const path = this.resourceUrl + '/downloadDocument';\r\n        return this.ns2Http.post(path, JSON.stringify(id));\r\n    }\r\n\r\n    getClaimFormula(type: string, basis: string): Observable<any> {\r\n        const payload = {\r\n            searchParams: {\r\n                claimType: type,\r\n                claimBasis: basis\r\n            }\r\n        }\r\n        const path = this.resourceUrl + '/get_formula_map';\r\n        return this.ns2Http.post(path, JSON.stringify(payload));\r\n    }\r\n\r\n    retrieveFormulaList(options: any) : Observable<any>{\r\n        const path = this.resourceUrl + '/get_formula_dropdown';\r\n        return this.ns2Http.get(path, options);\r\n    }\r\n\r\n    retrieveActualTrainingDetails(options: any) : Observable<any>{\r\n        const path =`${this.resourceUrl}/retrieve_actual_training_details`;\r\n        return this.ns2Http.get(path, options);\r\n    }\r\n\r\n    getUserLoginDetails(): Observable<any>{\r\n        const path =`${this.resourceUrl}/get_login_user_detail`;\r\n        return this.ns2Http.get(path);\r\n    }\r\n\r\n    retrieveDropDownItemStatus(options: any) : Observable<any>{\r\n        const path =`${this.resourceUrl}/get_item_status_dropdown`;\r\n        return this.ns2Http.get(path, options);\r\n    }\r\n\r\n    retrieveViewPastClaims(params: HttpParams): Observable<Ns2Response<ViewPastClaim[]>> {\r\n      const path =`${this.resourceUrl}/retrieve_view_past_claims`;\r\n      return this.http.get<Ns2Response<ViewPastClaim[]>>(path,{params});\r\n    }\r\n\r\n    sortFormulaListByCode() {\r\n        const regex = \"^([0-9]*)([a-zA-Z])$\";\r\n        return function (a: any, b: any) {\r\n        //sort by number then alphabet\r\n        const aNum = Number(a.formulaCode.trim().match(regex)[1]);\r\n        const bNum = Number(b.formulaCode.trim().match(regex)[1]);\r\n        const aAlpha = a.formulaCode.trim().match(regex)[2];\r\n        const bAlpha =  b.formulaCode.trim().match(regex)[2];\r\n        if(aNum===bNum){\r\n            return aAlpha < bAlpha ? -1 : 1;\r\n        }\r\n        return aNum < bNum ? -1 : 1;\r\n        }\r\n    }\r\n    \r\n    retrieveEHRNsmanName(options: any) : Observable<any>{\r\n        const path =`${this.resourceUrl}/get_ehr_nsmanname`;\r\n        return this.ns2Http.get(path, options);\r\n    }\r\n\r\n    getNsmanInfo(nric: string): Observable<any>{\r\n        const path = this.nsManInfoResourceUrl + '/' + nric;\r\n        return this.ns2Http.get(path);\r\n      }\r\n\r\n    noActionReq(request: any, options: any) : Observable<any>{\r\n        const path =`${this.resourceUrl}/no_action_required`;\r\n        return this.ns2Http.post(path,JSON.stringify(request), options);\r\n    }\r\n\r\n    // nextRecomp(options: any) : Observable<any>{\r\n    //     const path =`${this.resourceUrl}/retrieve_next_recomp`;\r\n    //     return this.ns2Http.get(path, options);\r\n    // }\r\n\r\n    // nextNric(options: any) : Observable<any>{\r\n    //     const path =`${this.resourceUrl}/retrieve_next_nric`;\r\n    //     return this.ns2Http.get(path, options);\r\n    // }\r\n\r\n    nextClaim(options: any) : Observable<any>{\r\n        const path =`${this.resourceUrl}/retrieve_next_claim`;\r\n        return this.ns2Http.get(path, options);\r\n    }\r\n\r\n    retrieveClaimCntByClaimStatusNric(options: any) : Observable<any>{\r\n        const path =`${this.resourceUrl}/retrieve_claim_count_by_claim_status`;\r\n        return this.ns2Http.get(path, options);\r\n    }\r\n  \r\n    getCountryList() : Observable<any>{\r\n        const path =`${this.resourceUrl}/get_country_list`;\r\n        return this.ns2Http.get(path);\r\n    }\r\n\r\n    getByItemStatusHistorical(options: any) : Observable<any>{\r\n        const path =`${this.resourceUrl}/has_historical_item_status`;\r\n        return this.ns2Http.get(path, options);\r\n    }\r\n\r\n    getCertificationOfficer(options: any) : Observable<any>{\r\n        const path =`${this.resourceUrl}/get_certification_officer`;\r\n        return this.ns2Http.get(path, options);\r\n    }\r\n\r\n    getAllItemStatusOption(): Observable<any> {\r\n        const path = this.resourceUrl + '/get_all_item_status_option';\r\n        return this.ns2Http.get(path);\r\n    }\r\n\r\n    getAllItemFormulaOption(): Observable<any> {\r\n        const path = this.resourceUrl + '/get_all_item_formula_option';\r\n        return this.ns2Http.get(path);\r\n    }\r\n\r\n    retrieveAdditionalClaimIds(request: any, options: any): Observable<any>{\r\n        const path = `${this.resourceUrl}/retrieve_additional_claim_ids`;\r\n        return this.ns2Http.post(path, JSON.stringify(request), options);\r\n    }\r\n\r\n    retrieveItemCategory(letterTypeCode: string,  options: any): Observable<any> {\r\n        const path =`${this.resourceUrl}/retrieve_item_category/${letterTypeCode}`;\r\n        return this.ns2Http.get(path, options);\r\n    }\r\n\r\n    saveClaimLetter(request: any, options: any) : Observable<any>{\r\n        const path =`${this.resourceUrl}/save_claim_letter`;\r\n        return this.ns2Http.post(path,JSON.stringify(request), options);\r\n    }\r\n\r\n    retrieveClaimLetters(options: any) : Observable<any>{\r\n        const path =`${this.resourceUrl}/retrieve_claim_letters`;\r\n        return this.ns2Http.get(path, options);\r\n    }\r\n\r\n    retrieveLetterFormDetails(options: any) : Observable<any>{\r\n        const path =`${this.resourceUrl}/retrieve_letter_form_detail`;\r\n        return this.ns2Http.get(path, options);\r\n    }\r\n\r\n    previewClaimLetter(request: any, options: any) : Observable<any>{\r\n        const path =`${this.resourceUrl}/view_preview_letter`;\r\n        return this.ns2Http.post(path,JSON.stringify(request), options);\r\n    }\r\n\r\n    submitClaimLetter(request: any, options: any) : Observable<any>{\r\n        const path =`${this.resourceUrl}/submit_claim_letter`;\r\n        return this.ns2Http.post(path,JSON.stringify(request), options);\r\n    }\r\n   \r\n    updateSubmittedClaimLetter(request: any, options: any) : Observable<any>{\r\n        const path =`${this.resourceUrl}/update_claim_letter`;\r\n        return this.ns2Http.post(path,JSON.stringify(request), options);\r\n    }\r\n\r\n    deleteSubmittedClaimLetter(request: any, options: any) : Observable<any>{\r\n        const path =`${this.resourceUrl}/delete_claim_letter`;\r\n        return this.ns2Http.post(path,JSON.stringify(request), options);\r\n    }\r\n  \r\n    getCompanyInfo(csn: string): Observable<any>{\r\n        const path = this.resourceUrl + '/get_company_info/' + csn;\r\n        return this.ns2Http.get(path);\r\n    }\r\n\r\n    viewGeneratedClaimLetter(request: any, options: any) : Observable<any>{\r\n        const path =`${this.resourceUrl}/view_generated_letter`;\r\n        return this.ns2Http.post(path,JSON.stringify(request), options);\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}