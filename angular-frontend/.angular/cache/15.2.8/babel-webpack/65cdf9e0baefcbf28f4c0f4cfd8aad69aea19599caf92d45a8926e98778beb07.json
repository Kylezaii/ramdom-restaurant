{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ProtectedPayableService = void 0;\nconst tslib_1 = require(\"tslib\");\nconst i0 = tslib_1.__importStar(require(\"@angular/core\"));\nconst i1 = tslib_1.__importStar(require(\"app/shared/service/ns2-http.service\"));\nconst i2 = tslib_1.__importStar(require(\"@angular/common/http\"));\nconst i3 = tslib_1.__importStar(require(\"app/core/config/application-config.service\"));\nclass ProtectedPayableService {\n  constructor(ns2Http, http, applicationConfigService) {\n    this.ns2Http = ns2Http;\n    this.http = http;\n    this.applicationConfigService = applicationConfigService;\n    this.resourceUrl = this.applicationConfigService.getEndpointFor('api/payment/protected-payable');\n  }\n  /* GET: Retrieves all the Protected Payables */\n  getAllProtectedPayables(options) {\n    return this.ns2Http.get(this.resourceUrl, options);\n  }\n  /* GET: Retrieves all the Protected Payables related to the given NSman's NRIC */\n  getProtectedPayablesByNSman(nsmanId, options) {\n    const url = this.resourceUrl + '/nsman/' + nsmanId;\n    console.log('Executing function: getInstalmentsByNSman() with param value: ' + nsmanId);\n    return this.ns2Http.get(url, options);\n  }\n  /* GET: Retrieves the Protected Payable related to the given Protected Payable ID */\n  getProtectedPayable(protectedPayableId) {\n    // console.log('Executing function: getPendingProtectedPayable() with param value: ' + protectedPayableId);\n    // const url = 'assets/mock/payment/protected-payable-pending-approval.json';\n    const url = this.resourceUrl + '/' + protectedPayableId;\n    return this.http.get(url, {\n      observe: 'response'\n    });\n  }\n  /* POST: Create Protected Payable */\n  postCreateProtectedPayable(request) {\n    return this.ns2Http.postWithFormData(this.resourceUrl, request);\n  }\n  /* PATCH: Update Protected Payable to PENDING_TERMINATION status */\n  terminate(protectedPayableArray) {\n    const url = this.resourceUrl + '/terminate';\n    return this.ns2Http.patch(url, protectedPayableArray);\n  }\n  /* PATCH: Update Protected Payable to APPROVED status */\n  approve(protectedPayableId) {\n    const url = this.resourceUrl + '/approve/' + protectedPayableId;\n    return this.ns2Http.patch(url);\n  }\n  /* PATCH: Update Protected Payable to REJECTED status */\n  reject(protectedPayableToReject) {\n    const url = this.resourceUrl + '/reject';\n    return this.ns2Http.patch(url, protectedPayableToReject);\n  }\n  downloadSuppDocs(protectedPayableId) {\n    const url = this.resourceUrl + '/' + protectedPayableId + '/supporting-documents';\n    return this.ns2Http.post(url, null, {\n      responseType: 'blob'\n    });\n  }\n}\nexports.ProtectedPayableService = ProtectedPayableService;\nProtectedPayableService.ɵfac = function ProtectedPayableService_Factory(t) {\n  return new (t || ProtectedPayableService)(i0.ɵɵinject(i1.Ns2HttpService), i0.ɵɵinject(i2.HttpClient), i0.ɵɵinject(i3.ApplicationConfigService));\n};\nProtectedPayableService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ProtectedPayableService,\n  factory: ProtectedPayableService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";;;;;;;;;;;AAOA,MAGaA,uBAAuB;EAGlCC,YACUC,OAAuB,EACvBC,IAAgB,EAChBC,wBAAkD;IAFlD,YAAO,GAAPF,OAAO;IACP,SAAI,GAAJC,IAAI;IACJ,6BAAwB,GAAxBC,wBAAwB;IAL3B,gBAAW,GAAG,IAAI,CAACA,wBAAwB,CAACC,cAAc,CAAC,+BAA+B,CAAC;EAOlG;EAEA;EACOC,uBAAuB,CAACC,OAAa;IAC1C,OAAO,IAAI,CAACL,OAAO,CAACM,GAAG,CAAC,IAAI,CAACC,WAAW,EAAEF,OAAO,CAAC;EACpD;EAEA;EACOG,2BAA2B,CAACC,OAAe,EAAEJ,OAAa;IAC/D,MAAMK,GAAG,GAAG,IAAI,CAACH,WAAW,GAAG,SAAS,GAAGE,OAAO;IAClDE,OAAO,CAACC,GAAG,CAAC,gEAAgE,GAAGH,OAAO,CAAC;IACvF,OAAO,IAAI,CAACT,OAAO,CAACM,GAAG,CAACI,GAAG,EAAEL,OAAO,CAAC;EACvC;EAEA;EACOQ,mBAAmB,CAACC,kBAA0B;IACnD;IACA;IACA,MAAMJ,GAAG,GAAG,IAAI,CAACH,WAAW,GAAG,GAAG,GAAGO,kBAAkB;IACvD,OAAO,IAAI,CAACb,IAAI,CAACK,GAAG,CAAoBI,GAAG,EAAE;MAACK,OAAO,EAAE;IAAU,CAAC,CAAC;EACrE;EAEA;EACOC,0BAA0B,CAACC,OAAY;IAC5C,OAAO,IAAI,CAACjB,OAAO,CAACkB,gBAAgB,CAAC,IAAI,CAACX,WAAW,EAAEU,OAAO,CAAC;EACjE;EAEA;EACOE,SAAS,CAACC,qBAA2C;IAC1D,MAAMV,GAAG,GAAG,IAAI,CAACH,WAAW,GAAG,YAAY;IAC3C,OAAO,IAAI,CAACP,OAAO,CAACqB,KAAK,CAACX,GAAG,EAAEU,qBAAqB,CAAC;EACvD;EAEA;EACOE,OAAO,CAACR,kBAA0B;IACvC,MAAMJ,GAAG,GAAG,IAAI,CAACH,WAAW,GAAG,WAAW,GAAGO,kBAAkB;IAC/D,OAAO,IAAI,CAACd,OAAO,CAACqB,KAAK,CAACX,GAAG,CAAC;EAChC;EAEA;EACOa,MAAM,CAACC,wBAA4C;IACxD,MAAMd,GAAG,GAAG,IAAI,CAACH,WAAW,GAAG,SAAS;IACxC,OAAO,IAAI,CAACP,OAAO,CAACqB,KAAK,CAACX,GAAG,EAAEc,wBAAwB,CAAC;EAC1D;EAEOC,gBAAgB,CAACX,kBAA2B;IACjD,MAAMJ,GAAG,GAAG,IAAI,CAACH,WAAW,GAAG,GAAG,GAAGO,kBAAkB,GAAG,uBAAuB;IACjF,OAAO,IAAI,CAACd,OAAO,CAAC0B,IAAI,CAAChB,GAAG,EAAE,IAAI,EAAE;MAAEiB,YAAY,EAAE;IAAM,CAAC,CAAC;EAC9D;;AA3DFC;;mBAGa9B,uBAAuB;AAAA;;SAAvBA,uBAAuB;EAAA+B,SAAvB/B,uBAAuB;EAAAgC,YAFtB;AAAM","names":["ProtectedPayableService","constructor","ns2Http","http","applicationConfigService","getEndpointFor","getAllProtectedPayables","options","get","resourceUrl","getProtectedPayablesByNSman","nsmanId","url","console","log","getProtectedPayable","protectedPayableId","observe","postCreateProtectedPayable","request","postWithFormData","terminate","protectedPayableArray","patch","approve","reject","protectedPayableToReject","downloadSuppDocs","post","responseType","exports","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\D1347074\\Desktop\\projects 2\\nspayiiapp\\src\\main\\webapp\\app\\payment\\protected-payable\\service\\protected-payable.service.ts"],"sourcesContent":["import {Injectable} from '@angular/core';\r\nimport {HttpClient} from '@angular/common/http';\r\nimport {ApplicationConfigService} from 'app/core/config/application-config.service';\r\nimport {IProtectedPayable} from 'app/payment/protected-payable/model/protected-payable.model';\r\nimport {Observable} from \"rxjs\";\r\nimport {Ns2HttpService} from \"app/shared/service/ns2-http.service\";\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ProtectedPayableService {\r\n  public resourceUrl = this.applicationConfigService.getEndpointFor('api/payment/protected-payable');\r\n\r\n  constructor(\r\n    private ns2Http: Ns2HttpService,\r\n    private http: HttpClient,\r\n    private applicationConfigService: ApplicationConfigService\r\n  ) {\r\n  }\r\n\r\n  /* GET: Retrieves all the Protected Payables */\r\n  public getAllProtectedPayables(options?: any): Observable<any> {\r\n    return this.ns2Http.get(this.resourceUrl, options);\r\n  }\r\n\r\n  /* GET: Retrieves all the Protected Payables related to the given NSman's NRIC */\r\n  public getProtectedPayablesByNSman(nsmanId: string, options?: any): Observable<any> {\r\n    const url = this.resourceUrl + '/nsman/' + nsmanId;\r\n    console.log('Executing function: getInstalmentsByNSman() with param value: ' + nsmanId);\r\n    return this.ns2Http.get(url, options);\r\n  }\r\n\r\n  /* GET: Retrieves the Protected Payable related to the given Protected Payable ID */\r\n  public getProtectedPayable(protectedPayableId: string): Observable<any> {\r\n    // console.log('Executing function: getPendingProtectedPayable() with param value: ' + protectedPayableId);\r\n    // const url = 'assets/mock/payment/protected-payable-pending-approval.json';\r\n    const url = this.resourceUrl + '/' + protectedPayableId\r\n    return this.http.get<IProtectedPayable>(url, {observe: 'response'});\r\n  }\r\n\r\n  /* POST: Create Protected Payable */\r\n  public postCreateProtectedPayable(request: any): Observable<any> {\r\n    return this.ns2Http.postWithFormData(this.resourceUrl, request);\r\n  }\r\n\r\n  /* PATCH: Update Protected Payable to PENDING_TERMINATION status */\r\n  public terminate(protectedPayableArray : IProtectedPayable[]): Observable<any> {\r\n    const url = this.resourceUrl + '/terminate';\r\n    return this.ns2Http.patch(url, protectedPayableArray);\r\n  }\r\n\r\n  /* PATCH: Update Protected Payable to APPROVED status */\r\n  public approve(protectedPayableId: string): Observable<any> {\r\n    const url = this.resourceUrl + '/approve/' + protectedPayableId;\r\n    return this.ns2Http.patch(url);\r\n  }\r\n\r\n  /* PATCH: Update Protected Payable to REJECTED status */\r\n  public reject(protectedPayableToReject : IProtectedPayable): Observable<any> {\r\n    const url = this.resourceUrl + '/reject';\r\n    return this.ns2Http.patch(url, protectedPayableToReject);\r\n  }\r\n\r\n  public downloadSuppDocs(protectedPayableId : string ): Observable<any> {\r\n    const url = this.resourceUrl + '/' + protectedPayableId + '/supporting-documents';\r\n    return this.ns2Http.post(url, null, { responseType: 'blob'});\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}