{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CodeService = void 0;\nconst tslib_1 = require(\"tslib\");\nconst operators_1 = require(\"rxjs/operators\");\nconst request_util_1 = require(\"app/core/request/request-util\");\nconst app_constants_1 = require(\"../../../app.constants\");\nconst i0 = tslib_1.__importStar(require(\"@angular/core\"));\nconst i1 = tslib_1.__importStar(require(\"@angular/common/http\"));\nconst i2 = tslib_1.__importStar(require(\"@angular/common\"));\nclass CodeService {\n  constructor(http, datePipe) {\n    this.http = http;\n    this.datePipe = datePipe;\n    this.getCodesByCodeTypePkUrl = app_constants_1.SERVER_API_URL + 'api/codeAdmin/codesByCodeTypePk';\n    this.getCodesByCodeTypeIdAndCodeIdUrl = app_constants_1.SERVER_API_URL + 'api/codeAdmin/codesByCodeTypePkAndCodeId';\n    this.getCodeTypesByAppIdAndCodeTypePkNotUrl = app_constants_1.SERVER_API_URL + 'api/codeAdmin/codeTypesByAppIdAndCodeTypePkNot';\n    this.changeCodeSeqUrl = app_constants_1.SERVER_API_URL + 'api/codeAdmin/changeCodeSeq';\n    this.codeUrl = app_constants_1.SERVER_API_URL + 'api/codeAdmin/code';\n  }\n  getCodesByCodeTypePk(req) {\n    const params = (0, request_util_1.createRequestOption)(req);\n    return this.http.get(this.getCodesByCodeTypePkUrl, {\n      params,\n      observe: 'response'\n    }).pipe((0, operators_1.map)(res => this.convertCodeArrayResponse(res)));\n  }\n  getCodesByCodeTypeIdAndCodeId(req) {\n    const params = (0, request_util_1.createRequestOption)(req);\n    return this.http.get(this.getCodesByCodeTypeIdAndCodeIdUrl, {\n      params,\n      observe: 'response'\n    }).pipe((0, operators_1.map)(res => this.convertCodeArrayResponse(res)));\n  }\n  changeCodeSeq(code) {\n    const copy = this.convertCodes(code);\n    return this.http.put(this.changeCodeSeqUrl, copy, {\n      observe: 'response'\n    }).pipe((0, operators_1.map)(res => {\n      const jsonResponse = res.body;\n      return this.convertCodeItemFromServer(jsonResponse);\n    }));\n  }\n  getInternalCodeTypesByAppIdAndCodeTypePkNot(req) {\n    const params = (0, request_util_1.createRequestOption)(req);\n    return this.http.get(this.getCodeTypesByAppIdAndCodeTypePkNotUrl, {\n      params,\n      observe: 'response'\n    }).pipe((0, operators_1.map)(res => this.convertCodeTypeArrayResponse(res)));\n  }\n  create(code) {\n    const copy = this.convertCode(code);\n    return this.http.post(this.codeUrl, copy).pipe((0, operators_1.map)(res => {\n      const jsonResponse = res.body;\n      return this.convertCodeItemFromServer(jsonResponse);\n    }));\n  }\n  update(code) {\n    const copy = this.convertCode(code);\n    return this.http.put(this.codeUrl, copy, {\n      observe: 'response'\n    }).pipe((0, operators_1.map)(res => {\n      const jsonResponse = res.body;\n      return this.convertCodeItemFromServer(jsonResponse);\n    }));\n  }\n  delete(req) {\n    const params = (0, request_util_1.createRequestOption)(req);\n    return this.http.delete(this.codeUrl, {\n      params,\n      observe: 'response'\n    });\n  }\n  find(id) {\n    return this.http.get(`${this.codeUrl}/${id}`, {\n      observe: 'response'\n    }).pipe((0, operators_1.map)(res => this.convertCodeItemFromServer(res)));\n  }\n  convertCodeTypeArrayResponse(res) {\n    const jsonResponse = res.body;\n    const body = [];\n    for (let i = 0; i < jsonResponse.length; i++) {\n      body.push(this.convertCodeTypeItemFromServer(jsonResponse[i]));\n    }\n    return res.clone({\n      body\n    });\n  }\n  convertCodeArrayResponse(res) {\n    const jsonResponse = res.body;\n    const body = [];\n    for (let i = 0; i < jsonResponse.length; i++) {\n      body.push(this.convertCodeItemFromServer(jsonResponse[i]));\n    }\n    return res.clone({\n      body\n    });\n  }\n  convertCodeTypeItemFromServer(entity) {\n    return entity;\n  }\n  convertCodeItemFromServer(entity) {\n    const copy = Object.assign({}, entity);\n    if (copy.effectiveDt) {\n      const dateString = copy.effectiveDt.split('/');\n      copy.effectiveDt = new Date(dateString[2], dateString[0] - 1, dateString[1]);\n    }\n    if (copy.expiryDt) {\n      const dateString = copy.expiryDt.split('/');\n      copy.expiryDt = new Date(dateString[2], dateString[0] - 1, dateString[1]);\n    }\n    return copy;\n  }\n  convertCode(code) {\n    const copy = Object.assign({}, code);\n    if (copy.effectiveDt) {\n      copy.effectiveDt = this.datePipe.transform(copy.effectiveDt, 'MM/dd/yyyy');\n    }\n    if (copy.expiryDt) {\n      copy.expiryDt = this.datePipe.transform(copy.expiryDt, 'MM/dd/yyyy');\n    }\n    return copy;\n  }\n  convertCodes(codes) {\n    const copy = new Array();\n    codes.forEach(element => {\n      element.effectiveDt = this.datePipe.transform(element.effectiveDt, 'MM/dd/yyyy');\n      element.expiryDt = this.datePipe.transform(element.effectiveDt, 'MM/dd/yyyy');\n      copy.push(element);\n    });\n    return copy;\n  }\n}\nexports.CodeService = CodeService;\nCodeService.ɵfac = function CodeService_Factory(t) {\n  return new (t || CodeService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.DatePipe));\n};\nCodeService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: CodeService,\n  factory: CodeService.ɵfac\n});","map":{"version":3,"mappings":"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","names":["CodeService","constructor","http","datePipe","app_constants_1","getCodesByCodeTypePk","req","params","get","getCodesByCodeTypePkUrl","observe","pipe","res","convertCodeArrayResponse","getCodesByCodeTypeIdAndCodeId","getCodesByCodeTypeIdAndCodeIdUrl","changeCodeSeq","code","copy","convertCodes","put","changeCodeSeqUrl","jsonResponse","body","convertCodeItemFromServer","getInternalCodeTypesByAppIdAndCodeTypePkNot","getCodeTypesByAppIdAndCodeTypePkNotUrl","convertCodeTypeArrayResponse","create","convertCode","post","codeUrl","update","delete","find","id","i","length","push","convertCodeTypeItemFromServer","clone","entity","Object","assign","effectiveDt","dateString","split","Date","expiryDt","transform","codes","Array","forEach","element","exports","factory"],"sourceRoot":"","sources":["C:\\Users\\D1347074\\Desktop\\projects 2\\nspayiiapp\\src\\main\\webapp\\app\\admin\\code-admin\\code\\code.service.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-unsafe-return */\r\nimport { DatePipe } from '@angular/common';\r\nimport { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpParams, HttpResponse } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { Code } from './code.model';\r\nimport { createRequestOption } from 'app/core/request/request-util';\r\nimport { SERVER_API_URL } from '../../../app.constants';\r\nimport { CodeType } from '../code-type/code-type.model';\r\n\r\n@Injectable()\r\nexport class CodeService {\r\n  private getCodesByCodeTypePkUrl = SERVER_API_URL + 'api/codeAdmin/codesByCodeTypePk';\r\n  private getCodesByCodeTypeIdAndCodeIdUrl = SERVER_API_URL + 'api/codeAdmin/codesByCodeTypePkAndCodeId';\r\n  private getCodeTypesByAppIdAndCodeTypePkNotUrl = SERVER_API_URL + 'api/codeAdmin/codeTypesByAppIdAndCodeTypePkNot';\r\n  private changeCodeSeqUrl = SERVER_API_URL + 'api/codeAdmin/changeCodeSeq';\r\n  private codeUrl = SERVER_API_URL + 'api/codeAdmin/code';\r\n\r\n  constructor(private http: HttpClient, private datePipe: DatePipe) {}\r\n\r\n  getCodesByCodeTypePk(req?: any): Observable<HttpResponse<Code[]>> {\r\n    const params: HttpParams = createRequestOption(req);\r\n    return this.http\r\n      .get(this.getCodesByCodeTypePkUrl, { params, observe: 'response' })\r\n      .pipe(map((res: HttpResponse<any>) => this.convertCodeArrayResponse(res)));\r\n  }\r\n\r\n  getCodesByCodeTypeIdAndCodeId(req?: any): Observable<HttpResponse<Code[]>> {\r\n    const params: HttpParams = createRequestOption(req);\r\n    return this.http\r\n      .get(this.getCodesByCodeTypeIdAndCodeIdUrl, { params, observe: 'response' })\r\n      .pipe(map((res: HttpResponse<any>) => this.convertCodeArrayResponse(res)));\r\n  }\r\n\r\n  changeCodeSeq(code: Code[]): Observable<HttpResponse<any>> {\r\n    const copy = this.convertCodes(code);\r\n    return this.http.put(this.changeCodeSeqUrl, copy, { observe: 'response' }).pipe(\r\n      map((res: HttpResponse<any>) => {\r\n        const jsonResponse = res.body;\r\n        return this.convertCodeItemFromServer(jsonResponse);\r\n      })\r\n    );\r\n  }\r\n\r\n  getInternalCodeTypesByAppIdAndCodeTypePkNot(req?: any): Observable<HttpResponse<CodeType[]>> {\r\n    const params: HttpParams = createRequestOption(req);\r\n    return this.http\r\n      .get(this.getCodeTypesByAppIdAndCodeTypePkNotUrl, { params, observe: 'response' })\r\n      .pipe(map((res: HttpResponse<any>) => this.convertCodeTypeArrayResponse(res)));\r\n  }\r\n\r\n  create(code: Code): Observable<Code> {\r\n    const copy = this.convertCode(code);\r\n    return this.http.post(this.codeUrl, copy).pipe(\r\n      map((res: any) => {\r\n        const jsonResponse = res.body;\r\n        return this.convertCodeItemFromServer(jsonResponse);\r\n      })\r\n    );\r\n  }\r\n\r\n  update(code: Code): Observable<Code> {\r\n    const copy = this.convertCode(code);\r\n    return this.http.put(this.codeUrl, copy, { observe: 'response' }).pipe(\r\n      map((res: HttpResponse<any>) => {\r\n        const jsonResponse = res.body;\r\n        return this.convertCodeItemFromServer(jsonResponse);\r\n      })\r\n    );\r\n  }\r\n\r\n  delete(req?: any): Observable<HttpResponse<any>> {\r\n    const params: HttpParams = createRequestOption(req);\r\n    return this.http.delete(this.codeUrl, { params, observe: 'response' });\r\n  }\r\n\r\n  find(id: string): Observable<Code> {\r\n    return this.http\r\n      .get(`${this.codeUrl}/${id}`, { observe: 'response' })\r\n      .pipe(map((res: HttpResponse<any>) => this.convertCodeItemFromServer(res)));\r\n  }\r\n\r\n  private convertCodeTypeArrayResponse(res: HttpResponse<CodeType[]>): HttpResponse<CodeType[]> {\r\n    const jsonResponse: CodeType[] = res.body as any;\r\n    const body: CodeType[] = [];\r\n    for (let i = 0; i < jsonResponse.length; i++) {\r\n      body.push(this.convertCodeTypeItemFromServer(jsonResponse[i]));\r\n    }\r\n    return res.clone({ body });\r\n  }\r\n\r\n  private convertCodeArrayResponse(res: HttpResponse<Code[]>): HttpResponse<Code[]> {\r\n    const jsonResponse: Code[] = res.body as any;\r\n    const body: Code[] = [];\r\n    for (let i = 0; i < jsonResponse.length; i++) {\r\n      body.push(this.convertCodeItemFromServer(jsonResponse[i]));\r\n    }\r\n    return res.clone({ body });\r\n  }\r\n\r\n  private convertCodeTypeItemFromServer(entity: any): any {\r\n    return entity;\r\n  }\r\n\r\n  private convertCodeItemFromServer(entity: any): any {\r\n    const copy: Code = Object.assign({}, entity);\r\n    if (copy.effectiveDt) {\r\n      const dateString = copy.effectiveDt.split('/');\r\n      copy.effectiveDt = new Date(dateString[2], dateString[0] - 1, dateString[1]);\r\n    }\r\n    if (copy.expiryDt) {\r\n      const dateString = copy.expiryDt.split('/');\r\n      copy.expiryDt = new Date(dateString[2], dateString[0] - 1, dateString[1]);\r\n    }\r\n    return copy;\r\n  }\r\n\r\n  private convertCode(code: Code): Code {\r\n    const copy: Code = Object.assign({}, code);\r\n    if (copy.effectiveDt) {\r\n      copy.effectiveDt = this.datePipe.transform(copy.effectiveDt, 'MM/dd/yyyy');\r\n    }\r\n    if (copy.expiryDt) {\r\n      copy.expiryDt = this.datePipe.transform(copy.expiryDt, 'MM/dd/yyyy');\r\n    }\r\n    return copy;\r\n  }\r\n\r\n  private convertCodes(codes: Code[]): Code[] {\r\n    const copy: Code[] = new Array<Code>();\r\n    codes.forEach(element => {\r\n      element.effectiveDt = this.datePipe.transform(element.effectiveDt, 'MM/dd/yyyy');\r\n      element.expiryDt = this.datePipe.transform(element.effectiveDt, 'MM/dd/yyyy');\r\n      copy.push(element);\r\n    });\r\n    return copy;\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}