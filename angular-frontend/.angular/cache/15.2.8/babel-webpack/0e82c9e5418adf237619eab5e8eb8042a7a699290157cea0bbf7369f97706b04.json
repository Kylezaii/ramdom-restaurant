{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.NsmanIrasConsentHistoryComponent = void 0;\nconst tslib_1 = require(\"tslib\");\nconst i0 = tslib_1.__importStar(require(\"@angular/core\"));\nconst i1 = tslib_1.__importStar(require(\"app/shared/service/ns2-http.service\"));\nconst i2 = tslib_1.__importStar(require(\"app/claim/se-claim/service/se-claim.service\"));\nconst i3 = tslib_1.__importStar(require(\"app/core/util/date-utils.service\"));\nconst i4 = tslib_1.__importStar(require(\"app/core/util/export-utils.service\"));\nconst i5 = tslib_1.__importStar(require(\"primeng/api\"));\nconst i6 = tslib_1.__importStar(require(\"primeng/button\"));\nconst i7 = tslib_1.__importStar(require(\"primeng/tooltip\"));\nconst i8 = tslib_1.__importStar(require(\"primeng/table\"));\nconst i9 = tslib_1.__importStar(require(\"@angular/common\"));\nfunction NsmanIrasConsentHistoryComponent_ng_template_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r6 = i0.ɵɵgetCurrentView();\n    i0.ɵɵtext(0, \"\\n        \");\n    i0.ɵɵelementStart(1, \"button\", 6);\n    i0.ɵɵlistener(\"click\", function NsmanIrasConsentHistoryComponent_ng_template_3_Template_button_click_1_listener() {\n      i0.ɵɵrestoreView(_r6);\n      const ctx_r5 = i0.ɵɵnextContext();\n      const _r0 = i0.ɵɵreference(1);\n      return i0.ɵɵresetView(ctx_r5.exportCSV(_r0));\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(2, \"\\n    \");\n  }\n}\nfunction NsmanIrasConsentHistoryComponent_ng_template_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtext(0, \"\\n        \");\n    i0.ɵɵelementStart(1, \"tr\");\n    i0.ɵɵtext(2, \"\\n            \");\n    i0.ɵɵelementStart(3, \"th\", 7);\n    i0.ɵɵtext(4, \"SN\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(5, \"\\n            \");\n    i0.ɵɵelementStart(6, \"th\", 8);\n    i0.ɵɵtext(7, \"Consent given\\n                \");\n    i0.ɵɵelement(8, \"p-sortIcon\", 9);\n    i0.ɵɵtext(9, \"\\n                \");\n    i0.ɵɵelement(10, \"p-columnFilter\", 10);\n    i0.ɵɵtext(11, \"\\n            \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(12, \"\\n            \");\n    i0.ɵɵelementStart(13, \"th\", 11);\n    i0.ɵɵtext(14, \"Date\\n                \");\n    i0.ɵɵelement(15, \"p-sortIcon\", 12);\n    i0.ɵɵtext(16, \"\\n                \");\n    i0.ɵɵelement(17, \"p-columnFilter\", 13);\n    i0.ɵɵtext(18, \"\\n            \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(19, \"\\n        \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(20, \"\\n    \");\n  }\n}\nfunction NsmanIrasConsentHistoryComponent_ng_template_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtext(0, \"\\n        \");\n    i0.ɵɵelementStart(1, \"tr\");\n    i0.ɵɵtext(2, \"\\n            \");\n    i0.ɵɵelementStart(3, \"td\");\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(5, \"\\n            \");\n    i0.ɵɵelementStart(6, \"td\");\n    i0.ɵɵtext(7);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(8, \"\\n            \");\n    i0.ɵɵelementStart(9, \"td\");\n    i0.ɵɵtext(10);\n    i0.ɵɵpipe(11, \"date\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(12, \"\\n        \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(13, \"\\n    \");\n  }\n  if (rf & 2) {\n    const record_r7 = ctx.$implicit;\n    const i_r8 = ctx.rowIndex;\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate(i_r8 + 1);\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(record_r7.consentInd === \"Y\" ? \"Yes\" : \"No\");\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind2(11, 3, record_r7.consentDate, \"dd-MM-yyyy (HHmm)\"));\n  }\n}\nfunction NsmanIrasConsentHistoryComponent_ng_template_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtext(0, \"\\n        \");\n    i0.ɵɵelementStart(1, \"tr\");\n    i0.ɵɵtext(2, \"\\n            \");\n    i0.ɵɵelementStart(3, \"td\", 14);\n    i0.ɵɵtext(4, \"No records found.\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(5, \"\\n        \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(6, \"\\n    \");\n  }\n}\nconst _c0 = function () {\n  return [10, 25, 50];\n};\nclass NsmanIrasConsentHistoryComponent {\n  constructor(ns2HttpService, seClaimService, dateUtilsService, exportUtilsService) {\n    this.ns2HttpService = ns2HttpService;\n    this.seClaimService = seClaimService;\n    this.dateUtilsService = dateUtilsService;\n    this.exportUtilsService = exportUtilsService;\n    this.pageData = {\n      currentPage: 0\n    };\n    this.pageSize = 10;\n    this.irasConsentHistoryList = [];\n  }\n  ngOnInit() {\n    //\n  }\n  load(event) {\n    setTimeout(() => {\n      this.loading = true;\n      this.lazyLoadEvent = event;\n      const options = this.ns2HttpService.convertLazyEvent(this.lazyLoadEvent, this.pageData, this.pageSize);\n      this.seClaimService.retrieveIrasConsentHistory(this.nric, options).subscribe(resp => {\n        if (resp.body?.data?.content) {\n          this.irasConsentHistoryList = resp.body.data.content;\n          this.totalRecords = resp.body.data.totalElements;\n        } else {\n          this.irasConsentHistoryList = [];\n          this.totalRecords = 0;\n        }\n        this.loading = false;\n      });\n    }, 0);\n  }\n  onPage(event) {\n    this.pageSize = event.rows;\n    this.pageData.currentPage = event.first / event.rows;\n  }\n  exportCSV(dataTable) {\n    const options = this.ns2HttpService.convertLazyEvent(this.lazyLoadEvent, 0, this.totalRecords);\n    options.params = options.params.append(\"nric\", this.nric);\n    this.seClaimService.retrieveIrasConsentHistory(this.nric, options).subscribe(resp => {\n      if (resp.body?.data?.content) {\n        const data = resp.body?.data?.content;\n        const columns = [{\n          field: 'sn',\n          header: 'SN',\n          index: 0\n        }, {\n          field: 'consentInd',\n          header: 'Consent given',\n          index: 1\n        }, {\n          field: 'consentDate',\n          header: 'Date',\n          index: 2\n        }];\n        const dtoList = [];\n        console.log(\"data\", data);\n        data.forEach((record, index) => {\n          const dto = {\n            sn: index + 1,\n            consentInd: record.consentInd === 'Y' ? 'Yes' : 'No',\n            consentDate: `${String(this.dateUtilsService.formatStrDate(record.consentDate, \"DD-MM-YYYY (HHmm)\"))}`\n          };\n          dtoList.push(dto);\n        });\n        this.exportUtilsService.exportCSV(dataTable, dtoList, resp.body.data.totalElements, columns, \"Enquiry NSman Iras Consent History\");\n      }\n    }, error => {\n      console.log(error.error?.error_desc);\n      this.loading = false;\n    });\n  }\n}\nexports.NsmanIrasConsentHistoryComponent = NsmanIrasConsentHistoryComponent;\nNsmanIrasConsentHistoryComponent.ɵfac = function NsmanIrasConsentHistoryComponent_Factory(t) {\n  return new (t || NsmanIrasConsentHistoryComponent)(i0.ɵɵdirectiveInject(i1.Ns2HttpService), i0.ɵɵdirectiveInject(i2.SEClaimService), i0.ɵɵdirectiveInject(i3.DateUtilsService), i0.ɵɵdirectiveInject(i4.ExportUtilsService));\n};\nNsmanIrasConsentHistoryComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: NsmanIrasConsentHistoryComponent,\n  selectors: [[\"n2-nsman-iras-consent-history\"]],\n  inputs: {\n    nric: \"nric\"\n  },\n  decls: 12,\n  vars: 9,\n  consts: [[\"styleClass\", \"p-datatable-gridlines\", \"currentPageReportTemplate\", \"Showing {first} to {last} of {totalRecords} entries\", 3, \"value\", \"totalRecords\", \"loading\", \"lazy\", \"paginator\", \"rows\", \"rowsPerPageOptions\", \"showCurrentPageReport\", \"onLazyLoad\", \"onPage\"], [\"irasConsentTable\", \"\"], [\"pTemplate\", \"caption\"], [\"pTemplate\", \"header\"], [\"pTemplate\", \"body\"], [\"pTemplate\", \"emptymessage\"], [\"type\", \"button\", \"pButton\", \"\", \"pRipple\", \"\", \"icon\", \"pi pi-file\", \"pTooltip\", \"Export as CSV\", \"tooltipPosition\", \"bottom\", 3, \"click\"], [\"scope\", \"col\", 2, \"width\", \"10%\"], [\"scope\", \"col\", \"pSortableColumn\", \"consentInd\", 2, \"width\", \"45%\"], [\"field\", \"consentInd\"], [\"type\", \"text\", \"field\", \"consentInd\", \"display\", \"menu\", \"matchMode\", \"contains\"], [\"scope\", \"col\", \"pSortableColumn\", \"consentDate\", 2, \"width\", \"45%\"], [\"field\", \"consentDate\"], [\"type\", \"text\", \"field\", \"consentDate\", \"display\", \"menu\", \"matchMode\", \"contains\"], [\"colspan\", \"12\"]],\n  template: function NsmanIrasConsentHistoryComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"p-table\", 0, 1);\n      i0.ɵɵlistener(\"onLazyLoad\", function NsmanIrasConsentHistoryComponent_Template_p_table_onLazyLoad_0_listener($event) {\n        return ctx.load($event);\n      })(\"onPage\", function NsmanIrasConsentHistoryComponent_Template_p_table_onPage_0_listener($event) {\n        return ctx.onPage($event);\n      });\n      i0.ɵɵtext(2, \"\\n    \");\n      i0.ɵɵtemplate(3, NsmanIrasConsentHistoryComponent_ng_template_3_Template, 3, 0, \"ng-template\", 2);\n      i0.ɵɵtext(4, \"\\n    \");\n      i0.ɵɵtemplate(5, NsmanIrasConsentHistoryComponent_ng_template_5_Template, 21, 0, \"ng-template\", 3);\n      i0.ɵɵtext(6, \"\\n    \");\n      i0.ɵɵtemplate(7, NsmanIrasConsentHistoryComponent_ng_template_7_Template, 14, 6, \"ng-template\", 4);\n      i0.ɵɵtext(8, \"\\n    \");\n      i0.ɵɵtemplate(9, NsmanIrasConsentHistoryComponent_ng_template_9_Template, 7, 0, \"ng-template\", 5);\n      i0.ɵɵtext(10, \"\\n\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(11, \"\\n\");\n    }\n    if (rf & 2) {\n      i0.ɵɵproperty(\"value\", ctx.irasConsentHistoryList)(\"totalRecords\", ctx.totalRecords)(\"loading\", ctx.loading)(\"lazy\", true)(\"paginator\", true)(\"rows\", 10)(\"rowsPerPageOptions\", i0.ɵɵpureFunction0(8, _c0))(\"showCurrentPageReport\", true);\n    }\n  },\n  dependencies: [i5.PrimeTemplate, i6.ButtonDirective, i7.Tooltip, i8.Table, i8.SortableColumn, i8.SortIcon, i8.ColumnFilter, i9.DatePipe],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJuc21hbi1pcmFzLWNvbnNlbnQtaGlzdG9yeS5jb21wb25lbnQuc2NzcyJ9 */\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9tYWluL3dlYmFwcC9hcHAvZW5xdWlyeS9uc21hbi9zZWFyY2gvbnNtYW4tdGFicy9wcmUtcG9wdWxhdGVkLWVjbGFpbS10YWIvaXJhcy1jb25zZW50LWhpc3RvcnkvbnNtYW4taXJhcy1jb25zZW50LWhpc3RvcnkuY29tcG9uZW50LnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUNBLDRMQUE0TCIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;IAcQA;IAAAA,iCACyB;IAD+BA;MAAAA;MAAA;MAAA;MAAA,OAASA,oCAA2B;IAAA,EAAC;IACpEA,iBAAS;IACtCA;;;;;IAEIA;IAAAA,0BAAI;IACAA;IAAAA,6BAAmC;IAAAA,kBAAE;IAAAA,iBAAK;IAC1CA;IAAAA,6BAAgE;IAAAA,+CAC5D;IAAAA,gCAA4C;IAC5CA;IAAAA,sCAAoG;IACxGA;IAAAA,iBAAK;IACLA;IAAAA,+BAAiE;IAAAA,uCAC7D;IAAAA,kCAA6C;IAC7CA;IAAAA,sCAAqG;IACzGA;IAAAA,iBAAK;IACTA;IAAAA,iBAAK;IACTA;;;;;IAEIA;IAAAA,0BAAI;IACAA;IAAAA,0BAAI;IAAAA,YAAW;IAAAA,iBAAK;IACpBA;IAAAA,0BAAI;IAAAA,YAA8C;IAAAA,iBAAK;IACvDA;IAAAA,0BAAI;IAAAA,aAAmD;;IAAAA,iBAAK;IAChEA;IAAAA,iBAAK;IACTA;;;;;IAJYA,eAAW;IAAXA,8BAAW;IACXA,eAA8C;IAA9CA,iEAA8C;IAC9CA,eAAmD;IAAnDA,uFAAmD;;;;;IAI3DA;IAAAA,0BAAI;IACAA;IAAAA,8BAAiB;IAAAA,iCAAiB;IAAAA,iBAAK;IAC3CA;IAAAA,iBAAK;IACTA;;;;;;AChCJ,MAKaC,gCAAgC;EAe3CC,YACUC,cAA8B,EAC9BC,cAA8B,EAC9BC,gBAAkC,EAClCC,kBAAsC;IAHtC,mBAAc,GAAdH,cAAc;IACd,mBAAc,GAAdC,cAAc;IACd,qBAAgB,GAAhBC,gBAAgB;IAChB,uBAAkB,GAAlBC,kBAAkB;IAZ5B,aAAQ,GAA4B;MAClCC,WAAW,EAAE;KACd;IACD,aAAQ,GAAG,EAAE;IAGb,2BAAsB,GAAyB,EAAE;EAO9C;EAEHC,QAAQ;IACN;EAAA;EAGFC,IAAI,CAACC,KAAoB;IACvBC,UAAU,CAAC,MAAK;MACd,IAAI,CAACC,OAAO,GAAG,IAAI;MACnB,IAAI,CAACC,aAAa,GAAGH,KAAK;MAE1B,MAAMI,OAAO,GAAG,IAAI,CAACX,cAAc,CAACY,gBAAgB,CAAC,IAAI,CAACF,aAAa,EAAE,IAAI,CAACG,QAAQ,EAAE,IAAI,CAACC,QAAQ,CAAC;MAEtG,IAAI,CAACb,cAAc,CAACc,0BAA0B,CAAC,IAAI,CAACC,IAAI,EAAEL,OAAO,CAAC,CAACM,SAAS,CAACC,IAAI,IAAG;QAClF,IAAIA,IAAI,CAACC,IAAI,EAAEC,IAAI,EAAEC,OAAO,EAAE;UAC5B,IAAI,CAACC,sBAAsB,GAAGJ,IAAI,CAACC,IAAI,CAACC,IAAI,CAACC,OAAO;UACpD,IAAI,CAACE,YAAY,GAAGL,IAAI,CAACC,IAAI,CAACC,IAAI,CAACI,aAAa;SACjD,MAAM;UACL,IAAI,CAACF,sBAAsB,GAAG,EAAE;UAChC,IAAI,CAACC,YAAY,GAAG,CAAC;;QAEvB,IAAI,CAACd,OAAO,GAAG,KAAK;MACtB,CAAC,CAAC;IACJ,CAAC,EAAE,CAAC,CAAC;EACP;EAEAgB,MAAM,CAAClB,KAAU;IACf,IAAI,CAACO,QAAQ,GAAGP,KAAK,CAACmB,IAAI;IAC1B,IAAI,CAACb,QAAQ,CAACT,WAAW,GAAGG,KAAK,CAACoB,KAAK,GAAGpB,KAAK,CAACmB,IAAI;EACtD;EAEAE,SAAS,CAACC,SAAgB;IACxB,MAAMlB,OAAO,GAAG,IAAI,CAACX,cAAc,CAACY,gBAAgB,CAAC,IAAI,CAACF,aAAa,EAAE,CAAC,EAAE,IAAI,CAACa,YAAY,CAAC;IAC9FZ,OAAO,CAACmB,MAAM,GAAGnB,OAAO,CAACmB,MAAM,CAACC,MAAM,CAAC,MAAM,EAAE,IAAI,CAACf,IAAI,CAAC;IAEzD,IAAI,CAACf,cAAc,CAACc,0BAA0B,CAAC,IAAI,CAACC,IAAI,EAAEL,OAAO,CAAC,CAACM,SAAS,CAC1EC,IAAI,IAAG;MACL,IAAIA,IAAI,CAACC,IAAI,EAAEC,IAAI,EAAEC,OAAO,EAAE;QAC5B,MAAMD,IAAI,GAAGF,IAAI,CAACC,IAAI,EAAEC,IAAI,EAAEC,OAAO;QACrC,MAAMW,OAAO,GAAG,CACd;UAAEC,KAAK,EAAE,IAAI;UAAEC,MAAM,EAAE,IAAI;UAAEC,KAAK,EAAE;QAAC,CAAE,EACvC;UAAEF,KAAK,EAAE,YAAY;UAAEC,MAAM,EAAE,eAAe;UAAEC,KAAK,EAAE;QAAC,CAAE,EAC1D;UAAEF,KAAK,EAAE,aAAa;UAAEC,MAAM,EAAE,MAAM;UAAEC,KAAK,EAAE;QAAC,CAAE,CACnD;QAED,MAAMC,OAAO,GAAU,EAAE;QACzBC,OAAO,CAACC,GAAG,CAAC,MAAM,EAAElB,IAAI,CAAC;QACzBA,IAAI,CAACmB,OAAO,CAAC,CAACC,MAA0B,EAAEL,KAAa,KAAI;UACzD,MAAMM,GAAG,GAAG;YACVC,EAAE,EAAEP,KAAK,GAAG,CAAC;YACbQ,UAAU,EAAEH,MAAM,CAACG,UAAU,KAAK,GAAG,GAAG,KAAK,GAAG,IAAI;YACpDC,WAAW,EAAE,GAAGC,MAAM,CAAC,IAAI,CAAC3C,gBAAgB,CAAC4C,aAAa,CAACN,MAAM,CAACI,WAAW,EAAE,mBAAmB,CAAC,CAAC;WACrG;UACDR,OAAO,CAACW,IAAI,CAACN,GAAG,CAAC;QACnB,CAAC,CAAC;QACF,IAAI,CAACtC,kBAAkB,CAACyB,SAAS,CAACC,SAAS,EAAEO,OAAO,EAAElB,IAAI,CAACC,IAAI,CAACC,IAAI,CAACI,aAAa,EAAEQ,OAAO,EAAE,oCAAoC,CAAC;;IAEtI,CAAC,EACDgB,KAAK,IAAG;MACNX,OAAO,CAACC,GAAG,CAACU,KAAK,CAACA,KAAK,EAAEC,UAAU,CAAC;MACpC,IAAI,CAACxC,OAAO,GAAG,KAAK;IACtB,CAAC,CAAC;EACN;;AAvFFyC;;mBAKapD,gCAAgC;AAAA;;QAAhCA,gCAAgC;EAAAqD;EAAAC;IAAApC;EAAA;EAAAqC;EAAAC;EAAAC;EAAAC;IAAA;MDd7C3D,qCAYoF;MAPhFA;QAAA,OAAc4D,gBAAY;MAAA,EAAC;QAAA,OACjBA,kBAAc;MAAA,EADG;MAQ3B5D;MAAAA,iGAGc;MACdA;MAAAA,kGAYc;MACdA;MAAAA,kGAMc;MACdA;MAAAA,iGAIc;MAClBA;MAAAA,iBAAU;MACVA;;;MA1CIA,kDAAgC","names":["i0","NsmanIrasConsentHistoryComponent","constructor","ns2HttpService","seClaimService","dateUtilsService","exportUtilsService","currentPage","ngOnInit","load","event","setTimeout","loading","lazyLoadEvent","options","convertLazyEvent","pageData","pageSize","retrieveIrasConsentHistory","nric","subscribe","resp","body","data","content","irasConsentHistoryList","totalRecords","totalElements","onPage","rows","first","exportCSV","dataTable","params","append","columns","field","header","index","dtoList","console","log","forEach","record","dto","sn","consentInd","consentDate","String","formatStrDate","push","error","error_desc","exports","selectors","inputs","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["C:\\Users\\D1347074\\Desktop\\projects 2\\nspayiiapp\\src\\main\\webapp\\app\\enquiry\\nsman\\search\\nsman-tabs\\pre-populated-eclaim-tab\\iras-consent-history\\nsman-iras-consent-history.component.html","C:\\Users\\D1347074\\Desktop\\projects 2\\nspayiiapp\\src\\main\\webapp\\app\\enquiry\\nsman\\search\\nsman-tabs\\pre-populated-eclaim-tab\\iras-consent-history\\nsman-iras-consent-history.component.ts"],"sourcesContent":["<p-table #irasConsentTable\r\n    [value]=\"irasConsentHistoryList\"\r\n    [totalRecords]=\"totalRecords\"\r\n    [loading]=\"loading\"\r\n    [lazy]=\"true\"\r\n    (onLazyLoad)=\"load($event)\"\r\n    (onPage)=\"onPage($event)\"\r\n    styleClass=\"p-datatable-gridlines\"\r\n    [paginator]=\"true\"\r\n    [rows]=\"10\"\r\n    [rowsPerPageOptions]=\"[10,25,50]\"\r\n    [showCurrentPageReport]=\"true\"\r\n    currentPageReportTemplate=\"Showing {first} to {last} of {totalRecords} entries\">\r\n    <ng-template pTemplate=\"caption\">\r\n        <button type=\"button\" pButton pRipple icon=\"pi pi-file\" (click)=\"exportCSV(irasConsentTable)\" pTooltip=\"Export as CSV\" \r\n        tooltipPosition=\"bottom\"></button>\r\n    </ng-template>\r\n    <ng-template pTemplate=\"header\">\r\n        <tr>\r\n            <th scope=\"col\" style=\"width: 10%\">SN</th>\r\n            <th scope=\"col\" style=\"width: 45%\" pSortableColumn=\"consentInd\">Consent given\r\n                <p-sortIcon field=\"consentInd\"></p-sortIcon>\r\n                <p-columnFilter type=\"text\" field=\"consentInd\" display=\"menu\" matchMode=\"contains\"></p-columnFilter>\r\n            </th>\r\n            <th scope=\"col\" style=\"width: 45%\" pSortableColumn=\"consentDate\">Date\r\n                <p-sortIcon field=\"consentDate\"></p-sortIcon>\r\n                <p-columnFilter type=\"text\" field=\"consentDate\" display=\"menu\" matchMode=\"contains\"></p-columnFilter>\r\n            </th>\r\n        </tr>\r\n    </ng-template>\r\n    <ng-template pTemplate=\"body\" let-record let-i=\"rowIndex\">\r\n        <tr>\r\n            <td>{{ i + 1 }}</td>\r\n            <td>{{ record.consentInd === 'Y' ? 'Yes' : 'No' }}</td>\r\n            <td>{{ record.consentDate | date:'dd-MM-yyyy (HHmm)' }}</td>\r\n        </tr>\r\n    </ng-template>\r\n    <ng-template pTemplate=\"emptymessage\">\r\n        <tr>\r\n            <td colspan=\"12\">No records found.</td>\r\n        </tr>\r\n    </ng-template>\r\n</p-table>\r\n","import { Component, Input, OnInit } from '@angular/core';\r\nimport { LazyLoadEvent } from 'primeng/api';\r\nimport { DateUtilsService } from 'app/core/util/date-utils.service';\r\nimport { Ns2HttpService } from 'app/shared/service/ns2-http.service';\r\nimport { ExportUtilsService } from 'app/core/util/export-utils.service';\r\nimport { SEClaimService } from 'app/claim/se-claim/service/se-claim.service';\r\nimport { IrasConsentHistory } from 'app/claim/model/nsman-consent.model';\r\nimport { Table } from 'primeng/table';\r\n\r\n@Component({\r\n  selector: 'n2-nsman-iras-consent-history',\r\n  templateUrl: './nsman-iras-consent-history.component.html',\r\n  styleUrls: ['./nsman-iras-consent-history.component.scss']\r\n})\r\nexport class NsmanIrasConsentHistoryComponent implements OnInit {\r\n\r\n  @Input() nric: string;\r\n\r\n  // LazyLoad variables\r\n  totalRecords?: number;\r\n  loading?: boolean;\r\n  pageData: { currentPage: number } = {\r\n    currentPage: 0\r\n  }\r\n  pageSize = 10;\r\n  lazyLoadEvent: LazyLoadEvent;\r\n\r\n  irasConsentHistoryList: IrasConsentHistory[] = [];\r\n\r\n  constructor(\r\n    private ns2HttpService: Ns2HttpService,\r\n    private seClaimService: SEClaimService,\r\n    private dateUtilsService: DateUtilsService,\r\n    private exportUtilsService: ExportUtilsService,\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    //\r\n  }\r\n\r\n  load(event: LazyLoadEvent): void {\r\n    setTimeout(() => {\r\n      this.loading = true;\r\n      this.lazyLoadEvent = event;\r\n\r\n      const options = this.ns2HttpService.convertLazyEvent(this.lazyLoadEvent, this.pageData, this.pageSize);\r\n\r\n      this.seClaimService.retrieveIrasConsentHistory(this.nric, options).subscribe(resp => {\r\n        if (resp.body?.data?.content) {\r\n          this.irasConsentHistoryList = resp.body.data.content;\r\n          this.totalRecords = resp.body.data.totalElements;\r\n        } else {\r\n          this.irasConsentHistoryList = [];\r\n          this.totalRecords = 0;\r\n        }\r\n        this.loading = false;\r\n      });\r\n    }, 0);\r\n  }\r\n\r\n  onPage(event: any): void {\r\n    this.pageSize = event.rows;\r\n    this.pageData.currentPage = event.first / event.rows;\r\n  }\r\n  \r\n  exportCSV(dataTable: Table): void {\r\n    const options = this.ns2HttpService.convertLazyEvent(this.lazyLoadEvent, 0, this.totalRecords);\r\n    options.params = options.params.append(\"nric\", this.nric);\r\n\r\n    this.seClaimService.retrieveIrasConsentHistory(this.nric, options).subscribe(\r\n      resp => {\r\n        if (resp.body?.data?.content) {\r\n          const data = resp.body?.data?.content;\r\n          const columns = [\r\n            { field: 'sn', header: 'SN', index: 0 },\r\n            { field: 'consentInd', header: 'Consent given', index: 1 },\r\n            { field: 'consentDate', header: 'Date', index: 2 },\r\n          ];\r\n\r\n          const dtoList: any[] = [];\r\n          console.log(\"data\", data);\r\n          data.forEach((record: IrasConsentHistory, index: number) => {\r\n            const dto = {\r\n              sn: index + 1,\r\n              consentInd: record.consentInd === 'Y' ? 'Yes' : 'No',\r\n              consentDate: `${String(this.dateUtilsService.formatStrDate(record.consentDate, \"DD-MM-YYYY (HHmm)\"))}`\r\n            }\r\n            dtoList.push(dto);\r\n          });\r\n          this.exportUtilsService.exportCSV(dataTable, dtoList, resp.body.data.totalElements, columns, \"Enquiry NSman Iras Consent History\");\r\n        }\r\n      },\r\n      error => {\r\n        console.log(error.error?.error_desc);\r\n        this.loading = false;\r\n      })\r\n  }\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}