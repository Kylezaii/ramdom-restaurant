{"ast":null,"code":"import { DOCUMENT, CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { Injectable, Inject, Optional, EventEmitter, Directive, Input, Output, NgModule } from '@angular/core';\nimport { WINDOW } from 'ngx-window-token';\nimport { Subject } from 'rxjs';\n\n/**\n * The following code is heavily copied from https://github.com/zenorocha/clipboard.js\n */\nclass ClipboardService {\n  constructor(ngZone, document, window) {\n    this.ngZone = ngZone;\n    this.document = document;\n    this.window = window;\n    this.copySubject = new Subject();\n    this.copyResponse$ = this.copySubject.asObservable();\n    this.config = {};\n  }\n  configure(config) {\n    this.config = config;\n  }\n  copy(content) {\n    if (!this.isSupported || !content) {\n      return this.pushCopyResponse({\n        isSuccess: false,\n        content\n      });\n    }\n    const copyResult = this.copyFromContent(content);\n    if (copyResult) {\n      return this.pushCopyResponse({\n        content,\n        isSuccess: copyResult\n      });\n    }\n    return this.pushCopyResponse({\n      isSuccess: false,\n      content\n    });\n  }\n  get isSupported() {\n    return !!this.document.queryCommandSupported && !!this.document.queryCommandSupported('copy') && !!this.window;\n  }\n  isTargetValid(element) {\n    if (element instanceof HTMLInputElement || element instanceof HTMLTextAreaElement) {\n      if (element.hasAttribute('disabled')) {\n        throw new Error('Invalid \"target\" attribute. Please use \"readonly\" instead of \"disabled\" attribute');\n      }\n      return true;\n    }\n    throw new Error('Target should be input or textarea');\n  }\n  /**\n   * Attempts to copy from an input `targetElm`\n   */\n  copyFromInputElement(targetElm, isFocus = true) {\n    try {\n      this.selectTarget(targetElm);\n      const re = this.copyText();\n      this.clearSelection(isFocus ? targetElm : undefined, this.window);\n      return re && this.isCopySuccessInIE11();\n    } catch (error) {\n      return false;\n    }\n  }\n  /**\n   * This is a hack for IE11 to return `true` even if copy fails.\n   */\n  isCopySuccessInIE11() {\n    const clipboardData = this.window['clipboardData'];\n    if (clipboardData && clipboardData.getData) {\n      if (!clipboardData.getData('Text')) {\n        return false;\n      }\n    }\n    return true;\n  }\n  /**\n   * Creates a fake textarea element, sets its value from `text` property,\n   * and makes a selection on it.\n   */\n  copyFromContent(content, container = this.document.body) {\n    // check if the temp textarea still belongs to the current container.\n    // In case we have multiple places using ngx-clipboard, one is in a modal using container but the other one is not.\n    if (this.tempTextArea && !container.contains(this.tempTextArea)) {\n      this.destroy(this.tempTextArea.parentElement || undefined);\n    }\n    if (!this.tempTextArea) {\n      this.tempTextArea = this.createTempTextArea(this.document, this.window);\n      try {\n        container.appendChild(this.tempTextArea);\n      } catch (error) {\n        throw new Error('Container should be a Dom element');\n      }\n    }\n    this.tempTextArea.value = content;\n    const toReturn = this.copyFromInputElement(this.tempTextArea, false);\n    if (this.config.cleanUpAfterCopy) {\n      this.destroy(this.tempTextArea.parentElement || undefined);\n    }\n    return toReturn;\n  }\n  /**\n   * Remove temporary textarea if any exists.\n   */\n  destroy(container = this.document.body) {\n    if (this.tempTextArea) {\n      container.removeChild(this.tempTextArea);\n      // removeChild doesn't remove the reference from memory\n      this.tempTextArea = undefined;\n    }\n  }\n  /**\n   * Select the target html input element.\n   */\n  selectTarget(inputElement) {\n    inputElement.select();\n    inputElement.setSelectionRange(0, inputElement.value.length);\n    return inputElement.value.length;\n  }\n  copyText() {\n    return this.document.execCommand('copy');\n  }\n  /**\n   * Moves focus away from `target` and back to the trigger, removes current selection.\n   */\n  clearSelection(inputElement, window) {\n    inputElement && inputElement.focus();\n    window.getSelection()?.removeAllRanges();\n  }\n  /**\n   * Creates a fake textarea for copy command.\n   */\n  createTempTextArea(doc, window) {\n    const isRTL = doc.documentElement.getAttribute('dir') === 'rtl';\n    let ta;\n    ta = doc.createElement('textarea');\n    // Prevent zooming on iOS\n    ta.style.fontSize = '12pt';\n    // Reset box model\n    ta.style.border = '0';\n    ta.style.padding = '0';\n    ta.style.margin = '0';\n    // Move element out of screen horizontally\n    ta.style.position = 'absolute';\n    ta.style[isRTL ? 'right' : 'left'] = '-9999px';\n    // Move element to the same position vertically\n    const yPosition = window.pageYOffset || doc.documentElement.scrollTop;\n    ta.style.top = yPosition + 'px';\n    ta.setAttribute('readonly', '');\n    return ta;\n  }\n  /**\n   * Pushes copy operation response to copySubject, to provide global access\n   * to the response.\n   */\n  pushCopyResponse(response) {\n    if (this.copySubject.observers.length > 0) {\n      this.ngZone.run(() => {\n        this.copySubject.next(response);\n      });\n    }\n  }\n  /**\n   * @deprecated use pushCopyResponse instead.\n   */\n  pushCopyReponse(response) {\n    this.pushCopyResponse(response);\n  }\n}\nClipboardService.ɵfac = function ClipboardService_Factory(t) {\n  return new (t || ClipboardService)(i0.ɵɵinject(i0.NgZone), i0.ɵɵinject(DOCUMENT), i0.ɵɵinject(WINDOW, 8));\n};\nClipboardService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: ClipboardService,\n  factory: ClipboardService.ɵfac,\n  providedIn: 'root'\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ClipboardService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: i0.NgZone\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [WINDOW]\n      }]\n    }];\n  }, null);\n})();\nclass ClipboardDirective {\n  constructor(ngZone, host, renderer, clipboardSrv) {\n    this.ngZone = ngZone;\n    this.host = host;\n    this.renderer = renderer;\n    this.clipboardSrv = clipboardSrv;\n    this.cbOnSuccess = new EventEmitter();\n    this.cbOnError = new EventEmitter();\n    this.onClick = event => {\n      if (!this.clipboardSrv.isSupported) {\n        this.handleResult(false, undefined, event);\n      } else if (this.targetElm && this.clipboardSrv.isTargetValid(this.targetElm)) {\n        this.handleResult(this.clipboardSrv.copyFromInputElement(this.targetElm), this.targetElm.value, event);\n      } else if (this.cbContent) {\n        this.handleResult(this.clipboardSrv.copyFromContent(this.cbContent, this.container), this.cbContent, event);\n      }\n    };\n  }\n  // eslint-disable-next-line no-empty, @typescript-eslint/no-empty-function\n  ngOnInit() {\n    this.ngZone.runOutsideAngular(() => {\n      // By default each host listener schedules change detection and also wrapped\n      // into additional function that calls `markForCheck()`. We're listening the `click`\n      // event in the context of the root zone to avoid running unnecessary change detections,\n      // since this directive doesn't do anything template-related (e.g. updates template variables).\n      this.clickListener = this.renderer.listen(this.host.nativeElement, 'click', this.onClick);\n    });\n  }\n  ngOnDestroy() {\n    if (this.clickListener) {\n      this.clickListener();\n    }\n    this.clipboardSrv.destroy(this.container);\n  }\n  /**\n   * Fires an event based on the copy operation result.\n   * @param succeeded\n   */\n  handleResult(succeeded, copiedContent, event) {\n    let response = {\n      isSuccess: succeeded,\n      content: copiedContent,\n      successMessage: this.cbSuccessMsg,\n      event\n    };\n    if (succeeded) {\n      if (this.cbOnSuccess.observed) {\n        this.ngZone.run(() => {\n          this.cbOnSuccess.emit(response);\n        });\n      }\n    } else {\n      if (this.cbOnError.observed) {\n        this.ngZone.run(() => {\n          this.cbOnError.emit(response);\n        });\n      }\n    }\n    this.clipboardSrv.pushCopyResponse(response);\n  }\n}\nClipboardDirective.ɵfac = function ClipboardDirective_Factory(t) {\n  return new (t || ClipboardDirective)(i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(ClipboardService));\n};\nClipboardDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: ClipboardDirective,\n  selectors: [[\"\", \"ngxClipboard\", \"\"]],\n  inputs: {\n    targetElm: [\"ngxClipboard\", \"targetElm\"],\n    container: \"container\",\n    cbContent: \"cbContent\",\n    cbSuccessMsg: \"cbSuccessMsg\"\n  },\n  outputs: {\n    cbOnSuccess: \"cbOnSuccess\",\n    cbOnError: \"cbOnError\"\n  }\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ClipboardDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[ngxClipboard]'\n    }]\n  }], function () {\n    return [{\n      type: i0.NgZone\n    }, {\n      type: i0.ElementRef\n    }, {\n      type: i0.Renderer2\n    }, {\n      type: ClipboardService\n    }];\n  }, {\n    targetElm: [{\n      type: Input,\n      args: ['ngxClipboard']\n    }],\n    container: [{\n      type: Input\n    }],\n    cbContent: [{\n      type: Input\n    }],\n    cbSuccessMsg: [{\n      type: Input\n    }],\n    cbOnSuccess: [{\n      type: Output\n    }],\n    cbOnError: [{\n      type: Output\n    }]\n  });\n})();\nclass ClipboardIfSupportedDirective {\n  constructor(_clipboardService, _viewContainerRef, _templateRef) {\n    this._clipboardService = _clipboardService;\n    this._viewContainerRef = _viewContainerRef;\n    this._templateRef = _templateRef;\n  }\n  ngOnInit() {\n    if (this._clipboardService.isSupported) {\n      this._viewContainerRef.createEmbeddedView(this._templateRef);\n    }\n  }\n}\nClipboardIfSupportedDirective.ɵfac = function ClipboardIfSupportedDirective_Factory(t) {\n  return new (t || ClipboardIfSupportedDirective)(i0.ɵɵdirectiveInject(ClipboardService), i0.ɵɵdirectiveInject(i0.ViewContainerRef), i0.ɵɵdirectiveInject(i0.TemplateRef));\n};\nClipboardIfSupportedDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: ClipboardIfSupportedDirective,\n  selectors: [[\"\", \"ngxClipboardIfSupported\", \"\"]]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ClipboardIfSupportedDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[ngxClipboardIfSupported]'\n    }]\n  }], function () {\n    return [{\n      type: ClipboardService\n    }, {\n      type: i0.ViewContainerRef\n    }, {\n      type: i0.TemplateRef\n    }];\n  }, null);\n})();\nclass ClipboardModule {}\nClipboardModule.ɵfac = function ClipboardModule_Factory(t) {\n  return new (t || ClipboardModule)();\n};\nClipboardModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: ClipboardModule\n});\nClipboardModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [[CommonModule]]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ClipboardModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule],\n      declarations: [ClipboardDirective, ClipboardIfSupportedDirective],\n      exports: [ClipboardDirective, ClipboardIfSupportedDirective]\n    }]\n  }], null, null);\n})();\n\n/*\n * Public API Surface of ngx-clipboard\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { ClipboardDirective, ClipboardIfSupportedDirective, ClipboardModule, ClipboardService };","map":{"version":3,"names":["DOCUMENT","CommonModule","i0","Injectable","Inject","Optional","EventEmitter","Directive","Input","Output","NgModule","WINDOW","Subject","ClipboardService","constructor","ngZone","document","window","copySubject","copyResponse$","asObservable","config","configure","copy","content","isSupported","pushCopyResponse","isSuccess","copyResult","copyFromContent","queryCommandSupported","isTargetValid","element","HTMLInputElement","HTMLTextAreaElement","hasAttribute","Error","copyFromInputElement","targetElm","isFocus","selectTarget","re","copyText","clearSelection","undefined","isCopySuccessInIE11","error","clipboardData","getData","container","body","tempTextArea","contains","destroy","parentElement","createTempTextArea","appendChild","value","toReturn","cleanUpAfterCopy","removeChild","inputElement","select","setSelectionRange","length","execCommand","focus","getSelection","removeAllRanges","doc","isRTL","documentElement","getAttribute","ta","createElement","style","fontSize","border","padding","margin","position","yPosition","pageYOffset","scrollTop","top","setAttribute","response","observers","run","next","pushCopyReponse","ɵfac","NgZone","ɵprov","type","args","providedIn","decorators","ClipboardDirective","host","renderer","clipboardSrv","cbOnSuccess","cbOnError","onClick","event","handleResult","cbContent","ngOnInit","runOutsideAngular","clickListener","listen","nativeElement","ngOnDestroy","succeeded","copiedContent","successMessage","cbSuccessMsg","observed","emit","ElementRef","Renderer2","ɵdir","selector","ClipboardIfSupportedDirective","_clipboardService","_viewContainerRef","_templateRef","createEmbeddedView","ViewContainerRef","TemplateRef","ClipboardModule","ɵmod","ɵinj","imports","declarations","exports"],"sources":["C:/Users/D1347074/Desktop/projects 2/nspayiiapp/node_modules/ngx-clipboard/fesm2020/ngx-clipboard.mjs"],"sourcesContent":["import { DOCUMENT, CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { Injectable, Inject, Optional, EventEmitter, Directive, Input, Output, NgModule } from '@angular/core';\nimport { WINDOW } from 'ngx-window-token';\nimport { Subject } from 'rxjs';\n\n/**\n * The following code is heavily copied from https://github.com/zenorocha/clipboard.js\n */\nclass ClipboardService {\n    constructor(ngZone, document, window) {\n        this.ngZone = ngZone;\n        this.document = document;\n        this.window = window;\n        this.copySubject = new Subject();\n        this.copyResponse$ = this.copySubject.asObservable();\n        this.config = {};\n    }\n    configure(config) {\n        this.config = config;\n    }\n    copy(content) {\n        if (!this.isSupported || !content) {\n            return this.pushCopyResponse({ isSuccess: false, content });\n        }\n        const copyResult = this.copyFromContent(content);\n        if (copyResult) {\n            return this.pushCopyResponse({ content, isSuccess: copyResult });\n        }\n        return this.pushCopyResponse({ isSuccess: false, content });\n    }\n    get isSupported() {\n        return !!this.document.queryCommandSupported && !!this.document.queryCommandSupported('copy') && !!this.window;\n    }\n    isTargetValid(element) {\n        if (element instanceof HTMLInputElement || element instanceof HTMLTextAreaElement) {\n            if (element.hasAttribute('disabled')) {\n                throw new Error('Invalid \"target\" attribute. Please use \"readonly\" instead of \"disabled\" attribute');\n            }\n            return true;\n        }\n        throw new Error('Target should be input or textarea');\n    }\n    /**\n     * Attempts to copy from an input `targetElm`\n     */\n    copyFromInputElement(targetElm, isFocus = true) {\n        try {\n            this.selectTarget(targetElm);\n            const re = this.copyText();\n            this.clearSelection(isFocus ? targetElm : undefined, this.window);\n            return re && this.isCopySuccessInIE11();\n        }\n        catch (error) {\n            return false;\n        }\n    }\n    /**\n     * This is a hack for IE11 to return `true` even if copy fails.\n     */\n    isCopySuccessInIE11() {\n        const clipboardData = this.window['clipboardData'];\n        if (clipboardData && clipboardData.getData) {\n            if (!clipboardData.getData('Text')) {\n                return false;\n            }\n        }\n        return true;\n    }\n    /**\n     * Creates a fake textarea element, sets its value from `text` property,\n     * and makes a selection on it.\n     */\n    copyFromContent(content, container = this.document.body) {\n        // check if the temp textarea still belongs to the current container.\n        // In case we have multiple places using ngx-clipboard, one is in a modal using container but the other one is not.\n        if (this.tempTextArea && !container.contains(this.tempTextArea)) {\n            this.destroy(this.tempTextArea.parentElement || undefined);\n        }\n        if (!this.tempTextArea) {\n            this.tempTextArea = this.createTempTextArea(this.document, this.window);\n            try {\n                container.appendChild(this.tempTextArea);\n            }\n            catch (error) {\n                throw new Error('Container should be a Dom element');\n            }\n        }\n        this.tempTextArea.value = content;\n        const toReturn = this.copyFromInputElement(this.tempTextArea, false);\n        if (this.config.cleanUpAfterCopy) {\n            this.destroy(this.tempTextArea.parentElement || undefined);\n        }\n        return toReturn;\n    }\n    /**\n     * Remove temporary textarea if any exists.\n     */\n    destroy(container = this.document.body) {\n        if (this.tempTextArea) {\n            container.removeChild(this.tempTextArea);\n            // removeChild doesn't remove the reference from memory\n            this.tempTextArea = undefined;\n        }\n    }\n    /**\n     * Select the target html input element.\n     */\n    selectTarget(inputElement) {\n        inputElement.select();\n        inputElement.setSelectionRange(0, inputElement.value.length);\n        return inputElement.value.length;\n    }\n    copyText() {\n        return this.document.execCommand('copy');\n    }\n    /**\n     * Moves focus away from `target` and back to the trigger, removes current selection.\n     */\n    clearSelection(inputElement, window) {\n        inputElement && inputElement.focus();\n        window.getSelection()?.removeAllRanges();\n    }\n    /**\n     * Creates a fake textarea for copy command.\n     */\n    createTempTextArea(doc, window) {\n        const isRTL = doc.documentElement.getAttribute('dir') === 'rtl';\n        let ta;\n        ta = doc.createElement('textarea');\n        // Prevent zooming on iOS\n        ta.style.fontSize = '12pt';\n        // Reset box model\n        ta.style.border = '0';\n        ta.style.padding = '0';\n        ta.style.margin = '0';\n        // Move element out of screen horizontally\n        ta.style.position = 'absolute';\n        ta.style[isRTL ? 'right' : 'left'] = '-9999px';\n        // Move element to the same position vertically\n        const yPosition = window.pageYOffset || doc.documentElement.scrollTop;\n        ta.style.top = yPosition + 'px';\n        ta.setAttribute('readonly', '');\n        return ta;\n    }\n    /**\n     * Pushes copy operation response to copySubject, to provide global access\n     * to the response.\n     */\n    pushCopyResponse(response) {\n        if (this.copySubject.observers.length > 0) {\n            this.ngZone.run(() => {\n                this.copySubject.next(response);\n            });\n        }\n    }\n    /**\n     * @deprecated use pushCopyResponse instead.\n     */\n    pushCopyReponse(response) {\n        this.pushCopyResponse(response);\n    }\n}\nClipboardService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.1\", ngImport: i0, type: ClipboardService, deps: [{ token: i0.NgZone }, { token: DOCUMENT }, { token: WINDOW, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\nClipboardService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.0.1\", ngImport: i0, type: ClipboardService, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.1\", ngImport: i0, type: ClipboardService, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () { return [{ type: i0.NgZone }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [WINDOW]\n                }] }]; } });\n\nclass ClipboardDirective {\n    constructor(ngZone, host, renderer, clipboardSrv) {\n        this.ngZone = ngZone;\n        this.host = host;\n        this.renderer = renderer;\n        this.clipboardSrv = clipboardSrv;\n        this.cbOnSuccess = new EventEmitter();\n        this.cbOnError = new EventEmitter();\n        this.onClick = (event) => {\n            if (!this.clipboardSrv.isSupported) {\n                this.handleResult(false, undefined, event);\n            }\n            else if (this.targetElm && this.clipboardSrv.isTargetValid(this.targetElm)) {\n                this.handleResult(this.clipboardSrv.copyFromInputElement(this.targetElm), this.targetElm.value, event);\n            }\n            else if (this.cbContent) {\n                this.handleResult(this.clipboardSrv.copyFromContent(this.cbContent, this.container), this.cbContent, event);\n            }\n        };\n    }\n    // eslint-disable-next-line no-empty, @typescript-eslint/no-empty-function\n    ngOnInit() {\n        this.ngZone.runOutsideAngular(() => {\n            // By default each host listener schedules change detection and also wrapped\n            // into additional function that calls `markForCheck()`. We're listening the `click`\n            // event in the context of the root zone to avoid running unnecessary change detections,\n            // since this directive doesn't do anything template-related (e.g. updates template variables).\n            this.clickListener = this.renderer.listen(this.host.nativeElement, 'click', this.onClick);\n        });\n    }\n    ngOnDestroy() {\n        if (this.clickListener) {\n            this.clickListener();\n        }\n        this.clipboardSrv.destroy(this.container);\n    }\n    /**\n     * Fires an event based on the copy operation result.\n     * @param succeeded\n     */\n    handleResult(succeeded, copiedContent, event) {\n        let response = {\n            isSuccess: succeeded,\n            content: copiedContent,\n            successMessage: this.cbSuccessMsg,\n            event\n        };\n        if (succeeded) {\n            if (this.cbOnSuccess.observed) {\n                this.ngZone.run(() => {\n                    this.cbOnSuccess.emit(response);\n                });\n            }\n        }\n        else {\n            if (this.cbOnError.observed) {\n                this.ngZone.run(() => {\n                    this.cbOnError.emit(response);\n                });\n            }\n        }\n        this.clipboardSrv.pushCopyResponse(response);\n    }\n}\nClipboardDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.1\", ngImport: i0, type: ClipboardDirective, deps: [{ token: i0.NgZone }, { token: i0.ElementRef }, { token: i0.Renderer2 }, { token: ClipboardService }], target: i0.ɵɵFactoryTarget.Directive });\nClipboardDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.0.1\", type: ClipboardDirective, selector: \"[ngxClipboard]\", inputs: { targetElm: [\"ngxClipboard\", \"targetElm\"], container: \"container\", cbContent: \"cbContent\", cbSuccessMsg: \"cbSuccessMsg\" }, outputs: { cbOnSuccess: \"cbOnSuccess\", cbOnError: \"cbOnError\" }, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.1\", ngImport: i0, type: ClipboardDirective, decorators: [{\n            type: Directive,\n            args: [{ selector: '[ngxClipboard]' }]\n        }], ctorParameters: function () { return [{ type: i0.NgZone }, { type: i0.ElementRef }, { type: i0.Renderer2 }, { type: ClipboardService }]; }, propDecorators: { targetElm: [{\n                type: Input,\n                args: ['ngxClipboard']\n            }], container: [{\n                type: Input\n            }], cbContent: [{\n                type: Input\n            }], cbSuccessMsg: [{\n                type: Input\n            }], cbOnSuccess: [{\n                type: Output\n            }], cbOnError: [{\n                type: Output\n            }] } });\n\nclass ClipboardIfSupportedDirective {\n    constructor(_clipboardService, _viewContainerRef, _templateRef) {\n        this._clipboardService = _clipboardService;\n        this._viewContainerRef = _viewContainerRef;\n        this._templateRef = _templateRef;\n    }\n    ngOnInit() {\n        if (this._clipboardService.isSupported) {\n            this._viewContainerRef.createEmbeddedView(this._templateRef);\n        }\n    }\n}\nClipboardIfSupportedDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.1\", ngImport: i0, type: ClipboardIfSupportedDirective, deps: [{ token: ClipboardService }, { token: i0.ViewContainerRef }, { token: i0.TemplateRef }], target: i0.ɵɵFactoryTarget.Directive });\nClipboardIfSupportedDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.0.1\", type: ClipboardIfSupportedDirective, selector: \"[ngxClipboardIfSupported]\", ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.1\", ngImport: i0, type: ClipboardIfSupportedDirective, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[ngxClipboardIfSupported]'\n                }]\n        }], ctorParameters: function () { return [{ type: ClipboardService }, { type: i0.ViewContainerRef }, { type: i0.TemplateRef }]; } });\n\nclass ClipboardModule {\n}\nClipboardModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.1\", ngImport: i0, type: ClipboardModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nClipboardModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.0.1\", ngImport: i0, type: ClipboardModule, declarations: [ClipboardDirective, ClipboardIfSupportedDirective], imports: [CommonModule], exports: [ClipboardDirective, ClipboardIfSupportedDirective] });\nClipboardModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.0.1\", ngImport: i0, type: ClipboardModule, imports: [[CommonModule]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.1\", ngImport: i0, type: ClipboardModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CommonModule],\n                    declarations: [ClipboardDirective, ClipboardIfSupportedDirective],\n                    exports: [ClipboardDirective, ClipboardIfSupportedDirective]\n                }]\n        }] });\n\n/*\n * Public API Surface of ngx-clipboard\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { ClipboardDirective, ClipboardIfSupportedDirective, ClipboardModule, ClipboardService };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}