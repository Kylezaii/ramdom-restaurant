{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ChecklistItemComponent = void 0;\nconst tslib_1 = require(\"tslib\");\nconst http_1 = require(\"@angular/common/http\");\nconst forms_1 = require(\"@angular/forms\");\nconst create_new_letter_component_1 = require(\"../create-new-letter/create-new-letter.component\");\nconst i0 = tslib_1.__importStar(require(\"@angular/core\"));\nconst i1 = tslib_1.__importStar(require(\"@angular/router\"));\nconst i2 = tslib_1.__importStar(require(\"@angular/forms\"));\nconst i3 = tslib_1.__importStar(require(\"app/claim/service/claim.service\"));\nconst i4 = tslib_1.__importStar(require(\"app/report-letter/letter/service/letter.service\"));\nconst i5 = tslib_1.__importStar(require(\"app/layouts/service/customtoast.service\"));\nconst i6 = tslib_1.__importStar(require(\"@ngx-formly/core/json-schema\"));\nconst i7 = tslib_1.__importStar(require(\"app/shared/service/formly-map.service\"));\nconst i8 = tslib_1.__importStar(require(\"app/shared/confirm/nsp-confirm.service\"));\nconst i9 = tslib_1.__importStar(require(\"app/core/auth/state-storage.service\"));\nconst i10 = tslib_1.__importStar(require(\"../../service/pop-up.service\"));\nconst i11 = tslib_1.__importStar(require(\"@angular/common\"));\nconst i12 = tslib_1.__importStar(require(\"primeng/button\"));\nconst i13 = tslib_1.__importStar(require(\"primeng/confirmpopup\"));\nconst i14 = tslib_1.__importStar(require(\"@ngx-formly/core\"));\nfunction ChecklistItemComponent_div_32_span_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelement(2, \"br\")(3, \"br\");\n    i0.ɵɵtext(4, \"\\n            \");\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const rm_r7 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\"\\n                \", rm_r7, \"\");\n  }\n}\nfunction ChecklistItemComponent_div_32_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \"\\n            \");\n    i0.ɵɵelementStart(2, \"h5\");\n    i0.ɵɵtext(3, \"Check List Items\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(4, \"\\n            \");\n    i0.ɵɵelement(5, \"hr\");\n    i0.ɵɵtext(6, \"\\n            \");\n    i0.ɵɵtemplate(7, ChecklistItemComponent_div_32_span_7_Template, 5, 1, \"span\", 11);\n    i0.ɵɵtext(8, \"\\n        \");\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(7);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r0.resolvedModel);\n  }\n}\nfunction ChecklistItemComponent_ng_template_34_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtext(0, \"\\n            \");\n    i0.ɵɵtext(1, \"\\n            \");\n    i0.ɵɵtext(2, \"\\n            \");\n    i0.ɵɵelement(3, \"formly-form\", 12);\n    i0.ɵɵtext(4, \" \\n        \");\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"model\", ctx_r2.model)(\"fields\", ctx_r2.fields);\n  }\n}\nfunction ChecklistItemComponent_button_41_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r10 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"button\", 13);\n    i0.ɵɵlistener(\"click\", function ChecklistItemComponent_button_41_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r10);\n      const ctx_r9 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r9.close());\n    });\n    i0.ɵɵtext(1, \"\\n        \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction ChecklistItemComponent_button_43_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r12 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"button\", 14);\n    i0.ɵɵlistener(\"click\", function ChecklistItemComponent_button_43_Template_button_click_0_listener($event) {\n      i0.ɵɵrestoreView(_r12);\n      const ctx_r11 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r11.openDialog($event, \"confirm\"));\n    });\n    i0.ɵɵtext(1, \"\\n        \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction ChecklistItemComponent_button_45_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r14 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"button\", 15);\n    i0.ɵɵlistener(\"click\", function ChecklistItemComponent_button_45_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r14);\n      const ctx_r13 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r13.close());\n    });\n    i0.ɵɵtext(1, \"\\n        \");\n    i0.ɵɵelementEnd();\n  }\n}\nconst _c0 = function () {\n  return {\n    \"margin-bottom\": \"1em\"\n  };\n};\n// import { JSONSchema7 } from 'json-schema';\nclass ChecklistItemComponent {\n  // fieldsTesting: FormlyFieldConfig[] = [\n  //   {   key: \"test\",\n  //       fieldGroupClassName: \"field grid formly-row\",\n  //       fieldGroup: [\n  //           {\n  //               key: \"test_0\",\n  //               type: \"datepickercustom\",\n  //               props: {\n  //                 description: \"Description\",\n  //                 dateFormat: \"dd/mm/yy\",\n  //                 hourFormat: \"24\",\n  //                 numberOfMonths: 1,\n  //                 selectionMode: \"single\",\n  //                 required: true,\n  //                 showOtherMonths: true,\n  //                 inline: false\n  //               }\n  //           }\n  //       ]\n  //     }\n  // ];\n  constructor(route, formBuilder, claimService, letterService, toastService, formlyJsonschema, formlyMapService, nspConfirmService, router, stateStorageService, popUpService) {\n    this.route = route;\n    this.formBuilder = formBuilder;\n    this.claimService = claimService;\n    this.letterService = letterService;\n    this.toastService = toastService;\n    this.formlyJsonschema = formlyJsonschema;\n    this.formlyMapService = formlyMapService;\n    this.nspConfirmService = nspConfirmService;\n    this.router = router;\n    this.stateStorageService = stateStorageService;\n    this.popUpService = popUpService;\n    this.resolvedModel = [];\n    this.claimDetailList = [];\n    this.claimDetailListStr = \"\";\n    // claimItemId: any[] = [];\n    this.claimIdClaimItemMap = [];\n    this.reportVariableForm = new forms_1.FormGroup({});\n    this.checkListGroup = {};\n    this.model = {};\n    this.fields = [];\n    console.log(\"init check list\");\n  }\n  ngOnInit() {\n    console.log(\"init check list\");\n    this.route.queryParams.subscribe(params => {\n      this.params = params;\n      console.log(\"create new letter param\", params);\n    });\n    this.claimIdClaimItemMap = JSON.parse(this.route.snapshot.paramMap.get(\"claimIdClaimItemMap\"));\n    if (JSON.parse(this.route.snapshot.paramMap.get(\"model\"))) {\n      this.model = JSON.parse(this.route.snapshot.paramMap.get(\"model\"));\n    }\n    this.claimDetailList = JSON.parse(this.route.snapshot.paramMap.get(\"claimDetailList\"));\n    this.itemCategory = JSON.parse(this.route.snapshot.paramMap.get(\"itemCategory\"));\n    this.resolvedModel = JSON.parse(this.route.snapshot.paramMap.get(\"resolvedModel\"));\n    this.claimDetailListStr = this.claimDetailList?.join(\", \");\n    this.getFormlyCheckListByCategory();\n  }\n  getFormlyCheckListByCategory() {\n    let params = new http_1.HttpParams();\n    params = params.append('category', this.itemCategory.value);\n    params = params.append('letterType', this.params.letterTypeCode);\n    this.letterService.retrieveLetterItems({\n      params\n    }).subscribe(resp => {\n      if (resp) {\n        if (resp.status === 200 && resp.body.data) {\n          this.populateLetterItemTemplate(resp.body.data);\n          this.preloadTemplateByExistingModel(this.model);\n        }\n      }\n    }, error => {\n      console.log(\"error is\" + String(error?.error?.error_desc));\n      this.toastService.error(String(error?.error?.error_desc));\n    });\n  }\n  preloadTemplateByExistingModel(model) {\n    const keyList = Object.keys(model);\n    this.fields[0].props.selectedRows = this.fields[0].fieldGroup.filter(x => {\n      return keyList.includes(String(x.key));\n    });\n    this.fields[0].props.modelData = model;\n    // for (const [k, v] of Object.entries(model)) {\n    //   if(v){\n    //     const fieldGrpObj = this.fields[0].props.selectedRows.find((x:FormlyFieldConfig)=> x.key === k);\n    //     if(fieldGrpObj){\n    //       console.log(\"inside\", fieldGrpObj);\n    //       const innerFieldGrpObjArr = fieldGrpObj.fieldGroup as FormlyFieldConfig[];\n    //       for (const [innerK, innerV] of Object.entries(v)) {\n    //         if(innerFieldGrpObjArr.length>0){\n    //           const innerFieldGroupObj = innerFieldGrpObjArr.find((y:FormlyFieldConfig)=> y.key === innerK);\n    //           console.log(\"replacing with\", innerV)\n    //           innerFieldGroupObj.formControl?.setValue(new Date());\n    //           console.log(\"foudn inside\", innerFieldGroupObj)\n    //         }\n    //       }\n    //     }\n    //   }\n    // }\n    // this.fields[0].fieldGroup.\n    console.log('lala', this.fields[0].props.selectedRows);\n  }\n  populateLetterItemTemplate(data) {\n    if (data) {\n      const fieldGrp = data.letterItemObj;\n      this.fields = [{\n        type: \"table\",\n        templateOptions: {\n          theme: {\n            table: {\n              style: {},\n              class: \"\"\n            }\n          }\n        },\n        props: {\n          selectedRows: [],\n          modelData: this.model\n        },\n        fieldGroup: fieldGrp\n      }];\n      console.log(\"test\", this.fields);\n    }\n  }\n  //on confirm\n  openDialog(event, type) {\n    console.log(\"adding letter items\");\n    this.nspConfirmService.onConfirmPopup(event, type, null, () => {\n      switch (type) {\n        case 'confirm':\n          this.addLetterItems();\n          break;\n      }\n    });\n    // const req ={\n    // }\n    // this.letterService.generateLetter(req, { responseType: 'blob' }).subscribe(resp => {\n    //   if (resp && resp.status === 200) {\n    //     this.toastService.success(\"Letter has been sent for Generation\");\n    //   }\n    // },\n    // (error: any) => {\n    //   console.log(\"error is \" + String(error?.error?.error_desc));\n    //   this.toastService.error(\n    //     \"Failed to connect to Report Generator, please try again. If the error persists, please contact the NSPAY Helpdesk\");\n    // });\n  }\n  //letter item model structure\n  // { \"letter_ab2sdg34\": { \"letter_ab2sdg34_0\": \"2023-03-09T16:00:00.000Z\", \"letter_ab2sdg34_1\": \"2023-03-16T16:00:00.000Z\" }, \"letter_j5wHygm2\": { \"letter_j5wHygm2_1\": \"2023-03-09T16:00:00.000Z\", \"letter_j5wHygm2_0\": \"2023-03-17T16:00:00.000Z\" } }\n  addLetterItems() {\n    this.updateNewLetterFG();\n    //on confirmed, change the itemcategory.catconfirmed to true\n    console.log(\"da param\", this.params);\n    this.router.navigate(['claim/pop-up/create-new-letter'], {\n      queryParams: this.params\n    });\n  }\n  updateNewLetterFG() {\n    const fg = this.popUpService.select('create-new-letter-form');\n    console.log(\"the might fg\", fg);\n    const fc = (fg?.get('claimItemArr')).controls.find(x => x.get('itemName').value === this.params.itemName);\n    (fc?.get('itemCategory')).controls[this.params.categoryIndex]?.get('catConfirmed')?.setValue(true);\n    this.updateChecklistModel(fg);\n    this.appendNewEmptyCategory(fg);\n    this.popUpService.setState({\n      'create-new-letter-form': fg\n    });\n  }\n  updateChecklistModel(fg) {\n    const model = {};\n    const keyList = this.fields[0].props.selectedRows.map(x => {\n      return String(x.key);\n    });\n    console.log(\"the keyList\", keyList);\n    keyList.forEach(key => {\n      model[key] = this.model[key];\n    });\n    console.log(\"update model\", model);\n    const fc = (fg?.get('claimItemArr')).controls.find(x => x.get('itemName').value === this.params.itemName);\n    console.log(\"little\", fg?.get('claimItemArr'));\n    (fc?.get('itemCategory')).controls[this.params.categoryIndex].get('model')?.setValue(this.formlyMapService.buildModel(model));\n  }\n  appendNewEmptyCategory(fg) {\n    //check if there is alr existing  empty category\n    const fc = (fg?.get('claimItemArr')).controls.find(x => x.get('itemName').value === this.params.itemName);\n    if (!(fc?.get('itemCategory')).controls.find(x => x.get('category').value === null && !x.get('catConfirmed').value)) {\n      (fc?.get('itemCategory')).push(create_new_letter_component_1.CreateNewLetterComponent.initCategory(this.formBuilder));\n    }\n  }\n  tester() {\n    console.log(\"the wise\", this.formlyMapService.buildModel(this.model));\n    console.log(\"the props are\", this.fields[0].props.selectedRows);\n  }\n  getBoolean(booleanStr) {\n    return booleanStr?.toLowerCase() === 'true';\n  }\n  close() {\n    this.router.navigate(['claim/pop-up/create-new-letter'], {\n      queryParams: this.params\n    });\n  }\n}\nexports.ChecklistItemComponent = ChecklistItemComponent;\nChecklistItemComponent.ɵfac = function ChecklistItemComponent_Factory(t) {\n  return new (t || ChecklistItemComponent)(i0.ɵɵdirectiveInject(i1.ActivatedRoute), i0.ɵɵdirectiveInject(i2.FormBuilder), i0.ɵɵdirectiveInject(i3.ClaimService), i0.ɵɵdirectiveInject(i4.LetterService), i0.ɵɵdirectiveInject(i5.CustomToastService), i0.ɵɵdirectiveInject(i6.FormlyJsonschema), i0.ɵɵdirectiveInject(i7.FormlyMapService), i0.ɵɵdirectiveInject(i8.NspConfirmationService), i0.ɵɵdirectiveInject(i1.Router), i0.ɵɵdirectiveInject(i9.StateStorageService), i0.ɵɵdirectiveInject(i10.PopUpService));\n};\nChecklistItemComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: ChecklistItemComponent,\n  selectors: [[\"n2-checklist-item\"]],\n  decls: 50,\n  vars: 16,\n  consts: [[1, \"upper-form\"], [1, \"grid\", \"col-12\"], [1, \"col\"], [1, \"ml-2\"], [4, \"ngIf\", \"ngIfElse\"], [\"formlyModel\", \"\"], [1, \"flex\", \"justify-content-center\", \"gap-2\", \"flex-wrap\"], [\"class\", \"flex align-items-center justify-content-center\", \"pButton\", \"\", \"label\", \"Cancel\", \"class\", \"p-button-danger\", 3, \"click\", 4, \"ngIf\"], [\"class\", \"flex align-items-center justify-content-center\", \"pButton\", \"\", \"label\", \"Confirm\", \"class\", \"p-button-success\", 3, \"click\", 4, \"ngIf\"], [\"class\", \"flex align-items-center justify-content-center\", \"pButton\", \"\", \"label\", \"Close\", \"class\", \"p-button-danger\", 3, \"click\", 4, \"ngIf\"], [\"key\", \"confirm\", \"header\", \"Confirmation\", \"icon\", \"fa fa-question-circle\", \"width\", \"425\"], [4, \"ngFor\", \"ngForOf\"], [3, \"model\", \"fields\"], [\"pButton\", \"\", \"label\", \"Cancel\", 1, \"p-button-danger\", 3, \"click\"], [\"pButton\", \"\", \"label\", \"Confirm\", 1, \"p-button-success\", 3, \"click\"], [\"pButton\", \"\", \"label\", \"Close\", 1, \"p-button-danger\", 3, \"click\"]],\n  template: function ChecklistItemComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtext(0, \"\\n    \");\n      i0.ɵɵelementStart(1, \"div\", 0);\n      i0.ɵɵtext(2, \"\\n        \");\n      i0.ɵɵelementStart(3, \"div\", 1);\n      i0.ɵɵtext(4, \"\\n            \");\n      i0.ɵɵelementStart(5, \"h5\");\n      i0.ɵɵtext(6);\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(7, \"\\n        \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(8, \"\\n        \");\n      i0.ɵɵelement(9, \"hr\");\n      i0.ɵɵtext(10, \"\\n        \");\n      i0.ɵɵelementStart(11, \"div\", 1);\n      i0.ɵɵtext(12, \"\\n            \");\n      i0.ɵɵelementStart(13, \"div\", 2);\n      i0.ɵɵtext(14, \"\\n                \");\n      i0.ɵɵelementStart(15, \"label\", 3);\n      i0.ɵɵtext(16);\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(17, \"            \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(18, \"\\n            \");\n      i0.ɵɵelementStart(19, \"div\", 2);\n      i0.ɵɵtext(20, \"\\n                \");\n      i0.ɵɵelementStart(21, \"label\", 3);\n      i0.ɵɵtext(22);\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(23, \"    \\n            \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(24, \"\\n            \");\n      i0.ɵɵelementStart(25, \"div\", 2);\n      i0.ɵɵtext(26, \"\\n                \");\n      i0.ɵɵelementStart(27, \"label\", 3);\n      i0.ɵɵtext(28);\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(29, \"   \\n            \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(30, \"\\n        \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(31, \"\\n        \");\n      i0.ɵɵtemplate(32, ChecklistItemComponent_div_32_Template, 9, 1, \"div\", 4);\n      i0.ɵɵtext(33, \"\\n        \");\n      i0.ɵɵtemplate(34, ChecklistItemComponent_ng_template_34_Template, 5, 2, \"ng-template\", null, 5, i0.ɵɵtemplateRefExtractor);\n      i0.ɵɵtext(36, \"\\n        \");\n      i0.ɵɵtext(37, \"\\n\\n    \\n\\n    \\n    \\n    \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(38, \"\\n    \");\n      i0.ɵɵelementStart(39, \"div\", 6);\n      i0.ɵɵtext(40, \"\\n        \");\n      i0.ɵɵtemplate(41, ChecklistItemComponent_button_41_Template, 2, 0, \"button\", 7);\n      i0.ɵɵtext(42, \"\\n        \");\n      i0.ɵɵtemplate(43, ChecklistItemComponent_button_43_Template, 2, 0, \"button\", 8);\n      i0.ɵɵtext(44, \"\\n        \");\n      i0.ɵɵtemplate(45, ChecklistItemComponent_button_45_Template, 2, 0, \"button\", 9);\n      i0.ɵɵtext(46, \"\\n    \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(47, \"\\n    \");\n      i0.ɵɵelement(48, \"p-confirmPopup\", 10);\n      i0.ɵɵtext(49, \"\\n\\n\");\n    }\n    if (rf & 2) {\n      const _r1 = i0.ɵɵreference(35);\n      i0.ɵɵadvance(3);\n      i0.ɵɵstyleMap(i0.ɵɵpureFunction0(14, _c0));\n      i0.ɵɵadvance(3);\n      i0.ɵɵtextInterpolate2(\"\", ctx.params.caseId, \" \", ctx.params.letterTypeTitle, \" \");\n      i0.ɵɵadvance(5);\n      i0.ɵɵstyleMap(i0.ɵɵpureFunction0(15, _c0));\n      i0.ɵɵadvance(5);\n      i0.ɵɵtextInterpolate1(\"\\n                    Claims: \\u00A0\\u00A0\", ctx.claimDetailListStr, \" \\n                \");\n      i0.ɵɵadvance(6);\n      i0.ɵɵtextInterpolate1(\"\\n                    Item: \\u00A0\\u00A0\", ctx.params.itemName, \" \\n                \");\n      i0.ɵɵadvance(6);\n      i0.ɵɵtextInterpolate1(\"\\n                    Category: \\u00A0\\u00A0\", ctx.itemCategory.label, \" \\n                \");\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"ngIf\", ctx.getBoolean(ctx.params.submitted) && (ctx.resolvedModel == null ? null : ctx.resolvedModel.length) > 0)(\"ngIfElse\", _r1);\n      i0.ɵɵadvance(9);\n      i0.ɵɵproperty(\"ngIf\", !ctx.getBoolean(ctx.params.submitted));\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngIf\", !ctx.getBoolean(ctx.params.submitted));\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngIf\", ctx.getBoolean(ctx.params.submitted));\n    }\n  },\n  dependencies: [i11.NgForOf, i11.NgIf, i12.ButtonDirective, i13.ConfirmPopup, i14.FormlyForm],\n  styles: [\".upper-form[_ngcontent-%COMP%] {\\n  height: 70vh;\\n  position: relative;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNoZWNrbGlzdC1pdGVtLmNvbXBvbmVudC5zY3NzIiwiLi5cXC4uXFwuLlxcLi5cXC4uXFwuLlxcLi5cXC4uXFwuLlxcLi5cXHByb2plY3RzJTIwMlxcbnNwYXlpaWFwcFxcc3JjXFxtYWluXFx3ZWJhcHBcXGFwcFxcY2xhaW1cXHBvcC11cFxcY2xhaW0tbGV0dGVyXFxjaGVja2xpc3QtaXRlbVxcY2hlY2tsaXN0LWl0ZW0uY29tcG9uZW50LnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDSSxZQUFBO0VBQ0Esa0JBQUE7QUNDSiIsImZpbGUiOiJjaGVja2xpc3QtaXRlbS5jb21wb25lbnQuc2NzcyIsInNvdXJjZXNDb250ZW50IjpbIi51cHBlci1mb3Jte1xyXG4gICAgaGVpZ2h0OiA3MHZoO1xyXG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xyXG59XHJcblxyXG4iLCIudXBwZXItZm9ybSB7XG4gIGhlaWdodDogNzB2aDtcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xufSJdfQ== */\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9tYWluL3dlYmFwcC9hcHAvY2xhaW0vcG9wLXVwL2NsYWltLWxldHRlci9jaGVja2xpc3QtaXRlbS9jaGVja2xpc3QtaXRlbS5jb21wb25lbnQuc2NzcyIsIndlYnBhY2s6Ly8uLy4uLy4uL3Byb2plY3RzJTIwMi9uc3BheWlpYXBwL3NyYy9tYWluL3dlYmFwcC9hcHAvY2xhaW0vcG9wLXVwL2NsYWltLWxldHRlci9jaGVja2xpc3QtaXRlbS9jaGVja2xpc3QtaXRlbS5jb21wb25lbnQuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNJLFlBQUE7RUFDQSxrQkFBQTtBQ0NKO0FEQ0EsNHFCQUE0cUIiLCJzb3VyY2VzQ29udGVudCI6WyIudXBwZXItZm9ybXtcclxuICAgIGhlaWdodDogNzB2aDtcclxuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcclxufVxyXG5cclxuIiwiLnVwcGVyLWZvcm0ge1xuICBoZWlnaHQ6IDcwdmg7XG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbn0iXSwic291cmNlUm9vdCI6IiJ9 */\"]\n});","map":{"version":3,"mappings":";;;;;;;AAAA;AAEA;AAWA;;;;;;;;;;;;;;;;;;ICYYA,4BAAsD;IAClDA,YAAQ;IAAAA,qBAAI;IAChBA;IAAAA,iBAAO;;;;IADHA,eAAQ;IAARA,sDAAQ;;;;;IAJhBA,2BAAyF;IACrFA;IAAAA,0BAAI;IAAAA,gCAAgB;IAAAA,iBAAK;IACzBA;IAAAA,qBAAI;IACJA;IAAAA,iFAEO;IACXA;IAAAA,iBAAM;;;;IAHmBA,eAAkB;IAAlBA,8CAAkB;;;;;IAKvCA;IACAA;IACAA;IAAAA,kCAA8D;IAClEA;;;;IADiBA,eAAe;IAAfA,oCAAe;;;;;;IAWhCA,kCAA6K;IAA5CA;MAAAA;MAAA;MAAA,OAAWA,6BAAO;IAAA,EAAC;IACpJA;IAAAA,iBAAS;;;;;;IACTA,kCAAsM;IAApEA;MAAAA;MAAA;MAAA,OAAWA,0CAAmB,SAAS,CAAC;IAAA,EAAC;IAC3KA;IAAAA,iBAAS;;;;;;IACTA,kCAA2K;IAA5CA;MAAAA;MAAA;MAAA,OAAWA,8BAAO;IAAA,EAAC;IAClJA;IAAAA,iBAAS;;;;;;;;ADlCjB;AAEA,MAKaC,sBAAsB;EAoBjC;EACA;EACA;EACA;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAEA;EAGAC,YACUC,KAAqB,EACrBC,WAAwB,EACxBC,YAA0B,EAC1BC,aAA4B,EAC5BC,YAAgC,EAChCC,gBAAkC,EAClCC,gBAAkC,EAClCC,iBAAyC,EACzCC,MAAc,EACdC,mBAAwC,EACxCC,YAA0B;IAV1B,UAAK,GAALV,KAAK;IACL,gBAAW,GAAXC,WAAW;IACX,iBAAY,GAAZC,YAAY;IACZ,kBAAa,GAAbC,aAAa;IACb,iBAAY,GAAZC,YAAY;IACZ,qBAAgB,GAAhBC,gBAAgB;IAChB,qBAAgB,GAAhBC,gBAAgB;IAChB,sBAAiB,GAAjBC,iBAAiB;IACjB,WAAM,GAANC,MAAM;IACN,wBAAmB,GAAnBC,mBAAmB;IACnB,iBAAY,GAAZC,YAAY;IApDtB,kBAAa,GAAU,EAAE;IACzB,oBAAe,GAAU,EAAE;IAC3B,uBAAkB,GAAG,EAAE;IACvB;IACA,wBAAmB,GAAU,EAAE;IAE/B,uBAAkB,GAAG,IAAIC,iBAAS,CAAC,EAAE,CAAC;IAItC,mBAAc,GAAQ,EAAE;IACxB,UAAK,GAAQ,EAAE;IAGf,WAAM,GAAwB,EAAE;IAyC9BC,OAAO,CAACC,GAAG,CAAC,iBAAiB,CAAC;EAEhC;EAEAC,QAAQ;IAENF,OAAO,CAACC,GAAG,CAAC,iBAAiB,CAAC;IAC9B,IAAI,CAACb,KAAK,CAACe,WAAW,CAACC,SAAS,CAAEC,MAAM,IAAI;MAC1C,IAAI,CAACA,MAAM,GAAGA,MAAM;MACpBL,OAAO,CAACC,GAAG,CAAC,yBAAyB,EAAEI,MAAM,CAAC;IAChD,CAAC,CAAC;IACF,IAAI,CAACC,mBAAmB,GAAGC,IAAI,CAACC,KAAK,CAAC,IAAI,CAACpB,KAAK,CAACqB,QAAQ,CAACC,QAAQ,CAACC,GAAG,CAAC,qBAAqB,CAAC,CAAC;IAC9F,IAAGJ,IAAI,CAACC,KAAK,CAAC,IAAI,CAACpB,KAAK,CAACqB,QAAQ,CAACC,QAAQ,CAACC,GAAG,CAAC,OAAO,CAAC,CAAC,EAAC;MACvD,IAAI,CAACC,KAAK,GAAGL,IAAI,CAACC,KAAK,CAAC,IAAI,CAACpB,KAAK,CAACqB,QAAQ,CAACC,QAAQ,CAACC,GAAG,CAAC,OAAO,CAAC,CAAC;;IAIpE,IAAI,CAACE,eAAe,GAAGN,IAAI,CAACC,KAAK,CAAC,IAAI,CAACpB,KAAK,CAACqB,QAAQ,CAACC,QAAQ,CAACC,GAAG,CAAC,iBAAiB,CAAC,CAAC;IACtF,IAAI,CAACG,YAAY,GAAGP,IAAI,CAACC,KAAK,CAAC,IAAI,CAACpB,KAAK,CAACqB,QAAQ,CAACC,QAAQ,CAACC,GAAG,CAAC,cAAc,CAAC,CAAC;IAChF,IAAI,CAACI,aAAa,GAAGR,IAAI,CAACC,KAAK,CAAC,IAAI,CAACpB,KAAK,CAACqB,QAAQ,CAACC,QAAQ,CAACC,GAAG,CAAC,eAAe,CAAC,CAAC;IAGlF,IAAI,CAACK,kBAAkB,GAAG,IAAI,CAACH,eAAe,EAAEI,IAAI,CAAC,IAAI,CAAC;IAC1D,IAAI,CAACC,4BAA4B,EAAE;EACrC;EAEAA,4BAA4B;IAC1B,IAAIb,MAAM,GAAG,IAAIc,iBAAU,EAAE;IAC7Bd,MAAM,GAAGA,MAAM,CAACe,MAAM,CAAC,UAAU,EAAE,IAAI,CAACN,YAAY,CAACO,KAAK,CAAC;IAC3DhB,MAAM,GAAGA,MAAM,CAACe,MAAM,CAAC,YAAY,EAAE,IAAI,CAACf,MAAM,CAACiB,cAAc,CAAC;IAEhE,IAAI,CAAC/B,aAAa,CAACgC,mBAAmB,CAAC;MAAClB;IAAM,CAAC,CAAC,CAACD,SAAS,CAACoB,IAAI,IAAG;MAChE,IAAIA,IAAI,EAAE;QACR,IAAIA,IAAI,CAACC,MAAM,KAAK,GAAG,IAAID,IAAI,CAACE,IAAI,CAACC,IAAI,EAAE;UACzC,IAAI,CAACC,0BAA0B,CAACJ,IAAI,CAACE,IAAI,CAACC,IAAI,CAAC;UAC/C,IAAI,CAACE,8BAA8B,CAAC,IAAI,CAACjB,KAAK,CAAC;;;IAGrD,CAAC,EACAkB,KAAU,IAAI;MACb9B,OAAO,CAACC,GAAG,CAAC,UAAU,GAAG8B,MAAM,CAACD,KAAK,EAAEA,KAAK,EAAEE,UAAU,CAAC,CAAC;MAC1D,IAAI,CAACxC,YAAY,CAACsC,KAAK,CAACC,MAAM,CAACD,KAAK,EAAEA,KAAK,EAAEE,UAAU,CAAC,CAAC;IAC7D,CAAC,CAAC;EACF;EAEAH,8BAA8B,CAACjB,KAAU;IACvC,MAAMqB,OAAO,GAAGC,MAAM,CAACC,IAAI,CAACvB,KAAK,CAAC;IAClC,IAAI,CAACwB,MAAM,CAAC,CAAC,CAAC,CAACC,KAAK,CAACC,YAAY,GAAG,IAAI,CAACF,MAAM,CAAC,CAAC,CAAC,CAACG,UAAU,CAACC,MAAM,CAACC,CAAC,IAAE;MACtE,OAAOR,OAAO,CAACS,QAAQ,CAACX,MAAM,CAACU,CAAC,CAACE,GAAG,CAAC,CAAC;IACxC,CAAC,CAAC;IAEF,IAAI,CAACP,MAAM,CAAC,CAAC,CAAC,CAACC,KAAK,CAACO,SAAS,GAAGhC,KAAK;IAEtC;IACA;IACA;IACA;IACA;IACA;IACA;IAEA;IACA;IACA;IACA;IACA;IAEA;IACA;IACA;IACA;IACA;IACE;IACAZ,OAAO,CAACC,GAAG,CAAC,MAAM,EAAE,IAAI,CAACmC,MAAM,CAAC,CAAC,CAAC,CAACC,KAAK,CAACC,YAAY,CAAC;EAE1D;EAEAV,0BAA0B,CAACD,IAAS;IAClC,IAAGA,IAAI,EAAC;MACN,MAAMkB,QAAQ,GAAwBlB,IAAI,CAACmB,aAAa;MACxD,IAAI,CAACV,MAAM,GAAG,CACZ;QACEW,IAAI,EAAE,OAAO;QACbC,eAAe,EAAE;UACfC,KAAK,EAAE;YACLC,KAAK,EAAE;cACLC,KAAK,EAAE,EAAE;cACTC,KAAK,EAAE;;;SAGZ;QACDf,KAAK,EAAC;UACJC,YAAY,EAAE,EAAE;UAChBM,SAAS,EAAC,IAAI,CAAChC;SAChB;QACD2B,UAAU,EAACM;OACZ,CACF;MAGD7C,OAAO,CAACC,GAAG,CAAC,MAAM,EAAC,IAAI,CAACmC,MAAM,CAAC;;EAGnC;EAEA;EACAiB,UAAU,CAACC,KAAY,EAACP,IAAY;IAClC/C,OAAO,CAACC,GAAG,CAAC,qBAAqB,CAAC;IAClC,IAAI,CAACN,iBAAiB,CAAC4D,cAAc,CAACD,KAAK,EAAEP,IAAI,EAAE,IAAI,EACrD,MAAK;MACH,QAAQA,IAAI;QACV,KAAK,SAAS;UACZ,IAAI,CAACS,cAAc,EAAE;UACrB;MAAM;IAGZ,CAAC,CACF;IACD;IAEA;IACA;IACA;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;EAEF;EAEA;EACA;EAEAA,cAAc;IACZ,IAAI,CAACC,iBAAiB,EAAE;IACxB;IACAzD,OAAO,CAACC,GAAG,CAAC,UAAU,EAAE,IAAI,CAACI,MAAM,CAAC;IAClC,IAAI,CAACT,MAAM,CAAC8D,QAAQ,CAAC,CAAC,gCAAgC,CAAC,EAAE;MAACvD,WAAW,EAAE,IAAI,CAACE;IAAM,CAAC,CAAC;EACxF;EAEAoD,iBAAiB;IACf,MAAME,EAAE,GAAG,IAAI,CAAC7D,YAAY,CAAC8D,MAAM,CAAC,wBAAwB,CAAc;IAC1E5D,OAAO,CAACC,GAAG,CAAC,cAAc,EAAE0D,EAAE,CAAC;IAC/B,MAAME,EAAE,GAAG,CAACF,EAAE,EAAEhD,GAAG,CAAC,cAAc,CAAe,EAACmD,QAAQ,CAACC,IAAI,CAACtB,CAAC,IAAGA,CAAC,CAAC9B,GAAG,CAAC,UAAU,CAAC,CAACU,KAAK,KAAK,IAAI,CAAChB,MAAM,CAAC2D,QAAQ,CAAC;IACrH,CAACH,EAAE,EAAElD,GAAG,CAAC,cAAc,CAAe,EAACmD,QAAQ,CAAC,IAAI,CAACzD,MAAM,CAAC4D,aAAa,CAAC,EAAEtD,GAAG,CAAC,cAAc,CAAC,EAAEuD,QAAQ,CAAC,IAAI,CAAC;IAC/G,IAAI,CAACC,oBAAoB,CAACR,EAAE,CAAC;IAC7B,IAAI,CAACS,sBAAsB,CAACT,EAAE,CAAC;IAC/B,IAAI,CAAC7D,YAAY,CAACuE,QAAQ,CAAC;MACzB,wBAAwB,EAAEV;KAC3B,CAAC;EACJ;EAEAQ,oBAAoB,CAACR,EAAa;IAChC,MAAM/C,KAAK,GAAO,EAAE;IACpB,MAAMqB,OAAO,GAAI,IAAI,CAACG,MAAM,CAAC,CAAC,CAAC,CAACC,KAAK,CAACC,YAA2B,CAACgC,GAAG,CAAC7B,CAAC,IAAE;MAAE,OAAOV,MAAM,CAACU,CAAC,CAACE,GAAG,CAAC;IAAA,CAAC,CAAC;IACjG3C,OAAO,CAACC,GAAG,CAAC,aAAa,EAAEgC,OAAO,CAAC;IACnCA,OAAO,CAACsC,OAAO,CAAE5B,GAAO,IAAG;MACzB/B,KAAK,CAAC+B,GAAG,CAAC,GAAG,IAAI,CAAC/B,KAAK,CAAC+B,GAAG,CAAC;IAC9B,CAAC,CAAC;IACF3C,OAAO,CAACC,GAAG,CAAC,cAAc,EAAEW,KAAK,CAAC;IAClC,MAAMiD,EAAE,GAAG,CAACF,EAAE,EAAEhD,GAAG,CAAC,cAAc,CAAe,EAACmD,QAAQ,CAACC,IAAI,CAACtB,CAAC,IAAGA,CAAC,CAAC9B,GAAG,CAAC,UAAU,CAAC,CAACU,KAAK,KAAK,IAAI,CAAChB,MAAM,CAAC2D,QAAQ,CAAC;IACrHhE,OAAO,CAACC,GAAG,CAAC,QAAQ,EAAE0D,EAAE,EAAEhD,GAAG,CAAC,cAAc,CAAc,CAAC;IAC3D,CAACkD,EAAE,EAAElD,GAAG,CAAC,cAAc,CAAe,EAACmD,QAAQ,CAAC,IAAI,CAACzD,MAAM,CAAC4D,aAAa,CAAC,CAACtD,GAAG,CAAC,OAAO,CAAC,EAAEuD,QAAQ,CAAC,IAAI,CAACxE,gBAAgB,CAAC8E,UAAU,CAAC5D,KAAK,CAAC,CAAC;EAC5I;EAEAwD,sBAAsB,CAACT,EAAa;IAClC;IACA,MAAME,EAAE,GAAG,CAACF,EAAE,EAAEhD,GAAG,CAAC,cAAc,CAAe,EAACmD,QAAQ,CAACC,IAAI,CAACtB,CAAC,IAAGA,CAAC,CAAC9B,GAAG,CAAC,UAAU,CAAC,CAACU,KAAK,KAAK,IAAI,CAAChB,MAAM,CAAC2D,QAAQ,CAAC;IACrH,IAAG,CAAC,CAACH,EAAE,EAAElD,GAAG,CAAC,cAAc,CAAe,EAACmD,QAAQ,CAACC,IAAI,CAACtB,CAAC,IAAGA,CAAC,CAAC9B,GAAG,CAAC,UAAU,CAAC,CAACU,KAAK,KAAK,IAAI,IAC7F,CAACoB,CAAC,CAAC9B,GAAG,CAAC,cAAc,CAAC,CAACU,KAAK,CAAC,EAAC;MAC5B,CAACwC,EAAE,EAAElD,GAAG,CAAC,cAAc,CAAe,EAAC8D,IAAI,CAACC,sDAAwB,CAACC,YAAY,CAAC,IAAI,CAACtF,WAAW,CAAC,CAAC;;EAExG;EAEAuF,MAAM;IACJ5E,OAAO,CAACC,GAAG,CAAC,UAAU,EAAE,IAAI,CAACP,gBAAgB,CAAC8E,UAAU,CAAC,IAAI,CAAC5D,KAAK,CAAC,CAAC;IACrEZ,OAAO,CAACC,GAAG,CAAC,eAAe,EAAE,IAAI,CAACmC,MAAM,CAAC,CAAC,CAAC,CAACC,KAAK,CAACC,YAAY,CAAC;EAEjE;EAEAuC,UAAU,CAACC,UAAkB;IAC3B,OAAOA,UAAU,EAAEC,WAAW,EAAE,KAAK,MAAM;EAC7C;EAEAC,KAAK;IACD,IAAI,CAACpF,MAAM,CAAC8D,QAAQ,CAAC,CAAC,gCAAgC,CAAC,EAAE;MAACvD,WAAW,EAAE,IAAI,CAACE;IAAM,CAAC,CAAC;EACxF;;AA/PF4E;;mBAKa/F,sBAAsB;AAAA;;QAAtBA,sBAAsB;EAAAgG;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MCpB/BrG;MAAAA,8BAAyB;MACrBA;MAAAA,8BAA6D;MACzDA;MAAAA,0BAAI;MAAAA,YAAgD;MAAAA,iBAAK;MAC7DA;MAAAA,iBAAM;MACNA;MAAAA,qBAAI;MACJA;MAAAA,+BAA6D;MACzDA;MAAAA,+BAAmB;MACfA;MAAAA,iCAAqB;MACjBA,aACJ;MAAAA,iBAAQ;MAAYA;MAAAA,iBAAM;MAC9BA;MAAAA,+BAAmB;MACfA;MAAAA,iCAAqB;MACjBA,aACJ;MAAAA,iBAAQ;MACZA;MAAAA,iBAAM;MACNA;MAAAA,+BAAmB;MACfA;MAAAA,iCAAqB;MACjBA,aACJ;MAAAA,iBAAQ;MACZA;MAAAA,iBAAM;MACVA;MAAAA,iBAAM;MACNA;MAAAA,yEAMM;MACNA;MAAAA,0HAIc;MACdA;MAOJA;MAAAA,iBAAM;MACNA;MAAAA,+BAA2D;MACvDA;MAAAA,+EACS;MACTA;MAAAA,+EACS;MACTA;MAAAA,+EACS;MACbA;MAAAA,iBAAM;MACNA;MAAAA,sCAAgH;MAEpHA;;;;MAlDmCA,eAAiC;MAAjCA,0CAAiC;MACpDA,eAAgD;MAAhDA,kFAAgD;MAG7BA,eAAiC;MAAjCA,0CAAiC;MAGhDA,eACJ;MADIA,kHACJ;MAGIA,eACJ;MADIA,6GACJ;MAIIA,eACJ;MADIA,oHACJ;MAGFA,eAAiE;MAAjEA,gIAAiE;MAqB7DA,eAAqC;MAArCA,4DAAqC;MAErCA,eAAqC;MAArCA,4DAAqC;MAErCA,eAAoC;MAApCA,2DAAoC","names":["i0","ChecklistItemComponent","constructor","route","formBuilder","claimService","letterService","toastService","formlyJsonschema","formlyMapService","nspConfirmService","router","stateStorageService","popUpService","forms_1","console","log","ngOnInit","queryParams","subscribe","params","claimIdClaimItemMap","JSON","parse","snapshot","paramMap","get","model","claimDetailList","itemCategory","resolvedModel","claimDetailListStr","join","getFormlyCheckListByCategory","http_1","append","value","letterTypeCode","retrieveLetterItems","resp","status","body","data","populateLetterItemTemplate","preloadTemplateByExistingModel","error","String","error_desc","keyList","Object","keys","fields","props","selectedRows","fieldGroup","filter","x","includes","key","modelData","fieldGrp","letterItemObj","type","templateOptions","theme","table","style","class","openDialog","event","onConfirmPopup","addLetterItems","updateNewLetterFG","navigate","fg","select","fc","controls","find","itemName","categoryIndex","setValue","updateChecklistModel","appendNewEmptyCategory","setState","map","forEach","buildModel","push","create_new_letter_component_1","initCategory","tester","getBoolean","booleanStr","toLowerCase","close","exports","selectors","decls","vars","consts","template"],"sourceRoot":"","sources":["C:\\Users\\D1347074\\Desktop\\projects 2\\nspayiiapp\\src\\main\\webapp\\app\\claim\\pop-up\\claim-letter\\checklist-item\\checklist-item.component.ts","C:\\Users\\D1347074\\Desktop\\projects 2\\nspayiiapp\\src\\main\\webapp\\app\\claim\\pop-up\\claim-letter\\checklist-item\\checklist-item.component.html"],"sourcesContent":["import { HttpParams } from '@angular/common/http';\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { FormArray, FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { FormlyFieldConfig, FormlyFormOptions } from '@ngx-formly/core';\r\nimport { ClaimService } from 'app/claim/service/claim.service';\r\nimport { CustomToastService } from 'app/layouts/service/customtoast.service';\r\nimport { LetterService } from 'app/report-letter/letter/service/letter.service';\r\nimport { FormlyJsonschema } from '@ngx-formly/core/json-schema';\r\nimport { FormlyMapService } from 'app/shared/service/formly-map.service';\r\nimport { NspConfirmationService } from 'app/shared/confirm/nsp-confirm.service';\r\nimport { StateStorageService } from 'app/core/auth/state-storage.service';\r\nimport { PopUpService } from '../../service/pop-up.service';\r\nimport { CreateNewLetterComponent } from '../create-new-letter/create-new-letter.component';\r\n// import { JSONSchema7 } from 'json-schema';\r\n\r\n@Component({\r\n  selector: 'n2-checklist-item',\r\n  templateUrl: './checklist-item.component.html',\r\n  styleUrls: ['./checklist-item.component.scss']\r\n})\r\nexport class ChecklistItemComponent implements OnInit {\r\n  params: any;\r\n  loading!: boolean;\r\n  itemCategory: any;\r\n  resolvedModel: any[] = [];\r\n  claimDetailList: any[] = [];\r\n  claimDetailListStr = \"\";\r\n  // claimItemId: any[] = [];\r\n  claimIdClaimItemMap: any[] = [];\r\n\r\n  reportVariableForm = new FormGroup({});\r\n  options: FormlyFormOptions;\r\n\r\n\r\n  checkListGroup: any = {};\r\n  model: any = {};\r\n\r\n\r\n  fields: FormlyFieldConfig[] = [];\r\n\r\n  // fieldsTesting: FormlyFieldConfig[] = [\r\n  //   {   key: \"test\",\r\n  //       fieldGroupClassName: \"field grid formly-row\",\r\n  //       fieldGroup: [\r\n          \r\n  //           {\r\n  //               key: \"test_0\",\r\n  //               type: \"datepickercustom\",\r\n  //               props: {\r\n  //                 description: \"Description\",\r\n  //                 dateFormat: \"dd/mm/yy\",\r\n  //                 hourFormat: \"24\",\r\n  //                 numberOfMonths: 1,\r\n  //                 selectionMode: \"single\",\r\n  //                 required: true,\r\n  //                 showOtherMonths: true,\r\n  //                 inline: false\r\n  //               }\r\n  //           }\r\n  //       ]\r\n  //     }\r\n\r\n  // ];\r\n \r\n   \r\n  constructor(\r\n    private route: ActivatedRoute,\r\n    private formBuilder: FormBuilder,\r\n    private claimService: ClaimService,\r\n    private letterService: LetterService,\r\n    private toastService: CustomToastService,\r\n    private formlyJsonschema: FormlyJsonschema,\r\n    private formlyMapService: FormlyMapService,\r\n    private nspConfirmService: NspConfirmationService,\r\n    private router: Router,\r\n    private stateStorageService: StateStorageService,\r\n    private popUpService: PopUpService\r\n\r\n  ) { \r\n    console.log(\"init check list\")\r\n\r\n  }\r\n\r\n  ngOnInit(): void {\r\n\r\n    console.log(\"init check list\")\r\n    this.route.queryParams.subscribe((params) => {\r\n      this.params = params;\r\n      console.log(\"create new letter param\", params);\r\n    });\r\n    this.claimIdClaimItemMap = JSON.parse(this.route.snapshot.paramMap.get(\"claimIdClaimItemMap\"));\r\n    if(JSON.parse(this.route.snapshot.paramMap.get(\"model\"))){\r\n      this.model = JSON.parse(this.route.snapshot.paramMap.get(\"model\"));\r\n\r\n    }\r\n\r\n    this.claimDetailList = JSON.parse(this.route.snapshot.paramMap.get(\"claimDetailList\"));\r\n    this.itemCategory = JSON.parse(this.route.snapshot.paramMap.get(\"itemCategory\"));\r\n    this.resolvedModel = JSON.parse(this.route.snapshot.paramMap.get(\"resolvedModel\"));\r\n\r\n\r\n    this.claimDetailListStr = this.claimDetailList?.join(\", \");\r\n    this.getFormlyCheckListByCategory();\r\n  }\r\n\r\n  getFormlyCheckListByCategory(): void{\r\n    let params = new HttpParams();\r\n    params = params.append('category', this.itemCategory.value);\r\n    params = params.append('letterType', this.params.letterTypeCode);\r\n\r\n    this.letterService.retrieveLetterItems({params}).subscribe(resp => {\r\n      if (resp) {\r\n        if (resp.status === 200 && resp.body.data) {\r\n          this.populateLetterItemTemplate(resp.body.data);\r\n          this.preloadTemplateByExistingModel(this.model);\r\n        }\r\n      }\r\n    },\r\n    (error: any) => {\r\n      console.log(\"error is\" + String(error?.error?.error_desc));\r\n      this.toastService.error(String(error?.error?.error_desc));\r\n  });\r\n  }\r\n\r\n  preloadTemplateByExistingModel(model: any) {\r\n    const keyList = Object.keys(model);\r\n    this.fields[0].props.selectedRows = this.fields[0].fieldGroup.filter(x=> {\r\n      return keyList.includes(String(x.key));\r\n    })\r\n\r\n    this.fields[0].props.modelData = model;\r\n    \r\n    // for (const [k, v] of Object.entries(model)) {\r\n    //   if(v){\r\n    //     const fieldGrpObj = this.fields[0].props.selectedRows.find((x:FormlyFieldConfig)=> x.key === k);\r\n    //     if(fieldGrpObj){\r\n    //       console.log(\"inside\", fieldGrpObj);\r\n    //       const innerFieldGrpObjArr = fieldGrpObj.fieldGroup as FormlyFieldConfig[];\r\n    //       for (const [innerK, innerV] of Object.entries(v)) {\r\n\r\n    //         if(innerFieldGrpObjArr.length>0){\r\n    //           const innerFieldGroupObj = innerFieldGrpObjArr.find((y:FormlyFieldConfig)=> y.key === innerK);\r\n    //           console.log(\"replacing with\", innerV)\r\n    //           innerFieldGroupObj.formControl?.setValue(new Date());\r\n    //           console.log(\"foudn inside\", innerFieldGroupObj)\r\n\r\n    //         }\r\n    //       }\r\n    //     }\r\n    //   }\r\n    // }\r\n      // this.fields[0].fieldGroup.\r\n      console.log('lala', this.fields[0].props.selectedRows);\r\n\r\n  }\r\n\r\n  populateLetterItemTemplate(data: any): void{\r\n    if(data){\r\n      const fieldGrp: FormlyFieldConfig[] = data.letterItemObj;\r\n      this.fields = [\r\n        {\r\n          type: \"table\",\r\n          templateOptions: {\r\n            theme: {\r\n              table: {\r\n                style: {},\r\n                class: \"\",\r\n              },\r\n            }\r\n          },\r\n          props:{\r\n            selectedRows: [],\r\n            modelData:this.model\r\n          },\r\n          fieldGroup:fieldGrp\r\n        }\r\n      ];\r\n\r\n   \r\n      console.log(\"test\",this.fields)\r\n    }\r\n  \r\n  }\r\n\r\n  //on confirm\r\n  openDialog(event: Event,type: string): void{\r\n    console.log(\"adding letter items\")\r\n    this.nspConfirmService.onConfirmPopup(event, type, null,\r\n      () => {\r\n        switch (type) {\r\n          case 'confirm':\r\n            this.addLetterItems();\r\n            break;\r\n        \r\n        }\r\n      }\r\n    );\r\n    // const req ={\r\n\r\n    // }\r\n    // this.letterService.generateLetter(req, { responseType: 'blob' }).subscribe(resp => {\r\n    //   if (resp && resp.status === 200) {\r\n\r\n    //     this.toastService.success(\"Letter has been sent for Generation\");\r\n    //   }\r\n    // },\r\n    // (error: any) => {\r\n    //   console.log(\"error is \" + String(error?.error?.error_desc));\r\n    //   this.toastService.error(\r\n    //     \"Failed to connect to Report Generator, please try again. If the error persists, please contact the NSPAY Helpdesk\");\r\n    // });\r\n\r\n  }\r\n\r\n  //letter item model structure\r\n  // { \"letter_ab2sdg34\": { \"letter_ab2sdg34_0\": \"2023-03-09T16:00:00.000Z\", \"letter_ab2sdg34_1\": \"2023-03-16T16:00:00.000Z\" }, \"letter_j5wHygm2\": { \"letter_j5wHygm2_1\": \"2023-03-09T16:00:00.000Z\", \"letter_j5wHygm2_0\": \"2023-03-17T16:00:00.000Z\" } }\r\n\r\n  addLetterItems(): void{\r\n    this.updateNewLetterFG();\r\n    //on confirmed, change the itemcategory.catconfirmed to true\r\n    console.log(\"da param\", this.params);\r\n      this.router.navigate(['claim/pop-up/create-new-letter'], {queryParams: this.params})\r\n  }\r\n\r\n  updateNewLetterFG(): void{\r\n    const fg = this.popUpService.select('create-new-letter-form') as FormGroup;\r\n    console.log(\"the might fg\", fg)\r\n    const fc = (fg?.get('claimItemArr') as FormArray).controls.find(x=> x.get('itemName').value === this.params.itemName);\r\n    (fc?.get('itemCategory') as FormArray).controls[this.params.categoryIndex]?.get('catConfirmed')?.setValue(true);\r\n    this.updateChecklistModel(fg);\r\n    this.appendNewEmptyCategory(fg);\r\n    this.popUpService.setState({\r\n      'create-new-letter-form': fg\r\n    });\r\n  }\r\n\r\n  updateChecklistModel(fg: FormGroup): void{\r\n    const model:any = {};\r\n    const keyList = (this.fields[0].props.selectedRows as Array<any>).map(x=> {return String(x.key)});\r\n    console.log(\"the keyList\", keyList)\r\n    keyList.forEach((key:any)=>{\r\n      model[key] = this.model[key];\r\n    })\r\n    console.log(\"update model\", model);\r\n    const fc = (fg?.get('claimItemArr') as FormArray).controls.find(x=> x.get('itemName').value === this.params.itemName);\r\n    console.log(\"little\", fg?.get('claimItemArr') as FormArray);\r\n    (fc?.get('itemCategory') as FormArray).controls[this.params.categoryIndex].get('model')?.setValue(this.formlyMapService.buildModel(model));\r\n  }\r\n\r\n  appendNewEmptyCategory(fg: FormGroup): void{\r\n    //check if there is alr existing  empty category\r\n    const fc = (fg?.get('claimItemArr') as FormArray).controls.find(x=> x.get('itemName').value === this.params.itemName);\r\n    if(!(fc?.get('itemCategory') as FormArray).controls.find(x=> x.get('category').value === null && \r\n    !x.get('catConfirmed').value)){\r\n      (fc?.get('itemCategory') as FormArray).push(CreateNewLetterComponent.initCategory(this.formBuilder));\r\n    }\r\n  }\r\n\r\n  tester(): void{\r\n    console.log(\"the wise\", this.formlyMapService.buildModel(this.model));\r\n    console.log(\"the props are\", this.fields[0].props.selectedRows)\r\n\r\n  }\r\n\r\n  getBoolean(booleanStr: string): boolean{\r\n    return booleanStr?.toLowerCase() === 'true';\r\n  }\r\n\r\n  close(): void{\r\n      this.router.navigate(['claim/pop-up/create-new-letter'], {queryParams: this.params})\r\n  }\r\n\r\n   // fieldsTesting: FormlyFieldConfig[] = [\r\n\r\n    // {\r\n    //       fieldGroupClassName: \"field grid formly-row\",\r\n    //       fieldGroup: [\r\n    //           {\r\n    //               template: \"<p>SERB SN&nbsp&nbsp</p>\",\r\n    //               className: \"col-3 formly-label\"\r\n    //           },\r\n    //           {\r\n    //               key: \"serbSN\",\r\n    //               type: \"input\",\r\n    //               className: \"col-9\",\r\n    //               templateOptions: {\r\n    //                   \"required\": true,\r\n    //                   \"placeholder\": \"SERB SN\"\r\n    //               }\r\n    //           }\r\n    //       ]\r\n       \r\n     \r\n    //     }\r\n    // ];\r\n\r\n\r\n\r\n\r\n    \r\n  // fieldsTesting: FormlyFieldConfig[] = [\r\n  //     {\r\n  //       key: \"checklist\",\r\n  //       type: \"array\",\r\n  //       templateOptions: {\r\n  //         theme: {\r\n  //           table: {\r\n  //             style: {},\r\n  //             class: 'p-datatable-gridlines p-datatable-striped',\r\n  //           },\r\n  //         }\r\n  //       },\r\n  //       fieldArray:{\r\n  //         fieldGroup:[\r\n  //           {\r\n  //               className: \"formly-label\",\r\n  //               template: \"SERB SN&nbsp&nbsp\",\r\n  //           },\r\n  //           {\r\n  //               key: \"serbSN\",\r\n  //               type: \"input\",\r\n  //               templateOptions: {\r\n               \r\n  //                   \"required\": true,\r\n  //                   \"placeholder\": \"SERB SN\",\r\n  //                   tableFieldOptions: {\r\n  //                     className: 'w-10',\r\n  //                     theme: {\r\n  //                       'max-width': '300px',\r\n  //                     },\r\n  //                   }\r\n  //               }\r\n  //           }\r\n  //         ]\r\n  //       }\r\n  \r\n  //     }\r\n    \r\n  \r\n  //   ];\r\n\r\n\r\n\r\n  // fieldsTest: FormlyFieldConfig[] = [\r\n\r\n  //   {\r\n  //     type: \"table\",\r\n  //     templateOptions: {\r\n  //       theme: {\r\n  //         table: {\r\n  //           style: {},\r\n  //           class: \"\",\r\n  //         },\r\n  //       },\r\n  //     },\r\n  //     props:{\r\n  //       selectedRows: []\r\n  //     },\r\n  //     fieldGroup: [\r\n  //       {\r\n  //         key: \"444\",\r\n  //         fieldGroupClassName: \"field grid formly-row\",\r\n  //         fieldGroup: [\r\n  //             {\r\n  //                 template: \"SERB SN&nbsp&nbsp\",\r\n  //                 className: \"col-1 formly-label\"\r\n  //             },\r\n  //             {\r\n  //                 key: \"444_0\",\r\n  //                 type: \"input\",\r\n  //                 className: \"col\",\r\n  //                 templateOptions: {\r\n  //                     \"required\": true,\r\n  //                     \"placeholder\": \"SERB SN\"\r\n  //                 }\r\n  //             }\r\n  //         ]\r\n  //       },\r\n  //       {\r\n       \r\n  //         key: \"555\",\r\n  //         fieldGroupClassName: \"field grid formly-row\",\r\n  //         fieldGroup: [\r\n  //             {\r\n  //                 template: \"CASE ID&nbsp&nbsp\",\r\n  //                 className: \"col-1 formly-label\"\r\n  //             },\r\n  //             {\r\n  //                 key: \"555_1\",\r\n  //                 type: \"input\",\r\n  //                 className: \"col\",\r\n  //                 templateOptions: {\r\n  //                     \"required\": true,\r\n  //                     \"placeholder\": \"CASE ID\"\r\n  //                 }\r\n  //             }\r\n  //         ]\r\n  //       },\r\n  //     ]\r\n  //   }\r\n\r\n  //   ];\r\n}\r\n","\r\n    <div class =\"upper-form\">\r\n        <div class = \"grid col-12\" [style]=\"{'margin-bottom':'1em'}\">\r\n            <h5>{{ params.caseId }} {{ params.letterTypeTitle}} </h5>\r\n        </div>\r\n        <hr>\r\n        <div class = \"grid col-12\" [style]=\"{'margin-bottom':'1em'}\">\r\n            <div class = \"col\">\r\n                <label class= \"ml-2\">\r\n                    Claims: &nbsp;&nbsp;{{ claimDetailListStr }} \r\n                </label>            </div>\r\n            <div class = \"col\">\r\n                <label class= \"ml-2\">\r\n                    Item: &nbsp;&nbsp;{{ params.itemName }} \r\n                </label>    \r\n            </div>\r\n            <div class = \"col\">\r\n                <label class= \"ml-2\">\r\n                    Category: &nbsp;&nbsp;{{ itemCategory.label }} \r\n                </label>   \r\n            </div>\r\n        </div>\r\n        <div *ngIf = \"getBoolean(params.submitted) && resolvedModel?.length>0; else formlyModel\">\r\n            <h5>Check List Items</h5>\r\n            <hr>\r\n            <span *ngFor=\"let rm of resolvedModel; let i = index\">\r\n                {{ rm }}<br><br>\r\n            </span>\r\n        </div>\r\n        <ng-template #formlyModel>\r\n            <!-- display -->\r\n            <!-- {{model |json}}  -->\r\n            <formly-form [model]=\"model\" [fields]= \"fields\"></formly-form> \r\n        </ng-template>\r\n        <!-- //TESTER\r\n        <formly-form [model]=\"model\" [fields]= \"fieldsTesting\"></formly-form>  -->\r\n\r\n    \r\n\r\n    \r\n    \r\n    </div>\r\n    <div class = \"flex justify-content-center gap-2 flex-wrap\">\r\n        <button  *ngIf = \"!getBoolean(params.submitted)\" class=\"flex align-items-center justify-content-center\"  pButton label=\"Cancel\"  (click) = \"close()\" class=\"p-button-danger\">\r\n        </button>\r\n        <button  *ngIf = \"!getBoolean(params.submitted)\"   class=\"flex align-items-center justify-content-center\" pButton label=\"Confirm\" (click) = \"openDialog($event, 'confirm')\"  class=\"p-button-success\">\r\n        </button>\r\n        <button  *ngIf = \"getBoolean(params.submitted)\" class=\"flex align-items-center justify-content-center\"  pButton label=\"Close\"  (click) = \"close()\" class=\"p-button-danger\">\r\n        </button>\r\n    </div>\r\n    <p-confirmPopup key = \"confirm\" header=\"Confirmation\" icon=\"fa fa-question-circle\" width=\"425\"></p-confirmPopup>\r\n\r\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}