{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TemplatePopupService = void 0;\nconst tslib_1 = require(\"tslib\");\nconst template_model_1 = require(\"./template.model\");\nconst i0 = tslib_1.__importStar(require(\"@angular/core\"));\nconst i1 = tslib_1.__importStar(require(\"@ng-bootstrap/ng-bootstrap\"));\nconst i2 = tslib_1.__importStar(require(\"@angular/router\"));\nconst i3 = tslib_1.__importStar(require(\"./template.service\"));\nclass TemplatePopupService {\n  constructor(modalService, router, templateService) {\n    this.modalService = modalService;\n    this.router = router;\n    this.templateService = templateService;\n    this.ngbModalRef = null;\n  }\n  open(component, id) {\n    return new Promise(resolve => {\n      // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n      const isOpen = this.ngbModalRef !== null;\n      if (isOpen) {\n        resolve(this.ngbModalRef);\n      }\n      if (id) {\n        this.templateService.find(id).subscribe(res => {\n          const customer = res.body;\n          this.ngbModalRef = this.templateModalRef(component, customer);\n          resolve(this.ngbModalRef);\n        });\n      } else {\n        // setTimeout used as a workaround for getting ExpressionChangedAfterItHasBeenCheckedError\n        setTimeout(() => {\n          this.ngbModalRef = this.templateModalRef(component, new template_model_1.Template());\n          resolve(this.ngbModalRef);\n        }, 0);\n      }\n    });\n  }\n  templateModalRef(component, template) {\n    const modalRef = this.modalService.open(component, {\n      size: 'lg',\n      backdrop: 'static'\n    });\n    modalRef.componentInstance.template = template;\n    modalRef.result.then(() => {\n      this.router.navigate([{\n        outlets: {\n          popup: null\n        }\n      }], {\n        replaceUrl: true,\n        queryParamsHandling: 'merge'\n      });\n      this.ngbModalRef = null;\n    }, () => {\n      this.router.navigate([{\n        outlets: {\n          popup: null\n        }\n      }], {\n        replaceUrl: true,\n        queryParamsHandling: 'merge'\n      });\n      this.ngbModalRef = null;\n    });\n    return modalRef;\n  }\n}\nexports.TemplatePopupService = TemplatePopupService;\nTemplatePopupService.ɵfac = function TemplatePopupService_Factory(t) {\n  return new (t || TemplatePopupService)(i0.ɵɵinject(i1.NgbModal), i0.ɵɵinject(i2.Router), i0.ɵɵinject(i3.TemplateService));\n};\nTemplatePopupService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: TemplatePopupService,\n  factory: TemplatePopupService.ɵfac\n});","map":{"version":3,"mappings":";;;;;;;AAIA;;;;;AAEA,MACaA,oBAAoB;EAG/BC,YAAoBC,YAAsB,EAAUC,MAAc,EAAUC,eAAgC;IAAxF,iBAAY,GAAZF,YAAY;IAAoB,WAAM,GAANC,MAAM;IAAkB,oBAAe,GAAfC,eAAe;IACzF,IAAI,CAACC,WAAW,GAAG,IAAW;EAChC;EAEAC,IAAI,CAACC,SAAoB,EAAEC,EAAiB;IAC1C,OAAO,IAAIC,OAAO,CAAcC,OAAO,IAAG;MACxC;MACA,MAAMC,MAAM,GAAG,IAAI,CAACN,WAAW,KAAK,IAAI;MACxC,IAAIM,MAAM,EAAE;QACVD,OAAO,CAAC,IAAI,CAACL,WAAW,CAAC;;MAG3B,IAAIG,EAAE,EAAE;QACN,IAAI,CAACJ,eAAe,CAACQ,IAAI,CAACJ,EAAE,CAAC,CAACK,SAAS,CAAEC,GAA2B,IAAI;UACtE,MAAMC,QAAQ,GAAaD,GAAG,CAACE,IAAW;UAC1C,IAAI,CAACX,WAAW,GAAG,IAAI,CAACY,gBAAgB,CAACV,SAAS,EAAEQ,QAAQ,CAAC;UAC7DL,OAAO,CAAC,IAAI,CAACL,WAAW,CAAC;QAC3B,CAAC,CAAC;OACH,MAAM;QACL;QACAa,UAAU,CAAC,MAAK;UACd,IAAI,CAACb,WAAW,GAAG,IAAI,CAACY,gBAAgB,CAACV,SAAS,EAAE,IAAIY,yBAAQ,EAAE,CAAC;UACnET,OAAO,CAAC,IAAI,CAACL,WAAW,CAAC;QAC3B,CAAC,EAAE,CAAC,CAAC;;IAET,CAAC,CAAC;EACJ;EAEAY,gBAAgB,CAACV,SAAoB,EAAEa,QAAkB;IACvD,MAAMC,QAAQ,GAAG,IAAI,CAACnB,YAAY,CAACI,IAAI,CAACC,SAAS,EAAE;MAAEe,IAAI,EAAE,IAAI;MAAEC,QAAQ,EAAE;IAAQ,CAAE,CAAC;IACtFF,QAAQ,CAACG,iBAAiB,CAACJ,QAAQ,GAAGA,QAAQ;IAC9CC,QAAQ,CAACI,MAAM,CAACC,IAAI,CAClB,MAAK;MACH,IAAI,CAACvB,MAAM,CAACwB,QAAQ,CAAC,CAAC;QAAEC,OAAO,EAAE;UAAEC,KAAK,EAAE;QAAI;MAAE,CAAE,CAAC,EAAE;QAAEC,UAAU,EAAE,IAAI;QAAEC,mBAAmB,EAAE;MAAO,CAAE,CAAC;MACxG,IAAI,CAAC1B,WAAW,GAAG,IAAW;IAChC,CAAC,EACD,MAAK;MACH,IAAI,CAACF,MAAM,CAACwB,QAAQ,CAAC,CAAC;QAAEC,OAAO,EAAE;UAAEC,KAAK,EAAE;QAAI;MAAE,CAAE,CAAC,EAAE;QAAEC,UAAU,EAAE,IAAI;QAAEC,mBAAmB,EAAE;MAAO,CAAE,CAAC;MACxG,IAAI,CAAC1B,WAAW,GAAG,IAAW;IAChC,CAAC,CACF;IACD,OAAOgB,QAAQ;EACjB;;AA9CFW;;mBACahC,oBAAoB;AAAA;;SAApBA,oBAAoB;EAAAiC,SAApBjC,oBAAoB;AAAA","names":["TemplatePopupService","constructor","modalService","router","templateService","ngbModalRef","open","component","id","Promise","resolve","isOpen","find","subscribe","res","customer","body","templateModalRef","setTimeout","template_model_1","template","modalRef","size","backdrop","componentInstance","result","then","navigate","outlets","popup","replaceUrl","queryParamsHandling","exports","factory"],"sourceRoot":"","sources":["C:\\Users\\D1347074\\Desktop\\projects 2\\nspayiiapp\\src\\main\\webapp\\app\\admin\\report\\report-template\\template-popup.service.ts"],"sourcesContent":["import { Injectable, Component } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { NgbModal, NgbModalRef } from '@ng-bootstrap/ng-bootstrap';\r\nimport { HttpResponse } from '@angular/common/http';\r\nimport { Template } from './template.model';\r\nimport { TemplateService } from './template.service';\r\n@Injectable()\r\nexport class TemplatePopupService {\r\n  private ngbModalRef: NgbModalRef;\r\n\r\n  constructor(private modalService: NgbModal, private router: Router, private templateService: TemplateService) {\r\n    this.ngbModalRef = null as any;\r\n  }\r\n\r\n  open(component: Component, id?: number | any): Promise<NgbModalRef> {\r\n    return new Promise<NgbModalRef>(resolve => {\r\n      // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\r\n      const isOpen = this.ngbModalRef !== null;\r\n      if (isOpen) {\r\n        resolve(this.ngbModalRef);\r\n      }\r\n\r\n      if (id) {\r\n        this.templateService.find(id).subscribe((res: HttpResponse<Template>) => {\r\n          const customer: Template = res.body as any;\r\n          this.ngbModalRef = this.templateModalRef(component, customer);\r\n          resolve(this.ngbModalRef);\r\n        });\r\n      } else {\r\n        // setTimeout used as a workaround for getting ExpressionChangedAfterItHasBeenCheckedError\r\n        setTimeout(() => {\r\n          this.ngbModalRef = this.templateModalRef(component, new Template());\r\n          resolve(this.ngbModalRef);\r\n        }, 0);\r\n      }\r\n    });\r\n  }\r\n\r\n  templateModalRef(component: Component, template: Template): NgbModalRef {\r\n    const modalRef = this.modalService.open(component, { size: 'lg', backdrop: 'static' });\r\n    modalRef.componentInstance.template = template;\r\n    modalRef.result.then(\r\n      () => {\r\n        this.router.navigate([{ outlets: { popup: null } }], { replaceUrl: true, queryParamsHandling: 'merge' });\r\n        this.ngbModalRef = null as any;\r\n      },\r\n      () => {\r\n        this.router.navigate([{ outlets: { popup: null } }], { replaceUrl: true, queryParamsHandling: 'merge' });\r\n        this.ngbModalRef = null as any;\r\n      }\r\n    );\r\n    return modalRef;\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}