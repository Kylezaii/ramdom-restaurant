{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ResourceService = void 0;\nconst tslib_1 = require(\"tslib\");\nconst operators_1 = require(\"rxjs/operators\");\nconst request_util_1 = require(\"app/core/request/request-util\");\nconst app_constants_1 = require(\"../../../app.constants\");\nconst i0 = tslib_1.__importStar(require(\"@angular/core\"));\nconst i1 = tslib_1.__importStar(require(\"@angular/common/http\"));\nclass ResourceService {\n  constructor(http) {\n    this.http = http;\n    this.resourceUrl = app_constants_1.SERVER_API_URL + 'api/resources';\n    this.getAllApplicationUrl = this.resourceUrl + '/applications';\n    this.unAssignFunctionsUrl = this.resourceUrl + '/unAssignFunctions';\n    this.searchUnAssignedFunctionsUrl = this.resourceUrl + '/search/unAssignFunctions';\n    this.assignFunctionsUrl = this.resourceUrl + '/assignFunctions';\n  }\n  create(func) {\n    const copy = this.convert(func);\n    return this.http.post(this.resourceUrl, copy, {\n      observe: 'response'\n    }).pipe((0, operators_1.map)(res => {\n      const jsonResponse = res.body;\n      this.convertItemFromServer(jsonResponse);\n      return jsonResponse;\n    }));\n  }\n  update(func) {\n    const copy = this.convert(func);\n    return this.http.put(this.resourceUrl, copy, {\n      observe: 'response'\n    }).pipe((0, operators_1.map)(res => {\n      const jsonUpdateResponse = res.body;\n      this.convertItemFromServer(jsonUpdateResponse);\n      return jsonUpdateResponse;\n    }));\n  }\n  find(id) {\n    return this.http.get(`${this.resourceUrl}/${id}`, {\n      observe: 'response'\n    }).pipe((0, operators_1.map)(res => {\n      const jsonFindResponse = res.body;\n      this.convertItemFromServer(jsonFindResponse);\n      return jsonFindResponse;\n    }));\n  }\n  query(req) {\n    const params = (0, request_util_1.createRequestOption)(req);\n    return this.http.get(this.resourceUrl, {\n      params,\n      observe: 'response'\n    }).pipe((0, operators_1.map)(res => this.convertArrayResponse(res)));\n  }\n  delete(id) {\n    return this.http.delete(`${this.resourceUrl}/${id}`, {\n      observe: 'response'\n    });\n  }\n  findAllApplication() {\n    return this.http.get(this.getAllApplicationUrl, {\n      observe: 'response'\n    }).pipe((0, operators_1.map)(res => this.convertArrayResponse(res)));\n  }\n  unAssignFunctions(id, resources) {\n    return this.http.put(`${this.unAssignFunctionsUrl}/${id}`, resources, {\n      observe: 'response'\n    });\n  }\n  searchUnAssignedFunctions(req) {\n    const params = (0, request_util_1.createRequestOption)(req);\n    return this.http.get(this.searchUnAssignedFunctionsUrl, {\n      params,\n      observe: 'response'\n    }).pipe((0, operators_1.map)(res => this.convertArrayResponse(res)));\n  }\n  assignFunctions(id, resources) {\n    return this.http.put(`${this.assignFunctionsUrl}/${id}`, resources, {\n      observe: 'response'\n    });\n  }\n  convertArrayResponse(res) {\n    const jsonResponse = res.body;\n    const body = [];\n    if (jsonResponse) {\n      for (let i = 0; i < jsonResponse.length; i++) {\n        body.push(this.convertItemFromServer(jsonResponse[i]));\n      }\n    }\n    return res.clone({\n      body\n    });\n  }\n  convertItemFromServer(entity) {\n    if (entity) {\n      entity.createdBy = entity.createdBy ? entity.createdBy.replace('PASSWORD/', '').replace('NCSAD/', '') : '';\n      entity.updatedBy = entity.updatedBy ? entity.updatedBy.replace('PASSWORD/', '').replace('NCSAD/', '') : '';\n    }\n    return entity;\n  }\n  convert(func) {\n    const copy = Object.assign({}, func);\n    return copy;\n  }\n}\nexports.ResourceService = ResourceService;\nResourceService.ɵfac = function ResourceService_Factory(t) {\n  return new (t || ResourceService)(i0.ɵɵinject(i1.HttpClient));\n};\nResourceService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ResourceService,\n  factory: ResourceService.ɵfac\n});","map":{"version":3,"mappings":"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","names":["ResourceService","constructor","http","app_constants_1","resourceUrl","create","func","copy","convert","post","observe","pipe","res","jsonResponse","body","convertItemFromServer","update","put","jsonUpdateResponse","find","id","get","jsonFindResponse","query","req","params","convertArrayResponse","delete","findAllApplication","getAllApplicationUrl","unAssignFunctions","resources","unAssignFunctionsUrl","searchUnAssignedFunctions","searchUnAssignedFunctionsUrl","assignFunctions","assignFunctionsUrl","i","length","push","clone","entity","createdBy","replace","updatedBy","Object","assign","exports","factory"],"sourceRoot":"","sources":["C:\\Users\\D1347074\\Desktop\\projects 2\\nspayiiapp\\src\\main\\webapp\\app\\admin\\access-control\\resource\\resource.service.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-unsafe-return */\r\nimport { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpParams, HttpResponse } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { Resource } from './resource.model';\r\nimport { createRequestOption } from 'app/core/request/request-util';\r\nimport { SERVER_API_URL } from '../../../app.constants';\r\n\r\n@Injectable()\r\nexport class ResourceService {\r\n  private resourceUrl = SERVER_API_URL + 'api/resources';\r\n  private getAllApplicationUrl = this.resourceUrl + '/applications';\r\n\r\n  private unAssignFunctionsUrl = this.resourceUrl + '/unAssignFunctions';\r\n  private searchUnAssignedFunctionsUrl = this.resourceUrl + '/search/unAssignFunctions';\r\n  private assignFunctionsUrl = this.resourceUrl + '/assignFunctions';\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  create(func: Resource): Observable<Resource> {\r\n    const copy = this.convert(func);\r\n    return this.http.post(this.resourceUrl, copy, { observe: 'response' }).pipe(\r\n      map((res: HttpResponse<any>) => {\r\n        const jsonResponse = res.body;\r\n        this.convertItemFromServer(jsonResponse);\r\n        return jsonResponse;\r\n      })\r\n    );\r\n  }\r\n\r\n  update(func: Resource): Observable<Resource> {\r\n    const copy = this.convert(func);\r\n    return this.http.put(this.resourceUrl, copy, { observe: 'response' }).pipe(\r\n      map((res: HttpResponse<any>) => {\r\n        const jsonUpdateResponse = res.body;\r\n        this.convertItemFromServer(jsonUpdateResponse);\r\n        return jsonUpdateResponse;\r\n      })\r\n    );\r\n  }\r\n\r\n  find(id: string): Observable<Resource> {\r\n    return this.http.get(`${this.resourceUrl}/${id}`, { observe: 'response' }).pipe(\r\n      map((res: HttpResponse<any>) => {\r\n        const jsonFindResponse = res.body;\r\n        this.convertItemFromServer(jsonFindResponse);\r\n        return jsonFindResponse;\r\n      })\r\n    );\r\n  }\r\n\r\n  query(req?: any): Observable<HttpResponse<any>> {\r\n    const params: HttpParams = createRequestOption(req);\r\n    return this.http\r\n      .get(this.resourceUrl, { params, observe: 'response' })\r\n      .pipe(map((res: HttpResponse<any>) => this.convertArrayResponse(res)));\r\n  }\r\n\r\n  delete(id: string): Observable<HttpResponse<any>> {\r\n    return this.http.delete(`${this.resourceUrl}/${id}`, { observe: 'response' });\r\n  }\r\n\r\n  findAllApplication(): Observable<HttpResponse<any>> {\r\n    return this.http\r\n      .get(this.getAllApplicationUrl, { observe: 'response' })\r\n      .pipe(map((res: HttpResponse<any>) => this.convertArrayResponse(res)));\r\n  }\r\n\r\n  unAssignFunctions(id: string, resources: Resource[]): Observable<HttpResponse<any>> {\r\n    return this.http.put(`${this.unAssignFunctionsUrl}/${id}`, resources, { observe: 'response' });\r\n  }\r\n\r\n  searchUnAssignedFunctions(req?: any): any {\r\n    const params: HttpParams = createRequestOption(req);\r\n    return this.http\r\n      .get(this.searchUnAssignedFunctionsUrl, { params, observe: 'response' })\r\n      .pipe(map((res: HttpResponse<any>) => this.convertArrayResponse(res)));\r\n  }\r\n\r\n  assignFunctions(id: string, resources: Resource[]): Observable<HttpResponse<any>> {\r\n    return this.http.put(`${this.assignFunctionsUrl}/${id}`, resources, { observe: 'response' });\r\n  }\r\n\r\n  private convertArrayResponse(res: HttpResponse<Resource[]>): HttpResponse<Resource[]> {\r\n    const jsonResponse: Resource[] | null = res.body;\r\n    const body: Resource[] = [];\r\n    if (jsonResponse) {\r\n      for (let i = 0; i < jsonResponse.length; i++) {\r\n        body.push(this.convertItemFromServer(jsonResponse[i]));\r\n      }\r\n    }\r\n    return res.clone({ body });\r\n  }\r\n\r\n  private convertItemFromServer(entity: any): any {\r\n    if (entity) {\r\n      entity.createdBy = entity.createdBy ? entity.createdBy.replace('PASSWORD/', '').replace('NCSAD/', '') : '';\r\n      entity.updatedBy = entity.updatedBy ? entity.updatedBy.replace('PASSWORD/', '').replace('NCSAD/', '') : '';\r\n    }\r\n    return entity;\r\n  }\r\n\r\n  private convert(func: Resource): Resource {\r\n    const copy: Resource = Object.assign({}, func);\r\n    return copy;\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}