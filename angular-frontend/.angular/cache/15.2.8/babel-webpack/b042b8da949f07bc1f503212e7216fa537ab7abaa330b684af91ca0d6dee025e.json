{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AccountService = void 0;\nconst tslib_1 = require(\"tslib\");\nconst rxjs_1 = require(\"rxjs\");\nconst operators_1 = require(\"rxjs/operators\");\nconst app_constants_1 = require(\"app/app.constants\");\nconst i0 = tslib_1.__importStar(require(\"@angular/core\"));\nconst i1 = tslib_1.__importStar(require(\"@ngx-translate/core\"));\nconst i2 = tslib_1.__importStar(require(\"ngx-webstorage\"));\nconst i3 = tslib_1.__importStar(require(\"@angular/common/http\"));\nconst i4 = tslib_1.__importStar(require(\"app/core/auth/state-storage.service\"));\nconst i5 = tslib_1.__importStar(require(\"@angular/router\"));\nconst i6 = tslib_1.__importStar(require(\"../config/application-config.service\"));\nconst i7 = tslib_1.__importStar(require(\"../../layouts/sidebar/menu/services/menu-service/menu.service\"));\nclass AccountService {\n  constructor(translateService, sessionStorage, http, stateStorageService, router, applicationConfigService, _menuService) {\n    this.translateService = translateService;\n    this.sessionStorage = sessionStorage;\n    this.http = http;\n    this.stateStorageService = stateStorageService;\n    this.router = router;\n    this.applicationConfigService = applicationConfigService;\n    this._menuService = _menuService;\n    this.userIdentity = null;\n    this.authenticationState = new rxjs_1.ReplaySubject(1);\n  }\n  save(account) {\n    return this.http.post(this.applicationConfigService.getEndpointFor('api/account'), account);\n  }\n  authenticate(identity) {\n    this.userIdentity = identity;\n    this.authenticationState.next(this.userIdentity);\n  }\n  hasAnyAuthority(authorities) {\n    if (!this.userIdentity) {\n      return false;\n    }\n    if (!Array.isArray(authorities)) {\n      authorities = [authorities];\n    }\n    return this.userIdentity.authorities.some(authority => authorities.includes(authority));\n  }\n  hasAnyResources(pageRes) {\n    if (!this.userIdentity) {\n      return false;\n    }\n    if (!Array.isArray(pageRes)) {\n      pageRes = [pageRes];\n    }\n    return this.userIdentity.pageRes.some(resource => pageRes.includes(resource));\n  }\n  identity(force) {\n    if (!this.accountCache$ || force || !this.isAuthenticated()) {\n      this.accountCache$ = this.fetch().pipe((0, operators_1.catchError)(() => (0, rxjs_1.of)(null)), (0, operators_1.tap)(account => {\n        this.authenticate(account);\n        // After retrieve the account info, the language will be changed to\n        // the user's preferred language configured in the account setting\n        if (account?.langKey) {\n          const langKey = this.sessionStorage.retrieve('locale') ?? account.langKey;\n          this.translateService.use(langKey);\n        }\n        if (account) {\n          this._menuService.updateMenuByRoutes(account.menus);\n          this.navigateToStoredUrl();\n        }\n      }), (0, operators_1.shareReplay)());\n    }\n    return this.accountCache$;\n  }\n  isAuthenticated() {\n    return this.userIdentity !== null;\n  }\n  getAuthenticationState() {\n    return this.authenticationState.asObservable();\n  }\n  getImageUrl() {\n    return this.userIdentity?.imageUrl ?? '';\n  }\n  getMenus() {\n    return this.isAuthenticated() ? this.userIdentity?.menus : null;\n  }\n  getMenusStyle() {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n    return this.isAuthenticated() ? this.userIdentity?.menusStyle : null;\n  }\n  getSessionTimeoutMin() {\n    return this.http.get(app_constants_1.SERVER_API_URL + 'api/session-timeout-min', {\n      observe: 'response'\n    }).pipe((0, operators_1.map)(resp => resp));\n  }\n  fetch() {\n    return this.http.get(this.applicationConfigService.getEndpointFor('api/account'));\n  }\n  navigateToStoredUrl() {\n    // previousState can be set in the authExpiredInterceptor and in the userRouteAccessService\n    // if login is successful, go to stored previousState and clear previousState\n    const previousUrl = this.stateStorageService.getUrl();\n    if (previousUrl) {\n      this.stateStorageService.clearUrl();\n      this.router.navigateByUrl(previousUrl);\n    }\n  }\n}\nexports.AccountService = AccountService;\nAccountService.ɵfac = function AccountService_Factory(t) {\n  return new (t || AccountService)(i0.ɵɵinject(i1.TranslateService), i0.ɵɵinject(i2.SessionStorageService), i0.ɵɵinject(i3.HttpClient), i0.ɵɵinject(i4.StateStorageService), i0.ɵɵinject(i5.Router), i0.ɵɵinject(i6.ApplicationConfigService), i0.ɵɵinject(i7.IcMenuService));\n};\nAccountService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AccountService,\n  factory: AccountService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";;;;;;;AAKA;AACA;AAKA;;;;;;;;;AAEA,MACaA,cAAc;EAKzBC,YACUC,gBAAkC,EAClCC,cAAqC,EACrCC,IAAgB,EAChBC,mBAAwC,EACxCC,MAAc,EACdC,wBAAkD,EAClDC,YAA2B;IAN3B,qBAAgB,GAAhBN,gBAAgB;IAChB,mBAAc,GAAdC,cAAc;IACd,SAAI,GAAJC,IAAI;IACJ,wBAAmB,GAAnBC,mBAAmB;IACnB,WAAM,GAANC,MAAM;IACN,6BAAwB,GAAxBC,wBAAwB;IACxB,iBAAY,GAAZC,YAAY;IAXd,iBAAY,GAAmB,IAAI;IACnC,wBAAmB,GAAG,IAAIC,oBAAa,CAAiB,CAAC,CAAC;EAW/D;EAEHC,IAAI,CAACC,OAAgB;IACnB,OAAO,IAAI,CAACP,IAAI,CAACQ,IAAI,CAAC,IAAI,CAACL,wBAAwB,CAACM,cAAc,CAAC,aAAa,CAAC,EAAEF,OAAO,CAAC;EAC7F;EAEAG,YAAY,CAACC,QAAwB;IACnC,IAAI,CAACC,YAAY,GAAGD,QAAQ;IAC5B,IAAI,CAACE,mBAAmB,CAACC,IAAI,CAAC,IAAI,CAACF,YAAY,CAAC;EAClD;EAEAG,eAAe,CAACC,WAA8B;IAC5C,IAAI,CAAC,IAAI,CAACJ,YAAY,EAAE;MACtB,OAAO,KAAK;;IAEd,IAAI,CAACK,KAAK,CAACC,OAAO,CAACF,WAAW,CAAC,EAAE;MAC/BA,WAAW,GAAG,CAACA,WAAW,CAAC;;IAE7B,OAAO,IAAI,CAACJ,YAAY,CAACI,WAAW,CAACG,IAAI,CAAEC,SAAiB,IAAKJ,WAAW,CAACK,QAAQ,CAACD,SAAS,CAAC,CAAC;EACnG;EAEAE,eAAe,CAACC,OAA0B;IACxC,IAAI,CAAC,IAAI,CAACX,YAAY,EAAE;MACtB,OAAO,KAAK;;IAEd,IAAI,CAACK,KAAK,CAACC,OAAO,CAACK,OAAO,CAAC,EAAE;MAC3BA,OAAO,GAAG,CAACA,OAAO,CAAC;;IAErB,OAAO,IAAI,CAACX,YAAY,CAACW,OAAO,CAACJ,IAAI,CAAEK,QAAgB,IAAKD,OAAO,CAACF,QAAQ,CAACG,QAAQ,CAAC,CAAC;EACzF;EAEAb,QAAQ,CAACc,KAAe;IACtB,IAAI,CAAC,IAAI,CAACC,aAAa,IAAID,KAAK,IAAI,CAAC,IAAI,CAACE,eAAe,EAAE,EAAE;MAC3D,IAAI,CAACD,aAAa,GAAG,IAAI,CAACE,KAAK,EAAE,CAACC,IAAI,CACpC,0BAAU,EAAC,MAAM,aAAE,EAAC,IAAI,CAAC,CAAC,EAC1B,mBAAG,EAAEtB,OAAuB,IAAI;QAC9B,IAAI,CAACG,YAAY,CAACH,OAAO,CAAC;QAE1B;QACA;QACA,IAAIA,OAAO,EAAEuB,OAAO,EAAE;UACpB,MAAMA,OAAO,GAAG,IAAI,CAAC/B,cAAc,CAACgC,QAAQ,CAAC,QAAQ,CAAC,IAAIxB,OAAO,CAACuB,OAAO;UACzE,IAAI,CAAChC,gBAAgB,CAACkC,GAAG,CAACF,OAAO,CAAC;;QAGpC,IAAIvB,OAAO,EAAE;UACX,IAAI,CAACH,YAAY,CAAC6B,kBAAkB,CAAC1B,OAAO,CAAC2B,KAAe,CAAC;UAC7D,IAAI,CAACC,mBAAmB,EAAE;;MAE9B,CAAC,CAAC,EACF,2BAAW,GAAE,CACd;;IAEH,OAAO,IAAI,CAACT,aAAa;EAC3B;EAEAC,eAAe;IACb,OAAO,IAAI,CAACf,YAAY,KAAK,IAAI;EACnC;EAEAwB,sBAAsB;IACpB,OAAO,IAAI,CAACvB,mBAAmB,CAACwB,YAAY,EAAE;EAChD;EAEAC,WAAW;IACT,OAAO,IAAI,CAAC1B,YAAY,EAAE2B,QAAQ,IAAI,EAAE;EAC1C;EAEAC,QAAQ;IACN,OAAO,IAAI,CAACb,eAAe,EAAE,GAAG,IAAI,CAACf,YAAY,EAAEsB,KAAK,GAAG,IAAI;EACjE;EAEAO,aAAa;IACX;IACA,OAAO,IAAI,CAACd,eAAe,EAAE,GAAG,IAAI,CAACf,YAAY,EAAE8B,UAAU,GAAG,IAAI;EACtE;EAEAC,oBAAoB;IAClB,OAAO,IAAI,CAAC3C,IAAI,CAAC4C,GAAG,CAACC,8BAAc,GAAG,yBAAyB,EAAE;MAAEC,OAAO,EAAE;IAAU,CAAE,CAAC,CAACjB,IAAI,CAAC,mBAAG,EAAEkB,IAAuB,IAAKA,IAAI,CAAC,CAAC;EACxI;EAEQnB,KAAK;IACX,OAAO,IAAI,CAAC5B,IAAI,CAAC4C,GAAG,CAAU,IAAI,CAACzC,wBAAwB,CAACM,cAAc,CAAC,aAAa,CAAC,CAAC;EAC5F;EAEQ0B,mBAAmB;IACzB;IACA;IACA,MAAMa,WAAW,GAAG,IAAI,CAAC/C,mBAAmB,CAACgD,MAAM,EAAE;IACrD,IAAID,WAAW,EAAE;MACf,IAAI,CAAC/C,mBAAmB,CAACiD,QAAQ,EAAE;MACnC,IAAI,CAAChD,MAAM,CAACiD,aAAa,CAACH,WAAW,CAAC;;EAE1C;;AA3GFI;;mBACaxD,cAAc;AAAA;;SAAdA,cAAc;EAAAyD,SAAdzD,cAAc;EAAA0D,YADD;AAAM","names":["AccountService","constructor","translateService","sessionStorage","http","stateStorageService","router","applicationConfigService","_menuService","rxjs_1","save","account","post","getEndpointFor","authenticate","identity","userIdentity","authenticationState","next","hasAnyAuthority","authorities","Array","isArray","some","authority","includes","hasAnyResources","pageRes","resource","force","accountCache$","isAuthenticated","fetch","pipe","langKey","retrieve","use","updateMenuByRoutes","menus","navigateToStoredUrl","getAuthenticationState","asObservable","getImageUrl","imageUrl","getMenus","getMenusStyle","menusStyle","getSessionTimeoutMin","get","app_constants_1","observe","resp","previousUrl","getUrl","clearUrl","navigateByUrl","exports","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\D1347074\\Desktop\\projects 2\\nspayiiapp\\src\\main\\webapp\\app\\core\\auth\\account.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Router, Routes } from '@angular/router';\r\nimport { HttpClient, HttpResponse } from '@angular/common/http';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { SessionStorageService } from 'ngx-webstorage';\r\nimport { Observable, ReplaySubject, of } from 'rxjs';\r\nimport { shareReplay, tap, catchError, map } from 'rxjs/operators';\r\nimport { IcMenuService } from '../../layouts/sidebar/menu/services/menu-service/menu.service';\r\nimport { StateStorageService } from 'app/core/auth/state-storage.service';\r\nimport { ApplicationConfigService } from '../config/application-config.service';\r\nimport { Account } from 'app/core/auth/account.model';\r\nimport { SERVER_API_URL } from 'app/app.constants';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class AccountService {\r\n  private userIdentity: Account | null = null;\r\n  private authenticationState = new ReplaySubject<Account | null>(1);\r\n  private accountCache$?: Observable<Account | null>;\r\n\r\n  constructor(\r\n    private translateService: TranslateService,\r\n    private sessionStorage: SessionStorageService,\r\n    private http: HttpClient,\r\n    private stateStorageService: StateStorageService,\r\n    private router: Router,\r\n    private applicationConfigService: ApplicationConfigService,\r\n    private _menuService: IcMenuService\r\n  ) {}\r\n\r\n  save(account: Account): Observable<{}> {\r\n    return this.http.post(this.applicationConfigService.getEndpointFor('api/account'), account);\r\n  }\r\n\r\n  authenticate(identity: Account | null): void {\r\n    this.userIdentity = identity;\r\n    this.authenticationState.next(this.userIdentity);\r\n  }\r\n\r\n  hasAnyAuthority(authorities: string[] | string): boolean {\r\n    if (!this.userIdentity) {\r\n      return false;\r\n    }\r\n    if (!Array.isArray(authorities)) {\r\n      authorities = [authorities];\r\n    }\r\n    return this.userIdentity.authorities.some((authority: string) => authorities.includes(authority));\r\n  }\r\n\r\n  hasAnyResources(pageRes: string[] | string): boolean {\r\n    if (!this.userIdentity) {\r\n      return false;\r\n    }\r\n    if (!Array.isArray(pageRes)) {\r\n      pageRes = [pageRes];\r\n    }\r\n    return this.userIdentity.pageRes.some((resource: string) => pageRes.includes(resource));\r\n  }\r\n\r\n  identity(force?: boolean): Observable<Account | null> {\r\n    if (!this.accountCache$ || force || !this.isAuthenticated()) {\r\n      this.accountCache$ = this.fetch().pipe(\r\n        catchError(() => of(null)),\r\n        tap((account: Account | null) => {\r\n          this.authenticate(account);\r\n\r\n          // After retrieve the account info, the language will be changed to\r\n          // the user's preferred language configured in the account setting\r\n          if (account?.langKey) {\r\n            const langKey = this.sessionStorage.retrieve('locale') ?? account.langKey;\r\n            this.translateService.use(langKey);\r\n          }\r\n\r\n          if (account) {\r\n            this._menuService.updateMenuByRoutes(account.menus as Routes);\r\n            this.navigateToStoredUrl();\r\n          }\r\n        }),\r\n        shareReplay()\r\n      );\r\n    }\r\n    return this.accountCache$;\r\n  }\r\n\r\n  isAuthenticated(): boolean {\r\n    return this.userIdentity !== null;\r\n  }\r\n\r\n  getAuthenticationState(): Observable<Account | null> {\r\n    return this.authenticationState.asObservable();\r\n  }\r\n\r\n  getImageUrl(): string {\r\n    return this.userIdentity?.imageUrl ?? '';\r\n  }\r\n\r\n  getMenus(): unknown {\r\n    return this.isAuthenticated() ? this.userIdentity?.menus : null;\r\n  }\r\n\r\n  getMenusStyle(): string {\r\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-return\r\n    return this.isAuthenticated() ? this.userIdentity?.menusStyle : null;\r\n  }\r\n\r\n  getSessionTimeoutMin(): Observable<HttpResponse<any>> {\r\n    return this.http.get(SERVER_API_URL + 'api/session-timeout-min', { observe: 'response' }).pipe(map((resp: HttpResponse<any>) => resp));\r\n  }\r\n\r\n  private fetch(): Observable<Account> {\r\n    return this.http.get<Account>(this.applicationConfigService.getEndpointFor('api/account'));\r\n  }\r\n\r\n  private navigateToStoredUrl(): void {\r\n    // previousState can be set in the authExpiredInterceptor and in the userRouteAccessService\r\n    // if login is successful, go to stored previousState and clear previousState\r\n    const previousUrl = this.stateStorageService.getUrl();\r\n    if (previousUrl) {\r\n      this.stateStorageService.clearUrl();\r\n      this.router.navigateByUrl(previousUrl);\r\n    }\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}