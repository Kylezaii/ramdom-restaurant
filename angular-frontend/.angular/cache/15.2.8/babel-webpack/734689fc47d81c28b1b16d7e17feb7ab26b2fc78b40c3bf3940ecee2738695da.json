{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.HasAnyAuthorityDirective = void 0;\nconst tslib_1 = require(\"tslib\");\nconst rxjs_1 = require(\"rxjs\");\nconst operators_1 = require(\"rxjs/operators\");\nconst i0 = tslib_1.__importStar(require(\"@angular/core\"));\nconst i1 = tslib_1.__importStar(require(\"app/core/auth/account.service\"));\n/**\r\n * @whatItDoes Conditionally includes an HTML element if current user has any\r\n * of the authorities passed as the `expression`.\r\n *\r\n * @howToUse\r\n * ```\r\n *     <some-element *icHasAnyAuthority=\"'ROLE_ADMIN'\">...</some-element>\r\n *\r\n *     <some-element *icHasAnyAuthority=\"['ROLE_ADMIN', 'ROLE_USER']\">...</some-element>\r\n * ```\r\n */\nclass HasAnyAuthorityDirective {\n  constructor(accountService, templateRef, viewContainerRef) {\n    this.accountService = accountService;\n    this.templateRef = templateRef;\n    this.viewContainerRef = viewContainerRef;\n    this.destroy$ = new rxjs_1.Subject();\n  }\n  set icHasAnyAuthority(value) {\n    this.authorities = value;\n    this.updateView();\n    // Get notified each time authentication state changes.\n    this.accountService.getAuthenticationState().pipe((0, operators_1.takeUntil)(this.destroy$)).subscribe(() => {\n      this.updateView();\n    });\n  }\n  ngOnDestroy() {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n  updateView() {\n    const hasAnyAuthority = this.accountService.hasAnyAuthority(this.authorities);\n    this.viewContainerRef.clear();\n    if (hasAnyAuthority) {\n      this.viewContainerRef.createEmbeddedView(this.templateRef);\n    }\n  }\n}\nexports.HasAnyAuthorityDirective = HasAnyAuthorityDirective;\nHasAnyAuthorityDirective.ɵfac = function HasAnyAuthorityDirective_Factory(t) {\n  return new (t || HasAnyAuthorityDirective)(i0.ɵɵdirectiveInject(i1.AccountService), i0.ɵɵdirectiveInject(i0.TemplateRef), i0.ɵɵdirectiveInject(i0.ViewContainerRef));\n};\nHasAnyAuthorityDirective.ɵdir = /*@__PURE__*/i0.ɵɵdefineDirective({\n  type: HasAnyAuthorityDirective,\n  selectors: [[\"\", \"icHasAnyAuthority\", \"\"]],\n  inputs: {\n    icHasAnyAuthority: \"icHasAnyAuthority\"\n  }\n});","map":{"version":3,"mappings":";;;;;;;AACA;AACA;;;AAIA;;;;;;;;;;;AAWA,MAGaA,wBAAwB;EAKnCC,YAAoBC,cAA8B,EAAUC,WAA6B,EAAUC,gBAAkC;IAAjH,mBAAc,GAAdF,cAAc;IAA0B,gBAAW,GAAXC,WAAW;IAA4B,qBAAgB,GAAhBC,gBAAgB;IAFlG,aAAQ,GAAG,IAAIC,cAAO,EAAQ;EAEyF;EAExI,IACIC,iBAAiB,CAACC,KAAwB;IAC5C,IAAI,CAACC,WAAW,GAAGD,KAAK;IACxB,IAAI,CAACE,UAAU,EAAE;IACjB;IACA,IAAI,CAACP,cAAc,CAChBQ,sBAAsB,EAAE,CACxBC,IAAI,CAAC,yBAAS,EAAC,IAAI,CAACC,QAAQ,CAAC,CAAC,CAC9BC,SAAS,CAAC,MAAK;MACd,IAAI,CAACJ,UAAU,EAAE;IACnB,CAAC,CAAC;EACN;EAEAK,WAAW;IACT,IAAI,CAACF,QAAQ,CAACG,IAAI,EAAE;IACpB,IAAI,CAACH,QAAQ,CAACI,QAAQ,EAAE;EAC1B;EAEQP,UAAU;IAChB,MAAMQ,eAAe,GAAG,IAAI,CAACf,cAAc,CAACe,eAAe,CAAC,IAAI,CAACT,WAAW,CAAC;IAC7E,IAAI,CAACJ,gBAAgB,CAACc,KAAK,EAAE;IAC7B,IAAID,eAAe,EAAE;MACnB,IAAI,CAACb,gBAAgB,CAACe,kBAAkB,CAAC,IAAI,CAAChB,WAAW,CAAC;;EAE9D;;AAlCFiB;;mBAGapB,wBAAwB;AAAA;;QAAxBA,wBAAwB;EAAAqB;EAAAC;IAAAhB;EAAA;AAAA","names":["HasAnyAuthorityDirective","constructor","accountService","templateRef","viewContainerRef","rxjs_1","icHasAnyAuthority","value","authorities","updateView","getAuthenticationState","pipe","destroy$","subscribe","ngOnDestroy","next","complete","hasAnyAuthority","clear","createEmbeddedView","exports","selectors","inputs"],"sourceRoot":"","sources":["C:\\Users\\D1347074\\Desktop\\projects 2\\nspayiiapp\\src\\main\\webapp\\app\\shared\\auth\\has-any-authority.directive.ts"],"sourcesContent":["import { Directive, Input, TemplateRef, ViewContainerRef, OnDestroy } from '@angular/core';\r\nimport { Subject } from 'rxjs';\r\nimport { takeUntil } from 'rxjs/operators';\r\n\r\nimport { AccountService } from 'app/core/auth/account.service';\r\n\r\n/**\r\n * @whatItDoes Conditionally includes an HTML element if current user has any\r\n * of the authorities passed as the `expression`.\r\n *\r\n * @howToUse\r\n * ```\r\n *     <some-element *icHasAnyAuthority=\"'ROLE_ADMIN'\">...</some-element>\r\n *\r\n *     <some-element *icHasAnyAuthority=\"['ROLE_ADMIN', 'ROLE_USER']\">...</some-element>\r\n * ```\r\n */\r\n@Directive({\r\n  selector: '[icHasAnyAuthority]',\r\n})\r\nexport class HasAnyAuthorityDirective implements OnDestroy {\r\n  private authorities!: string | string[];\r\n\r\n  private readonly destroy$ = new Subject<void>();\r\n\r\n  constructor(private accountService: AccountService, private templateRef: TemplateRef<any>, private viewContainerRef: ViewContainerRef) {}\r\n\r\n  @Input()\r\n  set icHasAnyAuthority(value: string | string[]) {\r\n    this.authorities = value;\r\n    this.updateView();\r\n    // Get notified each time authentication state changes.\r\n    this.accountService\r\n      .getAuthenticationState()\r\n      .pipe(takeUntil(this.destroy$))\r\n      .subscribe(() => {\r\n        this.updateView();\r\n      });\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.destroy$.next();\r\n    this.destroy$.complete();\r\n  }\r\n\r\n  private updateView(): void {\r\n    const hasAnyAuthority = this.accountService.hasAnyAuthority(this.authorities);\r\n    this.viewContainerRef.clear();\r\n    if (hasAnyAuthority) {\r\n      this.viewContainerRef.createEmbeddedView(this.templateRef);\r\n    }\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}