{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.EmailTemplateService = void 0;\nconst tslib_1 = require(\"tslib\");\nconst dayjs_1 = tslib_1.__importDefault(require(\"dayjs\"));\nconst operators_1 = require(\"rxjs/operators\");\nconst app_constants_1 = require(\"app/app.constants\");\nconst request_util_1 = require(\"app/core/request/request-util\");\nconst i0 = tslib_1.__importStar(require(\"@angular/core\"));\nconst i1 = tslib_1.__importStar(require(\"@angular/common/http\"));\nclass EmailTemplateService {\n  constructor(http) {\n    this.http = http;\n    this.resourceUrl = app_constants_1.SERVER_API_URL + 'api/email-templates';\n  }\n  create(emailTemplate) {\n    const copy = this.convertDateFromClient(emailTemplate);\n    return this.http.post(this.resourceUrl, copy, {\n      observe: 'response'\n    }).pipe((0, operators_1.map)(res => this.convertDateFromServer(res)));\n  }\n  update(emailTemplate) {\n    const copy = this.convertDateFromClient(emailTemplate);\n    return this.http.put(this.resourceUrl, copy, {\n      observe: 'response'\n    }).pipe((0, operators_1.map)(res => this.convertDateFromServer(res)));\n  }\n  find(id) {\n    return this.http.get(`${this.resourceUrl}/${id}`, {\n      observe: 'response'\n    }).pipe((0, operators_1.map)(res => this.convertDateFromServer(res)));\n  }\n  query(req) {\n    const options = (0, request_util_1.createRequestOption)(req);\n    return this.http.get(this.resourceUrl, {\n      params: options,\n      observe: 'response'\n    }).pipe((0, operators_1.map)(res => this.convertDateArrayFromServer(res)));\n  }\n  delete(id) {\n    return this.http.delete(`${this.resourceUrl}/${id}`, {\n      observe: 'response'\n    });\n  }\n  convertDateFromClient(emailTemplate) {\n    return Object.assign({}, emailTemplate, {\n      createdDate: emailTemplate.createdDate?.isValid() ? emailTemplate.createdDate.toJSON() : undefined,\n      updatedDate: emailTemplate.updatedDate?.isValid() ? emailTemplate.updatedDate.toJSON() : undefined\n    });\n  }\n  convertDateFromServer(res) {\n    if (res.body) {\n      res.body.createdDate = res.body.createdDate ? (0, dayjs_1.default)(res.body.createdDate) : undefined;\n      res.body.updatedDate = res.body.updatedDate ? (0, dayjs_1.default)(res.body.updatedDate) : undefined;\n    }\n    return res;\n  }\n  convertDateArrayFromServer(res) {\n    if (res.body) {\n      res.body.forEach(emailTemplate => {\n        emailTemplate.createdDate = emailTemplate.createdDate ? (0, dayjs_1.default)(emailTemplate.createdDate) : undefined;\n        emailTemplate.updatedDate = emailTemplate.updatedDate ? (0, dayjs_1.default)(emailTemplate.updatedDate) : undefined;\n      });\n    }\n    return res;\n  }\n}\nexports.EmailTemplateService = EmailTemplateService;\nEmailTemplateService.ɵfac = function EmailTemplateService_Factory(t) {\n  return new (t || EmailTemplateService)(i0.ɵɵinject(i1.HttpClient));\n};\nEmailTemplateService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: EmailTemplateService,\n  factory: EmailTemplateService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["EmailTemplateService","constructor","http","app_constants_1","create","emailTemplate","copy","convertDateFromClient","post","resourceUrl","observe","pipe","res","convertDateFromServer","update","put","find","id","get","query","req","options","params","convertDateArrayFromServer","delete","Object","assign","createdDate","isValid","toJSON","undefined","updatedDate","body","forEach","exports","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\D1347074\\Desktop\\projects 2\\nspayiiapp\\src\\main\\webapp\\app\\admin\\email-template\\email-template.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpResponse } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport dayjs from 'dayjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { SERVER_API_URL } from 'app/app.constants';\r\nimport { createRequestOption } from 'app/core/request/request-util';\r\nimport { IEmailTemplate } from './email-template.model';\r\n\r\ntype EntityResponseType = HttpResponse<IEmailTemplate>;\r\ntype EntityArrayResponseType = HttpResponse<IEmailTemplate[]>;\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class EmailTemplateService {\r\n  public resourceUrl = SERVER_API_URL + 'api/email-templates';\r\n\r\n  constructor(protected http: HttpClient) {}\r\n\r\n  create(emailTemplate: IEmailTemplate): Observable<EntityResponseType> {\r\n    const copy = this.convertDateFromClient(emailTemplate);\r\n    return this.http\r\n      .post<IEmailTemplate>(this.resourceUrl, copy, { observe: 'response' })\r\n      .pipe(map((res: EntityResponseType) => this.convertDateFromServer(res)));\r\n  }\r\n\r\n  update(emailTemplate: IEmailTemplate): Observable<EntityResponseType> {\r\n    const copy = this.convertDateFromClient(emailTemplate);\r\n    return this.http\r\n      .put<IEmailTemplate>(this.resourceUrl, copy, { observe: 'response' })\r\n      .pipe(map((res: EntityResponseType) => this.convertDateFromServer(res)));\r\n  }\r\n\r\n  find(id: number): Observable<EntityResponseType> {\r\n    return this.http\r\n      .get<IEmailTemplate>(`${this.resourceUrl}/${id}`, { observe: 'response' })\r\n      .pipe(map((res: EntityResponseType) => this.convertDateFromServer(res)));\r\n  }\r\n\r\n  query(req?: any): Observable<EntityArrayResponseType> {\r\n    const options = createRequestOption(req);\r\n    return this.http\r\n      .get<IEmailTemplate[]>(this.resourceUrl, { params: options, observe: 'response' })\r\n      .pipe(map((res: EntityArrayResponseType) => this.convertDateArrayFromServer(res)));\r\n  }\r\n\r\n  delete(id: number): Observable<HttpResponse<any>> {\r\n    return this.http.delete<any>(`${this.resourceUrl}/${id}`, { observe: 'response' });\r\n  }\r\n\r\n  protected convertDateFromClient(emailTemplate: IEmailTemplate): IEmailTemplate {\r\n    return Object.assign({}, emailTemplate, {\r\n      createdDate: emailTemplate.createdDate?.isValid() ? emailTemplate.createdDate.toJSON() : undefined,\r\n      updatedDate: emailTemplate.updatedDate?.isValid() ? emailTemplate.updatedDate.toJSON() : undefined,\r\n    });\r\n  }\r\n\r\n  protected convertDateFromServer(res: EntityResponseType): EntityResponseType {\r\n    if (res.body) {\r\n      res.body.createdDate = res.body.createdDate ? dayjs(res.body.createdDate) : undefined;\r\n      res.body.updatedDate = res.body.updatedDate ? dayjs(res.body.updatedDate) : undefined;\r\n    }\r\n    return res;\r\n  }\r\n\r\n  protected convertDateArrayFromServer(res: EntityArrayResponseType): EntityArrayResponseType {\r\n    if (res.body) {\r\n      res.body.forEach((emailTemplate: IEmailTemplate) => {\r\n        emailTemplate.createdDate = emailTemplate.createdDate ? dayjs(emailTemplate.createdDate) : undefined;\r\n        emailTemplate.updatedDate = emailTemplate.updatedDate ? dayjs(emailTemplate.updatedDate) : undefined;\r\n      });\r\n    }\r\n    return res;\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}