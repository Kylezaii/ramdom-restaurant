{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ClaimVerifierInboxComponent = void 0;\nconst tslib_1 = require(\"tslib\");\nconst assign_claims_component_1 = require(\"./assign-claims/assign-claims.component\");\nconst moment_1 = tslib_1.__importDefault(require(\"moment\"));\nconst assign_claims_auto_component_1 = require(\"./assign-claims-auto/assign-claims-auto.component\");\nconst forms_1 = require(\"@angular/forms\");\nconst common_1 = require(\"@angular/common\");\nconst http_1 = require(\"@angular/common/http\");\nconst i0 = tslib_1.__importStar(require(\"@angular/core\"));\nconst i1 = tslib_1.__importStar(require(\"app/workload/service/workload-inbox.service\"));\nconst i2 = tslib_1.__importStar(require(\"primeng/api\"));\nconst i3 = tslib_1.__importStar(require(\"app/shared/confirm/nsp-confirm.service\"));\nconst i4 = tslib_1.__importStar(require(\"app/core/auth/account.service\"));\nconst i5 = tslib_1.__importStar(require(\"app/core/util/date-utils.service\"));\nconst i6 = tslib_1.__importStar(require(\"primeng/dynamicdialog\"));\nconst i7 = tslib_1.__importStar(require(\"app/layouts/service/customtoast.service\"));\nconst i8 = tslib_1.__importStar(require(\"@angular/forms\"));\nconst i9 = tslib_1.__importStar(require(\"app/shared/service/ns2-http.service\"));\nconst i10 = tslib_1.__importStar(require(\"app/ng-connect\"));\nconst i11 = tslib_1.__importStar(require(\"app/core/util/export-utils.service\"));\nconst i12 = tslib_1.__importStar(require(\"@angular/common\"));\nconst i13 = tslib_1.__importStar(require(\"primeng/button\"));\nconst i14 = tslib_1.__importStar(require(\"primeng/table\"));\nconst i15 = tslib_1.__importStar(require(\"primeng/dropdown\"));\nconst i16 = tslib_1.__importStar(require(\"../../../shared/pipe/default-string.pipe\"));\nconst i17 = tslib_1.__importStar(require(\"../../../shared/pipe/truncate-name.pipe\"));\nconst _c0 = [\"dataTable\"];\nconst _c1 = function () {\n  return {\n    \"margin-right\": \".5em\",\n    \"margin-bottom\": \".5em\"\n  };\n};\nconst _c2 = function () {\n  return {\n    \"margin-left\": \".5em\",\n    \"margin-bottom\": \".5em\"\n  };\n};\nfunction ClaimVerifierInboxComponent_ng_template_4_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r6 = i0.ɵɵgetCurrentView();\n    i0.ɵɵtext(0, \"\\n                \");\n    i0.ɵɵelementStart(1, \"form\", 6);\n    i0.ɵɵtext(2, \"\\n                    \");\n    i0.ɵɵelementStart(3, \"div\", 7);\n    i0.ɵɵtext(4, \"\\n                        \");\n    i0.ɵɵelementStart(5, \"div\", 8);\n    i0.ɵɵtext(6, \"\\n                            \");\n    i0.ɵɵelementStart(7, \"p-button\", 9);\n    i0.ɵɵlistener(\"click\", function ClaimVerifierInboxComponent_ng_template_4_Template_p_button_click_7_listener() {\n      i0.ɵɵrestoreView(_r6);\n      const ctx_r5 = i0.ɵɵnextContext();\n      const _r0 = i0.ɵɵreference(2);\n      return i0.ɵɵresetView(ctx_r5.exportCSV(_r0));\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(8, \"\\n                            \");\n    i0.ɵɵelementStart(9, \"p-dropdown\", 10);\n    i0.ɵɵlistener(\"onChange\", function ClaimVerifierInboxComponent_ng_template_4_Template_p_dropdown_onChange_9_listener($event) {\n      i0.ɵɵrestoreView(_r6);\n      const ctx_r7 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r7.onChangeECFilter($event));\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(10, \"\\n\\n                            \");\n    i0.ɵɵelementStart(11, \"p-dropdown\", 11);\n    i0.ɵɵlistener(\"onChange\", function ClaimVerifierInboxComponent_ng_template_4_Template_p_dropdown_onChange_11_listener() {\n      i0.ɵɵrestoreView(_r6);\n      const ctx_r8 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r8.applyFilter(\"claimantNRIC\", ctx_r8.captionGroup.get(\"selectedDupNric\").value));\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(12, \"\\n                            \");\n    i0.ɵɵelementStart(13, \"p\")(14, \"b\");\n    i0.ɵɵtext(15);\n    i0.ɵɵelementStart(16, \"span\", 12);\n    i0.ɵɵtext(17);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(18);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵtext(19, \"\\n                        \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(20, \"\\n                        \");\n    i0.ɵɵelementStart(21, \"div\", 13);\n    i0.ɵɵtext(22, \"\\n                            \");\n    i0.ɵɵelementStart(23, \"button\", 14);\n    i0.ɵɵlistener(\"click\", function ClaimVerifierInboxComponent_ng_template_4_Template_button_click_23_listener() {\n      i0.ɵɵrestoreView(_r6);\n      const ctx_r9 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r9.onAssignClaim());\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(24, \"\\n                        \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(25, \"\\n                    \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(26, \"\\n                \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(27, \"\\n\\n            \");\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"formGroup\", ctx_r1.captionGroup);\n    i0.ɵɵadvance(6);\n    i0.ɵɵstyleMap(i0.ɵɵpureFunction0(19, _c1));\n    i0.ɵɵadvance(2);\n    i0.ɵɵstyleMap(i0.ɵɵpureFunction0(20, _c1));\n    i0.ɵɵproperty(\"options\", ctx_r1.ecseClaimFilterOptions);\n    i0.ɵɵadvance(2);\n    i0.ɵɵstyleMap(i0.ɵɵpureFunction0(21, _c1));\n    i0.ɵɵproperty(\"options\", ctx_r1.nricWithMoreThanOneClaimOptions)(\"placeholder\", ctx_r1.duplicateNricPlaceHolder)(\"showClear\", true);\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate1(\"\", ctx_r1.selectedECSEFilter.label, \":\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate3(\"\\n                                \", ctx_r1.quickFilterclaimCount.claimsPendRecompNo, \" (Recomp);\\n                                \", ctx_r1.quickFilterclaimCount.claimsDueToDate, \" (Today);\\n                                \", ctx_r1.quickFilterclaimCount.claimsOverDue, \" (Overdue);\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\"\\n                                \", ctx_r1.quickFilterclaimCount.claimsTotal, \" (Total)\\n                            \");\n    i0.ɵɵadvance(5);\n    i0.ɵɵstyleMap(i0.ɵɵpureFunction0(22, _c2));\n    i0.ɵɵproperty(\"disabled\", !ctx_r1.enableAssignClaimBtn());\n  }\n}\nfunction ClaimVerifierInboxComponent_ng_template_6_ng_template_45_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r18 = i0.ɵɵgetCurrentView();\n    i0.ɵɵtext(0, \"\\n                            \");\n    i0.ɵɵelementStart(1, \"p-dropdown\", 42);\n    i0.ɵɵlistener(\"onChange\", function ClaimVerifierInboxComponent_ng_template_6_ng_template_45_Template_p_dropdown_onChange_1_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r18);\n      const filter_r16 = restoredCtx.filterCallback;\n      return i0.ɵɵresetView(filter_r16($event.value));\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(2, \"\\n                        \");\n  }\n  if (rf & 2) {\n    const ctx_r11 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngModel\", ctx_r11.selectedReason)(\"options\", ctx_r11.reasonList);\n  }\n}\nfunction ClaimVerifierInboxComponent_ng_template_6_th_49_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"th\", 43);\n    i0.ɵɵtext(1, \"DF\");\n    i0.ɵɵelement(2, \"p-sortIcon\", 44);\n    i0.ɵɵelementEnd();\n  }\n}\nfunction ClaimVerifierInboxComponent_ng_template_6_th_51_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"th\", 45);\n    i0.ɵɵtext(1, \"Option\");\n    i0.ɵɵelement(2, \"p-sortIcon\", 46);\n    i0.ɵɵelementEnd();\n  }\n}\nfunction ClaimVerifierInboxComponent_ng_template_6_ng_template_59_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r22 = i0.ɵɵgetCurrentView();\n    i0.ɵɵtext(0, \"\\n                            \");\n    i0.ɵɵelementStart(1, \"p-dropdown\", 47);\n    i0.ɵɵlistener(\"onChange\", function ClaimVerifierInboxComponent_ng_template_6_ng_template_59_Template_p_dropdown_onChange_1_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r22);\n      const filter_r20 = restoredCtx.filterCallback;\n      return i0.ɵɵresetView(filter_r20($event.value));\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(2, \"\\n                        \");\n  }\n  if (rf & 2) {\n    const ctx_r14 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngModel\", ctx_r14.selectedOwner)(\"options\", ctx_r14.ownerMap);\n  }\n}\nfunction ClaimVerifierInboxComponent_ng_template_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtext(0, \"\\n            \");\n    i0.ɵɵelementStart(1, \"tr\");\n    i0.ɵɵtext(2, \"\\n                \");\n    i0.ɵɵelementStart(3, \"th\", 15);\n    i0.ɵɵelement(4, \"p-tableHeaderCheckbox\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(5, \"\\n                \");\n    i0.ɵɵelementStart(6, \"th\", 16);\n    i0.ɵɵtext(7, \"SN\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(8, \"\\n                \");\n    i0.ɵɵelementStart(9, \"th\", 17);\n    i0.ɵɵtext(10, \"Case ID\");\n    i0.ɵɵelement(11, \"p-sortIcon\", 18);\n    i0.ɵɵtext(12, \"\\n                    \");\n    i0.ɵɵelement(13, \"p-columnFilter\", 19);\n    i0.ɵɵtext(14, \"\\n                \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(15, \"\\n                \");\n    i0.ɵɵelementStart(16, \"th\", 20);\n    i0.ɵɵtext(17, \"Name\");\n    i0.ɵɵelement(18, \"p-sortIcon\", 21);\n    i0.ɵɵtext(19, \"\\n                    \");\n    i0.ɵɵelement(20, \"p-columnFilter\", 22);\n    i0.ɵɵtext(21, \"\\n                \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(22, \"\\n                \");\n    i0.ɵɵelementStart(23, \"th\", 23);\n    i0.ɵɵtext(24, \"Due Date\");\n    i0.ɵɵelement(25, \"p-sortIcon\", 24);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(26, \"\\n                \");\n    i0.ɵɵelementStart(27, \"th\", 25);\n    i0.ɵɵtext(28, \"Trg Start\");\n    i0.ɵɵelement(29, \"p-sortIcon\", 26);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(30, \"\\n                \");\n    i0.ɵɵelementStart(31, \"th\", 27);\n    i0.ɵɵtext(32, \"Company\");\n    i0.ɵɵelement(33, \"p-sortIcon\", 28);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(34, \"\\n                \");\n    i0.ɵɵelementStart(35, \"th\", 29);\n    i0.ɵɵtext(36, \"Occupation\");\n    i0.ɵɵelement(37, \"p-sortIcon\", 30);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(38, \"\\n                \");\n    i0.ɵɵelementStart(39, \"th\", 31);\n    i0.ɵɵtext(40, \"Reason\");\n    i0.ɵɵelement(41, \"p-sortIcon\", 32);\n    i0.ɵɵtext(42, \"\\n                    \");\n    i0.ɵɵelementStart(43, \"p-columnFilter\", 33);\n    i0.ɵɵtext(44, \"\\n                        \");\n    i0.ɵɵtemplate(45, ClaimVerifierInboxComponent_ng_template_6_ng_template_45_Template, 3, 2, \"ng-template\", 34);\n    i0.ɵɵtext(46, \"\\n                    \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(47, \"\\n                \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(48, \"\\n                \");\n    i0.ɵɵtemplate(49, ClaimVerifierInboxComponent_ng_template_6_th_49_Template, 3, 0, \"th\", 35);\n    i0.ɵɵtext(50, \"\\n                \");\n    i0.ɵɵtemplate(51, ClaimVerifierInboxComponent_ng_template_6_th_51_Template, 3, 0, \"th\", 36);\n    i0.ɵɵtext(52, \"\\n\\n                \");\n    i0.ɵɵelementStart(53, \"th\", 37);\n    i0.ɵɵtext(54, \"Owner\");\n    i0.ɵɵelement(55, \"p-sortIcon\", 38);\n    i0.ɵɵtext(56, \"\\n                    \");\n    i0.ɵɵelementStart(57, \"p-columnFilter\", 39);\n    i0.ɵɵtext(58, \"\\n                        \");\n    i0.ɵɵtemplate(59, ClaimVerifierInboxComponent_ng_template_6_ng_template_59_Template, 3, 2, \"ng-template\", 34);\n    i0.ɵɵtext(60, \"\\n                    \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(61, \"\\n                \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(62, \"\\n                \");\n    i0.ɵɵelementStart(63, \"th\", 40);\n    i0.ɵɵtext(64, \"Receipt Date\");\n    i0.ɵɵelement(65, \"p-sortIcon\", 41);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(66, \"\\n\\n            \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(67, \"\\n        \");\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(49);\n    i0.ɵɵproperty(\"ngIf\", ctx_r2.captionGroup.controls[\"ecseFilter\"].value.label == \"EC\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", ctx_r2.captionGroup.controls[\"ecseFilter\"].value.label == \"SE\");\n  }\n}\nfunction ClaimVerifierInboxComponent_ng_template_8_td_38_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"td\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const claimRecord_r23 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(claimRecord_r23.df);\n  }\n}\nfunction ClaimVerifierInboxComponent_ng_template_8_td_40_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"td\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const claimRecord_r23 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(claimRecord_r23.optionDesc);\n  }\n}\nfunction ClaimVerifierInboxComponent_ng_template_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtext(0, \"\\n\\n        \");\n    i0.ɵɵelementStart(1, \"tr\", 48);\n    i0.ɵɵtext(2, \"\\n            \");\n    i0.ɵɵelementStart(3, \"td\");\n    i0.ɵɵelement(4, \"p-tableCheckbox\", 49);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(5, \"\\n            \");\n    i0.ɵɵelementStart(6, \"td\");\n    i0.ɵɵtext(7);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(8, \"\\n            \");\n    i0.ɵɵelementStart(9, \"td\")(10, \"a\", 50);\n    i0.ɵɵtext(11);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵtext(12, \"\\n            \");\n    i0.ɵɵelementStart(13, \"td\");\n    i0.ɵɵtext(14);\n    i0.ɵɵelement(15, \"br\");\n    i0.ɵɵtext(16);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(17, \"\\n            \");\n    i0.ɵɵelementStart(18, \"td\", 51);\n    i0.ɵɵtext(19);\n    i0.ɵɵpipe(20, \"defaultString\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(21, \"\\n            \");\n    i0.ɵɵelementStart(22, \"td\");\n    i0.ɵɵtext(23);\n    i0.ɵɵpipe(24, \"defaultString\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(25, \"\\n            \");\n    i0.ɵɵelementStart(26, \"td\");\n    i0.ɵɵtext(27);\n    i0.ɵɵpipe(28, \"truncateName\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(29, \"\\n            \");\n    i0.ɵɵelementStart(30, \"td\");\n    i0.ɵɵtext(31);\n    i0.ɵɵpipe(32, \"defaultString\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(33, \"\\n            \");\n    i0.ɵɵelementStart(34, \"td\");\n    i0.ɵɵtext(35);\n    i0.ɵɵpipe(36, \"defaultString\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(37, \"\\n            \");\n    i0.ɵɵtemplate(38, ClaimVerifierInboxComponent_ng_template_8_td_38_Template, 2, 1, \"td\", 52);\n    i0.ɵɵtext(39, \"\\n            \");\n    i0.ɵɵtemplate(40, ClaimVerifierInboxComponent_ng_template_8_td_40_Template, 2, 1, \"td\", 52);\n    i0.ɵɵtext(41, \"\\n            \");\n    i0.ɵɵelementStart(42, \"td\");\n    i0.ɵɵtext(43);\n    i0.ɵɵpipe(44, \"defaultString\");\n    i0.ɵɵpipe(45, \"uppercase\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(46, \"\\n            \");\n    i0.ɵɵelementStart(47, \"td\");\n    i0.ɵɵtext(48);\n    i0.ɵɵpipe(49, \"defaultString\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(50, \"\\n        \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(51, \"\\n    \");\n  }\n  if (rf & 2) {\n    const claimRecord_r23 = ctx.$implicit;\n    const rowIndex_r24 = ctx.rowIndex;\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"pSelectableRow\", claimRecord_r23);\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"value\", claimRecord_r23);\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(rowIndex_r24 + 1);\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate(claimRecord_r23.caseId);\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate1(\"\", claimRecord_r23.nric, \" \");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", claimRecord_r23.name, \"\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngClass\", ctx_r3.dueSoon(claimRecord_r23.dueDate) ? \"alert-text\" : null);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(20, 16, ctx_r3.dateUtilsService.convertUnixToDateString(claimRecord_r23.dueDate, ctx_r3.dateFormat)));\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(24, 18, ctx_r3.dateUtilsService.convertUnixToDateString(claimRecord_r23.start, ctx_r3.dateFormat)));\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(28, 20, claimRecord_r23.coy));\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(32, 22, claimRecord_r23.occupation));\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(36, 24, claimRecord_r23.reason));\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"ngIf\", ctx_r3.captionGroup.controls[\"ecseFilter\"].value.label == \"EC\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", ctx_r3.captionGroup.controls[\"ecseFilter\"].value.label == \"SE\");\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(44, 26, i0.ɵɵpipeBind1(45, 28, claimRecord_r23.ownerInit)));\n    i0.ɵɵadvance(5);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(49, 30, ctx_r3.dateUtilsService.convertUnixToDateString(claimRecord_r23.receiptDate, ctx_r3.dateFormat)));\n  }\n}\nfunction ClaimVerifierInboxComponent_ng_template_10_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtext(0, \"\\n        \");\n    i0.ɵɵelementStart(1, \"tr\");\n    i0.ɵɵtext(2, \"\\n            \");\n    i0.ɵɵelementStart(3, \"td\", 53);\n    i0.ɵɵtext(4, \"No records found.\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(5, \"\\n        \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(6, \"\\n    \");\n  }\n}\nconst _c3 = function () {\n  return [10, 15, 20, 50];\n};\nclass ClaimVerifierInboxComponent {\n  constructor(workloadService, primengConfig, messageService, nspConfirmService, account, dateUtilsService, cd, dialogService, toastService, formBuilder, ns2Http, codeService, exportUtilsService) {\n    this.workloadService = workloadService;\n    this.primengConfig = primengConfig;\n    this.messageService = messageService;\n    this.nspConfirmService = nspConfirmService;\n    this.account = account;\n    this.dateUtilsService = dateUtilsService;\n    this.cd = cd;\n    this.dialogService = dialogService;\n    this.toastService = toastService;\n    this.formBuilder = formBuilder;\n    this.ns2Http = ns2Http;\n    this.codeService = codeService;\n    this.exportUtilsService = exportUtilsService;\n    this.duplicateNricPlaceHolder = \"0 Duplicates\";\n    this.selectAll = false;\n    this.totalRecords = 0;\n    this.selectedRows = [];\n    this.claimsDtoList = [];\n    this.autoResize = true;\n    this.ownerMap = [];\n    this.reasonList = [];\n    this.pageData = {\n      currentPage: 0\n    };\n    this.pageSize = 10;\n    this.dateFormat = \"DD-MM-YYYY\";\n    this.quickFilterclaimCount = {\n      claimsPendRecompNo: 0,\n      claimsDueToDate: 0,\n      claimsOverDue: 0,\n      claimsTotal: 0\n    };\n    this.account.identity().subscribe(accountToCopy => {\n      this.currentAccount = this.copyAccount(accountToCopy);\n    });\n    this.pagingSetting = {\n      rowsPerPage: 10\n    };\n    this.ecseClaimFilterOptions = [{\n      codeId: 'UNASSIGNED_EC',\n      codeDesc: 'Unassigned EC',\n      claimFilterStr: \"&claimType=E&owner=null\",\n      label: 'EC',\n      codeType: 'item_ec_class'\n    }, {\n      codeId: 'UNASSIGNED_SE',\n      codeDesc: 'Unassigned SE',\n      claimFilterStr: \"&claimType=S&owner=null\",\n      label: 'SE',\n      codeType: 'item_se_class'\n    }, {\n      codeId: 'ALL_EC',\n      codeDesc: 'All EC',\n      claimFilterStr: \"&claimType=E\",\n      label: 'EC',\n      codeType: 'item_ec_class'\n    }, {\n      codeId: 'ALL_SE',\n      codeDesc: 'All SE',\n      claimFilterStr: \"&claimType=S\",\n      label: 'SE',\n      codeType: 'item_se_class'\n    }\n    // to be changed to retrieve from code table\n    ];\n  }\n\n  ngOnInit() {\n    this.primengConfig.ripple = true;\n    this.selectedECSEFilter = this.ecseClaimFilterOptions[0];\n    console.log(\"se filter\", this.selectedECSEFilter);\n    this.captionGroup = this.formBuilder.group({\n      selectedDupNric: new forms_1.FormControl(),\n      ecseFilter: new forms_1.FormControl()\n    });\n    this.selectedECSEFilter = this.ecseClaimFilterOptions[0];\n    this.captionGroup.controls['ecseFilter'].setValue(this.ecseClaimFilterOptions[0]);\n    this.setRowsPerPage();\n  }\n  onChangeECFilter(event) {\n    this.selectedECSEFilter = this.captionGroup.get('ecseFilter')?.value;\n    console.log(\"changefilter\", event);\n    console.log(\"selected is now \", this.captionGroup.get('ecseFilter')?.value);\n    this.getClaimsVerifierData(this.lastTableLazyLoadEvent);\n  }\n  setRowsPerPage() {\n    if ('UNASSIGNED_EC' === this.selectedECSEFilter.codeId || 'UNASSIGNED_SE' === this.selectedECSEFilter.codeId) {\n      this.pagingSetting.rowsPerPage = 50;\n    } else {\n      this.pagingSetting.rowsPerPage = 10;\n    }\n  }\n  setColumns() {\n    const cols = [{\n      field: 'caseId',\n      header: 'Case ID',\n      index: 1\n    }, {\n      field: 'name',\n      header: 'Name',\n      index: 2\n    }, {\n      field: 'dueDate',\n      header: 'Due Date',\n      index: 3\n    }, {\n      field: 'trgStartDte',\n      header: 'Trg Start',\n      index: 4\n    }, {\n      field: 'company',\n      header: 'Company',\n      index: 5\n    }, {\n      field: 'occupation',\n      header: 'Occupation',\n      index: 6\n    }, {\n      field: 'reason',\n      header: 'Reason',\n      index: 7\n    }, {\n      field: 'owner',\n      header: 'Owner',\n      index: 9\n    }, {\n      field: 'receiptDte',\n      header: 'Receipt Date',\n      index: 10\n    }];\n    if (this.selectedECSEFilter.label === 'EC') {\n      cols.push({\n        field: 'DF',\n        header: 'DF',\n        index: 8\n      });\n    } else if (this.selectedECSEFilter.label === 'SE') {\n      cols.push({\n        field: 'option',\n        header: 'Option',\n        index: 8\n      });\n    }\n    return cols.sort((a, b) => a.index - b.index);\n  }\n  getClaimsVerifierData(event) {\n    this.loading = true;\n    this.lastTableLazyLoadEvent = event;\n    setTimeout(() => {\n      const options = this.ns2Http.convertLazyEvent(event, this.pageData, this.pageSize);\n      if (this.selectedECSEFilter) {\n        console.log(\"this is nowsss\", this.captionGroup.get('ecseFilter')?.value);\n        options.params = this.ns2Http.appendHttpParam(this.selectedECSEFilter.claimFilterStr, options.params);\n        this.loadCodes(this.captionGroup.get('ecseFilter')?.value.codeType);\n      }\n      this.workloadService.getClaimsVerifierData(options).subscribe(resp => {\n        if (resp.body.data.dtoList) {\n          this.claimsDtoList = resp.body.data.dtoList;\n        }\n        if (resp.body.data.ownerMap) {\n          this.setOwnerMap(resp.body.data.ownerMap);\n        }\n        if (resp.body.data.quickFilterClaimCount) {\n          this.quickFilterclaimCount = {\n            claimsPendRecompNo: resp.body.data.quickFilterClaimCount.claimsPendRecompNo,\n            claimsDueToDate: resp.body.data.quickFilterClaimCount.claimsDueToDate,\n            claimsOverDue: resp.body.data.quickFilterClaimCount.claimsOverDue,\n            claimsTotal: resp.body.data.quickFilterClaimCount.total\n          };\n        }\n        this.totalRecords = resp.body.data.total_no_of_elems;\n        if (resp.body.data.duplicateNrics) {\n          this.nricWithMoreThanOneClaimOptions = resp.body.data.duplicateNrics;\n        }\n        this.duplicateNricPlaceHolder = `${this.nricWithMoreThanOneClaimOptions.length} Duplicates`;\n        this.dueCount = this.claimsDtoList.filter(y => this.dateUtilsService.convertUnixToMoment(y.dueDate).isBefore((0, moment_1.default)().endOf('day')) && y.ownerId == null && y.ownerInit == null).length;\n        this.loading = false;\n      });\n    }, 0);\n    return this.claimsDtoList;\n  }\n  loadCodes(codeType) {\n    this.codeService.gets(codeType).subscribe(codes => {\n      this.reasonList = codes[0].map(x => {\n        return x.label['en-US'];\n      });\n    });\n  }\n  setOwnerMap(ownerMap) {\n    this.ownerMap = [];\n    Object.entries(ownerMap).forEach(x => {\n      const rslt = x[1];\n      let displayName = rslt[\"displayName\"];\n      if (this.currentAccount.subjectId === rslt[\"ownerId\"]) {\n        displayName = displayName.concat(\" (Me)\");\n      }\n      this.ownerMap.push({\n        key: x[0],\n        value: displayName\n      });\n    });\n  }\n  applyFilter(column, filterValue) {\n    this.table.filter(filterValue, column, 'equals');\n    this.pageData.currentPage = 0;\n    this.pageSize = 10;\n  }\n  onSelectAllChange(event) {\n    const checked = event.checked;\n    if (checked) {\n      this.selectedRows = this.claimsDtoList;\n      this.selectAll = true;\n    } else {\n      this.selectedRows = [];\n      this.selectAll = false;\n    }\n  }\n  copyAccount(account) {\n    return {\n      email: account.email,\n      firstName: account.firstName,\n      lastName: account.lastName,\n      login: account.username,\n      authorities: account.authorities,\n      groups: account.groups,\n      subjectId: account.subjectId\n    };\n  }\n  dueSoon(dueDate) {\n    const differ = this.dateUtilsService.convertUnixToMoment(dueDate).startOf('day').diff((0, moment_1.default)().startOf('day'), 'days');\n    return differ <= 2;\n  }\n  onAssignClaim() {\n    console.log(\"on assign claims\");\n    if (this.selectedRows.length > 0) {\n      this.assignClaimManual();\n    } else {\n      this.assignClaimAuto();\n    }\n  }\n  assignClaimManual() {\n    console.log(\"assigning manual\");\n    const ref = this.dialogService.open(assign_claims_component_1.AssignClaimsComponent, {\n      header: \"Assign Claims\",\n      width: '50%',\n      data: {},\n      contentStyle: {\n        \"padding\": \"2em\",\n        'max-height': '78vh',\n        overflow: 'auto'\n      },\n      baseZIndex: 10000\n    });\n    ref.onClose.subscribe(selectedVerifier => {\n      if (selectedVerifier) {\n        this.selectedVerifier = selectedVerifier;\n        const req = {\n          subjectId: this.selectedVerifier,\n          claimInboxIdList: this.selectedRows.map(x => String(x.id))\n        };\n        this.workloadService.assignClaimManual(req).subscribe(resp => {\n          if (resp) {\n            if (resp.status === 200) {\n              this.toastService.success(resp.body.success_message);\n              this.resetDataTable();\n            }\n          }\n        }, error => {\n          console.log(\"error is\" + String(error?.error?.error_desc));\n          this.toastService.error(String(error?.error?.error_desc));\n        });\n      }\n    });\n  }\n  assignClaimAuto() {\n    console.log(\"assigning auto\");\n    const claimType = this.captionGroup.controls['ecseFilter'].value.label;\n    const ref = this.dialogService.open(assign_claims_auto_component_1.AssignClaimsAutoComponent, {\n      header: \"Assign \" + String(claimType) + \" Claims\",\n      width: '50%',\n      data: {\n        claimType\n      },\n      contentStyle: {\n        \"padding\": \"2em\",\n        'max-height': '78vh',\n        overflow: 'auto'\n      },\n      autoZIndex: false,\n      baseZIndex: 999\n    });\n    ref.onClose.subscribe(assignClaimsList => {\n      if (assignClaimsList) {\n        console.log('mina2', assignClaimsList);\n        this.workloadService.assignClaimsAuto(assignClaimsList).subscribe(resp => {\n          if (resp) {\n            if (resp.status === 200) {\n              this.toastService.success(resp.body.success_message);\n              this.resetDataTable();\n            }\n          }\n        }, error => {\n          console.log(\"error is\" + String(error?.error?.error_desc));\n          this.toastService.error(String(error?.error?.error_desc));\n        });\n      }\n    });\n  }\n  enableAssignClaimBtn() {\n    let dueSelectedCount;\n    let nonDueSelectedCount;\n    if (this.selectedRows.length > 0) {\n      for (const x of this.selectedRows) {\n        if (x.ownerId != null || x.ownerInit != null) {\n          return false;\n        }\n      }\n      dueSelectedCount = this.selectedRows.filter(x => this.dateUtilsService.convertUnixToMoment(x.dueDate).isBefore((0, moment_1.default)().endOf('day'))).length;\n      nonDueSelectedCount = this.selectedRows.filter(x => this.dateUtilsService.convertUnixToMoment(x.dueDate).isAfter((0, moment_1.default)().endOf('day'))).length;\n      if (dueSelectedCount < this.dueCount && nonDueSelectedCount > 0) {\n        return false;\n      }\n    }\n    return true;\n  }\n  exportCSV(dataTable) {\n    let params = new http_1.HttpParams();\n    params = this.ns2Http.appendHttpParam(this.selectedECSEFilter.claimFilterStr, params);\n    this.workloadService.getClaimRecordsData({\n      params\n    }).subscribe(resp => {\n      if (resp.body.data) {\n        const columns = [{\n          field: 'caseId',\n          header: 'Case ID',\n          index: 1\n        }, {\n          field: 'claimantNRIC',\n          header: 'NRIC',\n          index: 2\n        }, {\n          field: 'claimantName',\n          header: 'Name',\n          index: 3\n        }, {\n          field: 'dueDate',\n          header: 'Due Date',\n          index: 4\n        }, {\n          field: 'dateTrgStart',\n          header: 'Trg Start',\n          index: 5\n        }, {\n          field: 'company',\n          header: 'Company',\n          index: 6\n        }, {\n          field: 'occupation',\n          header: 'Occupation',\n          index: 7\n        }, {\n          field: 'reason',\n          header: 'Reason',\n          index: 8\n        }, {\n          field: 'ownerInit',\n          header: 'Owner',\n          index: 10\n        }, {\n          field: 'receiptDate',\n          header: 'Receipt Date',\n          index: 11\n        }];\n        if (this.captionGroup.controls['ecseFilter'].value.label === 'EC') {\n          columns.push({\n            field: 'directorFeeInd',\n            header: 'DF',\n            index: 9\n          });\n        } else if (this.captionGroup.controls['ecseFilter'].value.label === 'SE') {\n          columns.push({\n            field: 'claimOptDesc',\n            header: 'Option',\n            index: 9\n          });\n        }\n        columns.sort((a, b) => a.index - b.index);\n        const dtoList = [];\n        resp.body.data.dtoList.forEach(data => {\n          let dto = {};\n          if (this.captionGroup.controls['ecseFilter'].value.label === 'EC') {\n            dto = {\n              caseId: data.caseId,\n              claimantNRIC: data.nric,\n              claimantName: data.name,\n              dueDate: this.dateUtilsService.convertUnixToDateString(data.dueDate, this.dateFormat),\n              dateTrgStart: this.dateUtilsService.convertUnixToDateString(data.start, this.dateFormat),\n              company: data.coy,\n              occupation: data.occupation,\n              reason: data.reason,\n              directorFeeInd: data.df,\n              ownerInit: data.ownerInit,\n              receiptDate: this.dateUtilsService.convertUnixToDateString(data.receiptDate, this.dateFormat)\n            };\n          } else if (this.captionGroup.controls['ecseFilter'].value.label === 'SE') {\n            dto = {\n              caseId: data.caseId,\n              claimantNRIC: data.nric,\n              claimantName: data.name,\n              dueDate: this.dateUtilsService.convertUnixToDateString(data.dueDate, this.dateFormat),\n              dateTrgStart: this.dateUtilsService.convertUnixToDateString(data.start, this.dateFormat),\n              company: data.coy,\n              occupation: data.occupation,\n              reason: data.reason,\n              claimOptDesc: data.optionDesc,\n              ownerInit: data.ownerInit,\n              receiptDate: this.dateUtilsService.convertUnixToDateString(data.receiptDate, this.dateFormat)\n            };\n          }\n          dtoList.push(dto);\n        });\n        this.exportUtilsService.exportCSV(dataTable, dtoList, resp.body.data.total_no_of_elems, columns, \"claim_verifier_\".concat((0, common_1.formatDate)(new Date(), \"dd-MM-YYYY\", 'en-US')));\n        this.loading = false;\n      }\n    });\n  }\n  resetDataTable() {\n    this.selectAll = false;\n    this.selectedRows = [];\n    this.table.filters = {};\n    this.pageData.currentPage = 0;\n    this.pageSize = 10;\n    this.table.reset();\n  }\n}\nexports.ClaimVerifierInboxComponent = ClaimVerifierInboxComponent;\nClaimVerifierInboxComponent.ɵfac = function ClaimVerifierInboxComponent_Factory(t) {\n  return new (t || ClaimVerifierInboxComponent)(i0.ɵɵdirectiveInject(i1.WorkloadInboxService), i0.ɵɵdirectiveInject(i2.PrimeNGConfig), i0.ɵɵdirectiveInject(i2.MessageService), i0.ɵɵdirectiveInject(i3.NspConfirmationService), i0.ɵɵdirectiveInject(i4.AccountService), i0.ɵɵdirectiveInject(i5.DateUtilsService), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i6.DialogService), i0.ɵɵdirectiveInject(i7.CustomToastService), i0.ɵɵdirectiveInject(i8.FormBuilder), i0.ɵɵdirectiveInject(i9.Ns2HttpService), i0.ɵɵdirectiveInject(i10.IcCodeService), i0.ɵɵdirectiveInject(i11.ExportUtilsService));\n};\nClaimVerifierInboxComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: ClaimVerifierInboxComponent,\n  selectors: [[\"n2-claim-verifier-inbox\"]],\n  viewQuery: function ClaimVerifierInboxComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c0, 5);\n    }\n    if (rf & 2) {\n      let _t;\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.table = _t.first);\n    }\n  },\n  decls: 14,\n  vars: 12,\n  consts: [[\"dataKey\", \"id\", \"styleClass\", \"p-datatable-gridlines p-datatable-striped\", \"currentPageReportTemplate\", \"Showing {first} to {last} of {totalRecords} entries\", \"responsiveLayout\", \"scroll\", 3, \"value\", \"paginator\", \"rows\", \"lazy\", \"showCurrentPageReport\", \"selectAll\", \"totalRecords\", \"selection\", \"filterDelay\", \"loading\", \"rowsPerPageOptions\", \"selectAllChange\", \"onLazyLoad\", \"selectionChange\"], [\"dataTable\", \"\"], [\"pTemplate\", \"caption\"], [\"pTemplate\", \"header\"], [\"pTemplate\", \"body\"], [\"pTemplate\", \"emptymessage\"], [3, \"formGroup\"], [1, \"grid\"], [1, \"col-9\", \"nsp-align-left\", \"flex\", \"justify-content-start\", \"align-items-center\"], [\"icon\", \"pi pi-file-o\", 3, \"click\"], [\"formControlName\", \"ecseFilter\", \"optionLabel\", \"codeDesc\", 3, \"options\", \"onChange\"], [\"formControlName\", \"selectedDupNric\", 3, \"options\", \"placeholder\", \"showClear\", \"onChange\"], [2, \"color\", \"rgb(175, 3, 3)\"], [1, \"col-3\", \"nsp-align-right\"], [\"pButton\", \"\", \"label\", \"Assign Claims\", 3, \"disabled\", \"click\"], [\"scope\", \"col\", 2, \"width\", \"3%\"], [\"scope\", \"col\"], [\"scope\", \"col\", \"pSortableColumn\", \"caseId\"], [\"field\", \"caseId\"], [\"type\", \"text\", \"field\", \"caseId\", \"display\", \"menu\", \"matchMode\", \"contains\"], [\"scope\", \"col\", \"pSortableColumn\", \"claimantNRIC\"], [\"field\", \"claimantNRIC\"], [\"type\", \"text\", \"field\", \"claimantNRIC\", \"display\", \"menu\", \"matchMode\", \"contains\"], [\"scope\", \"col\", \"pSortableColumn\", \"dueDate\"], [\"field\", \"dueDate\"], [\"scope\", \"col\", \"pSortableColumn\", \"dateTrgStart\"], [\"field\", \"dateTrgStart\"], [\"scope\", \"col\", \"pSortableColumn\", \"company\"], [\"field\", \"company\"], [\"scope\", \"col\", \"pSortableColumn\", \"occupation\"], [\"field\", \"occupation\"], [\"scope\", \"col\", \"pSortableColumn\", \"reason\"], [\"field\", \"reason\"], [\"type\", \"text\", \"field\", \"reason\", \"display\", \"menu\", \"matchMode\", \"contains\"], [\"pTemplate\", \"filter\"], [\"scope\", \"col\", \"pSortableColumn\", \"directorFeeInd\", 4, \"ngIf\"], [\"scope\", \"col\", \"pSortableColumn\", \"claimOptDesc\", 4, \"ngIf\"], [\"scope\", \"col\", \"pSortableColumn\", \"ownerInit\"], [\"field\", \"ownerInit\"], [\"type\", \"text\", \"field\", \"ownerInit\", \"display\", \"menu\", \"matchMode\", \"contains\"], [\"scope\", \"col\", \"pSortableColumn\", \"receiptDate\"], [\"field\", \"receiptDate\"], [\"placeholder\", \"Reason\", 3, \"ngModel\", \"options\", \"onChange\"], [\"scope\", \"col\", \"pSortableColumn\", \"directorFeeInd\"], [\"field\", \"directorFeeInd\"], [\"scope\", \"col\", \"pSortableColumn\", \"claimOptDesc\"], [\"field\", \"claimOptDesc\"], [\"optionLabel\", \"value\", \"optionValue\", \"key\", \"placeholder\", \"Owner\", 3, \"ngModel\", \"options\", \"onChange\"], [3, \"pSelectableRow\"], [3, \"value\"], [\"href\", \"#\"], [3, \"ngClass\"], [4, \"ngIf\"], [\"colspan\", \"12\"]],\n  template: function ClaimVerifierInboxComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtext(0, \"\\n\");\n      i0.ɵɵelementStart(1, \"p-table\", 0, 1);\n      i0.ɵɵlistener(\"selectAllChange\", function ClaimVerifierInboxComponent_Template_p_table_selectAllChange_1_listener($event) {\n        return ctx.onSelectAllChange($event);\n      })(\"onLazyLoad\", function ClaimVerifierInboxComponent_Template_p_table_onLazyLoad_1_listener($event) {\n        return ctx.getClaimsVerifierData($event);\n      })(\"selectionChange\", function ClaimVerifierInboxComponent_Template_p_table_selectionChange_1_listener($event) {\n        return ctx.selectedRows = $event;\n      });\n      i0.ɵɵtext(3, \"\\n            \");\n      i0.ɵɵtemplate(4, ClaimVerifierInboxComponent_ng_template_4_Template, 28, 23, \"ng-template\", 2);\n      i0.ɵɵtext(5, \"\\n\\n        \");\n      i0.ɵɵtemplate(6, ClaimVerifierInboxComponent_ng_template_6_Template, 68, 2, \"ng-template\", 3);\n      i0.ɵɵtext(7, \"\\n    \");\n      i0.ɵɵtemplate(8, ClaimVerifierInboxComponent_ng_template_8_Template, 52, 32, \"ng-template\", 4);\n      i0.ɵɵtext(9, \"\\n    \");\n      i0.ɵɵtemplate(10, ClaimVerifierInboxComponent_ng_template_10_Template, 7, 0, \"ng-template\", 5);\n      i0.ɵɵtext(11, \"\\n\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(12, \"\\n\");\n      i0.ɵɵtext(13, \"\\n\\n\");\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"value\", ctx.claimsDtoList)(\"paginator\", true)(\"rows\", ctx.pagingSetting.rowsPerPage)(\"lazy\", true)(\"showCurrentPageReport\", true)(\"selectAll\", ctx.selectAll)(\"totalRecords\", ctx.totalRecords)(\"selection\", ctx.selectedRows)(\"filterDelay\", 0)(\"loading\", ctx.loading)(\"rowsPerPageOptions\", i0.ɵɵpureFunction0(11, _c3));\n    }\n  },\n  dependencies: [i8.ɵNgNoValidate, i8.NgControlStatus, i8.NgControlStatusGroup, i8.NgModel, i12.NgClass, i12.NgIf, i8.FormGroupDirective, i8.FormControlName, i2.PrimeTemplate, i13.ButtonDirective, i13.Button, i14.Table, i14.SortableColumn, i14.SelectableRow, i14.SortIcon, i14.TableCheckbox, i14.TableHeaderCheckbox, i14.ColumnFilter, i15.Dropdown, i12.UpperCasePipe, i16.DefaultStringPipe, i17.TruncateNamePipe],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJjbGFpbS12ZXJpZmllci1pbmJveC5jb21wb25lbnQuc2NzcyJ9 */\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9tYWluL3dlYmFwcC9hcHAvd29ya2xvYWQvY2xhaW0tYXBwcm92ZXIvY2xhaW0tdmVyaWZpZXItaW5ib3gvY2xhaW0tdmVyaWZpZXItaW5ib3guY29tcG9uZW50LnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUNBLG9MQUFvTCIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"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","names":["i0","ctx_r8","ClaimVerifierInboxComponent","constructor","workloadService","primengConfig","messageService","nspConfirmService","account","dateUtilsService","cd","dialogService","toastService","formBuilder","ns2Http","codeService","exportUtilsService","currentPage","claimsPendRecompNo","claimsDueToDate","claimsOverDue","claimsTotal","identity","subscribe","accountToCopy","currentAccount","copyAccount","pagingSetting","rowsPerPage","ecseClaimFilterOptions","codeId","codeDesc","claimFilterStr","label","codeType","ngOnInit","ripple","selectedECSEFilter","console","log","captionGroup","group","selectedDupNric","forms_1","ecseFilter","controls","setValue","setRowsPerPage","onChangeECFilter","event","get","value","getClaimsVerifierData","lastTableLazyLoadEvent","setColumns","cols","field","header","index","push","sort","a","b","loading","setTimeout","options","convertLazyEvent","pageData","pageSize","params","appendHttpParam","loadCodes","resp","body","data","dtoList","claimsDtoList","ownerMap","setOwnerMap","quickFilterClaimCount","quickFilterclaimCount","total","totalRecords","total_no_of_elems","duplicateNrics","nricWithMoreThanOneClaimOptions","duplicateNricPlaceHolder","length","dueCount","filter","y","convertUnixToMoment","dueDate","isBefore","endOf","ownerId","ownerInit","gets","codes","reasonList","map","x","Object","entries","forEach","rslt","displayName","subjectId","concat","key","applyFilter","column","filterValue","table","onSelectAllChange","checked","selectedRows","selectAll","email","firstName","lastName","login","username","authorities","groups","dueSoon","differ","startOf","diff","onAssignClaim","assignClaimManual","assignClaimAuto","ref","open","assign_claims_component_1","width","contentStyle","overflow","baseZIndex","onClose","selectedVerifier","req","claimInboxIdList","String","id","status","success","success_message","resetDataTable","error","error_desc","claimType","assign_claims_auto_component_1","autoZIndex","assignClaimsList","assignClaimsAuto","enableAssignClaimBtn","dueSelectedCount","nonDueSelectedCount","isAfter","exportCSV","dataTable","http_1","getClaimRecordsData","columns","dto","caseId","claimantNRIC","nric","claimantName","name","convertUnixToDateString","dateFormat","dateTrgStart","start","company","coy","occupation","reason","directorFeeInd","df","receiptDate","claimOptDesc","optionDesc","Date","filters","reset","exports","selectors","viewQuery","ctx"],"sourceRoot":"","sources":["C:\\Users\\D1347074\\Desktop\\projects 2\\nspayiiapp\\src\\main\\webapp\\app\\workload\\claim-approver\\claim-verifier-inbox\\claim-verifier-inbox.component.ts","C:\\Users\\D1347074\\Desktop\\projects 2\\nspayiiapp\\src\\main\\webapp\\app\\workload\\claim-approver\\claim-verifier-inbox\\claim-verifier-inbox.component.html"],"sourcesContent":["import {ChangeDetectorRef, Component, OnInit, ViewChild} from '@angular/core';\r\nimport {NspConfirmationService} from 'app/shared/confirm/nsp-confirm.service';\r\nimport {WorkloadInboxService} from 'app/workload/service/workload-inbox.service';\r\nimport {AccountService} from 'app/core/auth/account.service';\r\n\r\nimport {LazyLoadEvent, MessageService, PrimeNGConfig} from 'primeng/api';\r\nimport {DateUtilsService} from 'app/core/util/date-utils.service';\r\nimport {Table} from 'primeng/table';\r\nimport {DialogService} from 'primeng/dynamicdialog';\r\nimport {AssignClaimsComponent} from './assign-claims/assign-claims.component';\r\nimport moment from 'moment';\r\nimport {AssignClaimsAutoComponent} from './assign-claims-auto/assign-claims-auto.component';\r\nimport {FormBuilder, FormControl, FormGroup} from '@angular/forms';\r\nimport {CustomToastService} from 'app/layouts/service/customtoast.service';\r\nimport {Ns2HttpService} from 'app/shared/service/ns2-http.service';\r\nimport { IcCodeService } from 'app/ng-connect';\r\nimport { formatDate } from \"@angular/common\";\r\nimport { ExportUtilsService } from 'app/core/util/export-utils.service';\r\nimport { HttpParams } from '@angular/common/http';\r\n\r\n@Component({\r\n  selector: 'n2-claim-verifier-inbox',\r\n  templateUrl: './claim-verifier-inbox.component.html',\r\n  styleUrls: ['./claim-verifier-inbox.component.scss'],\r\n})\r\nexport class ClaimVerifierInboxComponent implements OnInit {\r\n\r\n\r\n  public ecseClaimFilterOptions!: any;\r\n  public selectedECSEFilter!: any;\r\n  currentAccount: any;\r\n  captionGroup: FormGroup;\r\n\r\n  pagingSetting: any;\r\n  lastTableLazyLoadEvent: LazyLoadEvent;\r\n\r\n  public testNRIC!: string;\r\n  public nricWithMoreThanOneClaimOptions!: string[];\r\n  duplicateNricPlaceHolder = \"0 Duplicates\";\r\n\r\n  selectAll = false;\r\n  loading!: boolean;\r\n  totalRecords = 0;\r\n  public selectedRows: any[] = [];\r\n  public claimsDtoList: any[] = [];\r\n  autoResize = true;\r\n  dueCount: any;\r\n  selectedOwner: any;\r\n  ownerMap: any[] = [];\r\n  selectedReason: string;\r\n  reasonList: any[] = [];\r\n\r\n  pageData: {currentPage: number} = {\r\n    currentPage: 0\r\n  }\r\n  pageSize = 10;\r\n\r\n\r\n\r\n\r\n  dateFormat = \"DD-MM-YYYY\";\r\n  quickFilterclaimCount: any = {\r\n    claimsPendRecompNo: 0,\r\n    claimsDueToDate: 0,\r\n    claimsOverDue: 0,\r\n    claimsTotal: 0\r\n  }\r\n\r\n  selectedVerifier!: any;\r\n\r\n  @ViewChild('dataTable') table!: Table;\r\n\r\n\r\n\r\n  constructor(\r\n    private workloadService: WorkloadInboxService,\r\n    private primengConfig: PrimeNGConfig,\r\n    private messageService: MessageService,\r\n    private nspConfirmService: NspConfirmationService,\r\n    private account: AccountService,\r\n    public dateUtilsService: DateUtilsService,\r\n    private cd: ChangeDetectorRef,\r\n    private dialogService: DialogService,\r\n    private toastService: CustomToastService,\r\n    private formBuilder: FormBuilder,\r\n    private ns2Http: Ns2HttpService,\r\n    private codeService: IcCodeService,\r\n    private exportUtilsService: ExportUtilsService,\r\n\r\n\r\n    ) {\r\n\r\n      this.account.identity().subscribe((accountToCopy:any) => {\r\n        this.currentAccount = this.copyAccount(accountToCopy);\r\n      });\r\n      this.pagingSetting = {\r\n        rowsPerPage: 10\r\n      }\r\n      this.ecseClaimFilterOptions = [\r\n        {codeId: 'UNASSIGNED_EC', codeDesc: 'Unassigned EC', claimFilterStr: \"&claimType=E&owner=null\", label: 'EC', codeType: 'item_ec_class'},\r\n        {codeId: 'UNASSIGNED_SE', codeDesc: 'Unassigned SE', claimFilterStr: \"&claimType=S&owner=null\", label: 'SE', codeType: 'item_se_class'},\r\n        {codeId: 'ALL_EC', codeDesc: 'All EC', claimFilterStr: \"&claimType=E\", label: 'EC', codeType: 'item_ec_class'},\r\n        {codeId: 'ALL_SE', codeDesc: 'All SE', claimFilterStr: \"&claimType=S\", label: 'SE', codeType: 'item_se_class'},\r\n\r\n        // to be changed to retrieve from code table\r\n      ];\r\n    }\r\n\r\n\r\n  ngOnInit(): void {\r\n    this.primengConfig.ripple = true;\r\n\r\n    this.selectedECSEFilter = this.ecseClaimFilterOptions[0];\r\n    console.log(\"se filter\", this.selectedECSEFilter);\r\n    this.captionGroup = this.formBuilder.group({\r\n      selectedDupNric: new FormControl(),\r\n      ecseFilter: new FormControl()\r\n\r\n    })\r\n    this.selectedECSEFilter = this.ecseClaimFilterOptions[0];\r\n     this.captionGroup.controls['ecseFilter'].setValue(this.ecseClaimFilterOptions[0]);\r\n    this.setRowsPerPage();\r\n\r\n\r\n  }\r\n\r\n  onChangeECFilter(event: any): void{\r\n    this.selectedECSEFilter = this.captionGroup.get('ecseFilter')?.value;\r\n    console.log(\"changefilter\", event);\r\n    console.log(\"selected is now \", this.captionGroup.get('ecseFilter')?.value);\r\n    this.getClaimsVerifierData(this.lastTableLazyLoadEvent);\r\n  }\r\n\r\n  setRowsPerPage(): void{\r\n    if('UNASSIGNED_EC' === this.selectedECSEFilter.codeId || 'UNASSIGNED_SE' === this.selectedECSEFilter.codeId ){\r\n      this.pagingSetting.rowsPerPage = 50;\r\n    }else {\r\n      this.pagingSetting.rowsPerPage = 10;\r\n    }\r\n  }\r\n\r\n\r\n\r\n  setColumns(): any {\r\n    const cols = [\r\n      { field: 'caseId', header: 'Case ID', index: 1 },\r\n      { field: 'name', header: 'Name', index: 2 },\r\n      { field: 'dueDate', header: 'Due Date', index: 3 },\r\n      { field: 'trgStartDte', header: 'Trg Start', index: 4 },\r\n      { field: 'company', header: 'Company', index: 5 },\r\n      { field: 'occupation', header: 'Occupation', index: 6 },\r\n      { field: 'reason', header: 'Reason', index: 7 },\r\n      { field: 'owner', header: 'Owner', index: 9 },\r\n      { field: 'receiptDte', header: 'Receipt Date', index: 10 }\r\n\r\n    ];\r\n    if(this.selectedECSEFilter.label === 'EC'){\r\n      cols.push({ field: 'DF', header: 'DF', index: 8 });\r\n\r\n    }\r\n    else if (this.selectedECSEFilter.label === 'SE'){\r\n      cols.push({field: 'option', header: 'Option', index: 8 });\r\n    }\r\n    return cols.sort((a, b) => a.index - b.index);\r\n  }\r\n\r\n  getClaimsVerifierData(event: any): any[] {\r\n    this.loading =  true;\r\n    this.lastTableLazyLoadEvent = event;\r\n    setTimeout(() => {\r\n      const options = this.ns2Http.convertLazyEvent(event, this.pageData, this.pageSize);\r\n      if(this.selectedECSEFilter){\r\n        console.log(\"this is nowsss\",this.captionGroup.get('ecseFilter')?.value);\r\n        options.params = this.ns2Http.appendHttpParam(this.selectedECSEFilter.claimFilterStr, options.params);\r\n        this.loadCodes(this.captionGroup.get('ecseFilter')?.value.codeType);\r\n\r\n      }\r\n      this.workloadService.getClaimsVerifierData(options).subscribe((resp:any) => {\r\n\r\n        if(resp.body.data.dtoList){\r\n          this.claimsDtoList = resp.body.data.dtoList;\r\n        }\r\n        if(resp.body.data.ownerMap){\r\n          this.setOwnerMap(resp.body.data.ownerMap);\r\n        }\r\n\r\n        if(resp.body.data.quickFilterClaimCount){\r\n          this.quickFilterclaimCount = {\r\n            claimsPendRecompNo: resp.body.data.quickFilterClaimCount.claimsPendRecompNo,\r\n            claimsDueToDate: resp.body.data.quickFilterClaimCount.claimsDueToDate,\r\n            claimsOverDue: resp.body.data.quickFilterClaimCount.claimsOverDue,\r\n            claimsTotal: resp.body.data.quickFilterClaimCount.total\r\n          }\r\n        }\r\n\r\n        this.totalRecords = resp.body.data.total_no_of_elems;\r\n        if(resp.body.data.duplicateNrics){\r\n          this.nricWithMoreThanOneClaimOptions =resp.body.data.duplicateNrics;\r\n        }\r\n        this.duplicateNricPlaceHolder = `${this.nricWithMoreThanOneClaimOptions.length} Duplicates`\r\n\r\n        this.dueCount = this.claimsDtoList.filter(y=>\r\n          this.dateUtilsService.convertUnixToMoment(y.dueDate).isBefore(moment().endOf('day'))\r\n          && (y.ownerId==null && y.ownerInit==null)\r\n        ).length;\r\n        this.loading = false;\r\n\r\n      });\r\n    }, 0);\r\n    return this.claimsDtoList;\r\n  }\r\n\r\n  \r\n  loadCodes(codeType: string): void {\r\n    this.codeService.gets(codeType)\r\n    .subscribe((codes: any[]) => {\r\n      this.reasonList = codes[0].map((x:any)=> {\r\n        return x.label['en-US'] as string;\r\n      });\r\n\r\n    });\r\n  }\r\n\r\n  setOwnerMap(ownerMap: any){\r\n    this.ownerMap = [];\r\n    Object.entries(ownerMap).forEach(x=>{\r\n      const rslt:any = x[1];\r\n      let displayName = rslt[\"displayName\"]\r\n      if(this.currentAccount.subjectId === rslt[\"ownerId\"]){\r\n        displayName = displayName.concat(\" (Me)\");\r\n      }\r\n      this.ownerMap.push({\r\n        key: x[0],\r\n        value: displayName\r\n      })\r\n    })\r\n  }\r\n\r\n  applyFilter(column: string, filterValue: string): void {\r\n    this.table.filter(filterValue, column, 'equals');\r\n    this.pageData.currentPage = 0;\r\n    this.pageSize = 10;\r\n  }\r\n\r\n  onSelectAllChange(event: any): void {\r\n    const checked = event.checked;\r\n    if (checked) {\r\n      this.selectedRows = this.claimsDtoList;\r\n      this.selectAll = true;\r\n    } else {\r\n      this.selectedRows = [];\r\n      this.selectAll = false;\r\n    }\r\n  }\r\n\r\n  copyAccount(account: any): any {\r\n    return {\r\n      email: account.email,\r\n      firstName: account.firstName,\r\n      lastName: account.lastName,\r\n      login: account.username,\r\n      authorities: account.authorities,\r\n      groups: account.groups,\r\n      subjectId: account.subjectId\r\n\r\n    };\r\n  }\r\n\r\n  dueSoon(dueDate: number): boolean{\r\n    const differ =  this.dateUtilsService.convertUnixToMoment(dueDate)\r\n    .startOf('day').diff(moment().startOf('day'), 'days')\r\n    return differ <= 2;\r\n\r\n  }\r\n\r\n  onAssignClaim(): void{\r\n    console.log(\"on assign claims\");\r\n\r\n    if(this.selectedRows.length > 0){\r\n      this.assignClaimManual();\r\n    }else{\r\n      this.assignClaimAuto();\r\n    }\r\n  }\r\n\r\n  assignClaimManual(): void{\r\n    console.log(\"assigning manual\");\r\n    const ref = this.dialogService.open(AssignClaimsComponent,{\r\n      header: \"Assign Claims\",\r\n      width: '50%',\r\n      data: {\r\n      },\r\n      contentStyle: {\"padding\": \"2em\", 'max-height': '78vh', overflow: 'auto'},\r\n      baseZIndex: 10000\r\n\r\n    });\r\n\r\n    ref.onClose.subscribe((selectedVerifier: any) => {\r\n\t\t\tif (selectedVerifier) {\r\n\t\t\t\tthis.selectedVerifier = selectedVerifier;\r\n        const req = {\r\n          subjectId: this.selectedVerifier,\r\n          claimInboxIdList: this.selectedRows.map(x=>String(x.id))\r\n        }\r\n        this.workloadService.assignClaimManual(req).subscribe((resp:any) => {\r\n          if(resp){\r\n            if(resp.status === 200){\r\n              this.toastService.success(resp.body.success_message);\r\n              this.resetDataTable();\r\n            }\r\n\r\n          }\r\n\r\n        },\r\n        (error: any) => {\r\n          console.log(\"error is\" + String(error?.error?.error_desc));\r\n          this.toastService.error(String(error?.error?.error_desc));\r\n        }\r\n      );}\r\n\t\t});\r\n\r\n  }\r\n\r\n  assignClaimAuto(): void{\r\n    console.log(\"assigning auto\");\r\n    const claimType = this.captionGroup.controls['ecseFilter'].value.label;\r\n    const ref = this.dialogService.open(AssignClaimsAutoComponent,{\r\n      header: \"Assign \" + String(claimType) + \" Claims\",\r\n      width: '50%',\r\n      data: {\r\n        claimType\r\n      },\r\n      contentStyle: {\"padding\": \"2em\", 'max-height': '78vh', overflow: 'auto'},\r\n      autoZIndex: false,\r\n      baseZIndex: 999\r\n    });\r\n\r\n    ref.onClose.subscribe((assignClaimsList: any[]) => {\r\n\t\t\tif (assignClaimsList) {\r\n        console.log('mina2', assignClaimsList);\r\n        this.workloadService.assignClaimsAuto(assignClaimsList).subscribe(resp => {\r\n          if(resp){\r\n            if(resp.status === 200){\r\n              this.toastService.success(resp.body.success_message);\r\n              this.resetDataTable();\r\n            }\r\n          }\r\n        },\r\n        (error: any) => {\r\n          console.log(\"error is\" + String(error?.error?.error_desc));\r\n          this.toastService.error(String(error?.error?.error_desc));\r\n        }\r\n      );}\r\n\t\t});\r\n  }\r\n\r\n  enableAssignClaimBtn(): boolean{\r\n      let dueSelectedCount;\r\n      let nonDueSelectedCount;\r\n      if(this.selectedRows.length > 0){\r\n        for(const x of this.selectedRows){\r\n          if(x.ownerId!=null || x.ownerInit!=null){\r\n            return false;\r\n          }\r\n        }\r\n        dueSelectedCount = this.selectedRows.filter(x=>\r\n          this.dateUtilsService.convertUnixToMoment(x.dueDate).isBefore(moment().endOf('day'))\r\n        ).length;\r\n        nonDueSelectedCount = this.selectedRows.filter(x=>\r\n          this.dateUtilsService.convertUnixToMoment(x.dueDate).isAfter(moment().endOf('day'))\r\n        ).length;\r\n\r\n        if(dueSelectedCount<this.dueCount && nonDueSelectedCount>0){\r\n          return false;\r\n        }\r\n      }\r\n      return true;\r\n  }\r\n\r\n  exportCSV(dataTable: Table): void{\r\n\r\n    let params = new HttpParams;\r\n    params = this.ns2Http.appendHttpParam(this.selectedECSEFilter.claimFilterStr, params);\r\n\r\n    this.workloadService.getClaimRecordsData({params}).subscribe((resp: any) => {\r\n      if(resp.body.data) {\r\n        const columns = \r\n          [\r\n            {field: 'caseId', header: 'Case ID', index: 1},\r\n            {field: 'claimantNRIC', header: 'NRIC', index: 2},\r\n            {field: 'claimantName', header: 'Name', index: 3},\r\n            {field: 'dueDate', header: 'Due Date', index: 4},\r\n            {field: 'dateTrgStart', header: 'Trg Start', index: 5},\r\n            {field: 'company', header: 'Company', index: 6},\r\n            {field: 'occupation', header: 'Occupation', index: 7},\r\n            {field: 'reason', header: 'Reason', index: 8},\r\n            {field: 'ownerInit', header: 'Owner', index: 10},\r\n            {field: 'receiptDate', header: 'Receipt Date', index: 11}\r\n          ];\r\n\r\n          if(this.captionGroup.controls['ecseFilter'].value.label ==='EC'){\r\n            columns.push(\r\n              {field: 'directorFeeInd', header: 'DF', index: 9}\r\n            );\r\n          }else if(this.captionGroup.controls['ecseFilter'].value.label ==='SE'){\r\n            columns.push(\r\n              {field: 'claimOptDesc', header: 'Option', index: 9}\r\n            );\r\n          }\r\n\r\n        columns.sort((a, b) => a.index - b.index);\r\n        const dtoList:any[] = [];\r\n        resp.body.data.dtoList.forEach((data:any)=>{\r\n          let dto = {};\r\n          if(this.captionGroup.controls['ecseFilter'].value.label ==='EC'){\r\n            dto = {\r\n              caseId: data.caseId,\r\n              claimantNRIC: data.nric,\r\n              claimantName: data.name,\r\n              dueDate: this.dateUtilsService.convertUnixToDateString(data.dueDate, this.dateFormat),\r\n              dateTrgStart: this.dateUtilsService.convertUnixToDateString(data.start, this.dateFormat),\r\n              company: data.coy,\r\n              occupation: data.occupation,\r\n              reason: data.reason,\r\n              directorFeeInd: data.df,\r\n              ownerInit: data.ownerInit,\r\n              receiptDate: this.dateUtilsService.convertUnixToDateString(data.receiptDate, this.dateFormat),\r\n            }\r\n          }else if(this.captionGroup.controls['ecseFilter'].value.label ==='SE'){\r\n            dto = {\r\n              caseId: data.caseId,\r\n              claimantNRIC: data.nric,\r\n              claimantName: data.name,\r\n              dueDate: this.dateUtilsService.convertUnixToDateString(data.dueDate, this.dateFormat),\r\n              dateTrgStart: this.dateUtilsService.convertUnixToDateString(data.start, this.dateFormat),\r\n              company: data.coy,\r\n              occupation: data.occupation,\r\n              reason: data.reason,\r\n              claimOptDesc: data.optionDesc,\r\n              ownerInit: data.ownerInit,\r\n              receiptDate: this.dateUtilsService.convertUnixToDateString(data.receiptDate, this.dateFormat),\r\n            }\r\n          }\r\n          dtoList.push(dto);\r\n\r\n          \r\n        })\r\n        this.exportUtilsService.exportCSV(dataTable, dtoList,resp.body.data.total_no_of_elems, columns, \r\n          \"claim_verifier_\".concat(formatDate(new Date(),\"dd-MM-YYYY\", 'en-US')));\r\n      this.loading = false;\r\n    }});\r\n    \r\n  }\r\n\r\n  resetDataTable(): void {\r\n    this.selectAll = false;\r\n    this.selectedRows = [];\r\n    this.table.filters = {};\r\n    this.pageData.currentPage = 0;\r\n    this.pageSize = 10;\r\n    this.table.reset();\r\n  }\r\n}\r\n","\r\n<p-table [value]=\"claimsDtoList\"\r\n            [paginator]=\"true\"\r\n            [rows]=\"pagingSetting.rowsPerPage\"\r\n            [lazy] = \"true\"\r\n            [showCurrentPageReport]=\"true\"\r\n            [selectAll]=\"selectAll\"\r\n            (selectAllChange)=\"onSelectAllChange($event)\"\r\n            (onLazyLoad)=\"getClaimsVerifierData($event)\"\r\n            [totalRecords] = \"totalRecords\"\r\n            [(selection)] = \"selectedRows\"\r\n            dataKey = \"id\"\r\n            [filterDelay]=\"0\"\r\n            [loading] = \"loading\"\r\n            styleClass=\"p-datatable-gridlines p-datatable-striped\"\r\n            [rowsPerPageOptions]=\"[10,15,20,50]\"\r\n            currentPageReportTemplate=\"Showing {first} to {last} of {totalRecords} entries\"\r\n            responsiveLayout=\"scroll\"\r\n            #dataTable\r\n            >\r\n            <ng-template pTemplate=\"caption\">\r\n                <form [formGroup] = \"captionGroup\">\r\n                    <div class=\"grid\">\r\n                        <div class = \"col-9 nsp-align-left flex justify-content-start align-items-center\">\r\n                            <p-button icon=\"pi pi-file-o\" [style]=\"{'margin-right': '.5em', 'margin-bottom': '.5em'}\" (click) = \"exportCSV(dataTable)\"></p-button>\r\n                            <p-dropdown [options]=\"ecseClaimFilterOptions\" [style]=\"{'margin-right': '.5em', 'margin-bottom': '.5em'}\" formControlName=\"ecseFilter\"\r\n                            (onChange) = \"onChangeECFilter($event)\"  optionLabel=\"codeDesc\"></p-dropdown>\r\n\r\n                            <p-dropdown [options]=\"nricWithMoreThanOneClaimOptions\" [style]=\"{'margin-right': '.5em', 'margin-bottom': '.5em'}\" formControlName=\"selectedDupNric\" [placeholder]=\"duplicateNricPlaceHolder\" [showClear]=\"true\"\r\n                            (onChange)=\"applyFilter('claimantNRIC', captionGroup.get('selectedDupNric').value)\"\r\n                            ></p-dropdown>\r\n                            <p><b>{{ selectedECSEFilter.label }}:<span style=\"color:rgb(175, 3, 3);\">\r\n                                {{ quickFilterclaimCount.claimsPendRecompNo }} (Recomp);\r\n                                {{ quickFilterclaimCount.claimsDueToDate }} (Today);\r\n                                {{ quickFilterclaimCount.claimsOverDue }} (Overdue);</span>\r\n                                {{ quickFilterclaimCount.claimsTotal }} (Total)\r\n                            </b></p>\r\n                        </div>\r\n                        <div class = \"col-3 nsp-align-right\">\r\n                            <button pButton  label=\"Assign Claims\" [disabled] = \"!enableAssignClaimBtn()\" (click) = onAssignClaim() [style]=\"{'margin-left': '.5em', 'margin-bottom': '.5em'}\"></button>\r\n                        </div>\r\n                    </div>\r\n                </form>\r\n\r\n            </ng-template>\r\n\r\n        <ng-template pTemplate=\"header\" let-columns>\r\n            <tr>\r\n                <th scope=\"col\" style=\"width:3%\"><p-tableHeaderCheckbox></p-tableHeaderCheckbox></th>\r\n                <th scope=\"col\">SN</th>\r\n                <th scope=\"col\" pSortableColumn = \"caseId\">Case ID<p-sortIcon field=\"caseId\"></p-sortIcon>\r\n                    <p-columnFilter type=\"text\" field=\"caseId\" display=\"menu\" matchMode=\"contains\"></p-columnFilter>\r\n                </th>\r\n                <th scope=\"col\" pSortableColumn =\"claimantNRIC\">Name<p-sortIcon field=\"claimantNRIC\"></p-sortIcon>\r\n                    <p-columnFilter type=\"text\" field=\"claimantNRIC\" display=\"menu\" matchMode=\"contains\"></p-columnFilter>\r\n                </th>\r\n                <th scope=\"col\" pSortableColumn =\"dueDate\">Due Date<p-sortIcon field=\"dueDate\"></p-sortIcon></th>\r\n                <th scope=\"col\" pSortableColumn =\"dateTrgStart\">Trg Start<p-sortIcon field=\"dateTrgStart\"></p-sortIcon></th>\r\n                <th scope=\"col\" pSortableColumn =\"company\">Company<p-sortIcon field=\"company\"></p-sortIcon></th>\r\n                <th scope=\"col\" pSortableColumn =\"occupation\">Occupation<p-sortIcon field=\"occupation\"></p-sortIcon></th>\r\n                <th scope=\"col\" pSortableColumn =\"reason\">Reason<p-sortIcon field=\"reason\"></p-sortIcon>\r\n                    <p-columnFilter type=\"text\" field=\"reason\" display=\"menu\" matchMode=\"contains\">\r\n                        <ng-template pTemplate=\"filter\" let-value let-filter=\"filterCallback\">\r\n                            <p-dropdown [ngModel]=\"selectedReason\" [options]=\"reasonList\" (onChange)=\"filter($event.value)\"  placeholder=\"Reason\"></p-dropdown>\r\n                        </ng-template>\r\n                    </p-columnFilter>\r\n                </th>\r\n                <th scope=\"col\" *ngIf=\"captionGroup.controls['ecseFilter'].value.label =='EC'\"\r\n                pSortableColumn =\"directorFeeInd\">DF<p-sortIcon field=\"directorFeeInd\"></p-sortIcon></th>\r\n                <th scope=\"col\" *ngIf=\"captionGroup.controls['ecseFilter'].value.label =='SE'\"\r\n                pSortableColumn =\"claimOptDesc\">Option<p-sortIcon field=\"claimOptDesc\"></p-sortIcon></th>\r\n\r\n                <th scope=\"col\" pSortableColumn =\"ownerInit\">Owner<p-sortIcon field=\"ownerInit\"></p-sortIcon>\r\n                    <p-columnFilter type=\"text\" field=\"ownerInit\" display=\"menu\" matchMode=\"contains\">\r\n                        <ng-template pTemplate=\"filter\" let-value let-filter=\"filterCallback\">\r\n                            <p-dropdown [ngModel]=\"selectedOwner\" [options]=\"ownerMap\" (onChange)=\"filter($event.value)\"\r\n                            optionLabel=\"value\" optionValue=\"key\" placeholder=\"Owner\"></p-dropdown>\r\n                        </ng-template>\r\n                    </p-columnFilter>\r\n                </th>\r\n                <th scope=\"col\" pSortableColumn =\"receiptDate\">Receipt Date<p-sortIcon field=\"receiptDate\"></p-sortIcon></th>\r\n\r\n            </tr>\r\n        </ng-template>\r\n    <ng-template pTemplate=\"body\" let-claimRecord let-rowIndex = \"rowIndex\" let-columns=\"columns\">\r\n\r\n        <tr [pSelectableRow]=\"claimRecord\">\r\n            <td><p-tableCheckbox [value]=\"claimRecord\"></p-tableCheckbox></td>\r\n            <td>{{ rowIndex + 1}}</td>\r\n            <td><a href=\"#\">{{claimRecord.caseId}}</a></td>\r\n            <td>{{claimRecord.nric }} <br/> {{ claimRecord.name}}</td>\r\n            <td [ngClass]=\"this.dueSoon(claimRecord.dueDate) ? 'alert-text': null\">{{ this.dateUtilsService.convertUnixToDateString(claimRecord.dueDate, dateFormat) | defaultString }}</td>\r\n            <td>{{ this.dateUtilsService.convertUnixToDateString(claimRecord.start, dateFormat) | defaultString}}</td>\r\n            <td>{{claimRecord.coy | truncateName}}</td>\r\n            <td>{{claimRecord.occupation | defaultString}}</td>\r\n            <td>{{claimRecord.reason | defaultString}}</td>\r\n            <td *ngIf=\"captionGroup.controls['ecseFilter'].value.label =='EC'\">{{claimRecord.df}}</td>\r\n            <td *ngIf=\"captionGroup.controls['ecseFilter'].value.label =='SE'\">{{claimRecord.optionDesc}}</td>\r\n            <td>{{claimRecord.ownerInit | uppercase | defaultString}}</td>\r\n            <td>{{ this.dateUtilsService.convertUnixToDateString(claimRecord.receiptDate, dateFormat) | defaultString}}</td>\r\n        </tr>\r\n    </ng-template>\r\n    <ng-template pTemplate=\"emptymessage\">\r\n        <tr>\r\n            <td colspan=\"12\">No records found.</td>\r\n        </tr>\r\n    </ng-template>\r\n</p-table>\r\n<!-- {{ selectedRows.length }} -->\r\n\r\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}