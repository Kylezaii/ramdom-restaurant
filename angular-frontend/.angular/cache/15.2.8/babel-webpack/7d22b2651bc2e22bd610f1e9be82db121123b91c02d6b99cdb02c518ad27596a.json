{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AppealInboxComponent = void 0;\nconst tslib_1 = require(\"tslib\");\nconst forms_1 = require(\"@angular/forms\");\nconst rxjs_1 = require(\"rxjs\");\nconst operators_1 = require(\"rxjs/operators\");\nconst i0 = tslib_1.__importStar(require(\"@angular/core\"));\nconst i1 = tslib_1.__importStar(require(\"app/ng-connect\"));\nconst i2 = tslib_1.__importStar(require(\"app/workload/service/workload-inbox.service\"));\nconst i3 = tslib_1.__importStar(require(\"@angular/forms\"));\nconst i4 = tslib_1.__importStar(require(\"@angular/common\"));\nconst i5 = tslib_1.__importStar(require(\"@ngx-formly/core\"));\nconst i6 = tslib_1.__importStar(require(\"../../../shared/language/translate.directive\"));\nfunction AppealInboxComponent_div_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 3);\n    i0.ɵɵtext(1, \"\\n        Please enter a value\\n    \");\n    i0.ɵɵelementEnd();\n  }\n}\nclass AppealInboxComponent {\n  // validators: {\n  //   fieldMatch: {\n  //     expression(control: any){\n  //       const value = control.value;\n  //       return value.passwordConfirm === value.password\n  //         // avoid displaying the message error when values are empty\n  //         || (!value.passwordConfirm || !value.password);\n  //     },\n  //     message: 'Password Not Matching',\n  //     errorPath: 'passwordConfirm',\n  //   },\n  // },\n  // options: FormlyFormOptions = {\n  //   formState: {\n  //     selectOptionsData: {\n  //       teams: [\n  //         { id: '1', name: 'Bayern Munich', sportId: '1' },\n  //         { id: '2', name: 'Real Madrid', sportId: '1' },\n  //         { id: '3', name: 'Cleveland', sportId: '2' },\n  //         { id: '4', name: 'Miami', sportId: '2' },\n  //       ],\n  //       players: [\n  //         { id: '1', name: 'Bayern Munich (Player 1)', teamId: '1' },\n  //         { id: '2', name: 'Bayern Munich (Player 2)', teamId: '1' },\n  //         { id: '3', name: 'Real Madrid (Player 1)', teamId: '2' },\n  //         { id: '4', name: 'Real Madrid (Player 2)', teamId: '2' },\n  //         { id: '5', name: 'Cleveland (Player 1)', teamId: '3' },\n  //         { id: '6', name: 'Cleveland (Player 2)', teamId: '3' },\n  //         { id: '7', name: 'Miami (Player 1)', teamId: '4' },\n  //         { id: '8', name: 'Miami (Player 2)', teamId: '4' },\n  //       ],\n  //     },\n  //   },\n  // };\n  // fieldsReport: FormlyFieldConfig[] = [\n  //   {\n  //     fieldGroupClassName: 'field grid nsp-align-left flex justify-content-start align-items-center',\n  //     fieldGroup: [\n  //       {\n  //         template: 'Report ID',\n  //         type: \"text\",\n  //         className: 'col-2'\n  //       },\n  //       {\n  //         key: 'sport',\n  //         type: 'select',\n  //         className: 'col-10 formly-dropdown',\n  //         templateOptions: {\n  //           options: [\n  //             { id: '1', name: 'Soccer131321' },\n  //             { id: '2', name: 'Basketball' },\n  //           ],\n  //           valueProp: 'id',\n  //           labelProp: 'name',\n  //           required: true,\n  //           attributes: {\n  //           }\n  //         },\n  //       }\n  //     ]\n  //   },\n  //   {\n  //     fieldGroupClassName: 'field grid nsp-align-left flex justify-content-start align-items-center',\n  //     fieldGroup: [\n  //       {\n  //         template: 'Report Start Date',\n  //         type: \"text\",\n  //         className: 'col-2'\n  //       },\n  //       {\n  //         key: 'team',\n  //         className: 'col-10 formly-calendar',\n  //         type: 'datepicker',\n  //         props: {\n  //           placeholder: 'Start Date',\n  //           description: 'Description',\n  //           dateFormat: 'dd/mm/yy',\n  //           hourFormat: '24',\n  //           numberOfMonths: 1,\n  //           selectionMode: 'single',\n  //           required: true,\n  //           readonlyInput: false,\n  //           showTime: false,\n  //           showButtonBar: true,\n  //           showIcon: false,\n  //           showOtherMonths: true,\n  //           selectOtherMonths: false,\n  //           monthNavigator: false,\n  //           yearNavigator: false,\n  //           yearRange: '2020:2030',\n  //           minDate: '09/24/2022',\n  //           inline: false\n  //         },\n  //         expressions: {\n  //           'props.options': 'formState.selectOptionsData.teams.filter(team => team.sportId === model.sport)',\n  //           // reset model when updating select options\n  //           'model.team': `field.props.options.find(o => o.id === model.team) ? model.team:null`,\n  //         }\n  //       }\n  //     ]\n  //   },\n  //   {\n  //     fieldGroupClassName: 'field grid nsp-align-left flex justify-content-start align-items-center',\n  //     fieldGroup: [\n  //       {\n  //         template: 'Report End Date',\n  //         type: \"text\",\n  //         className: 'col-2'\n  //       },\n  //       {\n  //         key: 'player',\n  //         className: 'col-10 formly-calendar',\n  //         type: 'datepicker',\n  //         props: {\n  //           placeholder: 'End Date',\n  //           description: 'Description',\n  //           dateFormat: 'dd/mm/yy',\n  //           hourFormat: '24',\n  //           numberOfMonths: 1,\n  //           selectionMode: 'single',\n  //           required: true,\n  //           readonlyInput: false,\n  //           showTime: false,\n  //           showButtonBar: true,\n  //           showIcon: false,\n  //           showOtherMonths: true,\n  //           selectOtherMonths: false,\n  //           monthNavigator: false,\n  //           yearNavigator: false,\n  //           yearRange: '2020:2030',\n  //           inline: false\n  //         },\n  //         expressions: {\n  //           'props.options': 'formState.selectOptionsData.players.filter(player => player.teamId === model.team)',\n  //           // reset model when updating select options\n  //           'model.player': `field.props.options.find(o => o.id === model.player) ? model.player:null`,\n  //         },\n  //       },\n  //     ]\n  //   }\n  // ]\n  // fieldsReport: FormlyFieldConfig[] = [\n  //   {\n  //     fieldGroupClassName: 'field grid nsp-align-left flex justify-content-start align-items-center',\n  //     fieldGroup: [\n  //       {\n  //         template: 'Report ID',\n  //         type: \"text\",\n  //         className: 'col-2'\n  //       },\n  //       {\n  //         key: 'sport',\n  //         type: 'select',\n  //         className: 'col-10 formly-dropdown',\n  //         templateOptions: {\n  //           options: [\n  //             { id: '1', name: 'Soccer131321' },\n  //             { id: '2', name: 'Basketball' },\n  //           ],\n  //           valueProp: 'id',\n  //           labelProp: 'name',\n  //           required: true,\n  //           attributes: {\n  //           }\n  //         },\n  //       }\n  //     ]\n  //   },\n  //   {\n  //     fieldGroupClassName: 'field grid nsp-align-left flex justify-content-start align-items-center',\n  //     fieldGroup: [\n  //       {\n  //         template: 'Report Start Date',\n  //         type: \"text\",\n  //         className: 'col-2'\n  //       },\n  //       {\n  //         key: 'team',\n  //         type: 'select',\n  //         className: 'col-10 formly-dropdown',\n  //         templateOptions: {\n  //           options: [],\n  //           valueProp: 'id',\n  //           labelProp: 'name',\n  //           required: true,\n  //         },\n  //         expressions: {\n  //           'props.options': 'formState.selectOptionsData.teams.filter(team => team.sportId === model.sport)',\n  //           // reset model when updating select options\n  //           'model.team': `field.props.options.find(o => o.id === model.team) ? model.team:null`,\n  //         }\n  //       }\n  //     ]\n  //   },\n  //   {\n  //     fieldGroupClassName: 'field grid nsp-align-left flex justify-content-start align-items-center',\n  //     fieldGroup: [\n  //       {\n  //         template: 'Report End Date',\n  //         type: \"text\",\n  //         className: 'col-2'\n  //       },\n  //       {\n  //         key: 'player',\n  //         type: 'select',\n  //         className: 'col-10 formly-dropdown',\n  //         templateOptions: {\n  //           // label: 'Report End Date',\n  //           options: [],\n  //           valueProp: 'id',\n  //           labelProp: 'name',\n  //           required: true,\n  //         },\n  //         expressions: {\n  //           'props.options': 'formState.selectOptionsData.players.filter(player => player.teamId === model.team)',\n  //           // reset model when updating select options\n  //           'model.player': `field.props.options.find(o => o.id === model.player) ? model.player:null`,\n  //         },\n  //       },\n  //     ]\n  //   }\n  // ]\n  constructor(codeService, _cd, workloadService) {\n    this.codeService = codeService;\n    this._cd = _cd;\n    this.workloadService = workloadService;\n    this.onDestroy$ = new rxjs_1.Subject();\n    this.form = new forms_1.FormGroup({});\n    this.form2 = new forms_1.FormGroup({});\n    this.optionsList = [];\n    this.model = {};\n    this.modelReport = {};\n    // fields: FormlyFieldConfig[]= [\n    //   {\n    //     fieldGroupClassName: \"col-12 formly-row\",\n    //     fieldGroup: [\n    //         {\n    //             template: \"<p>Report End Date&nbsp&nbsp</p>\",\n    //             className: \"col-3 formly-label\"\n    //         },\n    //         {\n    //             key: \"endDate\",\n    //             type: \"annuallyCal\",\n    //             className: \"col-9\",\n    //             templateOptions: {\n    //                 required: true,\n    //                 placeholder: \"End Date\"\n    //             }\n    //         }\n    //     ]\n    // },\n    // {\n    //     fieldGroupClassName: \"col-12 formly-row\",\n    //     fieldGroup: [\n    //         {\n    //             template: \"<p>Report Start Date&nbsp&nbsp</p>\",\n    //             className: \"col-3 formly-label\"\n    //         },\n    //         {\n    //             key: \"startDate\",\n    //             type: \"annuallyCal\",\n    //             className: \"col-9\",\n    //             templateOptions: {\n    //                 required: true,\n    //                 placeholder: \"Start Date\"\n    //             }\n    //         }\n    //     ]\n    // }\n    // ];\n    this.fields = [{\n      validators: {\n        validation: [{\n          name: 'endDateMoreThanStartDate',\n          options: {\n            errorPath: 'endDate'\n          }\n        }]\n      },\n      fieldGroupClassName: 'col-12 formly-row',\n      // fieldGroupClassName:  'col-12 nsp-align-left flex justify-content-start align-items-center vertical-align-middle display-table',\n      fieldGroup: [{\n        template: '<p>The amount of allowance entitled and paid to the NSman for&nbsp&nbsp</p>',\n        className: 'col-5 formly-label '\n      }, {\n        key: \"startDate\",\n        type: \"quarterlyCal\",\n        className: 'col3',\n        templateOptions: {\n          required: true,\n          placeholder: \"Start Date\"\n        }\n      }, {\n        key: \"endDate\",\n        type: \"quarterlyCal\",\n        className: 'col4',\n        templateOptions: {\n          required: true,\n          placeholder: \"End Date\"\n        }\n      }]\n    }, {\n      validators: {\n        validation: [{\n          name: 'fieldMatch',\n          options: {\n            errorPath: 'passwordConfirm'\n          }\n        }]\n      },\n      fieldGroupClassName: 'col-12 formly-row',\n      fieldGroup: [{\n        key: 'password',\n        type: 'input',\n        className: 'col-5',\n        templateOptions: {\n          type: 'password',\n          label: 'Password',\n          placeholder: 'Must be at least 3 characters',\n          required: true,\n          minLength: 3\n        }\n      }, {\n        key: 'passwordConfirm',\n        type: 'input',\n        className: 'col-7',\n        templateOptions: {\n          type: 'password',\n          label: 'Confirm Password',\n          placeholder: 'Please re-enter your password',\n          required: true\n        }\n      }]\n    }, {\n      fieldGroupClassName: 'col-12 nsp-align-left flex justify-content-start align-items-center',\n      fieldGroup: [{\n        template: '<p>The amount of allowance entitled and paid to the NSman for&nbsp&nbsp</p>'\n      }, {\n        key: 'seClaimOption',\n        type: 'input',\n        props: {}\n        // props: {\n        //   required: true,\n        //   options:  this.codeService.gets('claim_option_long').pipe(map((data: any)=>\n        //     data[0].map((s:any)=>({\n        //       value: s.codeId,\n        //       label: s.label['en-US'] as string\n        //     })\n        //   )))\n        // },\n      }]\n    }];\n    //\n    // this.workloadService.retreiveLetterItems(null).subscribe(resp => {\n    //   if(resp.body.data) {\n    //     console.log(\"in field\");\n    //     // this.fields = this.mapOptionFields(resp.body.data.reportParamObj);\n    //   }\n    // });\n    this.fields = this.mapOptionFields(this.fields);\n  }\n  //retain otherwise will have error expression changed after it has been checked\n  ngAfterViewChecked() {\n    this._cd.detectChanges();\n  }\n  ngOnInit() {\n    console.log(\"start\");\n  }\n  getSEClaimOptions() {\n    this.codeService.gets('claim_option_long').subscribe(codes => {\n      console.log(\"the codes\", codes);\n      this.optionsList = codes[0].map(x => {\n        return {\n          value: x.codeId,\n          label: x.label['en-US']\n        };\n      });\n      console.log(\"optionslist\", this.optionsList);\n    });\n  }\n  ngOnDestroy() {\n    this.onDestroy$.next();\n    this.onDestroy$.complete();\n  }\n  // Bind an observable to the option fields.\n  mapOptionFields(fields) {\n    console.log(\"inner fields\", fields);\n    return fields.map(f => {\n      console.log(\"the fieldgrp\", f.fieldGroup);\n      f.fieldGroup.forEach(innerGrp => {\n        if (innerGrp.key === 'seClaimOption') {\n          innerGrp.type = 'select';\n          innerGrp.props.options = this.codeService.gets('claim_option_long').pipe((0, operators_1.map)(data => data[0].map(s => ({\n            value: s.codeId,\n            label: s.label['en-US']\n          }))));\n        }\n      });\n      return f;\n    });\n  }\n  submit() {\n    alert(JSON.stringify(this.model));\n  }\n}\nexports.AppealInboxComponent = AppealInboxComponent;\nAppealInboxComponent.ɵfac = function AppealInboxComponent_Factory(t) {\n  return new (t || AppealInboxComponent)(i0.ɵɵdirectiveInject(i1.IcCodeService), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i2.WorkloadInboxService));\n};\nAppealInboxComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: AppealInboxComponent,\n  selectors: [[\"n2-appeal-inbox\"]],\n  decls: 13,\n  vars: 8,\n  consts: [[3, \"formGroup\"], [3, \"model\", \"fields\", \"form\"], [\"class\", \"form-text text-danger\", \"icTranslate\", \"nspay2App.report.validation.V001\", 4, \"ngIf\"], [\"icTranslate\", \"nspay2App.report.validation.V001\", 1, \"form-text\", \"text-danger\"]],\n  template: function AppealInboxComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\");\n      i0.ɵɵtext(1, \"\\n    \");\n      i0.ɵɵelementStart(2, \"form\", 0);\n      i0.ɵɵtext(3, \"\\n        \");\n      i0.ɵɵelement(4, \"formly-form\", 1);\n      i0.ɵɵtext(5, \"\\n    \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(6, \"\\n    \");\n      i0.ɵɵtemplate(7, AppealInboxComponent_div_7_Template, 2, 0, \"div\", 2);\n      i0.ɵɵtext(8, \" \\n\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(9);\n      i0.ɵɵpipe(10, \"json\");\n      i0.ɵɵtext(11, \"\\n\\n\");\n      i0.ɵɵtext(12, \"\\n\\n\\n\");\n    }\n    if (rf & 2) {\n      let tmp_4_0;\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"formGroup\", ctx.form);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"model\", ctx.model)(\"fields\", ctx.fields)(\"form\", ctx.form);\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"ngIf\", ((tmp_4_0 = ctx.form2.get(\"startDate\")) == null ? null : tmp_4_0.hasError(\"required\")) && ((tmp_4_0 = ctx.form2.get(\"team\")) == null ? null : tmp_4_0.touched));\n      i0.ɵɵadvance(2);\n      i0.ɵɵtextInterpolate1(\"\\n\\n\", i0.ɵɵpipeBind1(10, 6, ctx.model), \"\\n\\n\");\n    }\n  },\n  dependencies: [i3.ɵNgNoValidate, i3.NgControlStatusGroup, i4.NgIf, i3.FormGroupDirective, i5.FormlyForm, i6.TranslateDirective, i4.JsonPipe],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJhcHBlYWwtaW5ib3guY29tcG9uZW50LnNjc3MifQ== */\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9tYWluL3dlYmFwcC9hcHAvd29ya2xvYWQvY2xhaW0tYXBwcm92ZXIvYXBwZWFsLWluYm94L2FwcGVhbC1pbmJveC5jb21wb25lbnQuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQ0EsNEtBQTRLIiwic291cmNlUm9vdCI6IiJ9 */\"]\n});","map":{"version":3,"mappings":"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","names":["i0","AppealInboxComponent","constructor","codeService","_cd","workloadService","rxjs_1","forms_1","validators","validation","name","options","errorPath","fieldGroupClassName","fieldGroup","template","className","key","type","templateOptions","required","placeholder","label","minLength","props","fields","mapOptionFields","ngAfterViewChecked","detectChanges","ngOnInit","console","log","getSEClaimOptions","gets","subscribe","codes","optionsList","map","x","value","codeId","ngOnDestroy","onDestroy$","next","complete","f","forEach","innerGrp","pipe","data","s","submit","alert","JSON","stringify","model","exports","selectors","decls","vars","consts"],"sourceRoot":"","sources":["C:\\Users\\D1347074\\Desktop\\projects 2\\nspayiiapp\\src\\main\\webapp\\app\\workload\\claim-approver\\appeal-inbox\\appeal-inbox.component.ts","C:\\Users\\D1347074\\Desktop\\projects 2\\nspayiiapp\\src\\main\\webapp\\app\\workload\\claim-approver\\appeal-inbox\\appeal-inbox.component.html"],"sourcesContent":["\r\n/* eslint-disable @typescript-eslint/no-unsafe-return */\r\nimport {ChangeDetectorRef, Component, OnInit, ViewEncapsulation} from '@angular/core';\r\nimport { FormGroup } from '@angular/forms';\r\nimport { faF } from '@fortawesome/free-solid-svg-icons';\r\nimport { FormlyFieldConfig, FormlyFormOptions } from '@ngx-formly/core';\r\nimport { IcCodeService } from 'app/ng-connect';\r\nimport { toDateParser, toUnixParser } from 'app/shared/validator/formly-validator.directive';\r\nimport { WorkloadInboxService } from 'app/workload/service/workload-inbox.service';\r\nimport { mode } from 'crypto-js';\r\nimport { BehaviorSubject, Subject } from 'rxjs';\r\nimport {startWith, tap, map, takeUntil, distinctUntilChanged} from 'rxjs/operators';\r\n\r\n\r\n@Component({\r\n  selector: 'n2-appeal-inbox',\r\n  templateUrl: './appeal-inbox.component.html',\r\n  styleUrls: ['./appeal-inbox.component.scss'],\r\n\r\n})\r\nexport class AppealInboxComponent implements OnInit {\r\n  onDestroy$ = new Subject<void>();\r\n\r\n  form = new FormGroup({});\r\n  form2 = new FormGroup({});\r\n\r\n  optionsList: any[] = [];\r\n\r\n  model: any = {\r\n  };\r\n  modelReport: any = {\r\n  };\r\n\r\n  // fields: FormlyFieldConfig[]= [\r\n  //   {\r\n  //     fieldGroupClassName: \"col-12 formly-row\",\r\n  //     fieldGroup: [\r\n  //         {\r\n  //             template: \"<p>Report End Date&nbsp&nbsp</p>\",\r\n  //             className: \"col-3 formly-label\"\r\n  //         },\r\n  //         {\r\n  //             key: \"endDate\",\r\n  //             type: \"annuallyCal\",\r\n  //             className: \"col-9\",\r\n  //             templateOptions: {\r\n  //                 required: true,\r\n  //                 placeholder: \"End Date\"\r\n  //             }\r\n  //         }\r\n  //     ]\r\n  // },\r\n  // {\r\n\r\n  //     fieldGroupClassName: \"col-12 formly-row\",\r\n  //     fieldGroup: [\r\n  //         {\r\n  //             template: \"<p>Report Start Date&nbsp&nbsp</p>\",\r\n  //             className: \"col-3 formly-label\"\r\n  //         },\r\n  //         {\r\n  //             key: \"startDate\",\r\n  //             type: \"annuallyCal\",\r\n  //             className: \"col-9\",\r\n  //             templateOptions: {\r\n  //                 required: true,\r\n  //                 placeholder: \"Start Date\"\r\n  //             }\r\n  //         }\r\n  //     ]\r\n  // }\r\n  // ];\r\n\r\n  fields: FormlyFieldConfig[] =[\r\n    {\r\n      validators: {\r\n        validation: [{ name: 'endDateMoreThanStartDate', options: { errorPath: 'endDate' } }],\r\n\r\n      },\r\n      fieldGroupClassName:  'col-12 formly-row',\r\n\r\n      // fieldGroupClassName:  'col-12 nsp-align-left flex justify-content-start align-items-center vertical-align-middle display-table',\r\n      fieldGroup: [\r\n        {\r\n          template: '<p>The amount of allowance entitled and paid to the NSman for&nbsp&nbsp</p>',\r\n          className: 'col-5 formly-label '\r\n        },\r\n        {\r\n          key: \"startDate\",\r\n          type: \"quarterlyCal\",\r\n          className: 'col3',\r\n          templateOptions: {\r\n            required: true,\r\n            placeholder: \"Start Date\",\r\n          },\r\n        },\r\n        {\r\n          key: \"endDate\",\r\n          type: \"quarterlyCal\",\r\n          className: 'col4',\r\n          templateOptions: {\r\n            required: true,\r\n            placeholder: \"End Date\",\r\n          },\r\n        },\r\n      ]\r\n    },\r\n    {\r\n\r\n      validators: {\r\n        validation: [{ name: 'fieldMatch', options: { errorPath: 'passwordConfirm' } }],\r\n\r\n      },\r\n      fieldGroupClassName:  'col-12 formly-row',\r\n      fieldGroup: [\r\n        {\r\n          key: 'password',\r\n          type: 'input',\r\n          className: 'col-5',\r\n          templateOptions: {\r\n            type: 'password',\r\n            label: 'Password',\r\n            placeholder: 'Must be at least 3 characters',\r\n            required: true,\r\n            minLength: 3,\r\n          },\r\n        },\r\n        {\r\n          key: 'passwordConfirm',\r\n          type: 'input',\r\n          className: 'col-7',\r\n          templateOptions: {\r\n            type: 'password',\r\n            label: 'Confirm Password',\r\n            placeholder: 'Please re-enter your password',\r\n            required: true,\r\n          },\r\n        },\r\n      ],\r\n    },\r\n    {\r\n\r\n          fieldGroupClassName: 'col-12 nsp-align-left flex justify-content-start align-items-center',\r\n          fieldGroup: [\r\n            {\r\n              template: '<p>The amount of allowance entitled and paid to the NSman for&nbsp&nbsp</p>'\r\n            },\r\n            {\r\n              key: 'seClaimOption',\r\n              type: 'input',\r\n              props: {\r\n\r\n              }\r\n              // props: {\r\n              //   required: true,\r\n              //   options:  this.codeService.gets('claim_option_long').pipe(map((data: any)=>\r\n              //     data[0].map((s:any)=>({\r\n              //       value: s.codeId,\r\n              //       label: s.label['en-US'] as string\r\n              //     })\r\n              //   )))\r\n              // },\r\n            }\r\n          ]\r\n\r\n      }\r\n  ]\r\n\r\n        // validators: {\r\n      //   fieldMatch: {\r\n      //     expression(control: any){\r\n      //       const value = control.value;\r\n\r\n      //       return value.passwordConfirm === value.password\r\n      //         // avoid displaying the message error when values are empty\r\n      //         || (!value.passwordConfirm || !value.password);\r\n      //     },\r\n      //     message: 'Password Not Matching',\r\n      //     errorPath: 'passwordConfirm',\r\n\r\n      //   },\r\n      // },\r\n\r\n\r\n  // options: FormlyFormOptions = {\r\n  //   formState: {\r\n  //     selectOptionsData: {\r\n  //       teams: [\r\n  //         { id: '1', name: 'Bayern Munich', sportId: '1' },\r\n  //         { id: '2', name: 'Real Madrid', sportId: '1' },\r\n  //         { id: '3', name: 'Cleveland', sportId: '2' },\r\n  //         { id: '4', name: 'Miami', sportId: '2' },\r\n  //       ],\r\n  //       players: [\r\n  //         { id: '1', name: 'Bayern Munich (Player 1)', teamId: '1' },\r\n  //         { id: '2', name: 'Bayern Munich (Player 2)', teamId: '1' },\r\n  //         { id: '3', name: 'Real Madrid (Player 1)', teamId: '2' },\r\n  //         { id: '4', name: 'Real Madrid (Player 2)', teamId: '2' },\r\n  //         { id: '5', name: 'Cleveland (Player 1)', teamId: '3' },\r\n  //         { id: '6', name: 'Cleveland (Player 2)', teamId: '3' },\r\n  //         { id: '7', name: 'Miami (Player 1)', teamId: '4' },\r\n  //         { id: '8', name: 'Miami (Player 2)', teamId: '4' },\r\n  //       ],\r\n  //     },\r\n  //   },\r\n  // };\r\n\r\n  // fieldsReport: FormlyFieldConfig[] = [\r\n  //   {\r\n  //     fieldGroupClassName: 'field grid nsp-align-left flex justify-content-start align-items-center',\r\n  //     fieldGroup: [\r\n  //       {\r\n  //         template: 'Report ID',\r\n  //         type: \"text\",\r\n  //         className: 'col-2'\r\n  //       },\r\n  //       {\r\n  //         key: 'sport',\r\n  //         type: 'select',\r\n  //         className: 'col-10 formly-dropdown',\r\n  //         templateOptions: {\r\n  //           options: [\r\n  //             { id: '1', name: 'Soccer131321' },\r\n  //             { id: '2', name: 'Basketball' },\r\n  //           ],\r\n  //           valueProp: 'id',\r\n  //           labelProp: 'name',\r\n  //           required: true,\r\n  //           attributes: {\r\n  //           }\r\n  //         },\r\n  //       }\r\n  //     ]\r\n  //   },\r\n  //   {\r\n  //     fieldGroupClassName: 'field grid nsp-align-left flex justify-content-start align-items-center',\r\n  //     fieldGroup: [\r\n  //       {\r\n  //         template: 'Report Start Date',\r\n  //         type: \"text\",\r\n  //         className: 'col-2'\r\n  //       },\r\n  //       {\r\n  //         key: 'team',\r\n  //         className: 'col-10 formly-calendar',\r\n  //         type: 'datepicker',\r\n  //         props: {\r\n  //           placeholder: 'Start Date',\r\n  //           description: 'Description',\r\n  //           dateFormat: 'dd/mm/yy',\r\n  //           hourFormat: '24',\r\n  //           numberOfMonths: 1,\r\n  //           selectionMode: 'single',\r\n  //           required: true,\r\n  //           readonlyInput: false,\r\n  //           showTime: false,\r\n  //           showButtonBar: true,\r\n  //           showIcon: false,\r\n  //           showOtherMonths: true,\r\n  //           selectOtherMonths: false,\r\n  //           monthNavigator: false,\r\n  //           yearNavigator: false,\r\n  //           yearRange: '2020:2030',\r\n  //           minDate: '09/24/2022',\r\n  //           inline: false\r\n  //         },\r\n  //         expressions: {\r\n  //           'props.options': 'formState.selectOptionsData.teams.filter(team => team.sportId === model.sport)',\r\n  //           // reset model when updating select options\r\n  //           'model.team': `field.props.options.find(o => o.id === model.team) ? model.team:null`,\r\n  //         }\r\n  //       }\r\n  //     ]\r\n  //   },\r\n  //   {\r\n  //     fieldGroupClassName: 'field grid nsp-align-left flex justify-content-start align-items-center',\r\n  //     fieldGroup: [\r\n  //       {\r\n  //         template: 'Report End Date',\r\n  //         type: \"text\",\r\n  //         className: 'col-2'\r\n  //       },\r\n  //       {\r\n  //         key: 'player',\r\n  //         className: 'col-10 formly-calendar',\r\n  //         type: 'datepicker',\r\n  //         props: {\r\n  //           placeholder: 'End Date',\r\n  //           description: 'Description',\r\n  //           dateFormat: 'dd/mm/yy',\r\n  //           hourFormat: '24',\r\n  //           numberOfMonths: 1,\r\n  //           selectionMode: 'single',\r\n  //           required: true,\r\n  //           readonlyInput: false,\r\n  //           showTime: false,\r\n  //           showButtonBar: true,\r\n  //           showIcon: false,\r\n  //           showOtherMonths: true,\r\n  //           selectOtherMonths: false,\r\n  //           monthNavigator: false,\r\n  //           yearNavigator: false,\r\n  //           yearRange: '2020:2030',\r\n  //           inline: false\r\n  //         },\r\n  //         expressions: {\r\n  //           'props.options': 'formState.selectOptionsData.players.filter(player => player.teamId === model.team)',\r\n  //           // reset model when updating select options\r\n  //           'model.player': `field.props.options.find(o => o.id === model.player) ? model.player:null`,\r\n  //         },\r\n  //       },\r\n  //     ]\r\n  //   }\r\n  // ]\r\n\r\n  // fieldsReport: FormlyFieldConfig[] = [\r\n  //   {\r\n  //     fieldGroupClassName: 'field grid nsp-align-left flex justify-content-start align-items-center',\r\n  //     fieldGroup: [\r\n  //       {\r\n  //         template: 'Report ID',\r\n  //         type: \"text\",\r\n  //         className: 'col-2'\r\n  //       },\r\n  //       {\r\n  //         key: 'sport',\r\n  //         type: 'select',\r\n  //         className: 'col-10 formly-dropdown',\r\n  //         templateOptions: {\r\n  //           options: [\r\n  //             { id: '1', name: 'Soccer131321' },\r\n  //             { id: '2', name: 'Basketball' },\r\n  //           ],\r\n  //           valueProp: 'id',\r\n  //           labelProp: 'name',\r\n  //           required: true,\r\n  //           attributes: {\r\n  //           }\r\n  //         },\r\n  //       }\r\n  //     ]\r\n  //   },\r\n  //   {\r\n  //     fieldGroupClassName: 'field grid nsp-align-left flex justify-content-start align-items-center',\r\n  //     fieldGroup: [\r\n  //       {\r\n  //         template: 'Report Start Date',\r\n  //         type: \"text\",\r\n  //         className: 'col-2'\r\n  //       },\r\n  //       {\r\n  //         key: 'team',\r\n  //         type: 'select',\r\n  //         className: 'col-10 formly-dropdown',\r\n  //         templateOptions: {\r\n  //           options: [],\r\n  //           valueProp: 'id',\r\n  //           labelProp: 'name',\r\n  //           required: true,\r\n  //         },\r\n  //         expressions: {\r\n  //           'props.options': 'formState.selectOptionsData.teams.filter(team => team.sportId === model.sport)',\r\n  //           // reset model when updating select options\r\n  //           'model.team': `field.props.options.find(o => o.id === model.team) ? model.team:null`,\r\n  //         }\r\n  //       }\r\n  //     ]\r\n  //   },\r\n  //   {\r\n  //     fieldGroupClassName: 'field grid nsp-align-left flex justify-content-start align-items-center',\r\n  //     fieldGroup: [\r\n  //       {\r\n  //         template: 'Report End Date',\r\n  //         type: \"text\",\r\n  //         className: 'col-2'\r\n  //       },\r\n  //       {\r\n  //         key: 'player',\r\n  //         type: 'select',\r\n  //         className: 'col-10 formly-dropdown',\r\n\r\n  //         templateOptions: {\r\n  //           // label: 'Report End Date',\r\n  //           options: [],\r\n  //           valueProp: 'id',\r\n  //           labelProp: 'name',\r\n  //           required: true,\r\n  //         },\r\n  //         expressions: {\r\n  //           'props.options': 'formState.selectOptionsData.players.filter(player => player.teamId === model.team)',\r\n  //           // reset model when updating select options\r\n  //           'model.player': `field.props.options.find(o => o.id === model.player) ? model.player:null`,\r\n  //         },\r\n  //       },\r\n  //     ]\r\n  //   }\r\n  // ]\r\n\r\n\r\n\r\n  constructor(\r\n    private codeService: IcCodeService,\r\n    private _cd:ChangeDetectorRef,\r\n    private workloadService: WorkloadInboxService,\r\n\r\n  ) {\r\n    //\r\n    // this.workloadService.retreiveLetterItems(null).subscribe(resp => {\r\n    //   if(resp.body.data) {\r\n    //     console.log(\"in field\");\r\n    //     // this.fields = this.mapOptionFields(resp.body.data.reportParamObj);\r\n    //   }\r\n    // });\r\n    this.fields = this.mapOptionFields(this.fields);\r\n  }\r\n\r\n  //retain otherwise will have error expression changed after it has been checked\r\n  ngAfterViewChecked(): void {\r\n    this._cd.detectChanges();\r\n  }\r\n  ngOnInit(): void {\r\n    console.log(\"start\");\r\n}\r\n\r\n  getSEClaimOptions(): any{\r\n      this.codeService.gets('claim_option_long')\r\n      .subscribe((codes: any[]) => {\r\n        console.log(\"the codes\", codes);\r\n        this.optionsList = codes[0].map((x:any)=> {\r\n          return {\r\n            value: x.codeId,\r\n            label: x.label['en-US'] as string\r\n          }\r\n        });\r\n        console.log(\"optionslist\", this.optionsList);\r\n      });\r\n\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.onDestroy$.next();\r\n    this.onDestroy$.complete();\r\n  }\r\n\r\n  // Bind an observable to the option fields.\r\n  mapOptionFields(fields: FormlyFieldConfig[]){\r\n    console.log(\"inner fields\", fields);\r\n    return fields.map((f) => {\r\n      console.log(\"the fieldgrp\", f.fieldGroup);\r\n      f.fieldGroup.forEach((innerGrp)=>{\r\n        if(innerGrp.key === 'seClaimOption'){\r\n          innerGrp.type = 'select';\r\n          innerGrp.props.options = this.codeService.gets('claim_option_long').pipe(map((data: any)=>\r\n            data[0].map((s:any)=>({\r\n              value: s.codeId,\r\n              label: s.label['en-US'] as string\r\n            }))))\r\n        }\r\n      })\r\n\r\n      return f;\r\n    });\r\n  }\r\n\r\n  submit() {\r\n    alert(JSON.stringify(this.model));\r\n  }\r\n\r\n\r\n}\r\n\r\n\r\n\r\n  // fields: FormlyFieldConfig[] = [\r\n  //   {\r\n  //     fieldGroupClassName: 'col-12 nsp-align-left flex justify-content-start align-items-center',\r\n  //     fieldGroup: [\r\n  //       {\r\n  //         template: '<p>The amount of allowance entitled and paid to the NSman for&nbsp&nbsp</p>'\r\n  //       },\r\n  //       {\r\n  //         key: 'startDate',\r\n  //         type: 'datepicker',\r\n  //         props: {\r\n  //         placeholder: 'Start Date',\r\n  //         description: 'Description',\r\n  //         dateFormat: 'dd/mm/yy',\r\n  //         hourFormat: '24',\r\n  //         numberOfMonths: 1,\r\n  //         selectionMode: 'single',\r\n  //         required: true,\r\n  //         readonlyInput: false,\r\n  //         showTime: false,\r\n  //         showButtonBar: true,\r\n  //         showIcon: false,\r\n  //         showOtherMonths: true,\r\n  //         selectOtherMonths: false,\r\n  //         monthNavigator: false,\r\n  //         yearNavigator: false,\r\n  //         yearRange: '2020:2030',\r\n  //         inline: false,\r\n  //       }\r\n\r\n  //       },\r\n  //       {\r\n  //         template: '<p>&nbsp&nbspto&nbsp&nbsp</p>'\r\n  //       },\r\n  //       {\r\n  //         key: 'endDate',\r\n  //         type: 'datepicker',\r\n  //         props: {\r\n  //           placeholder: 'End Date',\r\n  //           description: 'Description',\r\n  //           dateFormat: 'dd/mm/yy',\r\n  //           hourFormat: '24',\r\n  //           numberOfMonths: 1,\r\n  //           selectionMode: 'single',\r\n  //           required: true,\r\n  //           readonlyInput: false,\r\n  //           showTime: false,\r\n  //           showButtonBar: true,\r\n  //           showIcon: false,\r\n  //           showOtherMonths: true,\r\n  //           selectOtherMonths: false,\r\n  //           monthNavigator: false,\r\n  //           yearNavigator: false,\r\n  //           yearRange: '2020:2030',\r\n  //           inline: false,\r\n  //         },\r\n  //       }\r\n  //     ]\r\n  //   },\r\n    // {\r\n    //   fieldGroupClassName: 'col-12 nsp-align-left flex justify-content-start align-items-center',\r\n    //   fieldGroup: [\r\n    //     {\r\n    //       template: '<p>The amount of allowance entitled and paid to the NSman for&nbsp&nbsp</p>'\r\n    //     },\r\n    //     {\r\n    //       key: 'seClaimOption',\r\n    //       type: 'input',\r\n    //       props: {\r\n\r\n    //       }\r\n    //       // props: {\r\n    //       //   required: true,\r\n    //       //   options:  this.codeService.gets('claim_option_long').pipe(map((data: any)=>\r\n    //       //     data[0].map((s:any)=>({\r\n    //       //       value: s.codeId,\r\n    //       //       label: s.label['en-US'] as string\r\n    //       //     })\r\n    //       //   )))\r\n    //       // },\r\n    //     }\r\n    //   ]\r\n    // },\r\n    // {\r\n    //   fieldGroupClassName: 'col-12 nsp-align-left flex justify-content-start align-items-center',\r\n    //   fieldGroup: [\r\n    //     {\r\n    //       key: 'firstname',\r\n    //       type: 'input2',\r\n    //     }\r\n    //   ]\r\n    // }\r\n\r\n  // ]\r\n\r\n","<div>\r\n    <form [formGroup] = \"form\" >\r\n        <formly-form [model] = \"model\" [fields] =\"fields\" [form] = \"form\"></formly-form>\r\n    </form>\r\n    <div *ngIf=\"form2.get('startDate')?.hasError('required') && form2.get('team')?.touched\"\r\n    class=\"form-text text-danger\" icTranslate=\"nspay2App.report.validation.V001\">\r\n        Please enter a value\r\n    </div> \r\n</div>\r\n\r\n{{model|json}}\r\n\r\n<!--<form [formGroup]=\"form2\" (ngSubmit)=\"submit()\">\r\n    <formly-form [model]=\"modelReport\" [fields]=\"fieldsReport\" [options]=\"options\" [form]=\"form2\"></formly-form>\r\n    <div *ngIf=\"form2.get('startDate')?.hasError('required') && form2.get('team')?.touched\"\r\n        class=\"form-text text-danger\" icTranslate=\"nspay2App.report.validation.V001\">\r\n        Please enter a value\r\n    </div> works but u should not be knowing the field\r\n    <button type=\"submit\" class=\"btn btn-primary submit-button\" [disabled]=\"!form2.valid\">Submit</button>\r\n</form>-->\r\n\r\n<!-- {{modelReport|json}} -->\r\n\r\n\r\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}