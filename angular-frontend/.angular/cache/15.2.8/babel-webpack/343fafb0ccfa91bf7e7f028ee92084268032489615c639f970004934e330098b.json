{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.FormlyDropdownFormulaComponent = void 0;\nconst tslib_1 = require(\"tslib\");\nconst http_1 = require(\"@angular/common/http\");\nconst core_1 = require(\"@ngx-formly/core\");\nconst i0 = tslib_1.__importStar(require(\"@angular/core\"));\nconst i1 = tslib_1.__importStar(require(\"app/shared/service/formly-map.service\"));\nconst i2 = tslib_1.__importStar(require(\"app/claim/service/claim.service\"));\nconst i3 = tslib_1.__importStar(require(\"@angular/forms\"));\nconst i4 = tslib_1.__importStar(require(\"primeng/dropdown\"));\nconst i5 = tslib_1.__importStar(require(\"@ngx-formly/core\"));\nclass FormlyDropdownFormulaComponent extends core_1.FieldType {\n  constructor(formlyMapService, claimService) {\n    super();\n    this.formlyMapService = formlyMapService;\n    this.claimService = claimService;\n    this.formulas = [];\n  }\n  ngOnInit() {\n    this.getFormulas();\n    console.log(this.formulas);\n  }\n  getFormulas() {\n    let params = new http_1.HttpParams();\n    params = params.append(\"claimType\", \"E\");\n    this.claimService.retrieveFormulaList({\n      params\n    }).subscribe(resp => {\n      if (resp.status === 200 && resp.body.data) {\n        // console.log(resp);\n        resp.body.data.forEach(x => {\n          this.formulas.push({\n            name: x.formulaDesc,\n            key: x.formulaCode\n          });\n        });\n        this.formControl.patchValue(this.formulas.at(0).key);\n      }\n    }, error => {\n      console.log(\"error is\" + String(error?.error?.error_desc));\n    });\n  }\n}\nexports.FormlyDropdownFormulaComponent = FormlyDropdownFormulaComponent;\nFormlyDropdownFormulaComponent.ɵfac = function FormlyDropdownFormulaComponent_Factory(t) {\n  return new (t || FormlyDropdownFormulaComponent)(i0.ɵɵdirectiveInject(i1.FormlyMapService), i0.ɵɵdirectiveInject(i2.ClaimService));\n};\nFormlyDropdownFormulaComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: FormlyDropdownFormulaComponent,\n  selectors: [[\"n2-dropdown-formula\"]],\n  features: [i0.ɵɵInheritDefinitionFeature],\n  decls: 3,\n  vars: 4,\n  consts: [[\"optionLabel\", \"name\", \"optionValue\", \"key\", 3, \"options\", \"formControl\", \"formlyAttributes\", \"placeholder\"]],\n  template: function FormlyDropdownFormulaComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtext(0, \"\\n  \");\n      i0.ɵɵelement(1, \"p-dropdown\", 0);\n      i0.ɵɵtext(2, \"\\n  \");\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"options\", ctx.formulas)(\"formControl\", ctx.formControl)(\"formlyAttributes\", ctx.field)(\"placeholder\", ctx.to.placeholder);\n    }\n  },\n  dependencies: [i3.NgControlStatus, i3.FormControlDirective, i4.Dropdown, i5.ɵFormlyAttributes],\n  encapsulation: 2\n});","map":{"version":3,"mappings":";;;;;;;AAAA;AAEA;;;;;;;AAKA,MAQaA,8BAA+B,SAAQC,gBAA0B;EAI5EC,YACUC,gBAAkC,EAClCC,YAA0B;IAElC,KAAK,EAAE;IAHC,qBAAgB,GAAhBD,gBAAgB;IAChB,iBAAY,GAAZC,YAAY;IAJtB,aAAQ,GAAU,EAAE;EAOpB;EAEAC,QAAQ;IACN,IAAI,CAACC,WAAW,EAAE;IAClBC,OAAO,CAACC,GAAG,CAAC,IAAI,CAACC,QAAQ,CAAC;EAC5B;EAEAH,WAAW;IACT,IAAII,MAAM,GAAG,IAAIC,iBAAU,EAAE;IAC7BD,MAAM,GAAGA,MAAM,CAACE,MAAM,CAAC,WAAW,EAAE,GAAG,CAAC;IACxC,IAAI,CAACR,YAAY,CAACS,mBAAmB,CAAC;MAAEH;IAAM,CAAE,CAAC,CAACI,SAAS,CAAEC,IAAS,IAAI;MACxE,IAAIA,IAAI,CAACC,MAAM,KAAK,GAAG,IAAID,IAAI,CAACE,IAAI,CAACC,IAAI,EAAE;QACzC;QACAH,IAAI,CAACE,IAAI,CAACC,IAAI,CAACC,OAAO,CAAEC,CAAM,IAAI;UAChC,IAAI,CAACX,QAAQ,CAACY,IAAI,CAAC;YACjBC,IAAI,EAAEF,CAAC,CAACG,WAAW;YACnBC,GAAG,EAAEJ,CAAC,CAACK;WACR,CAAC;QACJ,CAAC,CAAC;QACF,IAAI,CAACC,WAAW,CAACC,UAAU,CAAC,IAAI,CAAClB,QAAQ,CAACmB,EAAE,CAAC,CAAC,CAAC,CAACJ,GAAG,CAAC;;IAExD,CAAC,EACEK,KAAU,IAAI;MACbtB,OAAO,CAACC,GAAG,CAAC,UAAU,GAAGsB,MAAM,CAACD,KAAK,EAAEA,KAAK,EAAEE,UAAU,CAAC,CAAC;IAC5D,CAAC,CAAC;EACN;;AA1CFC;;mBAQahC,8BAA8B;AAAA;;QAA9BA,8BAA8B;EAAAiC;EAAAC;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MALzCC;MAAAA,gCAEiF;MACjFA;;;MAHYA,eAAoB;MAApBA,sCAAoB","names":["FormlyDropdownFormulaComponent","core_1","constructor","formlyMapService","claimService","ngOnInit","getFormulas","console","log","formulas","params","http_1","append","retrieveFormulaList","subscribe","resp","status","body","data","forEach","x","push","name","formulaDesc","key","formulaCode","formControl","patchValue","at","error","String","error_desc","exports","selectors","features","decls","vars","consts","template","i0"],"sourceRoot":"","sources":["C:\\Users\\D1347074\\Desktop\\projects 2\\nspayiiapp\\src\\main\\webapp\\app\\shared\\component\\formly-input-field\\formly-dropdown-formula.component.ts"],"sourcesContent":["import { HttpParams } from '@angular/common/http';\r\nimport { Component, OnDestroy, OnInit } from '@angular/core';\r\nimport { FieldType, FieldTypeConfig } from '@ngx-formly/core';\r\nimport { ClaimService } from 'app/claim/service/claim.service';\r\nimport { FormlyMapService } from 'app/shared/service/formly-map.service';\r\nimport { InputNumberModule } from 'primeng/inputnumber';\r\n\r\n@Component({\r\n  selector: 'n2-dropdown-formula',\r\n  template: `\r\n  <p-dropdown [options]=\"formulas\"\r\n  [formControl]=\"formControl\" [formlyAttributes]=\"field\"\r\n  [placeholder]=\"to.placeholder\" optionLabel=\"name\" optionValue=\"key\"></p-dropdown>\r\n  `,\r\n})\r\nexport class FormlyDropdownFormulaComponent extends FieldType<FieldTypeConfig> implements OnInit {\r\n\r\n  formulas: any[] = [];\r\n\r\n  constructor(\r\n    private formlyMapService: FormlyMapService,\r\n    private claimService: ClaimService\r\n  ) {\r\n    super();\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.getFormulas();\r\n    console.log(this.formulas);\r\n  }\r\n\r\n  getFormulas(): void {\r\n    let params = new HttpParams();\r\n    params = params.append(\"claimType\", \"E\");\r\n    this.claimService.retrieveFormulaList({ params }).subscribe((resp: any) => {\r\n      if (resp.status === 200 && resp.body.data) {\r\n        // console.log(resp);\r\n        resp.body.data.forEach((x: any) => {\r\n          this.formulas.push({\r\n            name: x.formulaDesc,\r\n            key: x.formulaCode\r\n          });\r\n        })\r\n        this.formControl.patchValue(this.formulas.at(0).key);\r\n      }\r\n    },\r\n      (error: any) => {\r\n        console.log(\"error is\" + String(error?.error?.error_desc));\r\n      });\r\n  }\r\n}"]},"metadata":{},"sourceType":"script","externalDependencies":[]}