{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TypeAndValueValidator = void 0;\nclass TypeAndValueValidator {\n  static validateTypeAndValue(t, i) {\n    return c => {\n      const type = c.get(t).value;\n      const input = c.get(i).value;\n      if ((type !== '' || type !== null) && (input !== '' || input !== null)) {\n        if (type === 'NRIC') {\n          return new RegExp('^[ST][0-9]{7}[A-Z]$').test(input) ? null : {\n            invalidInput: true\n          };\n        } else if (type === 'Case ID') {\n          return new RegExp('^[SE]{1,2}[0-9]{2}[-][0-9]{4}$').test(input) ? null : {\n            invalidInput: true\n          };\n        } else {\n          return {\n            invalidInput: true\n          };\n        }\n      } else {\n        return {\n          invalidInput: true\n        };\n      }\n    };\n  }\n}\nexports.TypeAndValueValidator = TypeAndValueValidator;","map":{"version":3,"mappings":";;;;;;AAEA,MAAaA,qBAAqB;EAEhC,OAAOC,oBAAoB,CAACC,CAAS,EAAEC,CAAS;IAC9C,OAAQC,CAAkB,IAAuC;MAC/D,MAAMC,IAAI,GAAGD,CAAC,CAACE,GAAG,CAACJ,CAAC,CAAC,CAACK,KAAK;MAC3B,MAAMC,KAAK,GAAGJ,CAAC,CAACE,GAAG,CAACH,CAAC,CAAC,CAACI,KAAK;MAC5B,IAAI,CAACF,IAAI,KAAK,EAAE,IAAIA,IAAI,KAAK,IAAI,MAAMG,KAAK,KAAK,EAAE,IAAIA,KAAK,KAAK,IAAI,CAAC,EAAE;QACtE,IAAIH,IAAI,KAAK,MAAM,EAAE;UACnB,OAAO,IAAII,MAAM,CAAC,qBAAqB,CAAC,CAACC,IAAI,CAACF,KAAK,CAAC,GAAG,IAAI,GAAG;YAAEG,YAAY,EAAE;UAAI,CAAE;SACrF,MACI,IAAIN,IAAI,KAAK,SAAS,EAAE;UAC3B,OAAO,IAAII,MAAM,CAAC,gCAAgC,CAAC,CAACC,IAAI,CAACF,KAAK,CAAC,GAAG,IAAI,GAAG;YAAEG,YAAY,EAAE;UAAI,CAAE;SAChG,MAAM;UACL,OAAO;YAAEA,YAAY,EAAE;UAAI,CAAE;;OAEhC,MAAM;QACL,OAAO;UAAEA,YAAY,EAAE;QAAI,CAAE;;IAEjC,CAAC;EACH;;AAnBFC","names":["TypeAndValueValidator","validateTypeAndValue","t","i","c","type","get","value","input","RegExp","test","invalidInput","exports"],"sourceRoot":"","sources":["C:\\Users\\D1347074\\Desktop\\projects 2\\nspayiiapp\\src\\main\\webapp\\app\\shared\\validator\\type-and-value.directive.ts"],"sourcesContent":["import { ValidatorFn, AbstractControl } from '@angular/forms';\r\n\r\nexport class TypeAndValueValidator {\r\n\r\n  static validateTypeAndValue(t: string, i: string): ValidatorFn {\r\n    return (c: AbstractControl): { [key: string]: boolean } | null => {\r\n      const type = c.get(t).value;\r\n      const input = c.get(i).value;\r\n      if ((type !== '' || type !== null) && (input !== '' || input !== null)) {\r\n        if (type === 'NRIC') {\r\n          return new RegExp('^[ST][0-9]{7}[A-Z]$').test(input) ? null : { invalidInput: true };\r\n        }\r\n        else if (type === 'Case ID') {\r\n          return new RegExp('^[SE]{1,2}[0-9]{2}[-][0-9]{4}$').test(input) ? null : { invalidInput: true };\r\n        } else {\r\n          return { invalidInput: true };\r\n        }\r\n      } else {\r\n        return { invalidInput: true };\r\n      }\r\n    }\r\n  }\r\n\r\n}"]},"metadata":{},"sourceType":"script","externalDependencies":[]}