{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.JobExecutionService = void 0;\nconst tslib_1 = require(\"tslib\");\nconst operators_1 = require(\"rxjs/operators\");\nconst app_constants_1 = require(\"app/app.constants\");\nconst dayjs_1 = tslib_1.__importDefault(require(\"dayjs\"));\nconst request_util_1 = require(\"app/core/request/request-util\");\nconst i0 = tslib_1.__importStar(require(\"@angular/core\"));\nconst i1 = tslib_1.__importStar(require(\"@angular/common/http\"));\nconst i2 = tslib_1.__importStar(require(\"app/shared/service/ns2-http.service\"));\nclass JobExecutionService {\n  constructor(http, ns2Http) {\n    this.http = http;\n    this.ns2Http = ns2Http;\n    this.resourceUrl = app_constants_1.SERVER_API_URL + 'api/job-executions';\n    this.jobNameListUrl = app_constants_1.SERVER_API_URL + 'api/job-instances/batchjobNameList';\n    this.jobExecutionStatusListUrl = app_constants_1.SERVER_API_URL + 'api/job-executions/executionStatus';\n    this.jobExecutionQueryUrl = app_constants_1.SERVER_API_URL + 'api/job-executions/search';\n    this.jobParameterList = app_constants_1.SERVER_API_URL + 'api/job-executions/jobParameters';\n    this.jobStepList = app_constants_1.SERVER_API_URL + 'api/job-executions/steps';\n  }\n  getBatchJobNameList() {\n    return this.http.get(`${this.jobNameListUrl}`, {\n      observe: 'response'\n    }).pipe((0, operators_1.map)(res => res.body));\n  }\n  getBatchJobStatusList() {\n    return this.http.get(`${this.jobExecutionStatusListUrl}`, {\n      observe: 'response'\n    }).pipe((0, operators_1.map)(res => res.body));\n  }\n  create(jobExecution) {\n    const copy = this.convert(jobExecution);\n    return this.http.post(this.resourceUrl, copy, {\n      observe: 'response'\n    }).pipe((0, operators_1.map)(res => this.convertResponse(res)));\n  }\n  update(jobExecution) {\n    const copy = this.convert(jobExecution);\n    return this.http.put(this.resourceUrl, copy, {\n      observe: 'response'\n    }).pipe((0, operators_1.map)(res => this.convertResponse(res)));\n  }\n  find(id) {\n    return this.http.get(`${this.resourceUrl}/${id}`, {\n      observe: 'response'\n    }).pipe((0, operators_1.map)(res => this.convertResponse(res)));\n  }\n  getJobParameters(id) {\n    return this.http.get(`${this.jobParameterList}/${id}`, {\n      observe: 'response'\n    }).pipe((0, operators_1.map)(res => this.convertArrayResponseForParameter(res)));\n  }\n  getJobSteps(id) {\n    return this.http.get(`${this.jobStepList}/${id}`, {\n      observe: 'response'\n    }).pipe((0, operators_1.map)(res => this.convertArrayResponseForStep(res)));\n  }\n  query(req) {\n    const options = (0, request_util_1.createRequestOption)(req);\n    return this.http.get(this.jobExecutionQueryUrl, {\n      params: options,\n      observe: 'response'\n    }).pipe((0, operators_1.map)(res => this.convertArrayResponse(res)));\n  }\n  search(options) {\n    return this.ns2Http.get(this.jobExecutionQueryUrl, options);\n  }\n  delete(id) {\n    return this.http.delete(`${this.resourceUrl}/${id}`, {\n      observe: 'response'\n    });\n  }\n  convertResponse(res) {\n    const body = this.convertItemFromServer(res.body);\n    return res.clone({\n      body\n    });\n  }\n  convertArrayResponse(res) {\n    const jsonResponse = res.body;\n    const body = [];\n    for (let i = 0; i < jsonResponse.length; i++) {\n      body.push(this.convertItemFromServer(jsonResponse[i]));\n    }\n    return res.clone({\n      body\n    });\n  }\n  convertArrayResponseForStep(res) {\n    const jsonResponse = res.body;\n    const body = [];\n    for (let i = 0; i < jsonResponse.length; i++) {\n      body.push(this.convertItemFromServerForStep(jsonResponse[i]));\n    }\n    return res.clone({\n      body\n    });\n  }\n  convertArrayResponseForParameter(res) {\n    const jsonResponse = res.body;\n    const body = [];\n    for (let i = 0; i < jsonResponse.length; i++) {\n      body.push(this.convertItemFromServerForParameter(jsonResponse[i]));\n    }\n    return res.clone({\n      body\n    });\n  }\n  /**\r\n   * Convert a returned JSON object to JobExecution.\r\n   */\n  convertItemFromServer(jobExecution) {\n    jobExecution.startTime = jobExecution.startTime ? (0, dayjs_1.default)(jobExecution.startTime) : undefined;\n    jobExecution.endTime = jobExecution.endTime ? (0, dayjs_1.default)(jobExecution.endTime) : undefined;\n    return jobExecution;\n  }\n  /**\r\n   * Convert a returned JSON object to JobExecutionParameter.\r\n   */\n  convertItemFromServerForParameter(jobExecutionParameter) {\n    jobExecutionParameter.dateValue = jobExecutionParameter.dateValue ? (0, dayjs_1.default)(jobExecutionParameter.dateValue) : undefined;\n    return jobExecutionParameter;\n  }\n  /**\r\n   * Convert a returned JSON object to JobExecutionStep.\r\n   */\n  convertItemFromServerForStep(jobExecutionStep) {\n    jobExecutionStep.startTime = jobExecutionStep.startTime ? (0, dayjs_1.default)(jobExecutionStep.startTime) : undefined;\n    jobExecutionStep.endTime = jobExecutionStep.endTime ? (0, dayjs_1.default)(jobExecutionStep.endTime) : undefined;\n    return jobExecutionStep;\n  }\n  /**\r\n   * Convert a JobExecution to a JSON which can be sent to the server.\r\n   */\n  convert(jobExecution) {\n    return Object.assign({}, jobExecution, {\n      startTime: jobExecution.startTime?.isValid() ? jobExecution.startTime.toJSON() : undefined,\n      endTime: jobExecution.endTime?.isValid() ? jobExecution.endTime.toJSON() : undefined\n    });\n  }\n}\nexports.JobExecutionService = JobExecutionService;\nJobExecutionService.ɵfac = function JobExecutionService_Factory(t) {\n  return new (t || JobExecutionService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Ns2HttpService));\n};\nJobExecutionService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: JobExecutionService,\n  factory: JobExecutionService.ɵfac\n});","map":{"version":3,"mappings":"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","names":["JobExecutionService","constructor","http","ns2Http","app_constants_1","getBatchJobNameList","get","jobNameListUrl","observe","pipe","res","body","getBatchJobStatusList","jobExecutionStatusListUrl","create","jobExecution","copy","convert","post","resourceUrl","convertResponse","update","put","find","id","getJobParameters","jobParameterList","convertArrayResponseForParameter","getJobSteps","jobStepList","convertArrayResponseForStep","query","req","options","jobExecutionQueryUrl","params","convertArrayResponse","search","delete","convertItemFromServer","clone","jsonResponse","i","length","push","convertItemFromServerForStep","convertItemFromServerForParameter","startTime","undefined","endTime","jobExecutionParameter","dateValue","jobExecutionStep","Object","assign","isValid","toJSON","exports","factory"],"sourceRoot":"","sources":["C:\\Users\\D1347074\\Desktop\\projects 2\\nspayiiapp\\src\\main\\webapp\\app\\admin\\batch\\job-execution\\job-execution.service.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-unsafe-return */\r\nimport { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpResponse } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { SERVER_API_URL } from 'app/app.constants';\r\nimport dayjs from 'dayjs';\r\nimport { JobExecution, JobExecutionStep, JobExecutionParameter } from './job-execution.model';\r\nimport { createRequestOption } from 'app/core/request/request-util';\r\nimport {Ns2HttpService} from \"app/shared/service/ns2-http.service\";\r\n\r\nexport type EntityResponseType = HttpResponse<JobExecution>;\r\n\r\n@Injectable()\r\nexport class JobExecutionService {\r\n  private resourceUrl = SERVER_API_URL + 'api/job-executions';\r\n  private jobNameListUrl = SERVER_API_URL + 'api/job-instances/batchjobNameList';\r\n  private jobExecutionStatusListUrl = SERVER_API_URL + 'api/job-executions/executionStatus';\r\n  private jobExecutionQueryUrl = SERVER_API_URL + 'api/job-executions/search';\r\n  private jobParameterList = SERVER_API_URL + 'api/job-executions/jobParameters';\r\n  private jobStepList = SERVER_API_URL + 'api/job-executions/steps';\r\n\r\n  constructor(private http: HttpClient, private ns2Http: Ns2HttpService) {}\r\n\r\n  getBatchJobNameList(): Observable<any> {\r\n    return this.http.get(`${this.jobNameListUrl}`, { observe: 'response' }).pipe(map((res: HttpResponse<any>) => res.body));\r\n  }\r\n\r\n  getBatchJobStatusList(): Observable<any> {\r\n    return this.http.get(`${this.jobExecutionStatusListUrl}`, { observe: 'response' }).pipe(map((res: HttpResponse<any>) => res.body));\r\n  }\r\n\r\n  create(jobExecution: JobExecution): Observable<EntityResponseType> {\r\n    const copy = this.convert(jobExecution);\r\n    return this.http\r\n      .post<JobExecution>(this.resourceUrl, copy, { observe: 'response' })\r\n      .pipe(map((res: EntityResponseType) => this.convertResponse(res)));\r\n  }\r\n\r\n  update(jobExecution: JobExecution): Observable<EntityResponseType> {\r\n    const copy = this.convert(jobExecution);\r\n    return this.http\r\n      .put<JobExecution>(this.resourceUrl, copy, { observe: 'response' })\r\n      .pipe(map((res: EntityResponseType) => this.convertResponse(res)));\r\n  }\r\n\r\n  find(id: number): Observable<EntityResponseType> {\r\n    return this.http\r\n      .get<JobExecution>(`${this.resourceUrl}/${id}`, { observe: 'response' })\r\n      .pipe(map((res: EntityResponseType) => this.convertResponse(res)));\r\n  }\r\n\r\n  getJobParameters(id: number): Observable<HttpResponse<JobExecutionParameter[]>> {\r\n    return this.http\r\n      .get<JobExecutionParameter[]>(`${this.jobParameterList}/${id}`, { observe: 'response' })\r\n      .pipe(map((res: HttpResponse<JobExecutionParameter[]>) => this.convertArrayResponseForParameter(res)));\r\n  }\r\n\r\n  getJobSteps(id: number): Observable<HttpResponse<JobExecutionStep[]>> {\r\n    return this.http\r\n      .get<JobExecutionStep[]>(`${this.jobStepList}/${id}`, { observe: 'response' })\r\n      .pipe(map((res: HttpResponse<JobExecutionStep[]>) => this.convertArrayResponseForStep(res)));\r\n  }\r\n\r\n  query(req?: any): Observable<HttpResponse<JobExecution[]>> {\r\n    const options = createRequestOption(req);\r\n    return this.http\r\n      .get<JobExecution[]>(this.jobExecutionQueryUrl, { params: options, observe: 'response' })\r\n      .pipe(map((res: HttpResponse<JobExecution[]>) => this.convertArrayResponse(res)));\r\n  }\r\n\r\n  public search(options?: any): Observable<HttpResponse<any>> {\r\n    return this.ns2Http.get(this.jobExecutionQueryUrl, options);\r\n  }\r\n\r\n  delete(id: number): Observable<HttpResponse<any>> {\r\n    return this.http.delete<any>(`${this.resourceUrl}/${id}`, { observe: 'response' });\r\n  }\r\n\r\n  private convertResponse(res: EntityResponseType): EntityResponseType {\r\n    const body: JobExecution = this.convertItemFromServer(res.body as any);\r\n    return res.clone({ body });\r\n  }\r\n\r\n  private convertArrayResponse(res: HttpResponse<JobExecution[]>): HttpResponse<JobExecution[]> {\r\n    const jsonResponse: JobExecution[] = res.body as any;\r\n    const body: JobExecution[] = [];\r\n    for (let i = 0; i < jsonResponse.length; i++) {\r\n      body.push(this.convertItemFromServer(jsonResponse[i]));\r\n    }\r\n    return res.clone({ body });\r\n  }\r\n\r\n  private convertArrayResponseForStep(res: HttpResponse<JobExecutionStep[]>): HttpResponse<JobExecutionStep[]> {\r\n    const jsonResponse: JobExecutionStep[] = res.body as any;\r\n    const body: JobExecutionStep[] = [];\r\n    for (let i = 0; i < jsonResponse.length; i++) {\r\n      body.push(this.convertItemFromServerForStep(jsonResponse[i]));\r\n    }\r\n    return res.clone({ body });\r\n  }\r\n\r\n  private convertArrayResponseForParameter(res: HttpResponse<JobExecutionParameter[]>): HttpResponse<JobExecutionParameter[]> {\r\n    const jsonResponse: JobExecutionParameter[] = res.body as any;\r\n    const body: JobExecutionParameter[] = [];\r\n    for (let i = 0; i < jsonResponse.length; i++) {\r\n      body.push(this.convertItemFromServerForParameter(jsonResponse[i]));\r\n    }\r\n    return res.clone({ body });\r\n  }\r\n\r\n  /**\r\n   * Convert a returned JSON object to JobExecution.\r\n   */\r\n  private convertItemFromServer(jobExecution: JobExecution): JobExecution {\r\n    jobExecution.startTime = jobExecution.startTime ? dayjs(jobExecution.startTime) : undefined;\r\n    jobExecution.endTime = jobExecution.endTime ? dayjs(jobExecution.endTime) : undefined;\r\n    return jobExecution;\r\n  }\r\n\r\n  /**\r\n   * Convert a returned JSON object to JobExecutionParameter.\r\n   */\r\n  private convertItemFromServerForParameter(jobExecutionParameter: JobExecutionParameter): JobExecutionParameter {\r\n    jobExecutionParameter.dateValue = jobExecutionParameter.dateValue ? dayjs(jobExecutionParameter.dateValue) : undefined;\r\n    return jobExecutionParameter;\r\n  }\r\n\r\n  /**\r\n   * Convert a returned JSON object to JobExecutionStep.\r\n   */\r\n  private convertItemFromServerForStep(jobExecutionStep: JobExecutionStep): JobExecutionStep {\r\n    jobExecutionStep.startTime = jobExecutionStep.startTime ? dayjs(jobExecutionStep.startTime) : undefined;\r\n    jobExecutionStep.endTime = jobExecutionStep.endTime ? dayjs(jobExecutionStep.endTime) : undefined;\r\n    return jobExecutionStep;\r\n  }\r\n\r\n  /**\r\n   * Convert a JobExecution to a JSON which can be sent to the server.\r\n   */\r\n  private convert(jobExecution: JobExecution): JobExecution {\r\n    return Object.assign({}, jobExecution, {\r\n      startTime: jobExecution.startTime?.isValid() ? jobExecution.startTime.toJSON() : undefined,\r\n      endTime: jobExecution.endTime?.isValid() ? jobExecution.endTime.toJSON() : undefined,\r\n    });\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}