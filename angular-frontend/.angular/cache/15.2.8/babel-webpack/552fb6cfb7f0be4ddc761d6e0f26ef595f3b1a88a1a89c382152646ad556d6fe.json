{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.LoginComponent = void 0;\nconst tslib_1 = require(\"tslib\");\nconst forms_1 = require(\"@angular/forms\");\nconst crypto_js_1 = require(\"crypto-js\");\nconst user_forcelogin_dialog_component_1 = require(\"./user-forcelogin-dialog.component\");\nconst i0 = tslib_1.__importStar(require(\"@angular/core\"));\nconst i1 = tslib_1.__importStar(require(\"app/core/auth/account.service\"));\nconst i2 = tslib_1.__importStar(require(\"app/login/login.service\"));\nconst i3 = tslib_1.__importStar(require(\"@angular/router\"));\nconst i4 = tslib_1.__importStar(require(\"@angular/forms\"));\nconst i5 = tslib_1.__importStar(require(\"@ng-bootstrap/ng-bootstrap\"));\nconst i6 = tslib_1.__importStar(require(\"app/core/auth/encrypt.service\"));\nconst i7 = tslib_1.__importStar(require(\"./user-idle.service\"));\nconst i8 = tslib_1.__importStar(require(\"@angular/common\"));\nconst i9 = tslib_1.__importStar(require(\"../shared/language/translate.directive\"));\nconst i10 = tslib_1.__importStar(require(\"@ngx-translate/core\"));\nconst _c0 = [\"username\"];\nfunction LoginComponent_div_21_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 19);\n    i0.ɵɵtext(1, \"\\n        \");\n    i0.ɵɵelementStart(2, \"strong\");\n    i0.ɵɵtext(3, \"Failed to sign in!\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(4, \" Please check your credentials and try again.\\n      \");\n    i0.ɵɵelementEnd();\n  }\n}\nclass LoginComponent {\n  constructor(accountService, loginService, router, fb, modalService, encryptService, userIdleService) {\n    this.accountService = accountService;\n    this.loginService = loginService;\n    this.router = router;\n    this.fb = fb;\n    this.modalService = modalService;\n    this.encryptService = encryptService;\n    this.userIdleService = userIdleService;\n    this.authenticationError = false;\n    this.loginResult = '';\n    this.loginForm = this.fb.group({\n      username: [null, [forms_1.Validators.required]],\n      password: [null, [forms_1.Validators.required]],\n      rememberMe: [false]\n    });\n  }\n  ngOnInit() {\n    // if already authenticated then navigate to home page\n    this.accountService.identity().subscribe(() => {\n      if (this.accountService.isAuthenticated()) {\n        this.router.navigate(['']);\n      }\n    });\n  }\n  ngAfterViewInit() {\n    if (this.username) {\n      this.username.nativeElement.focus();\n    }\n  }\n  login() {\n    const secretKey = crypto_js_1.lib.WordArray.random(8).toString();\n    const initialValue = crypto_js_1.lib.WordArray.random(8).toString();\n    this.loginService.login({\n      username: this.encryptService.encryptProfile(this.loginForm.get('username').value, secretKey, initialValue),\n      password: this.encryptService.encryptProfile(this.loginForm.get('password').value, secretKey, initialValue),\n      rememberMe: this.loginForm.get('rememberMe').value,\n      key: secretKey,\n      iv: initialValue\n    }).subscribe(() => {\n      this.authenticationError = false;\n      this.userIdleService.setUserIdle();\n      if (!this.router.getCurrentNavigation()) {\n        // There were no routing during login (eg from navigationToStoredUrl)\n        this.router.navigate(['']);\n      }\n    }, error => {\n      // processing for the first login\n      if (error.headers && error.headers.get('errorcode') === '901') {\n        const username = error.headers.get('username');\n        this.router.navigate(['/account/reset', 'request', username, true], error);\n      } else if (error.headers && error.headers.get('errorcode') === '911') {\n        const loginName = error.headers.get('loginName');\n        const authMethod = error.headers.get('authMethod');\n        const modalRef = this.modalService.open(user_forcelogin_dialog_component_1.UserForceLoginDialogComponent, {\n          size: 'lg',\n          backdrop: 'static'\n        });\n        modalRef.componentInstance.loginName = loginName;\n        modalRef.componentInstance.authMethod = authMethod;\n      } else {\n        this.authenticationError = true;\n      }\n    });\n  }\n  // Kerberos Added 20220408 , Start\n  loginKerberos() {\n    this.loginService.loginKerberos().subscribe(() => {\n      this.authenticationError = false;\n      this.userIdleService.setUserIdle();\n      if (!this.router.getCurrentNavigation()) {\n        // There were no routing during login (eg from navigationToStoredUrl)\n        this.router.navigate(['']);\n      }\n    }, err => {\n      console.log(err);\n      this.authenticationError = true;\n    });\n  }\n  // Kerberos Added 20220408 , End\n  requestResetPassword() {\n    this.router.navigate(['/account/reset', 'request']);\n  }\n  goToForgetPwd() {\n    this.router.navigate(['/account/password', 'request']);\n  }\n}\nexports.LoginComponent = LoginComponent;\nLoginComponent.ɵfac = function LoginComponent_Factory(t) {\n  return new (t || LoginComponent)(i0.ɵɵdirectiveInject(i1.AccountService), i0.ɵɵdirectiveInject(i2.LoginService), i0.ɵɵdirectiveInject(i3.Router), i0.ɵɵdirectiveInject(i4.FormBuilder), i0.ɵɵdirectiveInject(i5.NgbModal), i0.ɵɵdirectiveInject(i6.EncryptService), i0.ɵɵdirectiveInject(i7.UserIdleService));\n};\nLoginComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: LoginComponent,\n  selectors: [[\"ic-login\"]],\n  viewQuery: function LoginComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c0, 5);\n    }\n    if (rf & 2) {\n      let _t;\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.username = _t.first);\n    }\n  },\n  decls: 69,\n  vars: 8,\n  consts: [[1, \"row\", \"justify-content-center\"], [1, \"col-lg-6\", \"col-md-8\", \"col-sm-10\"], [3, \"click\"], [\"icTranslate\", \"login.title\", \"data-cy\", \"loginTitle\"], [\"class\", \"alert alert-danger\", \"icTranslate\", \"login.messages.error.authentication\", \"data-cy\", \"loginError\", 4, \"ngIf\"], [\"role\", \"form\", \"method\", \"post\", 1, \"form\", 3, \"formGroup\", \"ngSubmit\"], [1, \"rounded-pill\"], [\"for\", \"username\", \"icTranslate\", \"global.form.username.label\", 1, \"username-label\"], [\"type\", \"text\", \"name\", \"username\", \"id\", \"username\", \"formControlName\", \"username\", \"autocomplete\", \"off\", \"data-cy\", \"username\", 1, \"form-control\", 3, \"placeholder\"], [\"username\", \"\"], [\"for\", \"password\", \"icTranslate\", \"login.form.password\"], [\"type\", \"password\", \"name\", \"password\", \"id\", \"password\", \"formControlName\", \"password\", \"data-cy\", \"password\", \"autocomplete\", \"off\", 1, \"form-control\", 3, \"placeholder\"], [1, \"form-check\"], [\"for\", \"rememberMe\", 1, \"form-check-label\"], [\"type\", \"checkbox\", \"name\", \"rememberMe\", \"id\", \"rememberMe\", \"formControlName\", \"rememberMe\", 1, \"form-check-input\"], [\"icTranslate\", \"login.form.rememberme\"], [\"type\", \"submit\", \"icTranslate\", \"login.form.button\", \"data-cy\", \"submit\", 1, \"btn\", \"btn-primary\"], [1, \"mt-3\", \"alert\", \"alert-warning\"], [\"routerLink\", \"/account/password/request\", \"icTranslate\", \"login.password.forgot\", \"data-cy\", \"forgetYourPasswordSelector\", 1, \"alert-link\"], [\"icTranslate\", \"login.messages.error.authentication\", \"data-cy\", \"loginError\", 1, \"alert\", \"alert-danger\"]],\n  template: function LoginComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\");\n      i0.ɵɵtext(1, \"\\n  \");\n      i0.ɵɵelementStart(2, \"div\", 0);\n      i0.ɵɵtext(3, \"\\n    \");\n      i0.ɵɵelementStart(4, \"div\", 1);\n      i0.ɵɵtext(5, \"\\n      \");\n      i0.ɵɵelementStart(6, \"h1\");\n      i0.ɵɵtext(7, \"Kerberos Sign In\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(8, \"\\n      \");\n      i0.ɵɵelementStart(9, \"button\", 2);\n      i0.ɵɵlistener(\"click\", function LoginComponent_Template_button_click_9_listener() {\n        return ctx.loginKerberos();\n      });\n      i0.ɵɵtext(10, \"Login Kerberos\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(11, \"\\n    \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(12, \"\\n  \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(13, \"\\n  \");\n      i0.ɵɵelementStart(14, \"div\", 0);\n      i0.ɵɵtext(15, \"\\n    \");\n      i0.ɵɵelementStart(16, \"div\", 1);\n      i0.ɵɵtext(17, \"\\n\\n      \");\n      i0.ɵɵelementStart(18, \"h1\", 3);\n      i0.ɵɵtext(19, \"Sign in\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(20, \"\\n      \");\n      i0.ɵɵtemplate(21, LoginComponent_div_21_Template, 5, 0, \"div\", 4);\n      i0.ɵɵtext(22, \"\\n      \");\n      i0.ɵɵelementStart(23, \"form\", 5);\n      i0.ɵɵlistener(\"ngSubmit\", function LoginComponent_Template_form_ngSubmit_23_listener() {\n        return ctx.login();\n      });\n      i0.ɵɵtext(24, \"\\n        \");\n      i0.ɵɵelementStart(25, \"div\", 6);\n      i0.ɵɵtext(26, \"\\n          \");\n      i0.ɵɵelementStart(27, \"label\", 7);\n      i0.ɵɵtext(28, \"Login\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(29, \"\\n          \");\n      i0.ɵɵelement(30, \"input\", 8, 9);\n      i0.ɵɵpipe(32, \"translate\");\n      i0.ɵɵtext(33, \"\\n        \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(34, \"\\n\\n        \");\n      i0.ɵɵelementStart(35, \"div\", 6);\n      i0.ɵɵtext(36, \"\\n          \");\n      i0.ɵɵelementStart(37, \"label\", 10);\n      i0.ɵɵtext(38, \"Password\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(39, \"\\n          \");\n      i0.ɵɵelement(40, \"input\", 11);\n      i0.ɵɵpipe(41, \"translate\");\n      i0.ɵɵtext(42, \"\\n        \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(43, \"\\n\\n        \");\n      i0.ɵɵelementStart(44, \"div\", 12);\n      i0.ɵɵtext(45, \"\\n          \");\n      i0.ɵɵelementStart(46, \"label\", 13);\n      i0.ɵɵtext(47, \"\\n            \");\n      i0.ɵɵelement(48, \"input\", 14);\n      i0.ɵɵtext(49, \"\\n            \");\n      i0.ɵɵelementStart(50, \"span\", 15);\n      i0.ɵɵtext(51, \"Remember me\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(52, \"\\n          \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(53, \"\\n        \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(54, \"\\n\\n        \");\n      i0.ɵɵelementStart(55, \"button\", 16);\n      i0.ɵɵtext(56, \"Sign in\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(57, \"\\n      \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(58, \"\\n      \");\n      i0.ɵɵelementStart(59, \"div\", 17);\n      i0.ɵɵtext(60, \"\\n        \");\n      i0.ɵɵelementStart(61, \"a\", 18);\n      i0.ɵɵtext(62, \"Did you forget your password?\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(63, \"\\n      \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(64, \"\\n\\n      \");\n      i0.ɵɵtext(65, \"\\n    \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(66, \"\\n  \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(67, \"\\n\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(68, \"\\n\");\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(21);\n      i0.ɵɵproperty(\"ngIf\", ctx.authenticationError);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"formGroup\", ctx.loginForm);\n      i0.ɵɵadvance(7);\n      i0.ɵɵpropertyInterpolate(\"placeholder\", i0.ɵɵpipeBind1(32, 4, \"global.form.username.placeholder\"));\n      i0.ɵɵadvance(10);\n      i0.ɵɵpropertyInterpolate(\"placeholder\", i0.ɵɵpipeBind1(41, 6, \"login.form.password.placeholder\"));\n    }\n  },\n  dependencies: [i4.ɵNgNoValidate, i4.DefaultValueAccessor, i4.CheckboxControlValueAccessor, i4.NgControlStatus, i4.NgControlStatusGroup, i8.NgIf, i4.FormGroupDirective, i4.FormControlName, i3.RouterLink, i9.TranslateDirective, i10.TranslatePipe],\n  encapsulation: 2\n});","map":{"version":3,"mappings":"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","names":["i0","LoginComponent","constructor","accountService","loginService","router","fb","modalService","encryptService","userIdleService","group","username","forms_1","required","password","rememberMe","ngOnInit","identity","subscribe","isAuthenticated","navigate","ngAfterViewInit","nativeElement","focus","login","secretKey","crypto_js_1","WordArray","random","toString","initialValue","encryptProfile","loginForm","get","value","key","iv","authenticationError","setUserIdle","getCurrentNavigation","error","headers","loginName","authMethod","modalRef","open","user_forcelogin_dialog_component_1","size","backdrop","componentInstance","loginKerberos","err","console","log","requestResetPassword","goToForgetPwd","exports","selectors","viewQuery","ctx"],"sourceRoot":"","sources":["C:\\Users\\D1347074\\Desktop\\projects 2\\nspayiiapp\\src\\main\\webapp\\app\\login\\login.component.ts","C:\\Users\\D1347074\\Desktop\\projects 2\\nspayiiapp\\src\\main\\webapp\\app\\login\\login.component.html"],"sourcesContent":["import {HttpErrorResponse} from '@angular/common/http';\r\nimport {AfterViewInit, Component, ElementRef, OnInit, ViewChild} from '@angular/core';\r\nimport {FormBuilder, Validators} from '@angular/forms';\r\nimport {Router} from '@angular/router';\r\nimport {LoginService} from 'app/login/login.service';\r\nimport {AccountService} from 'app/core/auth/account.service';\r\nimport {NgbModal} from '@ng-bootstrap/ng-bootstrap';\r\nimport {lib} from 'crypto-js';\r\nimport {EncryptService} from 'app/core/auth/encrypt.service';\r\nimport {UserIdleService} from './user-idle.service';\r\nimport {UserForceLoginDialogComponent} from './user-forcelogin-dialog.component';\r\n\r\n@Component({\r\n  selector: 'ic-login',\r\n  templateUrl: './login.component.html',\r\n})\r\nexport class LoginComponent implements OnInit, AfterViewInit {\r\n  @ViewChild('username', {static: false})\r\n  username?: ElementRef;\r\n\r\n  authenticationError = false;\r\n  loginResult = '';\r\n\r\n  loginForm = this.fb.group({\r\n    username: [null, [Validators.required]],\r\n    password: [null, [Validators.required]],\r\n    rememberMe: [false],\r\n  });\r\n\r\n  constructor(\r\n    private accountService: AccountService,\r\n    private loginService: LoginService,\r\n    private router: Router,\r\n    private fb: FormBuilder,\r\n    private modalService: NgbModal,\r\n    private encryptService: EncryptService,\r\n    private userIdleService: UserIdleService\r\n  ) {\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    // if already authenticated then navigate to home page\r\n    this.accountService.identity().subscribe(() => {\r\n      if (this.accountService.isAuthenticated()) {\r\n        this.router.navigate(['']);\r\n      }\r\n    });\r\n  }\r\n\r\n  ngAfterViewInit(): void {\r\n    if (this.username) {\r\n      this.username.nativeElement.focus();\r\n    }\r\n  }\r\n\r\n  login(): void {\r\n    const secretKey = lib.WordArray.random(8).toString();\r\n    const initialValue = lib.WordArray.random(8).toString();\r\n\r\n    this.loginService\r\n      .login({\r\n        username: this.encryptService.encryptProfile(this.loginForm.get('username')!.value, secretKey, initialValue),\r\n        password: this.encryptService.encryptProfile(this.loginForm.get('password')!.value, secretKey, initialValue),\r\n        rememberMe: this.loginForm.get('rememberMe')!.value,\r\n        key: secretKey,\r\n        iv: initialValue,\r\n      })\r\n      .subscribe(\r\n        () => {\r\n          this.authenticationError = false;\r\n          this.userIdleService.setUserIdle();\r\n          if (!this.router.getCurrentNavigation()) {\r\n            // There were no routing during login (eg from navigationToStoredUrl)\r\n            this.router.navigate(['']);\r\n          }\r\n        },\r\n        error => {\r\n          // processing for the first login\r\n          if (error.headers && error.headers.get('errorcode') === '901') {\r\n            const username = error.headers.get('username');\r\n            this.router.navigate(['/account/reset', 'request', username, true], error);\r\n          } else if (error.headers && error.headers.get('errorcode') === '911') {\r\n            const loginName = error.headers.get('loginName');\r\n            const authMethod = error.headers.get('authMethod');\r\n            const modalRef = this.modalService.open(UserForceLoginDialogComponent, {size: 'lg', backdrop: 'static'});\r\n            modalRef.componentInstance.loginName = loginName;\r\n            modalRef.componentInstance.authMethod = authMethod;\r\n          } else {\r\n            this.authenticationError = true;\r\n          }\r\n        }\r\n      );\r\n  }\r\n\r\n  // Kerberos Added 20220408 , Start\r\n  loginKerberos(): void {\r\n    this.loginService.loginKerberos().subscribe(\r\n      () => {\r\n        this.authenticationError = false;\r\n        this.userIdleService.setUserIdle();\r\n        if (!this.router.getCurrentNavigation()) {\r\n          // There were no routing during login (eg from navigationToStoredUrl)\r\n          this.router.navigate(['']);\r\n        }\r\n      },\r\n      (err: HttpErrorResponse) => {\r\n        console.log(err)\r\n        this.authenticationError = true;\r\n      });\r\n  }\r\n\r\n  // Kerberos Added 20220408 , End\r\n\r\n  requestResetPassword(): void {\r\n    this.router.navigate(['/account/reset', 'request']);\r\n  }\r\n\r\n  goToForgetPwd(): void {\r\n    this.router.navigate(['/account/password', 'request']);\r\n  }\r\n}\r\n","<div>\r\n  <div class=\"row justify-content-center\">\r\n    <div class=\"col-lg-6 col-md-8 col-sm-10\">\r\n      <h1>Kerberos Sign In</h1>\r\n      <button (click)=\"loginKerberos()\">Login Kerberos</button>\r\n    </div>\r\n  </div>\r\n  <div class=\"row justify-content-center\">\r\n    <div class=\"col-lg-6 col-md-8 col-sm-10\">\r\n\r\n      <h1 icTranslate=\"login.title\" data-cy=\"loginTitle\">Sign in</h1>\r\n      <div class=\"alert alert-danger\" *ngIf=\"authenticationError\" icTranslate=\"login.messages.error.authentication\" data-cy=\"loginError\">\r\n        <strong>Failed to sign in!</strong> Please check your credentials and try again.\r\n      </div>\r\n      <form class=\"form\" role=\"form\" (ngSubmit)=\"login()\" [formGroup]=\"loginForm\" method=\"post\">\r\n        <div class=\"rounded-pill\">\r\n          <label class=\"username-label\" for=\"username\" icTranslate=\"global.form.username.label\">Login</label>\r\n          <input\r\n            type=\"text\"\r\n            class=\"form-control\"\r\n            name=\"username\"\r\n            id=\"username\"\r\n            placeholder=\"{{ 'global.form.username.placeholder' | translate }}\"\r\n            formControlName=\"username\"\r\n            autocomplete=\"off\"\r\n            #username\r\n            data-cy=\"username\"\r\n          />\r\n        </div>\r\n\r\n        <div class=\"rounded-pill\">\r\n          <label for=\"password\" icTranslate=\"login.form.password\">Password</label>\r\n          <input\r\n            type=\"password\"\r\n            class=\"form-control\"\r\n            name=\"password\"\r\n            id=\"password\"\r\n            placeholder=\"{{ 'login.form.password.placeholder' | translate }}\"\r\n            formControlName=\"password\"\r\n            data-cy=\"password\"\r\n            autocomplete=\"off\"\r\n          />\r\n        </div>\r\n\r\n        <div class=\"form-check\">\r\n          <label class=\"form-check-label\" for=\"rememberMe\">\r\n            <input class=\"form-check-input\" type=\"checkbox\" name=\"rememberMe\" id=\"rememberMe\" formControlName=\"rememberMe\" />\r\n            <span icTranslate=\"login.form.rememberme\">Remember me</span>\r\n          </label>\r\n        </div>\r\n\r\n        <button type=\"submit\" class=\"btn btn-primary\" icTranslate=\"login.form.button\" data-cy=\"submit\">Sign in</button>\r\n      </form>\r\n      <div class=\"mt-3 alert alert-warning\">\r\n        <a\r\n          class=\"alert-link\"\r\n          routerLink=\"/account/password/request\"\r\n          icTranslate=\"login.password.forgot\"\r\n          data-cy=\"forgetYourPasswordSelector\"\r\n          >Did you forget your password?</a\r\n        >\r\n      </div>\r\n\r\n      <!-- <div class=\"alert alert-warning\">\r\n        <span icTranslate=\"global.messages.info.register.noaccount\">You don't have an account yet?</span>\r\n        <a class=\"alert-link\" routerLink=\"/account/register\" icTranslate=\"global.messages.info.register.link\">Register a new account</a>\r\n      </div> -->\r\n    </div>\r\n  </div>\r\n</div>\r\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}