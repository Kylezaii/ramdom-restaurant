{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MassUploadService = void 0;\nconst tslib_1 = require(\"tslib\");\nconst i0 = tslib_1.__importStar(require(\"@angular/core\"));\nconst i1 = tslib_1.__importStar(require(\"@angular/common/http\"));\nconst i2 = tslib_1.__importStar(require(\"app/core/config/application-config.service\"));\nconst i3 = tslib_1.__importStar(require(\"app/shared/service/ns2-http.service\"));\nclass MassUploadService {\n  constructor(http, applicationConfigService, ns2Http) {\n    this.http = http;\n    this.applicationConfigService = applicationConfigService;\n    this.ns2Http = ns2Http;\n    this.resourceUrl = this.applicationConfigService.getEndpointFor('api/payroll/mass-upload');\n    this.resourceUrlForFindMultipleCodeType = 'api/codes';\n    //\n  }\n\n  getCodes(codeTypes) {\n    return this.ns2Http.get(`${this.resourceUrlForFindMultipleCodeType}/${codeTypes}`);\n  }\n  getAllMassUploadRecords(options) {\n    return this.ns2Http.get(this.resourceUrl, options);\n  }\n  uploadFile(request) {\n    return this.ns2Http.post(this.resourceUrl, request);\n  }\n  getAllPendingApproval(options) {\n    const url = `${this.resourceUrl}/approval`;\n    return this.ns2Http.get(url, options);\n  }\n  getSupportingDocs(id) {\n    const url = `${this.resourceUrl}/suppDocs/${id}`;\n    return this.ns2Http.get(url);\n  }\n  verifySourceFile(id, request) {\n    const url = `${this.resourceUrl}/${id}/verify`;\n    return this.ns2Http.post(url, request);\n  }\n  massUploadApproval(approve) {\n    const url = `${this.resourceUrl}/approval`;\n    return this.ns2Http.post(url, approve);\n  }\n}\nexports.MassUploadService = MassUploadService;\nMassUploadService.ɵfac = function MassUploadService_Factory(t) {\n  return new (t || MassUploadService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.ApplicationConfigService), i0.ɵɵinject(i3.Ns2HttpService));\n};\nMassUploadService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: MassUploadService,\n  factory: MassUploadService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";;;;;;;;;;;AAMA,MAGaA,iBAAiB;EAI5BC,YAAsBC,IAAgB,EAC5BC,wBAAkD,EAClDC,OAAuB;IAFX,SAAI,GAAJF,IAAI;IAChB,6BAAwB,GAAxBC,wBAAwB;IACxB,YAAO,GAAPC,OAAO;IALV,gBAAW,GAAG,IAAI,CAACD,wBAAwB,CAACE,cAAc,CAAC,yBAAyB,CAAC;IACpF,uCAAkC,GAAG,WAAW;IAKtD;EACF;;EAEAC,QAAQ,CAACC,SAAiB;IACxB,OAAO,IAAI,CAACH,OAAO,CAACI,GAAG,CAAC,GAAG,IAAI,CAACC,kCAAkC,IAAIF,SAAS,EAAE,CAAC;EACpF;EAEAG,uBAAuB,CAACC,OAAa;IACnC,OAAO,IAAI,CAACP,OAAO,CAACI,GAAG,CAAC,IAAI,CAACI,WAAW,EAAED,OAAO,CAAC;EACpD;EAEAE,UAAU,CAACC,OAAY;IACrB,OAAO,IAAI,CAACV,OAAO,CAACW,IAAI,CAAC,IAAI,CAACH,WAAW,EAAEE,OAAO,CAAC;EACrD;EAEAE,qBAAqB,CAACL,OAAa;IACjC,MAAMM,GAAG,GAAG,GAAG,IAAI,CAACL,WAAW,WAAW;IAC1C,OAAO,IAAI,CAACR,OAAO,CAACI,GAAG,CAACS,GAAG,EAAEN,OAAO,CAAC;EACvC;EAEAO,iBAAiB,CAACC,EAAU;IAC1B,MAAMF,GAAG,GAAG,GAAG,IAAI,CAACL,WAAW,aAAaO,EAAE,EAAE;IAChD,OAAO,IAAI,CAACf,OAAO,CAACI,GAAG,CAACS,GAAG,CAAC;EAC9B;EAEAG,gBAAgB,CAACD,EAAU,EAAEL,OAAY;IACvC,MAAMG,GAAG,GAAG,GAAG,IAAI,CAACL,WAAW,IAAIO,EAAE,SAAS;IAC9C,OAAO,IAAI,CAACf,OAAO,CAACW,IAAI,CAACE,GAAG,EAAEH,OAAO,CAAC;EACxC;EAEAO,kBAAkB,CAACC,OAAY;IAC7B,MAAML,GAAG,GAAG,GAAG,IAAI,CAACL,WAAW,WAAW;IAC1C,OAAO,IAAI,CAACR,OAAO,CAACW,IAAI,CAACE,GAAG,EAAEK,OAAO,CAAC;EACxC;;AA3CFC;;mBAGavB,iBAAiB;AAAA;;SAAjBA,iBAAiB;EAAAwB,SAAjBxB,iBAAiB;EAAAyB,YAFhB;AAAM","names":["MassUploadService","constructor","http","applicationConfigService","ns2Http","getEndpointFor","getCodes","codeTypes","get","resourceUrlForFindMultipleCodeType","getAllMassUploadRecords","options","resourceUrl","uploadFile","request","post","getAllPendingApproval","url","getSupportingDocs","id","verifySourceFile","massUploadApproval","approve","exports","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\D1347074\\Desktop\\projects 2\\nspayiiapp\\src\\main\\webapp\\app\\payroll\\mass-upload\\service\\mass-upload.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { ApplicationConfigService } from 'app/core/config/application-config.service';\r\nimport { Ns2HttpService } from 'app/shared/service/ns2-http.service';\r\nimport { Observable } from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class MassUploadService {\r\n  public resourceUrl = this.applicationConfigService.getEndpointFor('api/payroll/mass-upload');\r\n  private resourceUrlForFindMultipleCodeType = 'api/codes';\r\n\r\n  constructor(protected http: HttpClient,\r\n    private applicationConfigService: ApplicationConfigService,\r\n    private ns2Http: Ns2HttpService) {\r\n    //\r\n  }\r\n\r\n  getCodes(codeTypes: string): Observable<any> {\r\n    return this.ns2Http.get(`${this.resourceUrlForFindMultipleCodeType}/${codeTypes}`)\r\n  }\r\n\r\n  getAllMassUploadRecords(options?: any): Observable<any> {\r\n    return this.ns2Http.get(this.resourceUrl, options);\r\n  }\r\n\r\n  uploadFile(request: any): Observable<any> {\r\n    return this.ns2Http.post(this.resourceUrl, request);\r\n  }\r\n\r\n  getAllPendingApproval(options?: any): Observable<any> {\r\n    const url = `${this.resourceUrl}/approval`;\r\n    return this.ns2Http.get(url, options);\r\n  }\r\n\r\n  getSupportingDocs(id: string): Observable<any> {\r\n    const url = `${this.resourceUrl}/suppDocs/${id}`;\r\n    return this.ns2Http.get(url);\r\n  }\r\n\r\n  verifySourceFile(id: string, request: any): Observable<any> {\r\n    const url = `${this.resourceUrl}/${id}/verify`;\r\n    return this.ns2Http.post(url, request);\r\n  }\r\n\r\n  massUploadApproval(approve: any): Observable<any> {\r\n    const url = `${this.resourceUrl}/approval`;\r\n    return this.ns2Http.post(url, approve);\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}