{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.DateUtilsService = void 0;\nconst tslib_1 = require(\"tslib\");\nconst moment_1 = tslib_1.__importDefault(require(\"moment\"));\nconst i0 = tslib_1.__importStar(require(\"@angular/core\"));\nclass DateUtilsService {\n  convertStrToMoment(stringDte, format) {\n    const parsedDate = (0, moment_1.default)(stringDte, format);\n    return parsedDate;\n  }\n  convertUnixToDateString(unixTime, format) {\n    if (unixTime != null && unixTime !== 0) {\n      const d = new Date(unixTime);\n      return (0, moment_1.default)(d).format(format);\n    } else {\n      return '';\n    }\n  }\n  convertUnixToMoment(unixTime) {\n    return (0, moment_1.default)(unixTime);\n  }\n  convertMomentToUnix(date) {\n    return new Date(date).getTime();\n  }\n  convertUnixToDate(unixTime) {\n    return new Date(unixTime);\n  }\n  convertDateToStr(date, format) {\n    return (0, moment_1.default)(date).format(format);\n  }\n  convertMomentToStr(date, format) {\n    return date.format(format);\n  }\n  convertStrToDate(stringDte, format) {\n    const parsedDate = this.convertStrToMoment(stringDte, format);\n    return parsedDate.toDate();\n  }\n  formatStrDate(stringDte, format) {\n    if (stringDte) {\n      const parsedDate = (0, moment_1.default)(stringDte);\n      return parsedDate.format(format);\n    }\n    return \"\";\n  }\n  getNextWorkingDay() {\n    // 0 (Sun),1 (Mon),2 (Tue),3 (Wed),4 (Thurs),5 (Fri),6 (Sat);\n    let nextWorkingDay;\n    if ((0, moment_1.default)().day() === 5) {\n      nextWorkingDay = (0, moment_1.default)().weekday(8);\n    } else if ((0, moment_1.default)().day() === 6) {\n      nextWorkingDay = (0, moment_1.default)().weekday(8);\n    } else {\n      nextWorkingDay = (0, moment_1.default)().add(1, 'd');\n    }\n    return nextWorkingDay.toDate();\n  }\n  getNextWorkingDayExcldHoliday(publicHolidays) {\n    const nextWorkingDay = (0, moment_1.default)().add(1, 'd');\n    while (nextWorkingDay.day() === 0 || nextWorkingDay.day() === 6 || this.isHoliday(nextWorkingDay.toDate(), publicHolidays)) {\n      nextWorkingDay.add(1, 'd');\n    }\n    return nextWorkingDay.toDate();\n  }\n  isHoliday(dateToCheck, publicHolidays) {\n    return publicHolidays.find(ph => ph.setHours(0, 0, 0, 0).valueOf() === dateToCheck.setHours(0, 0, 0, 0).valueOf()) === undefined ? false : true;\n  }\n  getTime24Hr(date) {\n    let dateTimeStr = \"\";\n    let dt;\n    let hrStr;\n    let minStr;\n    if (date) {\n      dt = new Date(date);\n      if (this.hasOneDigit(dt.getHours().toString())) {\n        hrStr = '0'.concat(dt.getHours().toString());\n      } else hrStr = dt.getHours().toString();\n      if (this.hasOneDigit(dt.getMinutes().toString())) {\n        minStr = '0'.concat(dt.getMinutes().toString());\n      } else minStr = dt.getMinutes().toString();\n      dateTimeStr = hrStr.concat(minStr);\n      console.log(\"the updated dt\", dateTimeStr);\n    }\n    return dateTimeStr;\n  }\n  //input in HHmm24\n  //regex ^(0[0-9]|1[0-9]|2[0-3])[0-5][0-9]$\n  convert24HrStrToDate(input) {\n    const date = new Date();\n    let hrNum;\n    let minNum;\n    const regex = '^(0[0-9]|1[0-9]|2[0-3])([0-5][0-9])$';\n    const matcher = input.match(regex);\n    if (matcher) {\n      console.log(\"hour group match\", matcher[1]);\n      date.setHours(Number(matcher[1]));\n      console.log(\"min group match\", matcher[2]);\n      date.setMinutes(Number(matcher[2]));\n    }\n    return date;\n  }\n  hasOneDigit(val) {\n    return String(Math.abs(Number(val))).charAt(0) === val;\n  }\n  isEquals(date1, date2) {\n    return (0, moment_1.default)(date1).isSame((0, moment_1.default)(date2));\n  }\n  isWithinRange(date, startDate, endDate) {\n    return !(0, moment_1.default)(date).isBefore((0, moment_1.default)(startDate)) && !(0, moment_1.default)(date).isAfter((0, moment_1.default)(endDate));\n  }\n  isBefore(date1, date2) {\n    return (0, moment_1.default)(date1).isBefore((0, moment_1.default)(date2));\n  }\n  isAfter(date1, date2) {\n    return (0, moment_1.default)(date1).isAfter((0, moment_1.default)(date2));\n  }\n  getSunForSameWeek(date) {\n    //0 (Sunday) - 6 (Saturday)\n    const d = new Date(date);\n    //Get Monday of the week\n    const monOfWeek = d.getDate() - d.getDay() + 1;\n    //Get Sunday of the week\n    const sunOfWeek = monOfWeek + 6;\n    const sunday = new Date(d.setDate(sunOfWeek));\n    return sunday;\n  }\n  getDayOfWeek(date) {\n    return (0, moment_1.default)(date).format('ddd');\n  }\n  getDaysBetween(date1, date2) {\n    return (0, moment_1.default)(date2).diff((0, moment_1.default)(date1), 'days');\n  }\n  getLastSunOfPreviousMonth(date) {\n    //0 (Sunday) - 6 (Saturday)\n    const d = new Date(date);\n    //Get Previous Month\n    d.setDate(0);\n    //Get last sun of the month\n    const lastSunOfMth = d.getDate() - d.getDay();\n    d.setDate(lastSunOfMth);\n    return d;\n  }\n  getSunOfPreviousWeek(date) {\n    //0 (Sunday) - 6 (Saturday)\n    //Get sunday of the week\n    const d = this.getSunForSameWeek(date);\n    //get sun of previous week\n    const sunOfPreviousWeek = d.getDate() - d.getDay();\n    d.setDate(sunOfPreviousWeek);\n    return d;\n  }\n  getPhdDeliveryStartDateWithEndDate(endDate) {\n    const d = new Date(endDate);\n    d.setDate(d.getDate() - 181);\n    return d;\n  }\n  getFirstMonFromCommenceDate(date) {\n    //0 (Sunday) - 6 (Saturday)\n    const d = new Date(date);\n    //Get Monday of the week\n    const monOfWeek = d.getDate() - d.getDay() + 1;\n    let monday = null;\n    if (monOfWeek < d.getDate()) {\n      monday = new Date(d.setDate(monOfWeek + 7));\n    } else {\n      monday = new Date(d.setDate(monOfWeek));\n    }\n    return monday;\n  }\n  isValid(date) {\n    return (0, moment_1.default)(date).isValid();\n  }\n  isValidDateStr(date, format) {\n    return this.convertStrToMoment(date, format).isValid();\n  }\n  minusMonths(date, months) {\n    return (0, moment_1.default)(date).subtract(months, 'months').toDate();\n  }\n}\nexports.DateUtilsService = DateUtilsService;\nDateUtilsService.ɵfac = function DateUtilsService_Factory(t) {\n  return new (t || DateUtilsService)();\n};\nDateUtilsService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: DateUtilsService,\n  factory: DateUtilsService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["DateUtilsService","convertStrToMoment","stringDte","format","parsedDate","convertUnixToDateString","unixTime","d","Date","convertUnixToMoment","convertMomentToUnix","date","getTime","convertUnixToDate","convertDateToStr","convertMomentToStr","convertStrToDate","toDate","formatStrDate","getNextWorkingDay","nextWorkingDay","day","weekday","add","getNextWorkingDayExcldHoliday","publicHolidays","isHoliday","dateToCheck","find","ph","setHours","valueOf","undefined","getTime24Hr","dateTimeStr","dt","hrStr","minStr","hasOneDigit","getHours","toString","concat","getMinutes","console","log","convert24HrStrToDate","input","hrNum","minNum","regex","matcher","match","Number","setMinutes","val","String","Math","abs","charAt","isEquals","date1","date2","isSame","isWithinRange","startDate","endDate","isBefore","isAfter","getSunForSameWeek","monOfWeek","getDate","getDay","sunOfWeek","sunday","setDate","getDayOfWeek","getDaysBetween","diff","getLastSunOfPreviousMonth","lastSunOfMth","getSunOfPreviousWeek","sunOfPreviousWeek","getPhdDeliveryStartDateWithEndDate","getFirstMonFromCommenceDate","monday","isValid","isValidDateStr","minusMonths","months","subtract","exports","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\D1347074\\Desktop\\projects 2\\nspayiiapp\\src\\main\\webapp\\app\\core\\util\\date-utils.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport moment from 'moment';\r\n\r\n\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class DateUtilsService {\r\n\r\n    convertStrToMoment(stringDte: any, format: any): moment.Moment {\r\n        const parsedDate = moment(stringDte,format);\r\n        return parsedDate;\r\n    }\r\n\r\n    convertUnixToDateString(unixTime: number, format:any): string {\r\n        if(unixTime != null && unixTime!==0){\r\n            const d = new Date(unixTime);\r\n            return moment(d).format(format);\r\n        }else {return '';}\r\n    }\r\n\r\n    convertUnixToMoment(unixTime: number): moment.Moment {\r\n        return moment(unixTime);\r\n    }\r\n\r\n    convertMomentToUnix(date: any): number {\r\n        return new Date(date).getTime();\r\n    }\r\n\r\n    convertUnixToDate(unixTime: number): Date {\r\n        return new Date(unixTime);\r\n    }\r\n\r\n    convertDateToStr(date: Date, format: any){\r\n        return moment(date).format(format);\r\n    }\r\n\r\n    convertMomentToStr(date: moment.Moment, format: any){\r\n        return date.format(format);\r\n    }\r\n\r\n    convertStrToDate(stringDte: any, format: any): Date {\r\n        const parsedDate = this.convertStrToMoment(stringDte, format);\r\n       return parsedDate.toDate();\r\n    }\r\n\r\n    formatStrDate(stringDte: any, format: any): string {\r\n        if(stringDte) {\r\n            const parsedDate = moment(stringDte);\r\n            return parsedDate.format(format);\r\n        }\r\n        return \"\";\r\n    }\r\n\r\n    getNextWorkingDay(): Date {\r\n        // 0 (Sun),1 (Mon),2 (Tue),3 (Wed),4 (Thurs),5 (Fri),6 (Sat);\r\n        let nextWorkingDay;\r\n        if (moment().day() === 5) {\r\n            nextWorkingDay = moment().weekday(8);\r\n        } else if (moment().day() === 6) {\r\n            nextWorkingDay = moment().weekday(8);\r\n        } else {\r\n            nextWorkingDay = moment().add(1, 'd');\r\n        }\r\n\r\n        return nextWorkingDay.toDate();\r\n    }\r\n\r\n    getNextWorkingDayExcldHoliday(publicHolidays: Date[]): Date {\r\n        const nextWorkingDay = moment().add(1,'d');\r\n\r\n        while(nextWorkingDay.day() === 0\r\n          || nextWorkingDay.day() === 6\r\n          || this.isHoliday(nextWorkingDay.toDate(), publicHolidays)) {\r\n            nextWorkingDay.add(1,'d');\r\n        }\r\n\r\n        return nextWorkingDay.toDate();\r\n    }\r\n\r\n    isHoliday(dateToCheck: Date, publicHolidays: Date[]): boolean {\r\n    return publicHolidays.find((ph: Date) =>\r\n        ph.setHours(0,0,0,0).valueOf() === dateToCheck.setHours(0,0,0,0).valueOf()) === undefined ? false : true;\r\n    }\r\n\r\n    getTime24Hr(date: any): string{\r\n        let dateTimeStr =\"\";\r\n        let dt: Date;\r\n        let hrStr;\r\n        let minStr;\r\n        if(date){\r\n            dt = new Date(date);\r\n            if (this.hasOneDigit(dt.getHours().toString()))  {\r\n            hrStr = '0'.concat(dt.getHours().toString());\r\n            }else hrStr = dt.getHours().toString();\r\n            if (this.hasOneDigit(dt.getMinutes().toString()))  {\r\n            minStr = '0'.concat(dt.getMinutes().toString());\r\n            }else minStr = dt.getMinutes().toString();\r\n\r\n            dateTimeStr = hrStr.concat(minStr);\r\n            console.log(\"the updated dt\", dateTimeStr)\r\n        }\r\n        return dateTimeStr;\r\n    }\r\n\r\n    //input in HHmm24\r\n    //regex ^(0[0-9]|1[0-9]|2[0-3])[0-5][0-9]$\r\n    convert24HrStrToDate(input: string): Date{\r\n        const date = new Date();\r\n        let hrNum: number;\r\n        let minNum: number;\r\n        const regex = '^(0[0-9]|1[0-9]|2[0-3])([0-5][0-9])$';\r\n        const matcher = input.match(regex)\r\n        if(matcher){\r\n            console.log(\"hour group match\", matcher[1]);\r\n            date.setHours(Number(matcher[1]))\r\n            console.log(\"min group match\", matcher[2]);\r\n            date.setMinutes(Number(matcher[2]))\r\n        }\r\n        return date;\r\n\r\n    }\r\n\r\n    hasOneDigit(val: string) {\r\n        return String(Math.abs(Number(val))).charAt(0) === val;\r\n    }\r\n\r\n    isEquals(date1: Date, date2: Date): boolean{\r\n        return moment(date1).isSame(moment(date2));\r\n    }\r\n\r\n    isWithinRange(date: Date, startDate: Date, endDate: Date): boolean {\r\n       return !moment(date).isBefore(moment(startDate)) && !moment(date).isAfter(moment(endDate));\r\n    }\r\n\r\n    isBefore(date1:Date, date2: Date): boolean {\r\n      return moment(date1).isBefore(moment(date2));\r\n    }\r\n\r\n    isAfter(date1:Date, date2: Date): boolean {\r\n      return moment(date1).isAfter(moment(date2));\r\n    }\r\n\r\n    getSunForSameWeek(date:Date): Date {\r\n      //0 (Sunday) - 6 (Saturday)\r\n      const d = new Date(date);\r\n      //Get Monday of the week\r\n      const monOfWeek = d.getDate() - d.getDay() + 1;\r\n      //Get Sunday of the week\r\n      const sunOfWeek = monOfWeek + 6;\r\n\r\n      const sunday = new Date(d.setDate(sunOfWeek));\r\n\r\n      return sunday;\r\n    }\r\n\r\n    getDayOfWeek(date: Date): string{\r\n      return moment(date).format('ddd');\r\n    }\r\n\r\n    getDaysBetween(date1: Date, date2: Date): number{\r\n      return moment(date2).diff(moment(date1),'days');\r\n    }\r\n\r\n    getLastSunOfPreviousMonth(date:Date): Date{\r\n      //0 (Sunday) - 6 (Saturday)\r\n      const d = new Date(date);\r\n      //Get Previous Month\r\n      d.setDate(0);\r\n      //Get last sun of the month\r\n      const lastSunOfMth = d.getDate() - d.getDay();\r\n      d.setDate(lastSunOfMth);\r\n      return d;\r\n    }\r\n\r\n    getSunOfPreviousWeek(date:Date): Date{\r\n      //0 (Sunday) - 6 (Saturday)\r\n      //Get sunday of the week\r\n      const d = this.getSunForSameWeek(date);\r\n      //get sun of previous week\r\n      const sunOfPreviousWeek = d.getDate() - d.getDay();\r\n      d.setDate(sunOfPreviousWeek);\r\n      return d;\r\n    }\r\n\r\n    getPhdDeliveryStartDateWithEndDate(endDate: Date): Date{\r\n      const d = new Date(endDate);\r\n      d.setDate(d.getDate() - 181);\r\n      return d;\r\n    }\r\n\r\n    getFirstMonFromCommenceDate(date:Date): Date {\r\n      //0 (Sunday) - 6 (Saturday)\r\n      const d = new Date(date);\r\n      //Get Monday of the week\r\n      const monOfWeek = d.getDate() - d.getDay() + 1;\r\n\r\n      let monday:Date = null;\r\n\r\n      if(monOfWeek < d.getDate()) {\r\n        monday = new Date(d.setDate(monOfWeek + 7));\r\n      } else {\r\n        monday = new Date(d.setDate(monOfWeek));\r\n      }\r\n      return monday;\r\n    }\r\n\r\n    isValid(date: Date): boolean {\r\n      return moment(date).isValid();\r\n    }\r\n\r\n    isValidDateStr(date: string, format: string): boolean {\r\n      return this.convertStrToMoment(date, format).isValid();\r\n    }\r\n\r\n    minusMonths(date: Date, months: number): Date {\r\n      return moment(date).subtract(months, 'months').toDate();\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}