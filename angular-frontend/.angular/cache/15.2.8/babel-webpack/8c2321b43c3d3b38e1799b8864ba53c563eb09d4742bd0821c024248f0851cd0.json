{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.WriteOffService = void 0;\nconst tslib_1 = require(\"tslib\");\nconst i0 = tslib_1.__importStar(require(\"@angular/core\"));\nconst i1 = tslib_1.__importStar(require(\"@angular/common/http\"));\nconst i2 = tslib_1.__importStar(require(\"app/core/config/application-config.service\"));\nconst i3 = tslib_1.__importStar(require(\"app/shared/service/ns2-http.service\"));\nclass WriteOffService {\n  constructor(http, applicationConfigService, ns2Http) {\n    this.http = http;\n    this.applicationConfigService = applicationConfigService;\n    this.ns2Http = ns2Http;\n    this.resourceUrl = this.applicationConfigService.getEndpointFor('api/payment/writeoff');\n  }\n  getAllWriteOffRecords(options) {\n    return this.ns2Http.get(this.resourceUrl, options);\n  }\n  // Retrieve Success Write-offs based on given Annual Writeoff record ID\n  getSuccessWriteoffRecords(annualWriteOffRecordId, options) {\n    const url = this.resourceUrl + '/successful/writeoff-annual/' + annualWriteOffRecordId;\n    return this.ns2Http.get(url, options);\n  }\n  // Retrieve Failed Write-offs based on given Annual Writeoff record ID\n  getFailedWriteoffRecords(annualWriteOffRecordId, options) {\n    const url = this.resourceUrl + '/failed/writeoff-annual/' + annualWriteOffRecordId;\n    return this.ns2Http.get(url, options);\n  }\n  // Retrieve Write-offs that are Pending Approval, based on given Annual Writeoff record ID\n  getPendingApprovalWriteOffs(annualWriteOffRecordId, options) {\n    const url = this.resourceUrl + '/pending-approval/writeoff-annual/' + annualWriteOffRecordId;\n    return this.ns2Http.get(url, options);\n  }\n}\nexports.WriteOffService = WriteOffService;\nWriteOffService.ɵfac = function WriteOffService_Factory(t) {\n  return new (t || WriteOffService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.ApplicationConfigService), i0.ɵɵinject(i3.Ns2HttpService));\n};\nWriteOffService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: WriteOffService,\n  factory: WriteOffService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";;;;;;;;;;;AAMA,MAGaA,eAAe;EAG1BC,YACUC,IAAgB,EAChBC,wBAAkD,EAClDC,OAAuB;IAFvB,SAAI,GAAJF,IAAI;IACJ,6BAAwB,GAAxBC,wBAAwB;IACxB,YAAO,GAAPC,OAAO;IALV,gBAAW,GAAG,IAAI,CAACD,wBAAwB,CAACE,cAAc,CAAC,sBAAsB,CAAC;EAMzF;EAEOC,qBAAqB,CAACC,OAAa;IACxC,OAAO,IAAI,CAACH,OAAO,CAACI,GAAG,CAAC,IAAI,CAACC,WAAW,EAAEF,OAAO,CAAC;EACpD;EAEA;EACOG,yBAAyB,CAACC,sBAA8B,EAAEJ,OAAa;IAC5E,MAAMK,GAAG,GAAG,IAAI,CAACH,WAAW,GAAG,8BAA8B,GAAGE,sBAAsB;IACtF,OAAO,IAAI,CAACP,OAAO,CAACI,GAAG,CAACI,GAAG,EAAEL,OAAO,CAAC;EACvC;EAEA;EACOM,wBAAwB,CAACF,sBAA8B,EAAEJ,OAAa;IAC3E,MAAMK,GAAG,GAAG,IAAI,CAACH,WAAW,GAAG,0BAA0B,GAAGE,sBAAsB;IAClF,OAAO,IAAI,CAACP,OAAO,CAACI,GAAG,CAACI,GAAG,EAAEL,OAAO,CAAC;EACvC;EAEA;EACOO,2BAA2B,CAACH,sBAA8B,EAAEJ,OAAa;IAC9E,MAAMK,GAAG,GAAG,IAAI,CAACH,WAAW,GAAG,oCAAoC,GAAGE,sBAAsB;IAC5F,OAAO,IAAI,CAACP,OAAO,CAACI,GAAG,CAACI,GAAG,EAAEL,OAAO,CAAC;EACvC;;AAhCFQ;;mBAGaf,eAAe;AAAA;;SAAfA,eAAe;EAAAgB,SAAfhB,eAAe;EAAAiB,YAFd;AAAM","names":["WriteOffService","constructor","http","applicationConfigService","ns2Http","getEndpointFor","getAllWriteOffRecords","options","get","resourceUrl","getSuccessWriteoffRecords","annualWriteOffRecordId","url","getFailedWriteoffRecords","getPendingApprovalWriteOffs","exports","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\D1347074\\Desktop\\projects 2\\nspayiiapp\\src\\main\\webapp\\app\\payment\\annual-write-off\\service\\write-off.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { Ns2HttpService } from 'app/shared/service/ns2-http.service';\r\nimport { ApplicationConfigService } from 'app/core/config/application-config.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class WriteOffService {\r\n  public resourceUrl = this.applicationConfigService.getEndpointFor('api/payment/writeoff');\r\n\r\n  constructor(\r\n    private http: HttpClient,\r\n    private applicationConfigService: ApplicationConfigService,\r\n    private ns2Http: Ns2HttpService) {\r\n  }\r\n\r\n  public getAllWriteOffRecords(options?: any): Observable<any> {\r\n    return this.ns2Http.get(this.resourceUrl, options);\r\n  }\r\n\r\n  // Retrieve Success Write-offs based on given Annual Writeoff record ID\r\n  public getSuccessWriteoffRecords(annualWriteOffRecordId: string, options?: any): Observable<any> {\r\n    const url = this.resourceUrl + '/successful/writeoff-annual/' + annualWriteOffRecordId;\r\n    return this.ns2Http.get(url, options);\r\n  }\r\n\r\n  // Retrieve Failed Write-offs based on given Annual Writeoff record ID\r\n  public getFailedWriteoffRecords(annualWriteOffRecordId: string, options?: any): Observable<any> {\r\n    const url = this.resourceUrl + '/failed/writeoff-annual/' + annualWriteOffRecordId;\r\n    return this.ns2Http.get(url, options);\r\n  }\r\n\r\n  // Retrieve Write-offs that are Pending Approval, based on given Annual Writeoff record ID\r\n  public getPendingApprovalWriteOffs(annualWriteOffRecordId: string, options?: any): Observable<any> {\r\n    const url = this.resourceUrl + '/pending-approval/writeoff-annual/' + annualWriteOffRecordId;\r\n    return this.ns2Http.get(url, options);\r\n  }\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}