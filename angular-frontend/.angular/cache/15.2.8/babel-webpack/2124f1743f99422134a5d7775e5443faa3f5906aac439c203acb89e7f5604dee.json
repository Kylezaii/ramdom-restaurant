{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.JobInstanceService = void 0;\nconst tslib_1 = require(\"tslib\");\nconst operators_1 = require(\"rxjs/operators\");\nconst app_constants_1 = require(\"app/app.constants\");\nconst request_util_1 = require(\"app/core/request/request-util\");\nconst i0 = tslib_1.__importStar(require(\"@angular/core\"));\nconst i1 = tslib_1.__importStar(require(\"@angular/common/http\"));\nclass JobInstanceService {\n  constructor(http) {\n    this.http = http;\n    this.resourceUrl = app_constants_1.SERVER_API_URL + 'api/job-instances';\n  }\n  find(id) {\n    return this.http.get(`${this.resourceUrl}/${id}`, {\n      observe: 'response'\n    }).pipe((0, operators_1.map)(res => this.convertResponse(res)));\n  }\n  query(req) {\n    const options = (0, request_util_1.createRequestOption)(req);\n    return this.http.get(this.resourceUrl, {\n      params: options,\n      observe: 'response'\n    }).pipe((0, operators_1.map)(res => this.convertArrayResponse(res)));\n  }\n  convertResponse(res) {\n    const body = this.convertItemFromServer(res.body);\n    return res.clone({\n      body\n    });\n  }\n  convertArrayResponse(res) {\n    const jsonResponse = res.body;\n    const body = [];\n    for (let i = 0; i < jsonResponse.length; i++) {\n      body.push(this.convertItemFromServer(jsonResponse[i]));\n    }\n    return res.clone({\n      body\n    });\n  }\n  /**\r\n   * Convert a returned JSON object to JobInstance.\r\n   */\n  convertItemFromServer(jobInstance) {\n    return jobInstance;\n  }\n  /**\r\n   * Convert a JobInstance to a JSON which can be sent to the server.\r\n   */\n  convert(jobInstance) {\n    const copy = Object.assign({}, jobInstance);\n    return copy;\n  }\n}\nexports.JobInstanceService = JobInstanceService;\nJobInstanceService.ɵfac = function JobInstanceService_Factory(t) {\n  return new (t || JobInstanceService)(i0.ɵɵinject(i1.HttpClient));\n};\nJobInstanceService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: JobInstanceService,\n  factory: JobInstanceService.ɵfac\n});","map":{"version":3,"mappings":";;;;;;;AAGA;AACA;AAEA;;;AAIA,MACaA,kBAAkB;EAG7BC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAFhB,gBAAW,GAAGC,8BAAc,GAAG,mBAAmB;EAEnB;EAEvCC,IAAI,CAACC,EAAU;IACb,OAAO,IAAI,CAACH,IAAI,CACbI,GAAG,CAAS,GAAG,IAAI,CAACC,WAAW,IAAIF,EAAE,EAAE,EAAE;MAAEG,OAAO,EAAE;IAAU,CAAE,CAAC,CACjEC,IAAI,CAAC,mBAAG,EAAEC,GAAuB,IAAK,IAAI,CAACC,eAAe,CAACD,GAAG,CAAC,CAAC,CAAC;EACtE;EAEAE,KAAK,CAACC,GAAS;IACb,MAAMC,OAAO,GAAG,sCAAmB,EAACD,GAAG,CAAC;IACxC,OAAO,IAAI,CAACX,IAAI,CACbI,GAAG,CAAW,IAAI,CAACC,WAAW,EAAE;MAAEQ,MAAM,EAAED,OAAO;MAAEN,OAAO,EAAE;IAAU,CAAE,CAAC,CACzEC,IAAI,CAAC,mBAAG,EAAEC,GAA2B,IAAK,IAAI,CAACM,oBAAoB,CAACN,GAAG,CAAC,CAAC,CAAC;EAC/E;EAEQC,eAAe,CAACD,GAAuB;IAC7C,MAAMO,IAAI,GAAW,IAAI,CAACC,qBAAqB,CAACR,GAAG,CAACO,IAAW,CAAC;IAChE,OAAOP,GAAG,CAACS,KAAK,CAAC;MAAEF;IAAI,CAAE,CAAC;EAC5B;EAEQD,oBAAoB,CAACN,GAA2B;IACtD,MAAMU,YAAY,GAAaV,GAAG,CAACO,IAAW;IAC9C,MAAMA,IAAI,GAAa,EAAE;IACzB,KAAK,IAAII,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,YAAY,CAACE,MAAM,EAAED,CAAC,EAAE,EAAE;MAC5CJ,IAAI,CAACM,IAAI,CAAC,IAAI,CAACL,qBAAqB,CAACE,YAAY,CAACC,CAAC,CAAC,CAAC,CAAC;;IAExD,OAAOX,GAAG,CAACS,KAAK,CAAC;MAAEF;IAAI,CAAE,CAAC;EAC5B;EAEA;;;EAGQC,qBAAqB,CAACM,WAAmB;IAC/C,OAAOA,WAAW;EACpB;EAEA;;;EAGQC,OAAO,CAACD,WAAwB;IACtC,MAAME,IAAI,GAAgBC,MAAM,CAACC,MAAM,CAAC,EAAE,EAAEJ,WAAW,CAAC;IACxD,OAAOE,IAAI;EACb;;AA9CFG;;mBACa7B,kBAAkB;AAAA;;SAAlBA,kBAAkB;EAAA8B,SAAlB9B,kBAAkB;AAAA","names":["JobInstanceService","constructor","http","app_constants_1","find","id","get","resourceUrl","observe","pipe","res","convertResponse","query","req","options","params","convertArrayResponse","body","convertItemFromServer","clone","jsonResponse","i","length","push","jobInstance","convert","copy","Object","assign","exports","factory"],"sourceRoot":"","sources":["C:\\Users\\D1347074\\Desktop\\projects 2\\nspayiiapp\\src\\main\\webapp\\app\\admin\\batch\\job-instance\\job-instance.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpResponse } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { SERVER_API_URL } from 'app/app.constants';\r\nimport { JobInstance } from './job-instance.model';\r\nimport { createRequestOption } from 'app/core/request/request-util';\r\n\r\nexport type EntityResponseType = HttpResponse<string>;\r\n\r\n@Injectable()\r\nexport class JobInstanceService {\r\n  private resourceUrl = SERVER_API_URL + 'api/job-instances';\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  find(id: number): Observable<EntityResponseType> {\r\n    return this.http\r\n      .get<string>(`${this.resourceUrl}/${id}`, { observe: 'response' })\r\n      .pipe(map((res: EntityResponseType) => this.convertResponse(res)));\r\n  }\r\n\r\n  query(req?: any): Observable<HttpResponse<string[]>> {\r\n    const options = createRequestOption(req);\r\n    return this.http\r\n      .get<string[]>(this.resourceUrl, { params: options, observe: 'response' })\r\n      .pipe(map((res: HttpResponse<string[]>) => this.convertArrayResponse(res)));\r\n  }\r\n\r\n  private convertResponse(res: EntityResponseType): EntityResponseType {\r\n    const body: string = this.convertItemFromServer(res.body as any);\r\n    return res.clone({ body });\r\n  }\r\n\r\n  private convertArrayResponse(res: HttpResponse<string[]>): HttpResponse<string[]> {\r\n    const jsonResponse: string[] = res.body as any;\r\n    const body: string[] = [];\r\n    for (let i = 0; i < jsonResponse.length; i++) {\r\n      body.push(this.convertItemFromServer(jsonResponse[i]));\r\n    }\r\n    return res.clone({ body });\r\n  }\r\n\r\n  /**\r\n   * Convert a returned JSON object to JobInstance.\r\n   */\r\n  private convertItemFromServer(jobInstance: string): string {\r\n    return jobInstance;\r\n  }\r\n\r\n  /**\r\n   * Convert a JobInstance to a JSON which can be sent to the server.\r\n   */\r\n  private convert(jobInstance: JobInstance): JobInstance {\r\n    const copy: JobInstance = Object.assign({}, jobInstance);\r\n    return copy;\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}